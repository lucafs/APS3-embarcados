
WIFI-simpleGet-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ea44  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040ea44  0040ea44  0001ea44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e8  20400000  0040ea4c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c7e4  204009e8  0040f434  000209e8  2**2
                  ALLOC
  4 .stack        00002004  2040d1cc  0041bc18  000209e8  2**0
                  ALLOC
  5 .heap         00000200  2040f1d0  0041dc1c  000209e8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a16  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003ae71  00000000  00000000  00020a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007617  00000000  00000000  0005b8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000016a8  00000000  00000000  00062ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00029857  00000000  00000000  0006459f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001f1ab  00000000  00000000  0008ddf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009b830  00000000  00000000  000acfa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001401d  00000000  00000000  001487d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a10  00000000  00000000  0015c7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000050b0  00000000  00000000  0015e200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 f1 40 20 3d 5d 40 00 3b 5d 40 00 3b 5d 40 00     ..@ =]@.;]@.;]@.
  400010:	3b 5d 40 00 3b 5d 40 00 3b 5d 40 00 00 00 00 00     ;]@.;]@.;]@.....
	...
  40002c:	5d 0a 40 00 3b 5d 40 00 00 00 00 00 fd 0a 40 00     ].@.;]@.......@.
  40003c:	65 0b 40 00 3b 5d 40 00 3b 5d 40 00 e1 67 40 00     e.@.;]@.;]@..g@.
  40004c:	3b 5d 40 00 3b 5d 40 00 3b 5d 40 00 3b 5d 40 00     ;]@.;]@.;]@.;]@.
  40005c:	3b 5d 40 00 3b 5d 40 00 00 00 00 00 55 58 40 00     ;]@.;]@.....UX@.
  40006c:	69 58 40 00 7d 58 40 00 3b 5d 40 00 3b 5d 40 00     iX@.}X@.;]@.;]@.
  40007c:	3b 5d 40 00 91 58 40 00 a5 58 40 00 3b 5d 40 00     ;]@..X@..X@.;]@.
  40008c:	3b 5d 40 00 3b 5d 40 00 3b 5d 40 00 3b 5d 40 00     ;]@.;]@.;]@.;]@.
  40009c:	3b 5d 40 00 3b 5d 40 00 3b 5d 40 00 3b 5d 40 00     ;]@.;]@.;]@.;]@.
  4000ac:	3b 5d 40 00 3b 5d 40 00 21 04 40 00 3b 5d 40 00     ;]@.;]@.!.@.;]@.
  4000bc:	3b 5d 40 00 3b 5d 40 00 3b 5d 40 00 3b 5d 40 00     ;]@.;]@.;]@.;]@.
  4000cc:	3b 5d 40 00 00 00 00 00 3b 5d 40 00 00 00 00 00     ;]@.....;]@.....
  4000dc:	3b 5d 40 00 35 04 40 00 3b 5d 40 00 3b 5d 40 00     ;]@.5.@.;]@.;]@.
  4000ec:	3b 5d 40 00 3b 5d 40 00 3b 5d 40 00 3b 5d 40 00     ;]@.;]@.;]@.;]@.
  4000fc:	3b 5d 40 00 3b 5d 40 00 3b 5d 40 00 3b 5d 40 00     ;]@.;]@.;]@.;]@.
  40010c:	3b 5d 40 00 3b 5d 40 00 00 00 00 00 00 00 00 00     ;]@.;]@.........
  40011c:	00 00 00 00 3b 5d 40 00 3b 5d 40 00 3b 5d 40 00     ....;]@.;]@.;]@.
  40012c:	3b 5d 40 00 3b 5d 40 00 00 00 00 00 3b 5d 40 00     ;]@.;]@.....;]@.
  40013c:	3b 5d 40 00                                         ;]@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009e8 	.word	0x204009e8
  40015c:	00000000 	.word	0x00000000
  400160:	0040ea4c 	.word	0x0040ea4c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040ea4c 	.word	0x0040ea4c
  4001a0:	204009ec 	.word	0x204009ec
  4001a4:	0040ea4c 	.word	0x0040ea4c
  4001a8:	00000000 	.word	0x00000000

004001ac <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
  4001ae:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001b4:	4013      	ands	r3, r2
  4001b6:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001b8:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001ba:	4e1c      	ldr	r6, [pc, #112]	; (40022c <afec_process_callback+0x80>)
  4001bc:	4d1c      	ldr	r5, [pc, #112]	; (400230 <afec_process_callback+0x84>)
  4001be:	42a8      	cmp	r0, r5
  4001c0:	bf14      	ite	ne
  4001c2:	2000      	movne	r0, #0
  4001c4:	2001      	moveq	r0, #1
  4001c6:	0105      	lsls	r5, r0, #4
  4001c8:	e00b      	b.n	4001e2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001ca:	2c0e      	cmp	r4, #14
  4001cc:	d81e      	bhi.n	40020c <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001ce:	9a01      	ldr	r2, [sp, #4]
  4001d0:	f104 010c 	add.w	r1, r4, #12
  4001d4:	2301      	movs	r3, #1
  4001d6:	408b      	lsls	r3, r1
  4001d8:	4213      	tst	r3, r2
  4001da:	d110      	bne.n	4001fe <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001dc:	3401      	adds	r4, #1
  4001de:	2c10      	cmp	r4, #16
  4001e0:	d022      	beq.n	400228 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4001e2:	2c0b      	cmp	r4, #11
  4001e4:	d8f1      	bhi.n	4001ca <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4001e6:	9a01      	ldr	r2, [sp, #4]
  4001e8:	2301      	movs	r3, #1
  4001ea:	40a3      	lsls	r3, r4
  4001ec:	4213      	tst	r3, r2
  4001ee:	d0f5      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001f0:	192b      	adds	r3, r5, r4
  4001f2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4001f6:	2b00      	cmp	r3, #0
  4001f8:	d0f0      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4001fa:	4798      	blx	r3
  4001fc:	e7ee      	b.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001fe:	192b      	adds	r3, r5, r4
  400200:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400204:	2b00      	cmp	r3, #0
  400206:	d0e9      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400208:	4798      	blx	r3
  40020a:	e7e7      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40020c:	9a01      	ldr	r2, [sp, #4]
  40020e:	f104 010f 	add.w	r1, r4, #15
  400212:	2301      	movs	r3, #1
  400214:	408b      	lsls	r3, r1
  400216:	4213      	tst	r3, r2
  400218:	d0e0      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40021a:	192b      	adds	r3, r5, r4
  40021c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400220:	2b00      	cmp	r3, #0
  400222:	d0db      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400224:	4798      	blx	r3
  400226:	e7d9      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400228:	b002      	add	sp, #8
  40022a:	bd70      	pop	{r4, r5, r6, pc}
  40022c:	2040cf40 	.word	0x2040cf40
  400230:	40064000 	.word	0x40064000

00400234 <afec_ch_set_config>:
{
  400234:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400236:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400238:	2301      	movs	r3, #1
  40023a:	408b      	lsls	r3, r1
  40023c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400240:	7815      	ldrb	r5, [r2, #0]
  400242:	2d00      	cmp	r5, #0
  400244:	bf08      	it	eq
  400246:	2300      	moveq	r3, #0
  400248:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40024a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40024c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40024e:	004b      	lsls	r3, r1, #1
  400250:	2103      	movs	r1, #3
  400252:	4099      	lsls	r1, r3
  400254:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400258:	7851      	ldrb	r1, [r2, #1]
  40025a:	4099      	lsls	r1, r3
  40025c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40025e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400260:	bc30      	pop	{r4, r5}
  400262:	4770      	bx	lr

00400264 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400264:	784b      	ldrb	r3, [r1, #1]
  400266:	780a      	ldrb	r2, [r1, #0]
  400268:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  40026a:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  40026c:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  40026e:	884b      	ldrh	r3, [r1, #2]
  400270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400274:	6743      	str	r3, [r0, #116]	; 0x74
  400276:	4770      	bx	lr

00400278 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400278:	2200      	movs	r2, #0
  40027a:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  40027c:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <afec_get_config_defaults+0x28>)
  40027e:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400280:	4b08      	ldr	r3, [pc, #32]	; (4002a4 <afec_get_config_defaults+0x2c>)
  400282:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400288:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40028a:	2302      	movs	r3, #2
  40028c:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40028e:	2301      	movs	r3, #1
  400290:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400292:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400294:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400296:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400298:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40029a:	7583      	strb	r3, [r0, #22]
  40029c:	4770      	bx	lr
  40029e:	bf00      	nop
  4002a0:	11e1a300 	.word	0x11e1a300
  4002a4:	005b8d80 	.word	0x005b8d80

004002a8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4002a8:	2300      	movs	r3, #0
  4002aa:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4002ac:	2301      	movs	r3, #1
  4002ae:	7043      	strb	r3, [r0, #1]
  4002b0:	4770      	bx	lr

004002b2 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4002b2:	2300      	movs	r3, #0
  4002b4:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4002b6:	2320      	movs	r3, #32
  4002b8:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4002ba:	23ff      	movs	r3, #255	; 0xff
  4002bc:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4002be:	f640 73ff 	movw	r3, #4095	; 0xfff
  4002c2:	8083      	strh	r3, [r0, #4]
  4002c4:	4770      	bx	lr
	...

004002c8 <afec_init>:
	return afec->AFEC_ISR;
  4002c8:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002ca:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002ce:	d001      	beq.n	4002d4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002d0:	2019      	movs	r0, #25
  4002d2:	4770      	bx	lr
{
  4002d4:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002d6:	2301      	movs	r3, #1
  4002d8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002da:	7ccb      	ldrb	r3, [r1, #19]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf18      	it	ne
  4002e0:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002e4:	684b      	ldr	r3, [r1, #4]
  4002e6:	688c      	ldr	r4, [r1, #8]
  4002e8:	fbb3 f3f4 	udiv	r3, r3, r4
  4002ec:	3b01      	subs	r3, #1
  4002ee:	021b      	lsls	r3, r3, #8
  4002f0:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002f2:	68cc      	ldr	r4, [r1, #12]
  4002f4:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4002f8:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002fa:	7c0c      	ldrb	r4, [r1, #16]
  4002fc:	0624      	lsls	r4, r4, #24
  4002fe:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400302:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400304:	7c4c      	ldrb	r4, [r1, #17]
  400306:	0724      	lsls	r4, r4, #28
  400308:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40030c:	4323      	orrs	r3, r4
  40030e:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400310:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400312:	7d0b      	ldrb	r3, [r1, #20]
  400314:	2b00      	cmp	r3, #0
  400316:	bf14      	ite	ne
  400318:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40031c:	2300      	moveq	r3, #0
  40031e:	680a      	ldr	r2, [r1, #0]
  400320:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400322:	7d4a      	ldrb	r2, [r1, #21]
  400324:	2a00      	cmp	r2, #0
  400326:	bf14      	ite	ne
  400328:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40032c:	2200      	moveq	r2, #0
			(config->resolution) |
  40032e:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400330:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400332:	7d8b      	ldrb	r3, [r1, #22]
  400334:	021b      	lsls	r3, r3, #8
  400336:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40033a:	f043 030c 	orr.w	r3, r3, #12
  40033e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400342:	4b0f      	ldr	r3, [pc, #60]	; (400380 <afec_init+0xb8>)
  400344:	4298      	cmp	r0, r3
  400346:	d006      	beq.n	400356 <afec_init+0x8e>
	if(afec == AFEC1) {
  400348:	4b0e      	ldr	r3, [pc, #56]	; (400384 <afec_init+0xbc>)
  40034a:	4298      	cmp	r0, r3
  40034c:	d00d      	beq.n	40036a <afec_init+0xa2>
	return STATUS_OK;
  40034e:	2000      	movs	r0, #0
}
  400350:	f85d 4b04 	ldr.w	r4, [sp], #4
  400354:	4770      	bx	lr
  400356:	4b0c      	ldr	r3, [pc, #48]	; (400388 <afec_init+0xc0>)
  400358:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  40035c:	2200      	movs	r2, #0
  40035e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400362:	428b      	cmp	r3, r1
  400364:	d1fb      	bne.n	40035e <afec_init+0x96>
	return STATUS_OK;
  400366:	2000      	movs	r0, #0
  400368:	e7f2      	b.n	400350 <afec_init+0x88>
  40036a:	4b08      	ldr	r3, [pc, #32]	; (40038c <afec_init+0xc4>)
  40036c:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400370:	2200      	movs	r2, #0
  400372:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400376:	428b      	cmp	r3, r1
  400378:	d1fb      	bne.n	400372 <afec_init+0xaa>
	return STATUS_OK;
  40037a:	2000      	movs	r0, #0
  40037c:	e7e8      	b.n	400350 <afec_init+0x88>
  40037e:	bf00      	nop
  400380:	4003c000 	.word	0x4003c000
  400384:	40064000 	.word	0x40064000
  400388:	2040cf3c 	.word	0x2040cf3c
  40038c:	2040cf80 	.word	0x2040cf80

00400390 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400390:	4b0c      	ldr	r3, [pc, #48]	; (4003c4 <afec_enable_interrupt+0x34>)
  400392:	4299      	cmp	r1, r3
  400394:	d007      	beq.n	4003a6 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400396:	290b      	cmp	r1, #11
  400398:	d80b      	bhi.n	4003b2 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40039a:	d006      	beq.n	4003aa <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  40039c:	2301      	movs	r3, #1
  40039e:	fa03 f101 	lsl.w	r1, r3, r1
  4003a2:	6241      	str	r1, [r0, #36]	; 0x24
  4003a4:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4003a6:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4003a8:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4003aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ae:	6243      	str	r3, [r0, #36]	; 0x24
  4003b0:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003b2:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4003b4:	bf94      	ite	ls
  4003b6:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4003b8:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4003ba:	2301      	movs	r3, #1
  4003bc:	fa03 f101 	lsl.w	r1, r3, r1
  4003c0:	6241      	str	r1, [r0, #36]	; 0x24
  4003c2:	4770      	bx	lr
  4003c4:	47000fff 	.word	0x47000fff

004003c8 <afec_set_callback>:
{
  4003c8:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003ca:	4c11      	ldr	r4, [pc, #68]	; (400410 <afec_set_callback+0x48>)
  4003cc:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003ce:	bf0c      	ite	eq
  4003d0:	2410      	moveq	r4, #16
  4003d2:	2400      	movne	r4, #0
  4003d4:	440c      	add	r4, r1
  4003d6:	4d0f      	ldr	r5, [pc, #60]	; (400414 <afec_set_callback+0x4c>)
  4003d8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4003dc:	d10a      	bne.n	4003f4 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003de:	4a0e      	ldr	r2, [pc, #56]	; (400418 <afec_set_callback+0x50>)
  4003e0:	f44f 7480 	mov.w	r4, #256	; 0x100
  4003e4:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003e8:	015b      	lsls	r3, r3, #5
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003f0:	6054      	str	r4, [r2, #4]
  4003f2:	e009      	b.n	400408 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003f4:	4a08      	ldr	r2, [pc, #32]	; (400418 <afec_set_callback+0x50>)
  4003f6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  4003fa:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003fe:	015b      	lsls	r3, r3, #5
  400400:	b2db      	uxtb	r3, r3
  400402:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400406:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400408:	4b04      	ldr	r3, [pc, #16]	; (40041c <afec_set_callback+0x54>)
  40040a:	4798      	blx	r3
  40040c:	bd38      	pop	{r3, r4, r5, pc}
  40040e:	bf00      	nop
  400410:	40064000 	.word	0x40064000
  400414:	2040cf40 	.word	0x2040cf40
  400418:	e000e100 	.word	0xe000e100
  40041c:	00400391 	.word	0x00400391

00400420 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400420:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400422:	4802      	ldr	r0, [pc, #8]	; (40042c <AFEC0_Handler+0xc>)
  400424:	4b02      	ldr	r3, [pc, #8]	; (400430 <AFEC0_Handler+0x10>)
  400426:	4798      	blx	r3
  400428:	bd08      	pop	{r3, pc}
  40042a:	bf00      	nop
  40042c:	4003c000 	.word	0x4003c000
  400430:	004001ad 	.word	0x004001ad

00400434 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400434:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400436:	4802      	ldr	r0, [pc, #8]	; (400440 <AFEC1_Handler+0xc>)
  400438:	4b02      	ldr	r3, [pc, #8]	; (400444 <AFEC1_Handler+0x10>)
  40043a:	4798      	blx	r3
  40043c:	bd08      	pop	{r3, pc}
  40043e:	bf00      	nop
  400440:	40064000 	.word	0x40064000
  400444:	004001ad 	.word	0x004001ad

00400448 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400448:	b500      	push	{lr}
  40044a:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40044c:	4b13      	ldr	r3, [pc, #76]	; (40049c <afec_enable+0x54>)
  40044e:	4298      	cmp	r0, r3
  400450:	bf0c      	ite	eq
  400452:	2028      	moveq	r0, #40	; 0x28
  400454:	201d      	movne	r0, #29
  400456:	4b12      	ldr	r3, [pc, #72]	; (4004a0 <afec_enable+0x58>)
  400458:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40045a:	4b12      	ldr	r3, [pc, #72]	; (4004a4 <afec_enable+0x5c>)
  40045c:	789b      	ldrb	r3, [r3, #2]
  40045e:	2bff      	cmp	r3, #255	; 0xff
  400460:	d01a      	beq.n	400498 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400462:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400466:	fab3 f383 	clz	r3, r3
  40046a:	095b      	lsrs	r3, r3, #5
  40046c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40046e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400470:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400474:	2200      	movs	r2, #0
  400476:	4b0c      	ldr	r3, [pc, #48]	; (4004a8 <afec_enable+0x60>)
  400478:	701a      	strb	r2, [r3, #0]
	return flags;
  40047a:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40047c:	4a09      	ldr	r2, [pc, #36]	; (4004a4 <afec_enable+0x5c>)
  40047e:	7893      	ldrb	r3, [r2, #2]
  400480:	3301      	adds	r3, #1
  400482:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400484:	b129      	cbz	r1, 400492 <afec_enable+0x4a>
		cpu_irq_enable();
  400486:	2201      	movs	r2, #1
  400488:	4b07      	ldr	r3, [pc, #28]	; (4004a8 <afec_enable+0x60>)
  40048a:	701a      	strb	r2, [r3, #0]
  40048c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400490:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400492:	b003      	add	sp, #12
  400494:	f85d fb04 	ldr.w	pc, [sp], #4
  400498:	e7fe      	b.n	400498 <afec_enable+0x50>
  40049a:	bf00      	nop
  40049c:	40064000 	.word	0x40064000
  4004a0:	00405a5d 	.word	0x00405a5d
  4004a4:	2040cf38 	.word	0x2040cf38
  4004a8:	20400018 	.word	0x20400018

004004ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4004ac:	b921      	cbnz	r1, 4004b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4004ae:	6843      	ldr	r3, [r0, #4]
  4004b0:	f023 0301 	bic.w	r3, r3, #1
  4004b4:	6043      	str	r3, [r0, #4]
  4004b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4004b8:	6843      	ldr	r3, [r0, #4]
  4004ba:	f043 0301 	orr.w	r3, r3, #1
  4004be:	6043      	str	r3, [r0, #4]
  4004c0:	4770      	bx	lr

004004c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4004c2:	6201      	str	r1, [r0, #32]
  4004c4:	4770      	bx	lr

004004c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4004c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4004c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4004ca:	6884      	ldr	r4, [r0, #8]
  4004cc:	42a5      	cmp	r5, r4
  4004ce:	d003      	beq.n	4004d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4004d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4004d2:	6884      	ldr	r4, [r0, #8]
  4004d4:	42ac      	cmp	r4, r5
  4004d6:	d1fb      	bne.n	4004d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4004d8:	b161      	cbz	r1, 4004f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4004da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4004de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4004e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4004e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4004ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4004ee:	bf18      	it	ne
  4004f0:	300c      	addne	r0, #12
  4004f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4004f4:	b142      	cbz	r2, 400508 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4004f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4004fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4004fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400502:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400506:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400508:	b143      	cbz	r3, 40051c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40050a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40050e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400512:	f004 040f 	and.w	r4, r4, #15
  400516:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40051a:	601c      	str	r4, [r3, #0]
	}
}
  40051c:	bc30      	pop	{r4, r5}
  40051e:	4770      	bx	lr

00400520 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400520:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400522:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400524:	f014 0f01 	tst.w	r4, #1
  400528:	d005      	beq.n	400536 <rtc_set_time+0x16>
  40052a:	290c      	cmp	r1, #12
  40052c:	d903      	bls.n	400536 <rtc_set_time+0x16>
			ul_hour -= 12;
  40052e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400530:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400534:	e000      	b.n	400538 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400536:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400538:	4c1c      	ldr	r4, [pc, #112]	; (4005ac <rtc_set_time+0x8c>)
  40053a:	fba4 5603 	umull	r5, r6, r4, r3
  40053e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400540:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400544:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400548:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40054c:	fba4 6502 	umull	r6, r5, r4, r2
  400550:	08ed      	lsrs	r5, r5, #3
  400552:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400556:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40055a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40055e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400562:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400564:	fba4 4201 	umull	r4, r2, r4, r1
  400568:	08d2      	lsrs	r2, r2, #3
  40056a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40056e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400572:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400576:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40057a:	6983      	ldr	r3, [r0, #24]
  40057c:	f013 0f04 	tst.w	r3, #4
  400580:	d0fb      	beq.n	40057a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400582:	6803      	ldr	r3, [r0, #0]
  400584:	f043 0301 	orr.w	r3, r3, #1
  400588:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40058a:	6983      	ldr	r3, [r0, #24]
  40058c:	f013 0f01 	tst.w	r3, #1
  400590:	d0fb      	beq.n	40058a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400592:	2301      	movs	r3, #1
  400594:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400596:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400598:	6803      	ldr	r3, [r0, #0]
  40059a:	f023 0301 	bic.w	r3, r3, #1
  40059e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4005a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4005a2:	f000 0001 	and.w	r0, r0, #1
  4005a6:	bcf0      	pop	{r4, r5, r6, r7}
  4005a8:	4770      	bx	lr
  4005aa:	bf00      	nop
  4005ac:	cccccccd 	.word	0xcccccccd

004005b0 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4005b0:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4005b2:	4d2a      	ldr	r5, [pc, #168]	; (40065c <rtc_set_date+0xac>)
  4005b4:	fba5 4603 	umull	r4, r6, r5, r3
  4005b8:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4005ba:	9c03      	ldr	r4, [sp, #12]
  4005bc:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4005be:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4005c2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4005c6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4005ca:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4005ce:	fba5 6402 	umull	r6, r4, r5, r2
  4005d2:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4005d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4005d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4005dc:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4005e0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4005e4:	4b1e      	ldr	r3, [pc, #120]	; (400660 <rtc_set_date+0xb0>)
  4005e6:	fba3 4301 	umull	r4, r3, r3, r1
  4005ea:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4005ec:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4005f0:	4b1c      	ldr	r3, [pc, #112]	; (400664 <rtc_set_date+0xb4>)
  4005f2:	fba3 4301 	umull	r4, r3, r3, r1
  4005f6:	095b      	lsrs	r3, r3, #5
  4005f8:	fba5 6403 	umull	r6, r4, r5, r3
  4005fc:	08e4      	lsrs	r4, r4, #3
  4005fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400602:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400606:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400608:	fba5 4301 	umull	r4, r3, r5, r1
  40060c:	08db      	lsrs	r3, r3, #3
  40060e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  400612:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400616:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40061a:	fba5 1503 	umull	r1, r5, r5, r3
  40061e:	08ed      	lsrs	r5, r5, #3
  400620:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400624:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400628:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40062c:	6983      	ldr	r3, [r0, #24]
  40062e:	f013 0f04 	tst.w	r3, #4
  400632:	d0fb      	beq.n	40062c <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  400634:	6803      	ldr	r3, [r0, #0]
  400636:	f043 0302 	orr.w	r3, r3, #2
  40063a:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40063c:	6983      	ldr	r3, [r0, #24]
  40063e:	f013 0f01 	tst.w	r3, #1
  400642:	d0fb      	beq.n	40063c <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400644:	2301      	movs	r3, #1
  400646:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400648:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  40064a:	6803      	ldr	r3, [r0, #0]
  40064c:	f023 0302 	bic.w	r3, r3, #2
  400650:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  400652:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400654:	f000 0002 	and.w	r0, r0, #2
  400658:	bc70      	pop	{r4, r5, r6}
  40065a:	4770      	bx	lr
  40065c:	cccccccd 	.word	0xcccccccd
  400660:	10624dd3 	.word	0x10624dd3
  400664:	51eb851f 	.word	0x51eb851f

00400668 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400668:	6980      	ldr	r0, [r0, #24]
}
  40066a:	4770      	bx	lr

0040066c <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  40066c:	61c1      	str	r1, [r0, #28]
  40066e:	4770      	bx	lr

00400670 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400670:	b5f0      	push	{r4, r5, r6, r7, lr}
  400672:	b083      	sub	sp, #12
  400674:	4605      	mov	r5, r0
  400676:	460c      	mov	r4, r1
	uint32_t val = 0;
  400678:	2300      	movs	r3, #0
  40067a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40067c:	4b2a      	ldr	r3, [pc, #168]	; (400728 <usart_serial_getchar+0xb8>)
  40067e:	4298      	cmp	r0, r3
  400680:	d013      	beq.n	4006aa <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400682:	4b2a      	ldr	r3, [pc, #168]	; (40072c <usart_serial_getchar+0xbc>)
  400684:	4298      	cmp	r0, r3
  400686:	d018      	beq.n	4006ba <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400688:	4b29      	ldr	r3, [pc, #164]	; (400730 <usart_serial_getchar+0xc0>)
  40068a:	4298      	cmp	r0, r3
  40068c:	d01d      	beq.n	4006ca <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40068e:	4b29      	ldr	r3, [pc, #164]	; (400734 <usart_serial_getchar+0xc4>)
  400690:	429d      	cmp	r5, r3
  400692:	d022      	beq.n	4006da <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400694:	4b28      	ldr	r3, [pc, #160]	; (400738 <usart_serial_getchar+0xc8>)
  400696:	429d      	cmp	r5, r3
  400698:	d027      	beq.n	4006ea <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40069a:	4b28      	ldr	r3, [pc, #160]	; (40073c <usart_serial_getchar+0xcc>)
  40069c:	429d      	cmp	r5, r3
  40069e:	d02e      	beq.n	4006fe <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4006a0:	4b27      	ldr	r3, [pc, #156]	; (400740 <usart_serial_getchar+0xd0>)
  4006a2:	429d      	cmp	r5, r3
  4006a4:	d035      	beq.n	400712 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4006a6:	b003      	add	sp, #12
  4006a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4006aa:	461f      	mov	r7, r3
  4006ac:	4e25      	ldr	r6, [pc, #148]	; (400744 <usart_serial_getchar+0xd4>)
  4006ae:	4621      	mov	r1, r4
  4006b0:	4638      	mov	r0, r7
  4006b2:	47b0      	blx	r6
  4006b4:	2800      	cmp	r0, #0
  4006b6:	d1fa      	bne.n	4006ae <usart_serial_getchar+0x3e>
  4006b8:	e7e9      	b.n	40068e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4006ba:	461f      	mov	r7, r3
  4006bc:	4e21      	ldr	r6, [pc, #132]	; (400744 <usart_serial_getchar+0xd4>)
  4006be:	4621      	mov	r1, r4
  4006c0:	4638      	mov	r0, r7
  4006c2:	47b0      	blx	r6
  4006c4:	2800      	cmp	r0, #0
  4006c6:	d1fa      	bne.n	4006be <usart_serial_getchar+0x4e>
  4006c8:	e7e4      	b.n	400694 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4006ca:	461f      	mov	r7, r3
  4006cc:	4e1d      	ldr	r6, [pc, #116]	; (400744 <usart_serial_getchar+0xd4>)
  4006ce:	4621      	mov	r1, r4
  4006d0:	4638      	mov	r0, r7
  4006d2:	47b0      	blx	r6
  4006d4:	2800      	cmp	r0, #0
  4006d6:	d1fa      	bne.n	4006ce <usart_serial_getchar+0x5e>
  4006d8:	e7df      	b.n	40069a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4006da:	461f      	mov	r7, r3
  4006dc:	4e19      	ldr	r6, [pc, #100]	; (400744 <usart_serial_getchar+0xd4>)
  4006de:	4621      	mov	r1, r4
  4006e0:	4638      	mov	r0, r7
  4006e2:	47b0      	blx	r6
  4006e4:	2800      	cmp	r0, #0
  4006e6:	d1fa      	bne.n	4006de <usart_serial_getchar+0x6e>
  4006e8:	e7da      	b.n	4006a0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4006ea:	461e      	mov	r6, r3
  4006ec:	4d16      	ldr	r5, [pc, #88]	; (400748 <usart_serial_getchar+0xd8>)
  4006ee:	a901      	add	r1, sp, #4
  4006f0:	4630      	mov	r0, r6
  4006f2:	47a8      	blx	r5
  4006f4:	2800      	cmp	r0, #0
  4006f6:	d1fa      	bne.n	4006ee <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4006f8:	9b01      	ldr	r3, [sp, #4]
  4006fa:	7023      	strb	r3, [r4, #0]
  4006fc:	e7d3      	b.n	4006a6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4006fe:	461e      	mov	r6, r3
  400700:	4d11      	ldr	r5, [pc, #68]	; (400748 <usart_serial_getchar+0xd8>)
  400702:	a901      	add	r1, sp, #4
  400704:	4630      	mov	r0, r6
  400706:	47a8      	blx	r5
  400708:	2800      	cmp	r0, #0
  40070a:	d1fa      	bne.n	400702 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  40070c:	9b01      	ldr	r3, [sp, #4]
  40070e:	7023      	strb	r3, [r4, #0]
  400710:	e7c9      	b.n	4006a6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400712:	461e      	mov	r6, r3
  400714:	4d0c      	ldr	r5, [pc, #48]	; (400748 <usart_serial_getchar+0xd8>)
  400716:	a901      	add	r1, sp, #4
  400718:	4630      	mov	r0, r6
  40071a:	47a8      	blx	r5
  40071c:	2800      	cmp	r0, #0
  40071e:	d1fa      	bne.n	400716 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400720:	9b01      	ldr	r3, [sp, #4]
  400722:	7023      	strb	r3, [r4, #0]
}
  400724:	e7bf      	b.n	4006a6 <usart_serial_getchar+0x36>
  400726:	bf00      	nop
  400728:	400e0800 	.word	0x400e0800
  40072c:	400e0a00 	.word	0x400e0a00
  400730:	400e1a00 	.word	0x400e1a00
  400734:	400e1c00 	.word	0x400e1c00
  400738:	40024000 	.word	0x40024000
  40073c:	40028000 	.word	0x40028000
  400740:	4002c000 	.word	0x4002c000
  400744:	00405c15 	.word	0x00405c15
  400748:	00405d23 	.word	0x00405d23

0040074c <usart_serial_putchar>:
{
  40074c:	b570      	push	{r4, r5, r6, lr}
  40074e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400750:	4b2a      	ldr	r3, [pc, #168]	; (4007fc <usart_serial_putchar+0xb0>)
  400752:	4298      	cmp	r0, r3
  400754:	d013      	beq.n	40077e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400756:	4b2a      	ldr	r3, [pc, #168]	; (400800 <usart_serial_putchar+0xb4>)
  400758:	4298      	cmp	r0, r3
  40075a:	d019      	beq.n	400790 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  40075c:	4b29      	ldr	r3, [pc, #164]	; (400804 <usart_serial_putchar+0xb8>)
  40075e:	4298      	cmp	r0, r3
  400760:	d01f      	beq.n	4007a2 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400762:	4b29      	ldr	r3, [pc, #164]	; (400808 <usart_serial_putchar+0xbc>)
  400764:	4298      	cmp	r0, r3
  400766:	d025      	beq.n	4007b4 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400768:	4b28      	ldr	r3, [pc, #160]	; (40080c <usart_serial_putchar+0xc0>)
  40076a:	4298      	cmp	r0, r3
  40076c:	d02b      	beq.n	4007c6 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40076e:	4b28      	ldr	r3, [pc, #160]	; (400810 <usart_serial_putchar+0xc4>)
  400770:	4298      	cmp	r0, r3
  400772:	d031      	beq.n	4007d8 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400774:	4b27      	ldr	r3, [pc, #156]	; (400814 <usart_serial_putchar+0xc8>)
  400776:	4298      	cmp	r0, r3
  400778:	d037      	beq.n	4007ea <usart_serial_putchar+0x9e>
	return 0;
  40077a:	2000      	movs	r0, #0
}
  40077c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40077e:	461e      	mov	r6, r3
  400780:	4d25      	ldr	r5, [pc, #148]	; (400818 <usart_serial_putchar+0xcc>)
  400782:	4621      	mov	r1, r4
  400784:	4630      	mov	r0, r6
  400786:	47a8      	blx	r5
  400788:	2800      	cmp	r0, #0
  40078a:	d1fa      	bne.n	400782 <usart_serial_putchar+0x36>
		return 1;
  40078c:	2001      	movs	r0, #1
  40078e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400790:	461e      	mov	r6, r3
  400792:	4d21      	ldr	r5, [pc, #132]	; (400818 <usart_serial_putchar+0xcc>)
  400794:	4621      	mov	r1, r4
  400796:	4630      	mov	r0, r6
  400798:	47a8      	blx	r5
  40079a:	2800      	cmp	r0, #0
  40079c:	d1fa      	bne.n	400794 <usart_serial_putchar+0x48>
		return 1;
  40079e:	2001      	movs	r0, #1
  4007a0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4007a2:	461e      	mov	r6, r3
  4007a4:	4d1c      	ldr	r5, [pc, #112]	; (400818 <usart_serial_putchar+0xcc>)
  4007a6:	4621      	mov	r1, r4
  4007a8:	4630      	mov	r0, r6
  4007aa:	47a8      	blx	r5
  4007ac:	2800      	cmp	r0, #0
  4007ae:	d1fa      	bne.n	4007a6 <usart_serial_putchar+0x5a>
		return 1;
  4007b0:	2001      	movs	r0, #1
  4007b2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4007b4:	461e      	mov	r6, r3
  4007b6:	4d18      	ldr	r5, [pc, #96]	; (400818 <usart_serial_putchar+0xcc>)
  4007b8:	4621      	mov	r1, r4
  4007ba:	4630      	mov	r0, r6
  4007bc:	47a8      	blx	r5
  4007be:	2800      	cmp	r0, #0
  4007c0:	d1fa      	bne.n	4007b8 <usart_serial_putchar+0x6c>
		return 1;
  4007c2:	2001      	movs	r0, #1
  4007c4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4007c6:	461e      	mov	r6, r3
  4007c8:	4d14      	ldr	r5, [pc, #80]	; (40081c <usart_serial_putchar+0xd0>)
  4007ca:	4621      	mov	r1, r4
  4007cc:	4630      	mov	r0, r6
  4007ce:	47a8      	blx	r5
  4007d0:	2800      	cmp	r0, #0
  4007d2:	d1fa      	bne.n	4007ca <usart_serial_putchar+0x7e>
		return 1;
  4007d4:	2001      	movs	r0, #1
  4007d6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4007d8:	461e      	mov	r6, r3
  4007da:	4d10      	ldr	r5, [pc, #64]	; (40081c <usart_serial_putchar+0xd0>)
  4007dc:	4621      	mov	r1, r4
  4007de:	4630      	mov	r0, r6
  4007e0:	47a8      	blx	r5
  4007e2:	2800      	cmp	r0, #0
  4007e4:	d1fa      	bne.n	4007dc <usart_serial_putchar+0x90>
		return 1;
  4007e6:	2001      	movs	r0, #1
  4007e8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4007ea:	461e      	mov	r6, r3
  4007ec:	4d0b      	ldr	r5, [pc, #44]	; (40081c <usart_serial_putchar+0xd0>)
  4007ee:	4621      	mov	r1, r4
  4007f0:	4630      	mov	r0, r6
  4007f2:	47a8      	blx	r5
  4007f4:	2800      	cmp	r0, #0
  4007f6:	d1fa      	bne.n	4007ee <usart_serial_putchar+0xa2>
		return 1;
  4007f8:	2001      	movs	r0, #1
  4007fa:	bd70      	pop	{r4, r5, r6, pc}
  4007fc:	400e0800 	.word	0x400e0800
  400800:	400e0a00 	.word	0x400e0a00
  400804:	400e1a00 	.word	0x400e1a00
  400808:	400e1c00 	.word	0x400e1c00
  40080c:	40024000 	.word	0x40024000
  400810:	40028000 	.word	0x40028000
  400814:	4002c000 	.word	0x4002c000
  400818:	00405c03 	.word	0x00405c03
  40081c:	00405d0d 	.word	0x00405d0d

00400820 <configure_console>:

/**
* \brief Configure UART console.
*/
void configure_console(void)
{
  400820:	b570      	push	{r4, r5, r6, lr}
  400822:	b086      	sub	sp, #24
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400824:	200e      	movs	r0, #14
  400826:	4e17      	ldr	r6, [pc, #92]	; (400884 <configure_console+0x64>)
  400828:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40082a:	4d17      	ldr	r5, [pc, #92]	; (400888 <configure_console+0x68>)
  40082c:	4b17      	ldr	r3, [pc, #92]	; (40088c <configure_console+0x6c>)
  40082e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400830:	4a17      	ldr	r2, [pc, #92]	; (400890 <configure_console+0x70>)
  400832:	4b18      	ldr	r3, [pc, #96]	; (400894 <configure_console+0x74>)
  400834:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400836:	4a18      	ldr	r2, [pc, #96]	; (400898 <configure_console+0x78>)
  400838:	4b18      	ldr	r3, [pc, #96]	; (40089c <configure_console+0x7c>)
  40083a:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  40083c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400840:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  400842:	23c0      	movs	r3, #192	; 0xc0
  400844:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  400846:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40084a:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  40084c:	2400      	movs	r4, #0
  40084e:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400850:	9404      	str	r4, [sp, #16]
  400852:	200e      	movs	r0, #14
  400854:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  400856:	4a12      	ldr	r2, [pc, #72]	; (4008a0 <configure_console+0x80>)
  400858:	4669      	mov	r1, sp
  40085a:	4628      	mov	r0, r5
  40085c:	4b11      	ldr	r3, [pc, #68]	; (4008a4 <configure_console+0x84>)
  40085e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  400860:	4628      	mov	r0, r5
  400862:	4b11      	ldr	r3, [pc, #68]	; (4008a8 <configure_console+0x88>)
  400864:	4798      	blx	r3
		usart_enable_rx(p_usart);
  400866:	4628      	mov	r0, r5
  400868:	4b10      	ldr	r3, [pc, #64]	; (4008ac <configure_console+0x8c>)
  40086a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40086c:	4e10      	ldr	r6, [pc, #64]	; (4008b0 <configure_console+0x90>)
  40086e:	6833      	ldr	r3, [r6, #0]
  400870:	4621      	mov	r1, r4
  400872:	6898      	ldr	r0, [r3, #8]
  400874:	4d0f      	ldr	r5, [pc, #60]	; (4008b4 <configure_console+0x94>)
  400876:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400878:	6833      	ldr	r3, [r6, #0]
  40087a:	4621      	mov	r1, r4
  40087c:	6858      	ldr	r0, [r3, #4]
  40087e:	47a8      	blx	r5
  };

  /* Configure UART console. */
  sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  stdio_serial_init(CONF_UART, &uart_serial_options);
}
  400880:	b006      	add	sp, #24
  400882:	bd70      	pop	{r4, r5, r6, pc}
  400884:	00405a5d 	.word	0x00405a5d
  400888:	40028000 	.word	0x40028000
  40088c:	2040d0c8 	.word	0x2040d0c8
  400890:	0040074d 	.word	0x0040074d
  400894:	2040d0c4 	.word	0x2040d0c4
  400898:	00400671 	.word	0x00400671
  40089c:	2040d0c0 	.word	0x2040d0c0
  4008a0:	08f0d180 	.word	0x08f0d180
  4008a4:	00405cad 	.word	0x00405cad
  4008a8:	00405d01 	.word	0x00405d01
  4008ac:	00405d07 	.word	0x00405d07
  4008b0:	2040003c 	.word	0x2040003c
  4008b4:	00406e95 	.word	0x00406e95

004008b8 <inet_aton>:
* This replaces inet_addr, the return value from which
* cannot distinguish between failure and a local broadcast address.
* http://www.cs.cmu.edu/afs/cs/academic/class/15213-f00/unpv12e/libfree/inet_aton.c
*/
int inet_aton(const char *cp, in_addr *ap)
{
  4008b8:	b4f0      	push	{r4, r5, r6, r7}
  4008ba:	3801      	subs	r0, #1
  int dots = 0;
  register u_long acc = 0, addr = 0;
  4008bc:	2400      	movs	r4, #0
  4008be:	4622      	mov	r2, r4
  int dots = 0;
  4008c0:	4625      	mov	r5, r4
      case '\0':
      if (acc > 255) {
        return 0;
      }
      addr = addr << 8 | acc;
      acc = 0;
  4008c2:	4626      	mov	r6, r4
  4008c4:	e011      	b.n	4008ea <inet_aton+0x32>
    switch (cc) {
  4008c6:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  4008ca:	2f09      	cmp	r7, #9
  4008cc:	d814      	bhi.n	4008f8 <inet_aton+0x40>
      acc = acc * 10 + (cc - '0');
  4008ce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4008d2:	eb07 0242 	add.w	r2, r7, r2, lsl #1
      break;
  4008d6:	e007      	b.n	4008e8 <inet_aton+0x30>
      if (++dots > 3) {
  4008d8:	3501      	adds	r5, #1
  4008da:	2d03      	cmp	r5, #3
  4008dc:	dc24      	bgt.n	400928 <inet_aton+0x70>
      if (acc > 255) {
  4008de:	2aff      	cmp	r2, #255	; 0xff
  4008e0:	d824      	bhi.n	40092c <inet_aton+0x74>
      addr = addr << 8 | acc;
  4008e2:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
      acc = 0;
  4008e6:	4632      	mov	r2, r6
      break;

      default:
      return 0;
    }
  } while (*cp++) ;
  4008e8:	b14b      	cbz	r3, 4008fe <inet_aton+0x46>
    register char cc = *cp;
  4008ea:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    switch (cc) {
  4008ee:	2b2e      	cmp	r3, #46	; 0x2e
  4008f0:	d0f2      	beq.n	4008d8 <inet_aton+0x20>
  4008f2:	d8e8      	bhi.n	4008c6 <inet_aton+0xe>
  4008f4:	2b00      	cmp	r3, #0
  4008f6:	d0f2      	beq.n	4008de <inet_aton+0x26>
      return 0;
  4008f8:	2000      	movs	r0, #0
  if (ap) {
    ap->s_addr = _htonl(addr);
  }

  return 1;
  4008fa:	bcf0      	pop	{r4, r5, r6, r7}
  4008fc:	4770      	bx	lr
  if (dots < 3) {
  4008fe:	2d02      	cmp	r5, #2
  400900:	dc03      	bgt.n	40090a <inet_aton+0x52>
    addr <<= 8 * (3 - dots) ;
  400902:	f1c5 0303 	rsb	r3, r5, #3
  400906:	00db      	lsls	r3, r3, #3
  400908:	409c      	lsls	r4, r3
  if (ap) {
  40090a:	b189      	cbz	r1, 400930 <inet_aton+0x78>
    ap->s_addr = _htonl(addr);
  40090c:	0e23      	lsrs	r3, r4, #24
  40090e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  400912:	0222      	lsls	r2, r4, #8
  400914:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  400918:	431a      	orrs	r2, r3
  40091a:	0a23      	lsrs	r3, r4, #8
  40091c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  400920:	4313      	orrs	r3, r2
  400922:	600b      	str	r3, [r1, #0]
  return 1;
  400924:	2001      	movs	r0, #1
  400926:	e7e8      	b.n	4008fa <inet_aton+0x42>
        return 0;
  400928:	2000      	movs	r0, #0
  40092a:	e7e6      	b.n	4008fa <inet_aton+0x42>
        return 0;
  40092c:	2000      	movs	r0, #0
  40092e:	e7e4      	b.n	4008fa <inet_aton+0x42>
  return 1;
  400930:	2001      	movs	r0, #1
  400932:	e7e2      	b.n	4008fa <inet_aton+0x42>

00400934 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400934:	f100 0308 	add.w	r3, r0, #8
  400938:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40093a:	f04f 32ff 	mov.w	r2, #4294967295
  40093e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400940:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400942:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400944:	2300      	movs	r3, #0
  400946:	6003      	str	r3, [r0, #0]
  400948:	4770      	bx	lr

0040094a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40094a:	2300      	movs	r3, #0
  40094c:	6103      	str	r3, [r0, #16]
  40094e:	4770      	bx	lr

00400950 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400950:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400952:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400954:	689a      	ldr	r2, [r3, #8]
  400956:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400958:	689a      	ldr	r2, [r3, #8]
  40095a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40095c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40095e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400960:	6803      	ldr	r3, [r0, #0]
  400962:	3301      	adds	r3, #1
  400964:	6003      	str	r3, [r0, #0]
  400966:	4770      	bx	lr

00400968 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400968:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40096a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40096c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400970:	d002      	beq.n	400978 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400972:	f100 0208 	add.w	r2, r0, #8
  400976:	e002      	b.n	40097e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400978:	6902      	ldr	r2, [r0, #16]
  40097a:	e004      	b.n	400986 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40097c:	461a      	mov	r2, r3
  40097e:	6853      	ldr	r3, [r2, #4]
  400980:	681c      	ldr	r4, [r3, #0]
  400982:	42a5      	cmp	r5, r4
  400984:	d2fa      	bcs.n	40097c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400986:	6853      	ldr	r3, [r2, #4]
  400988:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40098a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40098c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40098e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400990:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400992:	6803      	ldr	r3, [r0, #0]
  400994:	3301      	adds	r3, #1
  400996:	6003      	str	r3, [r0, #0]
}
  400998:	bc30      	pop	{r4, r5}
  40099a:	4770      	bx	lr

0040099c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  40099c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40099e:	6842      	ldr	r2, [r0, #4]
  4009a0:	6881      	ldr	r1, [r0, #8]
  4009a2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4009a4:	6882      	ldr	r2, [r0, #8]
  4009a6:	6841      	ldr	r1, [r0, #4]
  4009a8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4009aa:	685a      	ldr	r2, [r3, #4]
  4009ac:	4290      	cmp	r0, r2
  4009ae:	d005      	beq.n	4009bc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4009b0:	2200      	movs	r2, #0
  4009b2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4009b4:	6818      	ldr	r0, [r3, #0]
  4009b6:	3801      	subs	r0, #1
  4009b8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4009ba:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4009bc:	6882      	ldr	r2, [r0, #8]
  4009be:	605a      	str	r2, [r3, #4]
  4009c0:	e7f6      	b.n	4009b0 <uxListRemove+0x14>
	...

004009c4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4009c4:	4b0d      	ldr	r3, [pc, #52]	; (4009fc <prvTaskExitError+0x38>)
  4009c6:	681b      	ldr	r3, [r3, #0]
  4009c8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4009cc:	d00a      	beq.n	4009e4 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4009ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4009d2:	b672      	cpsid	i
  4009d4:	f383 8811 	msr	BASEPRI, r3
  4009d8:	f3bf 8f6f 	isb	sy
  4009dc:	f3bf 8f4f 	dsb	sy
  4009e0:	b662      	cpsie	i
  4009e2:	e7fe      	b.n	4009e2 <prvTaskExitError+0x1e>
  4009e4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4009e8:	b672      	cpsid	i
  4009ea:	f383 8811 	msr	BASEPRI, r3
  4009ee:	f3bf 8f6f 	isb	sy
  4009f2:	f3bf 8f4f 	dsb	sy
  4009f6:	b662      	cpsie	i
  4009f8:	e7fe      	b.n	4009f8 <prvTaskExitError+0x34>
  4009fa:	bf00      	nop
  4009fc:	2040000c 	.word	0x2040000c

00400a00 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400a00:	4806      	ldr	r0, [pc, #24]	; (400a1c <prvPortStartFirstTask+0x1c>)
  400a02:	6800      	ldr	r0, [r0, #0]
  400a04:	6800      	ldr	r0, [r0, #0]
  400a06:	f380 8808 	msr	MSP, r0
  400a0a:	b662      	cpsie	i
  400a0c:	b661      	cpsie	f
  400a0e:	f3bf 8f4f 	dsb	sy
  400a12:	f3bf 8f6f 	isb	sy
  400a16:	df00      	svc	0
  400a18:	bf00      	nop
  400a1a:	0000      	.short	0x0000
  400a1c:	e000ed08 	.word	0xe000ed08

00400a20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400a20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400a30 <vPortEnableVFP+0x10>
  400a24:	6801      	ldr	r1, [r0, #0]
  400a26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400a2a:	6001      	str	r1, [r0, #0]
  400a2c:	4770      	bx	lr
  400a2e:	0000      	.short	0x0000
  400a30:	e000ed88 	.word	0xe000ed88

00400a34 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400a38:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400a3c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400a40:	4b05      	ldr	r3, [pc, #20]	; (400a58 <pxPortInitialiseStack+0x24>)
  400a42:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400a46:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400a4a:	f06f 0302 	mvn.w	r3, #2
  400a4e:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400a52:	3844      	subs	r0, #68	; 0x44
  400a54:	4770      	bx	lr
  400a56:	bf00      	nop
  400a58:	004009c5 	.word	0x004009c5

00400a5c <SVC_Handler>:
	__asm volatile (
  400a5c:	4b06      	ldr	r3, [pc, #24]	; (400a78 <pxCurrentTCBConst2>)
  400a5e:	6819      	ldr	r1, [r3, #0]
  400a60:	6808      	ldr	r0, [r1, #0]
  400a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a66:	f380 8809 	msr	PSP, r0
  400a6a:	f3bf 8f6f 	isb	sy
  400a6e:	f04f 0000 	mov.w	r0, #0
  400a72:	f380 8811 	msr	BASEPRI, r0
  400a76:	4770      	bx	lr

00400a78 <pxCurrentTCBConst2>:
  400a78:	2040c214 	.word	0x2040c214
  400a7c:	4770      	bx	lr
  400a7e:	bf00      	nop

00400a80 <vPortEnterCritical>:
  400a80:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a84:	b672      	cpsid	i
  400a86:	f383 8811 	msr	BASEPRI, r3
  400a8a:	f3bf 8f6f 	isb	sy
  400a8e:	f3bf 8f4f 	dsb	sy
  400a92:	b662      	cpsie	i
	uxCriticalNesting++;
  400a94:	4a0b      	ldr	r2, [pc, #44]	; (400ac4 <vPortEnterCritical+0x44>)
  400a96:	6813      	ldr	r3, [r2, #0]
  400a98:	3301      	adds	r3, #1
  400a9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400a9c:	2b01      	cmp	r3, #1
  400a9e:	d10f      	bne.n	400ac0 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400aa0:	4b09      	ldr	r3, [pc, #36]	; (400ac8 <vPortEnterCritical+0x48>)
  400aa2:	681b      	ldr	r3, [r3, #0]
  400aa4:	f013 0fff 	tst.w	r3, #255	; 0xff
  400aa8:	d00a      	beq.n	400ac0 <vPortEnterCritical+0x40>
  400aaa:	f04f 0380 	mov.w	r3, #128	; 0x80
  400aae:	b672      	cpsid	i
  400ab0:	f383 8811 	msr	BASEPRI, r3
  400ab4:	f3bf 8f6f 	isb	sy
  400ab8:	f3bf 8f4f 	dsb	sy
  400abc:	b662      	cpsie	i
  400abe:	e7fe      	b.n	400abe <vPortEnterCritical+0x3e>
  400ac0:	4770      	bx	lr
  400ac2:	bf00      	nop
  400ac4:	2040000c 	.word	0x2040000c
  400ac8:	e000ed04 	.word	0xe000ed04

00400acc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400acc:	4b0a      	ldr	r3, [pc, #40]	; (400af8 <vPortExitCritical+0x2c>)
  400ace:	681b      	ldr	r3, [r3, #0]
  400ad0:	b953      	cbnz	r3, 400ae8 <vPortExitCritical+0x1c>
  400ad2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ad6:	b672      	cpsid	i
  400ad8:	f383 8811 	msr	BASEPRI, r3
  400adc:	f3bf 8f6f 	isb	sy
  400ae0:	f3bf 8f4f 	dsb	sy
  400ae4:	b662      	cpsie	i
  400ae6:	e7fe      	b.n	400ae6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400ae8:	3b01      	subs	r3, #1
  400aea:	4a03      	ldr	r2, [pc, #12]	; (400af8 <vPortExitCritical+0x2c>)
  400aec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400aee:	b90b      	cbnz	r3, 400af4 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400af0:	f383 8811 	msr	BASEPRI, r3
  400af4:	4770      	bx	lr
  400af6:	bf00      	nop
  400af8:	2040000c 	.word	0x2040000c

00400afc <PendSV_Handler>:
	__asm volatile
  400afc:	f3ef 8009 	mrs	r0, PSP
  400b00:	f3bf 8f6f 	isb	sy
  400b04:	4b15      	ldr	r3, [pc, #84]	; (400b5c <pxCurrentTCBConst>)
  400b06:	681a      	ldr	r2, [r3, #0]
  400b08:	f01e 0f10 	tst.w	lr, #16
  400b0c:	bf08      	it	eq
  400b0e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400b12:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b16:	6010      	str	r0, [r2, #0]
  400b18:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400b1c:	f04f 0080 	mov.w	r0, #128	; 0x80
  400b20:	b672      	cpsid	i
  400b22:	f380 8811 	msr	BASEPRI, r0
  400b26:	f3bf 8f4f 	dsb	sy
  400b2a:	f3bf 8f6f 	isb	sy
  400b2e:	b662      	cpsie	i
  400b30:	f001 f94a 	bl	401dc8 <vTaskSwitchContext>
  400b34:	f04f 0000 	mov.w	r0, #0
  400b38:	f380 8811 	msr	BASEPRI, r0
  400b3c:	bc08      	pop	{r3}
  400b3e:	6819      	ldr	r1, [r3, #0]
  400b40:	6808      	ldr	r0, [r1, #0]
  400b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b46:	f01e 0f10 	tst.w	lr, #16
  400b4a:	bf08      	it	eq
  400b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400b50:	f380 8809 	msr	PSP, r0
  400b54:	f3bf 8f6f 	isb	sy
  400b58:	4770      	bx	lr
  400b5a:	bf00      	nop

00400b5c <pxCurrentTCBConst>:
  400b5c:	2040c214 	.word	0x2040c214
  400b60:	4770      	bx	lr
  400b62:	bf00      	nop

00400b64 <SysTick_Handler>:
{
  400b64:	b508      	push	{r3, lr}
	__asm volatile
  400b66:	f3ef 8311 	mrs	r3, BASEPRI
  400b6a:	f04f 0280 	mov.w	r2, #128	; 0x80
  400b6e:	b672      	cpsid	i
  400b70:	f382 8811 	msr	BASEPRI, r2
  400b74:	f3bf 8f6f 	isb	sy
  400b78:	f3bf 8f4f 	dsb	sy
  400b7c:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400b7e:	4b05      	ldr	r3, [pc, #20]	; (400b94 <SysTick_Handler+0x30>)
  400b80:	4798      	blx	r3
  400b82:	b118      	cbz	r0, 400b8c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400b88:	4b03      	ldr	r3, [pc, #12]	; (400b98 <SysTick_Handler+0x34>)
  400b8a:	601a      	str	r2, [r3, #0]
	__asm volatile
  400b8c:	2300      	movs	r3, #0
  400b8e:	f383 8811 	msr	BASEPRI, r3
  400b92:	bd08      	pop	{r3, pc}
  400b94:	00401a35 	.word	0x00401a35
  400b98:	e000ed04 	.word	0xe000ed04

00400b9c <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400b9c:	4a03      	ldr	r2, [pc, #12]	; (400bac <vPortSetupTimerInterrupt+0x10>)
  400b9e:	4b04      	ldr	r3, [pc, #16]	; (400bb0 <vPortSetupTimerInterrupt+0x14>)
  400ba0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400ba2:	2207      	movs	r2, #7
  400ba4:	3b04      	subs	r3, #4
  400ba6:	601a      	str	r2, [r3, #0]
  400ba8:	4770      	bx	lr
  400baa:	bf00      	nop
  400bac:	000927bf 	.word	0x000927bf
  400bb0:	e000e014 	.word	0xe000e014

00400bb4 <xPortStartScheduler>:
{
  400bb4:	b500      	push	{lr}
  400bb6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400bb8:	4b25      	ldr	r3, [pc, #148]	; (400c50 <xPortStartScheduler+0x9c>)
  400bba:	781a      	ldrb	r2, [r3, #0]
  400bbc:	b2d2      	uxtb	r2, r2
  400bbe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400bc0:	22ff      	movs	r2, #255	; 0xff
  400bc2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400bc4:	781b      	ldrb	r3, [r3, #0]
  400bc6:	b2db      	uxtb	r3, r3
  400bc8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400bcc:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400bd4:	4a1f      	ldr	r2, [pc, #124]	; (400c54 <xPortStartScheduler+0xa0>)
  400bd6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400bd8:	2207      	movs	r2, #7
  400bda:	4b1f      	ldr	r3, [pc, #124]	; (400c58 <xPortStartScheduler+0xa4>)
  400bdc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400bde:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400be2:	f013 0f80 	tst.w	r3, #128	; 0x80
  400be6:	d010      	beq.n	400c0a <xPortStartScheduler+0x56>
  400be8:	2206      	movs	r2, #6
  400bea:	e000      	b.n	400bee <xPortStartScheduler+0x3a>
  400bec:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400bee:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400bf2:	005b      	lsls	r3, r3, #1
  400bf4:	b2db      	uxtb	r3, r3
  400bf6:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400bfa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400bfe:	1e51      	subs	r1, r2, #1
  400c00:	f013 0f80 	tst.w	r3, #128	; 0x80
  400c04:	d1f2      	bne.n	400bec <xPortStartScheduler+0x38>
  400c06:	4b14      	ldr	r3, [pc, #80]	; (400c58 <xPortStartScheduler+0xa4>)
  400c08:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400c0a:	4a13      	ldr	r2, [pc, #76]	; (400c58 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400c0c:	6813      	ldr	r3, [r2, #0]
  400c0e:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400c10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400c14:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400c16:	9b01      	ldr	r3, [sp, #4]
  400c18:	b2db      	uxtb	r3, r3
  400c1a:	4a0d      	ldr	r2, [pc, #52]	; (400c50 <xPortStartScheduler+0x9c>)
  400c1c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400c1e:	4b0f      	ldr	r3, [pc, #60]	; (400c5c <xPortStartScheduler+0xa8>)
  400c20:	681a      	ldr	r2, [r3, #0]
  400c22:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400c26:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400c28:	681a      	ldr	r2, [r3, #0]
  400c2a:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400c2e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400c30:	4b0b      	ldr	r3, [pc, #44]	; (400c60 <xPortStartScheduler+0xac>)
  400c32:	4798      	blx	r3
	uxCriticalNesting = 0;
  400c34:	2200      	movs	r2, #0
  400c36:	4b0b      	ldr	r3, [pc, #44]	; (400c64 <xPortStartScheduler+0xb0>)
  400c38:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  400c3a:	4b0b      	ldr	r3, [pc, #44]	; (400c68 <xPortStartScheduler+0xb4>)
  400c3c:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400c3e:	4a0b      	ldr	r2, [pc, #44]	; (400c6c <xPortStartScheduler+0xb8>)
  400c40:	6813      	ldr	r3, [r2, #0]
  400c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400c46:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400c48:	4b09      	ldr	r3, [pc, #36]	; (400c70 <xPortStartScheduler+0xbc>)
  400c4a:	4798      	blx	r3
	prvTaskExitError();
  400c4c:	4b09      	ldr	r3, [pc, #36]	; (400c74 <xPortStartScheduler+0xc0>)
  400c4e:	4798      	blx	r3
  400c50:	e000e400 	.word	0xe000e400
  400c54:	20400a04 	.word	0x20400a04
  400c58:	20400a08 	.word	0x20400a08
  400c5c:	e000ed20 	.word	0xe000ed20
  400c60:	00400b9d 	.word	0x00400b9d
  400c64:	2040000c 	.word	0x2040000c
  400c68:	00400a21 	.word	0x00400a21
  400c6c:	e000ef34 	.word	0xe000ef34
  400c70:	00400a01 	.word	0x00400a01
  400c74:	004009c5 	.word	0x004009c5

00400c78 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400c78:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400c7c:	2b0f      	cmp	r3, #15
  400c7e:	d911      	bls.n	400ca4 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400c80:	4a12      	ldr	r2, [pc, #72]	; (400ccc <vPortValidateInterruptPriority+0x54>)
  400c82:	5c9b      	ldrb	r3, [r3, r2]
  400c84:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400c86:	4a12      	ldr	r2, [pc, #72]	; (400cd0 <vPortValidateInterruptPriority+0x58>)
  400c88:	7812      	ldrb	r2, [r2, #0]
  400c8a:	429a      	cmp	r2, r3
  400c8c:	d90a      	bls.n	400ca4 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  400c8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c92:	b672      	cpsid	i
  400c94:	f383 8811 	msr	BASEPRI, r3
  400c98:	f3bf 8f6f 	isb	sy
  400c9c:	f3bf 8f4f 	dsb	sy
  400ca0:	b662      	cpsie	i
  400ca2:	e7fe      	b.n	400ca2 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400ca4:	4b0b      	ldr	r3, [pc, #44]	; (400cd4 <vPortValidateInterruptPriority+0x5c>)
  400ca6:	681b      	ldr	r3, [r3, #0]
  400ca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400cac:	4a0a      	ldr	r2, [pc, #40]	; (400cd8 <vPortValidateInterruptPriority+0x60>)
  400cae:	6812      	ldr	r2, [r2, #0]
  400cb0:	4293      	cmp	r3, r2
  400cb2:	d90a      	bls.n	400cca <vPortValidateInterruptPriority+0x52>
  400cb4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400cb8:	b672      	cpsid	i
  400cba:	f383 8811 	msr	BASEPRI, r3
  400cbe:	f3bf 8f6f 	isb	sy
  400cc2:	f3bf 8f4f 	dsb	sy
  400cc6:	b662      	cpsie	i
  400cc8:	e7fe      	b.n	400cc8 <vPortValidateInterruptPriority+0x50>
  400cca:	4770      	bx	lr
  400ccc:	e000e3f0 	.word	0xe000e3f0
  400cd0:	20400a04 	.word	0x20400a04
  400cd4:	e000ed0c 	.word	0xe000ed0c
  400cd8:	20400a08 	.word	0x20400a08

00400cdc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400cdc:	b538      	push	{r3, r4, r5, lr}
  400cde:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400ce0:	f010 0f07 	tst.w	r0, #7
  400ce4:	d002      	beq.n	400cec <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400ce6:	f020 0407 	bic.w	r4, r0, #7
  400cea:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400cec:	4b11      	ldr	r3, [pc, #68]	; (400d34 <pvPortMalloc+0x58>)
  400cee:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400cf0:	4b11      	ldr	r3, [pc, #68]	; (400d38 <pvPortMalloc+0x5c>)
  400cf2:	681b      	ldr	r3, [r3, #0]
  400cf4:	b193      	cbz	r3, 400d1c <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400cf6:	4b11      	ldr	r3, [pc, #68]	; (400d3c <pvPortMalloc+0x60>)
  400cf8:	681b      	ldr	r3, [r3, #0]
  400cfa:	441c      	add	r4, r3
  400cfc:	42a3      	cmp	r3, r4
  400cfe:	d213      	bcs.n	400d28 <pvPortMalloc+0x4c>
  400d00:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400d04:	4294      	cmp	r4, r2
  400d06:	d80f      	bhi.n	400d28 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400d08:	4a0b      	ldr	r2, [pc, #44]	; (400d38 <pvPortMalloc+0x5c>)
  400d0a:	6815      	ldr	r5, [r2, #0]
  400d0c:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  400d0e:	4b0b      	ldr	r3, [pc, #44]	; (400d3c <pvPortMalloc+0x60>)
  400d10:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400d12:	4b0b      	ldr	r3, [pc, #44]	; (400d40 <pvPortMalloc+0x64>)
  400d14:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  400d16:	b14d      	cbz	r5, 400d2c <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  400d18:	4628      	mov	r0, r5
  400d1a:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400d1c:	4b09      	ldr	r3, [pc, #36]	; (400d44 <pvPortMalloc+0x68>)
  400d1e:	f023 0307 	bic.w	r3, r3, #7
  400d22:	4a05      	ldr	r2, [pc, #20]	; (400d38 <pvPortMalloc+0x5c>)
  400d24:	6013      	str	r3, [r2, #0]
  400d26:	e7e6      	b.n	400cf6 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  400d28:	4b05      	ldr	r3, [pc, #20]	; (400d40 <pvPortMalloc+0x64>)
  400d2a:	4798      	blx	r3
			vApplicationMallocFailedHook();
  400d2c:	4b06      	ldr	r3, [pc, #24]	; (400d48 <pvPortMalloc+0x6c>)
  400d2e:	4798      	blx	r3
  400d30:	2500      	movs	r5, #0
	return pvReturn;
  400d32:	e7f1      	b.n	400d18 <pvPortMalloc+0x3c>
  400d34:	00401a19 	.word	0x00401a19
  400d38:	20400a0c 	.word	0x20400a0c
  400d3c:	2040c210 	.word	0x2040c210
  400d40:	00401b81 	.word	0x00401b81
  400d44:	20400a18 	.word	0x20400a18
  400d48:	004067cb 	.word	0x004067cb

00400d4c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400d4c:	b150      	cbz	r0, 400d64 <vPortFree+0x18>
  400d4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d52:	b672      	cpsid	i
  400d54:	f383 8811 	msr	BASEPRI, r3
  400d58:	f3bf 8f6f 	isb	sy
  400d5c:	f3bf 8f4f 	dsb	sy
  400d60:	b662      	cpsie	i
  400d62:	e7fe      	b.n	400d62 <vPortFree+0x16>
  400d64:	4770      	bx	lr
	...

00400d68 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400d68:	b538      	push	{r3, r4, r5, lr}
  400d6a:	4604      	mov	r4, r0
  400d6c:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400d6e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400d70:	b95a      	cbnz	r2, 400d8a <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400d72:	6803      	ldr	r3, [r0, #0]
  400d74:	2b00      	cmp	r3, #0
  400d76:	d12e      	bne.n	400dd6 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400d78:	6840      	ldr	r0, [r0, #4]
  400d7a:	4b1b      	ldr	r3, [pc, #108]	; (400de8 <prvCopyDataToQueue+0x80>)
  400d7c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400d7e:	2300      	movs	r3, #0
  400d80:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400d82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400d84:	3301      	adds	r3, #1
  400d86:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400d88:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  400d8a:	b96d      	cbnz	r5, 400da8 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400d8c:	6880      	ldr	r0, [r0, #8]
  400d8e:	4b17      	ldr	r3, [pc, #92]	; (400dec <prvCopyDataToQueue+0x84>)
  400d90:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400d92:	68a3      	ldr	r3, [r4, #8]
  400d94:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400d96:	4413      	add	r3, r2
  400d98:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400d9a:	6862      	ldr	r2, [r4, #4]
  400d9c:	4293      	cmp	r3, r2
  400d9e:	d31c      	bcc.n	400dda <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400da0:	6823      	ldr	r3, [r4, #0]
  400da2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  400da4:	2000      	movs	r0, #0
  400da6:	e7ec      	b.n	400d82 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400da8:	68c0      	ldr	r0, [r0, #12]
  400daa:	4b10      	ldr	r3, [pc, #64]	; (400dec <prvCopyDataToQueue+0x84>)
  400dac:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400db0:	425b      	negs	r3, r3
  400db2:	68e2      	ldr	r2, [r4, #12]
  400db4:	441a      	add	r2, r3
  400db6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400db8:	6821      	ldr	r1, [r4, #0]
  400dba:	428a      	cmp	r2, r1
  400dbc:	d202      	bcs.n	400dc4 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400dbe:	6862      	ldr	r2, [r4, #4]
  400dc0:	4413      	add	r3, r2
  400dc2:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  400dc4:	2d02      	cmp	r5, #2
  400dc6:	d10a      	bne.n	400dde <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400dc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400dca:	b153      	cbz	r3, 400de2 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  400dcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400dce:	3b01      	subs	r3, #1
  400dd0:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  400dd2:	2000      	movs	r0, #0
  400dd4:	e7d5      	b.n	400d82 <prvCopyDataToQueue+0x1a>
  400dd6:	2000      	movs	r0, #0
  400dd8:	e7d3      	b.n	400d82 <prvCopyDataToQueue+0x1a>
  400dda:	2000      	movs	r0, #0
  400ddc:	e7d1      	b.n	400d82 <prvCopyDataToQueue+0x1a>
  400dde:	2000      	movs	r0, #0
  400de0:	e7cf      	b.n	400d82 <prvCopyDataToQueue+0x1a>
  400de2:	2000      	movs	r0, #0
  400de4:	e7cd      	b.n	400d82 <prvCopyDataToQueue+0x1a>
  400de6:	bf00      	nop
  400de8:	004021c9 	.word	0x004021c9
  400dec:	00406cc5 	.word	0x00406cc5

00400df0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400df0:	b530      	push	{r4, r5, lr}
  400df2:	b083      	sub	sp, #12
  400df4:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400df6:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400df8:	b174      	cbz	r4, 400e18 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400dfa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400dfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400dfe:	429a      	cmp	r2, r3
  400e00:	d315      	bcc.n	400e2e <prvNotifyQueueSetContainer+0x3e>
  400e02:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e06:	b672      	cpsid	i
  400e08:	f383 8811 	msr	BASEPRI, r3
  400e0c:	f3bf 8f6f 	isb	sy
  400e10:	f3bf 8f4f 	dsb	sy
  400e14:	b662      	cpsie	i
  400e16:	e7fe      	b.n	400e16 <prvNotifyQueueSetContainer+0x26>
  400e18:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e1c:	b672      	cpsid	i
  400e1e:	f383 8811 	msr	BASEPRI, r3
  400e22:	f3bf 8f6f 	isb	sy
  400e26:	f3bf 8f4f 	dsb	sy
  400e2a:	b662      	cpsie	i
  400e2c:	e7fe      	b.n	400e2c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400e2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400e30:	4293      	cmp	r3, r2
  400e32:	d803      	bhi.n	400e3c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  400e34:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400e36:	4628      	mov	r0, r5
  400e38:	b003      	add	sp, #12
  400e3a:	bd30      	pop	{r4, r5, pc}
  400e3c:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400e3e:	a901      	add	r1, sp, #4
  400e40:	4620      	mov	r0, r4
  400e42:	4b0b      	ldr	r3, [pc, #44]	; (400e70 <prvNotifyQueueSetContainer+0x80>)
  400e44:	4798      	blx	r3
  400e46:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400e48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e4e:	d10a      	bne.n	400e66 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400e52:	2b00      	cmp	r3, #0
  400e54:	d0ef      	beq.n	400e36 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400e56:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e5a:	4b06      	ldr	r3, [pc, #24]	; (400e74 <prvNotifyQueueSetContainer+0x84>)
  400e5c:	4798      	blx	r3
  400e5e:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  400e60:	bf18      	it	ne
  400e62:	2501      	movne	r5, #1
  400e64:	e7e7      	b.n	400e36 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  400e66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e68:	3301      	adds	r3, #1
  400e6a:	64a3      	str	r3, [r4, #72]	; 0x48
  400e6c:	e7e3      	b.n	400e36 <prvNotifyQueueSetContainer+0x46>
  400e6e:	bf00      	nop
  400e70:	00400d69 	.word	0x00400d69
  400e74:	00401f9d 	.word	0x00401f9d

00400e78 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400e78:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400e7a:	b172      	cbz	r2, 400e9a <prvCopyDataFromQueue+0x22>
{
  400e7c:	b510      	push	{r4, lr}
  400e7e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400e80:	68c4      	ldr	r4, [r0, #12]
  400e82:	4414      	add	r4, r2
  400e84:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400e86:	6840      	ldr	r0, [r0, #4]
  400e88:	4284      	cmp	r4, r0
  400e8a:	d301      	bcc.n	400e90 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400e8c:	6818      	ldr	r0, [r3, #0]
  400e8e:	60d8      	str	r0, [r3, #12]
  400e90:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400e92:	68d9      	ldr	r1, [r3, #12]
  400e94:	4b01      	ldr	r3, [pc, #4]	; (400e9c <prvCopyDataFromQueue+0x24>)
  400e96:	4798      	blx	r3
  400e98:	bd10      	pop	{r4, pc}
  400e9a:	4770      	bx	lr
  400e9c:	00406cc5 	.word	0x00406cc5

00400ea0 <prvUnlockQueue>:
{
  400ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ea2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400ea4:	4b22      	ldr	r3, [pc, #136]	; (400f30 <prvUnlockQueue+0x90>)
  400ea6:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400ea8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400eaa:	2b00      	cmp	r3, #0
  400eac:	dd1b      	ble.n	400ee6 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400eae:	4d21      	ldr	r5, [pc, #132]	; (400f34 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  400eb0:	4f21      	ldr	r7, [pc, #132]	; (400f38 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400eb2:	4e22      	ldr	r6, [pc, #136]	; (400f3c <prvUnlockQueue+0x9c>)
  400eb4:	e00b      	b.n	400ece <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400eb8:	b1ab      	cbz	r3, 400ee6 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400eba:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ebe:	47b0      	blx	r6
  400ec0:	b978      	cbnz	r0, 400ee2 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  400ec2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ec4:	3b01      	subs	r3, #1
  400ec6:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400ec8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400eca:	2b00      	cmp	r3, #0
  400ecc:	dd0b      	ble.n	400ee6 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  400ece:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400ed0:	2b00      	cmp	r3, #0
  400ed2:	d0f0      	beq.n	400eb6 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400ed4:	2100      	movs	r1, #0
  400ed6:	4620      	mov	r0, r4
  400ed8:	47a8      	blx	r5
  400eda:	2801      	cmp	r0, #1
  400edc:	d1f1      	bne.n	400ec2 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  400ede:	47b8      	blx	r7
  400ee0:	e7ef      	b.n	400ec2 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  400ee2:	47b8      	blx	r7
  400ee4:	e7ed      	b.n	400ec2 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  400ee6:	f04f 33ff 	mov.w	r3, #4294967295
  400eea:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  400eec:	4b14      	ldr	r3, [pc, #80]	; (400f40 <prvUnlockQueue+0xa0>)
  400eee:	4798      	blx	r3
	taskENTER_CRITICAL();
  400ef0:	4b0f      	ldr	r3, [pc, #60]	; (400f30 <prvUnlockQueue+0x90>)
  400ef2:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400ef4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400ef6:	2b00      	cmp	r3, #0
  400ef8:	dd14      	ble.n	400f24 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400efa:	6923      	ldr	r3, [r4, #16]
  400efc:	b193      	cbz	r3, 400f24 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400efe:	f104 0610 	add.w	r6, r4, #16
  400f02:	4d0e      	ldr	r5, [pc, #56]	; (400f3c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400f04:	4f0c      	ldr	r7, [pc, #48]	; (400f38 <prvUnlockQueue+0x98>)
  400f06:	e007      	b.n	400f18 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  400f08:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400f0a:	3b01      	subs	r3, #1
  400f0c:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400f0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400f10:	2b00      	cmp	r3, #0
  400f12:	dd07      	ble.n	400f24 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400f14:	6923      	ldr	r3, [r4, #16]
  400f16:	b12b      	cbz	r3, 400f24 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400f18:	4630      	mov	r0, r6
  400f1a:	47a8      	blx	r5
  400f1c:	2800      	cmp	r0, #0
  400f1e:	d0f3      	beq.n	400f08 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  400f20:	47b8      	blx	r7
  400f22:	e7f1      	b.n	400f08 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  400f24:	f04f 33ff 	mov.w	r3, #4294967295
  400f28:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  400f2a:	4b05      	ldr	r3, [pc, #20]	; (400f40 <prvUnlockQueue+0xa0>)
  400f2c:	4798      	blx	r3
  400f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f30:	00400a81 	.word	0x00400a81
  400f34:	00400df1 	.word	0x00400df1
  400f38:	004020f9 	.word	0x004020f9
  400f3c:	00401f9d 	.word	0x00401f9d
  400f40:	00400acd 	.word	0x00400acd

00400f44 <xQueueGenericReset>:
{
  400f44:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  400f46:	b308      	cbz	r0, 400f8c <xQueueGenericReset+0x48>
  400f48:	4604      	mov	r4, r0
  400f4a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  400f4c:	4b1d      	ldr	r3, [pc, #116]	; (400fc4 <xQueueGenericReset+0x80>)
  400f4e:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400f50:	6822      	ldr	r2, [r4, #0]
  400f52:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400f54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f56:	fb03 f301 	mul.w	r3, r3, r1
  400f5a:	18d0      	adds	r0, r2, r3
  400f5c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400f5e:	2000      	movs	r0, #0
  400f60:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400f62:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400f64:	1a5b      	subs	r3, r3, r1
  400f66:	4413      	add	r3, r2
  400f68:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400f6a:	f04f 33ff 	mov.w	r3, #4294967295
  400f6e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400f70:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  400f72:	b9fd      	cbnz	r5, 400fb4 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400f74:	6923      	ldr	r3, [r4, #16]
  400f76:	b12b      	cbz	r3, 400f84 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400f78:	f104 0010 	add.w	r0, r4, #16
  400f7c:	4b12      	ldr	r3, [pc, #72]	; (400fc8 <xQueueGenericReset+0x84>)
  400f7e:	4798      	blx	r3
  400f80:	2801      	cmp	r0, #1
  400f82:	d00e      	beq.n	400fa2 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  400f84:	4b11      	ldr	r3, [pc, #68]	; (400fcc <xQueueGenericReset+0x88>)
  400f86:	4798      	blx	r3
}
  400f88:	2001      	movs	r0, #1
  400f8a:	bd38      	pop	{r3, r4, r5, pc}
  400f8c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f90:	b672      	cpsid	i
  400f92:	f383 8811 	msr	BASEPRI, r3
  400f96:	f3bf 8f6f 	isb	sy
  400f9a:	f3bf 8f4f 	dsb	sy
  400f9e:	b662      	cpsie	i
  400fa0:	e7fe      	b.n	400fa0 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  400fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fa6:	4b0a      	ldr	r3, [pc, #40]	; (400fd0 <xQueueGenericReset+0x8c>)
  400fa8:	601a      	str	r2, [r3, #0]
  400faa:	f3bf 8f4f 	dsb	sy
  400fae:	f3bf 8f6f 	isb	sy
  400fb2:	e7e7      	b.n	400f84 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400fb4:	f104 0010 	add.w	r0, r4, #16
  400fb8:	4d06      	ldr	r5, [pc, #24]	; (400fd4 <xQueueGenericReset+0x90>)
  400fba:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400fbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fc0:	47a8      	blx	r5
  400fc2:	e7df      	b.n	400f84 <xQueueGenericReset+0x40>
  400fc4:	00400a81 	.word	0x00400a81
  400fc8:	00401f9d 	.word	0x00401f9d
  400fcc:	00400acd 	.word	0x00400acd
  400fd0:	e000ed04 	.word	0xe000ed04
  400fd4:	00400935 	.word	0x00400935

00400fd8 <xQueueGenericCreate>:
{
  400fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400fda:	b950      	cbnz	r0, 400ff2 <xQueueGenericCreate+0x1a>
  400fdc:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fe0:	b672      	cpsid	i
  400fe2:	f383 8811 	msr	BASEPRI, r3
  400fe6:	f3bf 8f6f 	isb	sy
  400fea:	f3bf 8f4f 	dsb	sy
  400fee:	b662      	cpsie	i
  400ff0:	e7fe      	b.n	400ff0 <xQueueGenericCreate+0x18>
  400ff2:	4606      	mov	r6, r0
  400ff4:	4617      	mov	r7, r2
  400ff6:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  400ff8:	b189      	cbz	r1, 40101e <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400ffa:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400ffe:	3059      	adds	r0, #89	; 0x59
  401000:	4b12      	ldr	r3, [pc, #72]	; (40104c <xQueueGenericCreate+0x74>)
  401002:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401004:	4604      	mov	r4, r0
  401006:	b9e8      	cbnz	r0, 401044 <xQueueGenericCreate+0x6c>
  401008:	f04f 0380 	mov.w	r3, #128	; 0x80
  40100c:	b672      	cpsid	i
  40100e:	f383 8811 	msr	BASEPRI, r3
  401012:	f3bf 8f6f 	isb	sy
  401016:	f3bf 8f4f 	dsb	sy
  40101a:	b662      	cpsie	i
  40101c:	e7fe      	b.n	40101c <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40101e:	2058      	movs	r0, #88	; 0x58
  401020:	4b0a      	ldr	r3, [pc, #40]	; (40104c <xQueueGenericCreate+0x74>)
  401022:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401024:	4604      	mov	r4, r0
  401026:	2800      	cmp	r0, #0
  401028:	d0ee      	beq.n	401008 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40102a:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  40102c:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  40102e:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401030:	2101      	movs	r1, #1
  401032:	4620      	mov	r0, r4
  401034:	4b06      	ldr	r3, [pc, #24]	; (401050 <xQueueGenericCreate+0x78>)
  401036:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401038:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  40103c:	2300      	movs	r3, #0
  40103e:	6563      	str	r3, [r4, #84]	; 0x54
}
  401040:	4620      	mov	r0, r4
  401042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401044:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401048:	6003      	str	r3, [r0, #0]
  40104a:	e7ef      	b.n	40102c <xQueueGenericCreate+0x54>
  40104c:	00400cdd 	.word	0x00400cdd
  401050:	00400f45 	.word	0x00400f45

00401054 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
  401054:	b950      	cbnz	r0, 40106c <xQueueCreateCountingSemaphore+0x18>
  401056:	f04f 0380 	mov.w	r3, #128	; 0x80
  40105a:	b672      	cpsid	i
  40105c:	f383 8811 	msr	BASEPRI, r3
  401060:	f3bf 8f6f 	isb	sy
  401064:	f3bf 8f4f 	dsb	sy
  401068:	b662      	cpsie	i
  40106a:	e7fe      	b.n	40106a <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
  40106c:	4288      	cmp	r0, r1
  40106e:	d20a      	bcs.n	401086 <xQueueCreateCountingSemaphore+0x32>
  401070:	f04f 0380 	mov.w	r3, #128	; 0x80
  401074:	b672      	cpsid	i
  401076:	f383 8811 	msr	BASEPRI, r3
  40107a:	f3bf 8f6f 	isb	sy
  40107e:	f3bf 8f4f 	dsb	sy
  401082:	b662      	cpsie	i
  401084:	e7fe      	b.n	401084 <xQueueCreateCountingSemaphore+0x30>
	{
  401086:	b510      	push	{r4, lr}
  401088:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
  40108a:	2202      	movs	r2, #2
  40108c:	2100      	movs	r1, #0
  40108e:	4b08      	ldr	r3, [pc, #32]	; (4010b0 <xQueueCreateCountingSemaphore+0x5c>)
  401090:	4798      	blx	r3
		if( xHandle != NULL )
  401092:	b108      	cbz	r0, 401098 <xQueueCreateCountingSemaphore+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
  401094:	6384      	str	r4, [r0, #56]	; 0x38
	}
  401096:	bd10      	pop	{r4, pc}
  401098:	f04f 0380 	mov.w	r3, #128	; 0x80
  40109c:	b672      	cpsid	i
  40109e:	f383 8811 	msr	BASEPRI, r3
  4010a2:	f3bf 8f6f 	isb	sy
  4010a6:	f3bf 8f4f 	dsb	sy
  4010aa:	b662      	cpsie	i
  4010ac:	e7fe      	b.n	4010ac <xQueueCreateCountingSemaphore+0x58>
  4010ae:	bf00      	nop
  4010b0:	00400fd9 	.word	0x00400fd9

004010b4 <xQueueGenericSend>:
{
  4010b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010b8:	b085      	sub	sp, #20
  4010ba:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4010bc:	b1b8      	cbz	r0, 4010ee <xQueueGenericSend+0x3a>
  4010be:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4010c0:	b301      	cbz	r1, 401104 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4010c2:	2b02      	cmp	r3, #2
  4010c4:	d02c      	beq.n	401120 <xQueueGenericSend+0x6c>
  4010c6:	461d      	mov	r5, r3
  4010c8:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4010ca:	4b66      	ldr	r3, [pc, #408]	; (401264 <xQueueGenericSend+0x1b0>)
  4010cc:	4798      	blx	r3
  4010ce:	2800      	cmp	r0, #0
  4010d0:	d134      	bne.n	40113c <xQueueGenericSend+0x88>
  4010d2:	9b01      	ldr	r3, [sp, #4]
  4010d4:	2b00      	cmp	r3, #0
  4010d6:	d038      	beq.n	40114a <xQueueGenericSend+0x96>
  4010d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010dc:	b672      	cpsid	i
  4010de:	f383 8811 	msr	BASEPRI, r3
  4010e2:	f3bf 8f6f 	isb	sy
  4010e6:	f3bf 8f4f 	dsb	sy
  4010ea:	b662      	cpsie	i
  4010ec:	e7fe      	b.n	4010ec <xQueueGenericSend+0x38>
  4010ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010f2:	b672      	cpsid	i
  4010f4:	f383 8811 	msr	BASEPRI, r3
  4010f8:	f3bf 8f6f 	isb	sy
  4010fc:	f3bf 8f4f 	dsb	sy
  401100:	b662      	cpsie	i
  401102:	e7fe      	b.n	401102 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401104:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401106:	2a00      	cmp	r2, #0
  401108:	d0db      	beq.n	4010c2 <xQueueGenericSend+0xe>
  40110a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40110e:	b672      	cpsid	i
  401110:	f383 8811 	msr	BASEPRI, r3
  401114:	f3bf 8f6f 	isb	sy
  401118:	f3bf 8f4f 	dsb	sy
  40111c:	b662      	cpsie	i
  40111e:	e7fe      	b.n	40111e <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401120:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401122:	2a01      	cmp	r2, #1
  401124:	d0cf      	beq.n	4010c6 <xQueueGenericSend+0x12>
  401126:	f04f 0380 	mov.w	r3, #128	; 0x80
  40112a:	b672      	cpsid	i
  40112c:	f383 8811 	msr	BASEPRI, r3
  401130:	f3bf 8f6f 	isb	sy
  401134:	f3bf 8f4f 	dsb	sy
  401138:	b662      	cpsie	i
  40113a:	e7fe      	b.n	40113a <xQueueGenericSend+0x86>
  40113c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  40113e:	4e4a      	ldr	r6, [pc, #296]	; (401268 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401140:	f8df a150 	ldr.w	sl, [pc, #336]	; 401294 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401144:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401274 <xQueueGenericSend+0x1c0>
  401148:	e042      	b.n	4011d0 <xQueueGenericSend+0x11c>
  40114a:	2700      	movs	r7, #0
  40114c:	e7f7      	b.n	40113e <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40114e:	462a      	mov	r2, r5
  401150:	4641      	mov	r1, r8
  401152:	4620      	mov	r0, r4
  401154:	4b45      	ldr	r3, [pc, #276]	; (40126c <xQueueGenericSend+0x1b8>)
  401156:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401158:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40115a:	b19b      	cbz	r3, 401184 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40115c:	4629      	mov	r1, r5
  40115e:	4620      	mov	r0, r4
  401160:	4b43      	ldr	r3, [pc, #268]	; (401270 <xQueueGenericSend+0x1bc>)
  401162:	4798      	blx	r3
  401164:	2801      	cmp	r0, #1
  401166:	d107      	bne.n	401178 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40116c:	4b41      	ldr	r3, [pc, #260]	; (401274 <xQueueGenericSend+0x1c0>)
  40116e:	601a      	str	r2, [r3, #0]
  401170:	f3bf 8f4f 	dsb	sy
  401174:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401178:	4b3f      	ldr	r3, [pc, #252]	; (401278 <xQueueGenericSend+0x1c4>)
  40117a:	4798      	blx	r3
				return pdPASS;
  40117c:	2001      	movs	r0, #1
}
  40117e:	b005      	add	sp, #20
  401180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401184:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401186:	b173      	cbz	r3, 4011a6 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401188:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40118c:	4b3b      	ldr	r3, [pc, #236]	; (40127c <xQueueGenericSend+0x1c8>)
  40118e:	4798      	blx	r3
  401190:	2801      	cmp	r0, #1
  401192:	d1f1      	bne.n	401178 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401198:	4b36      	ldr	r3, [pc, #216]	; (401274 <xQueueGenericSend+0x1c0>)
  40119a:	601a      	str	r2, [r3, #0]
  40119c:	f3bf 8f4f 	dsb	sy
  4011a0:	f3bf 8f6f 	isb	sy
  4011a4:	e7e8      	b.n	401178 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  4011a6:	2800      	cmp	r0, #0
  4011a8:	d0e6      	beq.n	401178 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4011aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011ae:	4b31      	ldr	r3, [pc, #196]	; (401274 <xQueueGenericSend+0x1c0>)
  4011b0:	601a      	str	r2, [r3, #0]
  4011b2:	f3bf 8f4f 	dsb	sy
  4011b6:	f3bf 8f6f 	isb	sy
  4011ba:	e7dd      	b.n	401178 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4011bc:	4b2e      	ldr	r3, [pc, #184]	; (401278 <xQueueGenericSend+0x1c4>)
  4011be:	4798      	blx	r3
					return errQUEUE_FULL;
  4011c0:	2000      	movs	r0, #0
  4011c2:	e7dc      	b.n	40117e <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4011c4:	4620      	mov	r0, r4
  4011c6:	4b2e      	ldr	r3, [pc, #184]	; (401280 <xQueueGenericSend+0x1cc>)
  4011c8:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4011ca:	4b2e      	ldr	r3, [pc, #184]	; (401284 <xQueueGenericSend+0x1d0>)
  4011cc:	4798      	blx	r3
  4011ce:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4011d0:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4011d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4011d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4011d6:	429a      	cmp	r2, r3
  4011d8:	d3b9      	bcc.n	40114e <xQueueGenericSend+0x9a>
  4011da:	2d02      	cmp	r5, #2
  4011dc:	d0b7      	beq.n	40114e <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  4011de:	9b01      	ldr	r3, [sp, #4]
  4011e0:	2b00      	cmp	r3, #0
  4011e2:	d0eb      	beq.n	4011bc <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4011e4:	b90f      	cbnz	r7, 4011ea <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  4011e6:	a802      	add	r0, sp, #8
  4011e8:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4011ea:	4b23      	ldr	r3, [pc, #140]	; (401278 <xQueueGenericSend+0x1c4>)
  4011ec:	4798      	blx	r3
		vTaskSuspendAll();
  4011ee:	4b26      	ldr	r3, [pc, #152]	; (401288 <xQueueGenericSend+0x1d4>)
  4011f0:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4011f2:	47b0      	blx	r6
  4011f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4011f6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4011fa:	d101      	bne.n	401200 <xQueueGenericSend+0x14c>
  4011fc:	2300      	movs	r3, #0
  4011fe:	6463      	str	r3, [r4, #68]	; 0x44
  401200:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401202:	f1b3 3fff 	cmp.w	r3, #4294967295
  401206:	d101      	bne.n	40120c <xQueueGenericSend+0x158>
  401208:	2300      	movs	r3, #0
  40120a:	64a3      	str	r3, [r4, #72]	; 0x48
  40120c:	4b1a      	ldr	r3, [pc, #104]	; (401278 <xQueueGenericSend+0x1c4>)
  40120e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401210:	a901      	add	r1, sp, #4
  401212:	a802      	add	r0, sp, #8
  401214:	4b1d      	ldr	r3, [pc, #116]	; (40128c <xQueueGenericSend+0x1d8>)
  401216:	4798      	blx	r3
  401218:	b9e0      	cbnz	r0, 401254 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  40121a:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  40121c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401220:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401222:	4b15      	ldr	r3, [pc, #84]	; (401278 <xQueueGenericSend+0x1c4>)
  401224:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401226:	45bb      	cmp	fp, r7
  401228:	d1cc      	bne.n	4011c4 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40122a:	9901      	ldr	r1, [sp, #4]
  40122c:	f104 0010 	add.w	r0, r4, #16
  401230:	4b17      	ldr	r3, [pc, #92]	; (401290 <xQueueGenericSend+0x1dc>)
  401232:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401234:	4620      	mov	r0, r4
  401236:	4b12      	ldr	r3, [pc, #72]	; (401280 <xQueueGenericSend+0x1cc>)
  401238:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40123a:	4b12      	ldr	r3, [pc, #72]	; (401284 <xQueueGenericSend+0x1d0>)
  40123c:	4798      	blx	r3
  40123e:	2800      	cmp	r0, #0
  401240:	d1c5      	bne.n	4011ce <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401242:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401246:	f8c9 3000 	str.w	r3, [r9]
  40124a:	f3bf 8f4f 	dsb	sy
  40124e:	f3bf 8f6f 	isb	sy
  401252:	e7bc      	b.n	4011ce <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401254:	4620      	mov	r0, r4
  401256:	4b0a      	ldr	r3, [pc, #40]	; (401280 <xQueueGenericSend+0x1cc>)
  401258:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40125a:	4b0a      	ldr	r3, [pc, #40]	; (401284 <xQueueGenericSend+0x1d0>)
  40125c:	4798      	blx	r3
			return errQUEUE_FULL;
  40125e:	2000      	movs	r0, #0
  401260:	e78d      	b.n	40117e <xQueueGenericSend+0xca>
  401262:	bf00      	nop
  401264:	00402105 	.word	0x00402105
  401268:	00400a81 	.word	0x00400a81
  40126c:	00400d69 	.word	0x00400d69
  401270:	00400df1 	.word	0x00400df1
  401274:	e000ed04 	.word	0xe000ed04
  401278:	00400acd 	.word	0x00400acd
  40127c:	00401f9d 	.word	0x00401f9d
  401280:	00400ea1 	.word	0x00400ea1
  401284:	00401b81 	.word	0x00401b81
  401288:	00401a19 	.word	0x00401a19
  40128c:	00402065 	.word	0x00402065
  401290:	00401e99 	.word	0x00401e99
  401294:	00402035 	.word	0x00402035

00401298 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401298:	2800      	cmp	r0, #0
  40129a:	d036      	beq.n	40130a <xQueueGenericSendFromISR+0x72>
{
  40129c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012a0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4012a2:	2900      	cmp	r1, #0
  4012a4:	d03c      	beq.n	401320 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4012a6:	2b02      	cmp	r3, #2
  4012a8:	d048      	beq.n	40133c <xQueueGenericSendFromISR+0xa4>
  4012aa:	461e      	mov	r6, r3
  4012ac:	4615      	mov	r5, r2
  4012ae:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4012b0:	4b35      	ldr	r3, [pc, #212]	; (401388 <xQueueGenericSendFromISR+0xf0>)
  4012b2:	4798      	blx	r3
	__asm volatile
  4012b4:	f3ef 8711 	mrs	r7, BASEPRI
  4012b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012bc:	b672      	cpsid	i
  4012be:	f383 8811 	msr	BASEPRI, r3
  4012c2:	f3bf 8f6f 	isb	sy
  4012c6:	f3bf 8f4f 	dsb	sy
  4012ca:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4012cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4012ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4012d0:	429a      	cmp	r2, r3
  4012d2:	d301      	bcc.n	4012d8 <xQueueGenericSendFromISR+0x40>
  4012d4:	2e02      	cmp	r6, #2
  4012d6:	d14f      	bne.n	401378 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4012d8:	4632      	mov	r2, r6
  4012da:	4641      	mov	r1, r8
  4012dc:	4620      	mov	r0, r4
  4012de:	4b2b      	ldr	r3, [pc, #172]	; (40138c <xQueueGenericSendFromISR+0xf4>)
  4012e0:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  4012e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012e8:	d141      	bne.n	40136e <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4012ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4012ec:	2b00      	cmp	r3, #0
  4012ee:	d033      	beq.n	401358 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4012f0:	4631      	mov	r1, r6
  4012f2:	4620      	mov	r0, r4
  4012f4:	4b26      	ldr	r3, [pc, #152]	; (401390 <xQueueGenericSendFromISR+0xf8>)
  4012f6:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4012f8:	2d00      	cmp	r5, #0
  4012fa:	d03f      	beq.n	40137c <xQueueGenericSendFromISR+0xe4>
  4012fc:	2801      	cmp	r0, #1
  4012fe:	d13d      	bne.n	40137c <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401300:	6028      	str	r0, [r5, #0]
	__asm volatile
  401302:	f387 8811 	msr	BASEPRI, r7
}
  401306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  40130a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40130e:	b672      	cpsid	i
  401310:	f383 8811 	msr	BASEPRI, r3
  401314:	f3bf 8f6f 	isb	sy
  401318:	f3bf 8f4f 	dsb	sy
  40131c:	b662      	cpsie	i
  40131e:	e7fe      	b.n	40131e <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401320:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401322:	2800      	cmp	r0, #0
  401324:	d0bf      	beq.n	4012a6 <xQueueGenericSendFromISR+0xe>
  401326:	f04f 0380 	mov.w	r3, #128	; 0x80
  40132a:	b672      	cpsid	i
  40132c:	f383 8811 	msr	BASEPRI, r3
  401330:	f3bf 8f6f 	isb	sy
  401334:	f3bf 8f4f 	dsb	sy
  401338:	b662      	cpsie	i
  40133a:	e7fe      	b.n	40133a <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40133c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  40133e:	2801      	cmp	r0, #1
  401340:	d0b3      	beq.n	4012aa <xQueueGenericSendFromISR+0x12>
  401342:	f04f 0380 	mov.w	r3, #128	; 0x80
  401346:	b672      	cpsid	i
  401348:	f383 8811 	msr	BASEPRI, r3
  40134c:	f3bf 8f6f 	isb	sy
  401350:	f3bf 8f4f 	dsb	sy
  401354:	b662      	cpsie	i
  401356:	e7fe      	b.n	401356 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401358:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40135a:	b18b      	cbz	r3, 401380 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40135c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401360:	4b0c      	ldr	r3, [pc, #48]	; (401394 <xQueueGenericSendFromISR+0xfc>)
  401362:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401364:	b175      	cbz	r5, 401384 <xQueueGenericSendFromISR+0xec>
  401366:	b168      	cbz	r0, 401384 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401368:	2001      	movs	r0, #1
  40136a:	6028      	str	r0, [r5, #0]
  40136c:	e7c9      	b.n	401302 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  40136e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401370:	3301      	adds	r3, #1
  401372:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401374:	2001      	movs	r0, #1
  401376:	e7c4      	b.n	401302 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401378:	2000      	movs	r0, #0
  40137a:	e7c2      	b.n	401302 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  40137c:	2001      	movs	r0, #1
  40137e:	e7c0      	b.n	401302 <xQueueGenericSendFromISR+0x6a>
  401380:	2001      	movs	r0, #1
  401382:	e7be      	b.n	401302 <xQueueGenericSendFromISR+0x6a>
  401384:	2001      	movs	r0, #1
  401386:	e7bc      	b.n	401302 <xQueueGenericSendFromISR+0x6a>
  401388:	00400c79 	.word	0x00400c79
  40138c:	00400d69 	.word	0x00400d69
  401390:	00400df1 	.word	0x00400df1
  401394:	00401f9d 	.word	0x00401f9d

00401398 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401398:	b170      	cbz	r0, 4013b8 <xQueueGiveFromISR+0x20>
{
  40139a:	b570      	push	{r4, r5, r6, lr}
  40139c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  40139e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4013a0:	b1ab      	cbz	r3, 4013ce <xQueueGiveFromISR+0x36>
  4013a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013a6:	b672      	cpsid	i
  4013a8:	f383 8811 	msr	BASEPRI, r3
  4013ac:	f3bf 8f6f 	isb	sy
  4013b0:	f3bf 8f4f 	dsb	sy
  4013b4:	b662      	cpsie	i
  4013b6:	e7fe      	b.n	4013b6 <xQueueGiveFromISR+0x1e>
  4013b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013bc:	b672      	cpsid	i
  4013be:	f383 8811 	msr	BASEPRI, r3
  4013c2:	f3bf 8f6f 	isb	sy
  4013c6:	f3bf 8f4f 	dsb	sy
  4013ca:	b662      	cpsie	i
  4013cc:	e7fe      	b.n	4013cc <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4013ce:	6803      	ldr	r3, [r0, #0]
  4013d0:	b333      	cbz	r3, 401420 <xQueueGiveFromISR+0x88>
  4013d2:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4013d4:	4b25      	ldr	r3, [pc, #148]	; (40146c <xQueueGiveFromISR+0xd4>)
  4013d6:	4798      	blx	r3
	__asm volatile
  4013d8:	f3ef 8611 	mrs	r6, BASEPRI
  4013dc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013e0:	b672      	cpsid	i
  4013e2:	f383 8811 	msr	BASEPRI, r3
  4013e6:	f3bf 8f6f 	isb	sy
  4013ea:	f3bf 8f4f 	dsb	sy
  4013ee:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4013f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4013f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4013f4:	429a      	cmp	r2, r3
  4013f6:	d231      	bcs.n	40145c <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  4013f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4013fa:	3301      	adds	r3, #1
  4013fc:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  4013fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401400:	f1b3 3fff 	cmp.w	r3, #4294967295
  401404:	d125      	bne.n	401452 <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  401406:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401408:	b1c3      	cbz	r3, 40143c <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40140a:	2100      	movs	r1, #0
  40140c:	4620      	mov	r0, r4
  40140e:	4b18      	ldr	r3, [pc, #96]	; (401470 <xQueueGiveFromISR+0xd8>)
  401410:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401412:	b32d      	cbz	r5, 401460 <xQueueGiveFromISR+0xc8>
  401414:	2801      	cmp	r0, #1
  401416:	d123      	bne.n	401460 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401418:	6028      	str	r0, [r5, #0]
	__asm volatile
  40141a:	f386 8811 	msr	BASEPRI, r6
}
  40141e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401420:	6843      	ldr	r3, [r0, #4]
  401422:	2b00      	cmp	r3, #0
  401424:	d0d5      	beq.n	4013d2 <xQueueGiveFromISR+0x3a>
	__asm volatile
  401426:	f04f 0380 	mov.w	r3, #128	; 0x80
  40142a:	b672      	cpsid	i
  40142c:	f383 8811 	msr	BASEPRI, r3
  401430:	f3bf 8f6f 	isb	sy
  401434:	f3bf 8f4f 	dsb	sy
  401438:	b662      	cpsie	i
  40143a:	e7fe      	b.n	40143a <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40143c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40143e:	b18b      	cbz	r3, 401464 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401440:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401444:	4b0b      	ldr	r3, [pc, #44]	; (401474 <xQueueGiveFromISR+0xdc>)
  401446:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401448:	b175      	cbz	r5, 401468 <xQueueGiveFromISR+0xd0>
  40144a:	b168      	cbz	r0, 401468 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40144c:	2001      	movs	r0, #1
  40144e:	6028      	str	r0, [r5, #0]
  401450:	e7e3      	b.n	40141a <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  401452:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401454:	3301      	adds	r3, #1
  401456:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401458:	2001      	movs	r0, #1
  40145a:	e7de      	b.n	40141a <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  40145c:	2000      	movs	r0, #0
  40145e:	e7dc      	b.n	40141a <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  401460:	2001      	movs	r0, #1
  401462:	e7da      	b.n	40141a <xQueueGiveFromISR+0x82>
  401464:	2001      	movs	r0, #1
  401466:	e7d8      	b.n	40141a <xQueueGiveFromISR+0x82>
  401468:	2001      	movs	r0, #1
  40146a:	e7d6      	b.n	40141a <xQueueGiveFromISR+0x82>
  40146c:	00400c79 	.word	0x00400c79
  401470:	00400df1 	.word	0x00400df1
  401474:	00401f9d 	.word	0x00401f9d

00401478 <xQueueGenericReceive>:
{
  401478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40147c:	b084      	sub	sp, #16
  40147e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401480:	b198      	cbz	r0, 4014aa <xQueueGenericReceive+0x32>
  401482:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401484:	b1e1      	cbz	r1, 4014c0 <xQueueGenericReceive+0x48>
  401486:	4698      	mov	r8, r3
  401488:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40148a:	4b61      	ldr	r3, [pc, #388]	; (401610 <xQueueGenericReceive+0x198>)
  40148c:	4798      	blx	r3
  40148e:	bb28      	cbnz	r0, 4014dc <xQueueGenericReceive+0x64>
  401490:	9b01      	ldr	r3, [sp, #4]
  401492:	b353      	cbz	r3, 4014ea <xQueueGenericReceive+0x72>
  401494:	f04f 0380 	mov.w	r3, #128	; 0x80
  401498:	b672      	cpsid	i
  40149a:	f383 8811 	msr	BASEPRI, r3
  40149e:	f3bf 8f6f 	isb	sy
  4014a2:	f3bf 8f4f 	dsb	sy
  4014a6:	b662      	cpsie	i
  4014a8:	e7fe      	b.n	4014a8 <xQueueGenericReceive+0x30>
  4014aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014ae:	b672      	cpsid	i
  4014b0:	f383 8811 	msr	BASEPRI, r3
  4014b4:	f3bf 8f6f 	isb	sy
  4014b8:	f3bf 8f4f 	dsb	sy
  4014bc:	b662      	cpsie	i
  4014be:	e7fe      	b.n	4014be <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4014c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014c2:	2a00      	cmp	r2, #0
  4014c4:	d0df      	beq.n	401486 <xQueueGenericReceive+0xe>
  4014c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014ca:	b672      	cpsid	i
  4014cc:	f383 8811 	msr	BASEPRI, r3
  4014d0:	f3bf 8f6f 	isb	sy
  4014d4:	f3bf 8f4f 	dsb	sy
  4014d8:	b662      	cpsie	i
  4014da:	e7fe      	b.n	4014da <xQueueGenericReceive+0x62>
  4014dc:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  4014de:	4d4d      	ldr	r5, [pc, #308]	; (401614 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  4014e0:	f8df a160 	ldr.w	sl, [pc, #352]	; 401644 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  4014e4:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401624 <xQueueGenericReceive+0x1ac>
  4014e8:	e04b      	b.n	401582 <xQueueGenericReceive+0x10a>
  4014ea:	2600      	movs	r6, #0
  4014ec:	e7f7      	b.n	4014de <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4014ee:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4014f0:	4639      	mov	r1, r7
  4014f2:	4620      	mov	r0, r4
  4014f4:	4b48      	ldr	r3, [pc, #288]	; (401618 <xQueueGenericReceive+0x1a0>)
  4014f6:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4014f8:	f1b8 0f00 	cmp.w	r8, #0
  4014fc:	d11d      	bne.n	40153a <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  4014fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401500:	3b01      	subs	r3, #1
  401502:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401504:	6823      	ldr	r3, [r4, #0]
  401506:	b913      	cbnz	r3, 40150e <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401508:	4b44      	ldr	r3, [pc, #272]	; (40161c <xQueueGenericReceive+0x1a4>)
  40150a:	4798      	blx	r3
  40150c:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40150e:	6923      	ldr	r3, [r4, #16]
  401510:	b16b      	cbz	r3, 40152e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401512:	f104 0010 	add.w	r0, r4, #16
  401516:	4b42      	ldr	r3, [pc, #264]	; (401620 <xQueueGenericReceive+0x1a8>)
  401518:	4798      	blx	r3
  40151a:	2801      	cmp	r0, #1
  40151c:	d107      	bne.n	40152e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  40151e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401522:	4b40      	ldr	r3, [pc, #256]	; (401624 <xQueueGenericReceive+0x1ac>)
  401524:	601a      	str	r2, [r3, #0]
  401526:	f3bf 8f4f 	dsb	sy
  40152a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40152e:	4b3e      	ldr	r3, [pc, #248]	; (401628 <xQueueGenericReceive+0x1b0>)
  401530:	4798      	blx	r3
				return pdPASS;
  401532:	2001      	movs	r0, #1
}
  401534:	b004      	add	sp, #16
  401536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40153a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40153c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40153e:	2b00      	cmp	r3, #0
  401540:	d0f5      	beq.n	40152e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401542:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401546:	4b36      	ldr	r3, [pc, #216]	; (401620 <xQueueGenericReceive+0x1a8>)
  401548:	4798      	blx	r3
  40154a:	2800      	cmp	r0, #0
  40154c:	d0ef      	beq.n	40152e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  40154e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401552:	4b34      	ldr	r3, [pc, #208]	; (401624 <xQueueGenericReceive+0x1ac>)
  401554:	601a      	str	r2, [r3, #0]
  401556:	f3bf 8f4f 	dsb	sy
  40155a:	f3bf 8f6f 	isb	sy
  40155e:	e7e6      	b.n	40152e <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401560:	4b31      	ldr	r3, [pc, #196]	; (401628 <xQueueGenericReceive+0x1b0>)
  401562:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401564:	2000      	movs	r0, #0
  401566:	e7e5      	b.n	401534 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401568:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40156a:	6860      	ldr	r0, [r4, #4]
  40156c:	4b2f      	ldr	r3, [pc, #188]	; (40162c <xQueueGenericReceive+0x1b4>)
  40156e:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401570:	4b2d      	ldr	r3, [pc, #180]	; (401628 <xQueueGenericReceive+0x1b0>)
  401572:	4798      	blx	r3
  401574:	e030      	b.n	4015d8 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401576:	4620      	mov	r0, r4
  401578:	4b2d      	ldr	r3, [pc, #180]	; (401630 <xQueueGenericReceive+0x1b8>)
  40157a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40157c:	4b2d      	ldr	r3, [pc, #180]	; (401634 <xQueueGenericReceive+0x1bc>)
  40157e:	4798      	blx	r3
  401580:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401582:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401584:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401586:	2b00      	cmp	r3, #0
  401588:	d1b1      	bne.n	4014ee <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  40158a:	9b01      	ldr	r3, [sp, #4]
  40158c:	2b00      	cmp	r3, #0
  40158e:	d0e7      	beq.n	401560 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401590:	b90e      	cbnz	r6, 401596 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401592:	a802      	add	r0, sp, #8
  401594:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401596:	4b24      	ldr	r3, [pc, #144]	; (401628 <xQueueGenericReceive+0x1b0>)
  401598:	4798      	blx	r3
		vTaskSuspendAll();
  40159a:	4b27      	ldr	r3, [pc, #156]	; (401638 <xQueueGenericReceive+0x1c0>)
  40159c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40159e:	47a8      	blx	r5
  4015a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4015a2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015a6:	d101      	bne.n	4015ac <xQueueGenericReceive+0x134>
  4015a8:	2300      	movs	r3, #0
  4015aa:	6463      	str	r3, [r4, #68]	; 0x44
  4015ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015ae:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015b2:	d101      	bne.n	4015b8 <xQueueGenericReceive+0x140>
  4015b4:	2300      	movs	r3, #0
  4015b6:	64a3      	str	r3, [r4, #72]	; 0x48
  4015b8:	4b1b      	ldr	r3, [pc, #108]	; (401628 <xQueueGenericReceive+0x1b0>)
  4015ba:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4015bc:	a901      	add	r1, sp, #4
  4015be:	a802      	add	r0, sp, #8
  4015c0:	4b1e      	ldr	r3, [pc, #120]	; (40163c <xQueueGenericReceive+0x1c4>)
  4015c2:	4798      	blx	r3
  4015c4:	b9e8      	cbnz	r0, 401602 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  4015c6:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4015c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  4015ca:	4b17      	ldr	r3, [pc, #92]	; (401628 <xQueueGenericReceive+0x1b0>)
  4015cc:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4015ce:	2e00      	cmp	r6, #0
  4015d0:	d1d1      	bne.n	401576 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4015d2:	6823      	ldr	r3, [r4, #0]
  4015d4:	2b00      	cmp	r3, #0
  4015d6:	d0c7      	beq.n	401568 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4015d8:	9901      	ldr	r1, [sp, #4]
  4015da:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015de:	4b18      	ldr	r3, [pc, #96]	; (401640 <xQueueGenericReceive+0x1c8>)
  4015e0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4015e2:	4620      	mov	r0, r4
  4015e4:	4b12      	ldr	r3, [pc, #72]	; (401630 <xQueueGenericReceive+0x1b8>)
  4015e6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4015e8:	4b12      	ldr	r3, [pc, #72]	; (401634 <xQueueGenericReceive+0x1bc>)
  4015ea:	4798      	blx	r3
  4015ec:	2800      	cmp	r0, #0
  4015ee:	d1c7      	bne.n	401580 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  4015f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4015f4:	f8c9 3000 	str.w	r3, [r9]
  4015f8:	f3bf 8f4f 	dsb	sy
  4015fc:	f3bf 8f6f 	isb	sy
  401600:	e7be      	b.n	401580 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401602:	4620      	mov	r0, r4
  401604:	4b0a      	ldr	r3, [pc, #40]	; (401630 <xQueueGenericReceive+0x1b8>)
  401606:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401608:	4b0a      	ldr	r3, [pc, #40]	; (401634 <xQueueGenericReceive+0x1bc>)
  40160a:	4798      	blx	r3
			return errQUEUE_EMPTY;
  40160c:	2000      	movs	r0, #0
  40160e:	e791      	b.n	401534 <xQueueGenericReceive+0xbc>
  401610:	00402105 	.word	0x00402105
  401614:	00400a81 	.word	0x00400a81
  401618:	00400e79 	.word	0x00400e79
  40161c:	00402285 	.word	0x00402285
  401620:	00401f9d 	.word	0x00401f9d
  401624:	e000ed04 	.word	0xe000ed04
  401628:	00400acd 	.word	0x00400acd
  40162c:	00402125 	.word	0x00402125
  401630:	00400ea1 	.word	0x00400ea1
  401634:	00401b81 	.word	0x00401b81
  401638:	00401a19 	.word	0x00401a19
  40163c:	00402065 	.word	0x00402065
  401640:	00401e99 	.word	0x00401e99
  401644:	00402035 	.word	0x00402035

00401648 <vQueueAddToRegistry>:
	{
  401648:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  40164a:	4b0b      	ldr	r3, [pc, #44]	; (401678 <vQueueAddToRegistry+0x30>)
  40164c:	681b      	ldr	r3, [r3, #0]
  40164e:	b153      	cbz	r3, 401666 <vQueueAddToRegistry+0x1e>
  401650:	2301      	movs	r3, #1
  401652:	4c09      	ldr	r4, [pc, #36]	; (401678 <vQueueAddToRegistry+0x30>)
  401654:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401658:	b132      	cbz	r2, 401668 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40165a:	3301      	adds	r3, #1
  40165c:	2b08      	cmp	r3, #8
  40165e:	d1f9      	bne.n	401654 <vQueueAddToRegistry+0xc>
	}
  401660:	f85d 4b04 	ldr.w	r4, [sp], #4
  401664:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401666:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401668:	4a03      	ldr	r2, [pc, #12]	; (401678 <vQueueAddToRegistry+0x30>)
  40166a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40166e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401672:	6058      	str	r0, [r3, #4]
				break;
  401674:	e7f4      	b.n	401660 <vQueueAddToRegistry+0x18>
  401676:	bf00      	nop
  401678:	2040cfc0 	.word	0x2040cfc0

0040167c <vQueueWaitForMessageRestricted>:
	{
  40167c:	b570      	push	{r4, r5, r6, lr}
  40167e:	4604      	mov	r4, r0
  401680:	460d      	mov	r5, r1
  401682:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401684:	4b0f      	ldr	r3, [pc, #60]	; (4016c4 <vQueueWaitForMessageRestricted+0x48>)
  401686:	4798      	blx	r3
  401688:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40168a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40168e:	d00b      	beq.n	4016a8 <vQueueWaitForMessageRestricted+0x2c>
  401690:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401692:	f1b3 3fff 	cmp.w	r3, #4294967295
  401696:	d00a      	beq.n	4016ae <vQueueWaitForMessageRestricted+0x32>
  401698:	4b0b      	ldr	r3, [pc, #44]	; (4016c8 <vQueueWaitForMessageRestricted+0x4c>)
  40169a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  40169c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40169e:	b14b      	cbz	r3, 4016b4 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  4016a0:	4620      	mov	r0, r4
  4016a2:	4b0a      	ldr	r3, [pc, #40]	; (4016cc <vQueueWaitForMessageRestricted+0x50>)
  4016a4:	4798      	blx	r3
  4016a6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  4016a8:	2300      	movs	r3, #0
  4016aa:	6463      	str	r3, [r4, #68]	; 0x44
  4016ac:	e7f0      	b.n	401690 <vQueueWaitForMessageRestricted+0x14>
  4016ae:	2300      	movs	r3, #0
  4016b0:	64a3      	str	r3, [r4, #72]	; 0x48
  4016b2:	e7f1      	b.n	401698 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4016b4:	4632      	mov	r2, r6
  4016b6:	4629      	mov	r1, r5
  4016b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4016bc:	4b04      	ldr	r3, [pc, #16]	; (4016d0 <vQueueWaitForMessageRestricted+0x54>)
  4016be:	4798      	blx	r3
  4016c0:	e7ee      	b.n	4016a0 <vQueueWaitForMessageRestricted+0x24>
  4016c2:	bf00      	nop
  4016c4:	00400a81 	.word	0x00400a81
  4016c8:	00400acd 	.word	0x00400acd
  4016cc:	00400ea1 	.word	0x00400ea1
  4016d0:	00401f1d 	.word	0x00401f1d

004016d4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4016d4:	4b08      	ldr	r3, [pc, #32]	; (4016f8 <prvResetNextTaskUnblockTime+0x24>)
  4016d6:	681b      	ldr	r3, [r3, #0]
  4016d8:	681b      	ldr	r3, [r3, #0]
  4016da:	b13b      	cbz	r3, 4016ec <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4016dc:	4b06      	ldr	r3, [pc, #24]	; (4016f8 <prvResetNextTaskUnblockTime+0x24>)
  4016de:	681b      	ldr	r3, [r3, #0]
  4016e0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4016e2:	68db      	ldr	r3, [r3, #12]
  4016e4:	685a      	ldr	r2, [r3, #4]
  4016e6:	4b05      	ldr	r3, [pc, #20]	; (4016fc <prvResetNextTaskUnblockTime+0x28>)
  4016e8:	601a      	str	r2, [r3, #0]
  4016ea:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  4016ec:	f04f 32ff 	mov.w	r2, #4294967295
  4016f0:	4b02      	ldr	r3, [pc, #8]	; (4016fc <prvResetNextTaskUnblockTime+0x28>)
  4016f2:	601a      	str	r2, [r3, #0]
  4016f4:	4770      	bx	lr
  4016f6:	bf00      	nop
  4016f8:	2040c218 	.word	0x2040c218
  4016fc:	2040c2c4 	.word	0x2040c2c4

00401700 <prvAddCurrentTaskToDelayedList>:
{
  401700:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401702:	4b0f      	ldr	r3, [pc, #60]	; (401740 <prvAddCurrentTaskToDelayedList+0x40>)
  401704:	681b      	ldr	r3, [r3, #0]
  401706:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401708:	4b0e      	ldr	r3, [pc, #56]	; (401744 <prvAddCurrentTaskToDelayedList+0x44>)
  40170a:	681b      	ldr	r3, [r3, #0]
  40170c:	4298      	cmp	r0, r3
  40170e:	d30e      	bcc.n	40172e <prvAddCurrentTaskToDelayedList+0x2e>
  401710:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401712:	4b0d      	ldr	r3, [pc, #52]	; (401748 <prvAddCurrentTaskToDelayedList+0x48>)
  401714:	6818      	ldr	r0, [r3, #0]
  401716:	4b0a      	ldr	r3, [pc, #40]	; (401740 <prvAddCurrentTaskToDelayedList+0x40>)
  401718:	6819      	ldr	r1, [r3, #0]
  40171a:	3104      	adds	r1, #4
  40171c:	4b0b      	ldr	r3, [pc, #44]	; (40174c <prvAddCurrentTaskToDelayedList+0x4c>)
  40171e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401720:	4b0b      	ldr	r3, [pc, #44]	; (401750 <prvAddCurrentTaskToDelayedList+0x50>)
  401722:	681b      	ldr	r3, [r3, #0]
  401724:	429c      	cmp	r4, r3
  401726:	d201      	bcs.n	40172c <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401728:	4b09      	ldr	r3, [pc, #36]	; (401750 <prvAddCurrentTaskToDelayedList+0x50>)
  40172a:	601c      	str	r4, [r3, #0]
  40172c:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40172e:	4b09      	ldr	r3, [pc, #36]	; (401754 <prvAddCurrentTaskToDelayedList+0x54>)
  401730:	6818      	ldr	r0, [r3, #0]
  401732:	4b03      	ldr	r3, [pc, #12]	; (401740 <prvAddCurrentTaskToDelayedList+0x40>)
  401734:	6819      	ldr	r1, [r3, #0]
  401736:	3104      	adds	r1, #4
  401738:	4b04      	ldr	r3, [pc, #16]	; (40174c <prvAddCurrentTaskToDelayedList+0x4c>)
  40173a:	4798      	blx	r3
  40173c:	bd10      	pop	{r4, pc}
  40173e:	bf00      	nop
  401740:	2040c214 	.word	0x2040c214
  401744:	2040c30c 	.word	0x2040c30c
  401748:	2040c218 	.word	0x2040c218
  40174c:	00400969 	.word	0x00400969
  401750:	2040c2c4 	.word	0x2040c2c4
  401754:	2040c21c 	.word	0x2040c21c

00401758 <xTaskGenericCreate>:
{
  401758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40175c:	b083      	sub	sp, #12
  40175e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401760:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401764:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401766:	b160      	cbz	r0, 401782 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401768:	2d04      	cmp	r5, #4
  40176a:	d915      	bls.n	401798 <xTaskGenericCreate+0x40>
  40176c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401770:	b672      	cpsid	i
  401772:	f383 8811 	msr	BASEPRI, r3
  401776:	f3bf 8f6f 	isb	sy
  40177a:	f3bf 8f4f 	dsb	sy
  40177e:	b662      	cpsie	i
  401780:	e7fe      	b.n	401780 <xTaskGenericCreate+0x28>
  401782:	f04f 0380 	mov.w	r3, #128	; 0x80
  401786:	b672      	cpsid	i
  401788:	f383 8811 	msr	BASEPRI, r3
  40178c:	f3bf 8f6f 	isb	sy
  401790:	f3bf 8f4f 	dsb	sy
  401794:	b662      	cpsie	i
  401796:	e7fe      	b.n	401796 <xTaskGenericCreate+0x3e>
  401798:	9001      	str	r0, [sp, #4]
  40179a:	4698      	mov	r8, r3
  40179c:	4691      	mov	r9, r2
  40179e:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4017a0:	b936      	cbnz	r6, 4017b0 <xTaskGenericCreate+0x58>
  4017a2:	0090      	lsls	r0, r2, #2
  4017a4:	4b62      	ldr	r3, [pc, #392]	; (401930 <xTaskGenericCreate+0x1d8>)
  4017a6:	4798      	blx	r3
		if( pxStack != NULL )
  4017a8:	4606      	mov	r6, r0
  4017aa:	2800      	cmp	r0, #0
  4017ac:	f000 809e 	beq.w	4018ec <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  4017b0:	2058      	movs	r0, #88	; 0x58
  4017b2:	4b5f      	ldr	r3, [pc, #380]	; (401930 <xTaskGenericCreate+0x1d8>)
  4017b4:	4798      	blx	r3
			if( pxNewTCB != NULL )
  4017b6:	4604      	mov	r4, r0
  4017b8:	2800      	cmp	r0, #0
  4017ba:	f000 8094 	beq.w	4018e6 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  4017be:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4017c0:	ea4f 0289 	mov.w	r2, r9, lsl #2
  4017c4:	21a5      	movs	r1, #165	; 0xa5
  4017c6:	4630      	mov	r0, r6
  4017c8:	4b5a      	ldr	r3, [pc, #360]	; (401934 <xTaskGenericCreate+0x1dc>)
  4017ca:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4017cc:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  4017d0:	444e      	add	r6, r9
  4017d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4017d4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4017d8:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4017dc:	783b      	ldrb	r3, [r7, #0]
  4017de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  4017e2:	783b      	ldrb	r3, [r7, #0]
  4017e4:	2b00      	cmp	r3, #0
  4017e6:	f040 8084 	bne.w	4018f2 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4017ea:	2700      	movs	r7, #0
  4017ec:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  4017f0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  4017f2:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4017f4:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4017f6:	f104 0904 	add.w	r9, r4, #4
  4017fa:	4648      	mov	r0, r9
  4017fc:	f8df b184 	ldr.w	fp, [pc, #388]	; 401984 <xTaskGenericCreate+0x22c>
  401800:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401802:	f104 0018 	add.w	r0, r4, #24
  401806:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401808:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40180a:	f1c5 0305 	rsb	r3, r5, #5
  40180e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401810:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401812:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401814:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401818:	4642      	mov	r2, r8
  40181a:	9901      	ldr	r1, [sp, #4]
  40181c:	4630      	mov	r0, r6
  40181e:	4b46      	ldr	r3, [pc, #280]	; (401938 <xTaskGenericCreate+0x1e0>)
  401820:	4798      	blx	r3
  401822:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401824:	f1ba 0f00 	cmp.w	sl, #0
  401828:	d001      	beq.n	40182e <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40182a:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  40182e:	4b43      	ldr	r3, [pc, #268]	; (40193c <xTaskGenericCreate+0x1e4>)
  401830:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401832:	4a43      	ldr	r2, [pc, #268]	; (401940 <xTaskGenericCreate+0x1e8>)
  401834:	6813      	ldr	r3, [r2, #0]
  401836:	3301      	adds	r3, #1
  401838:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  40183a:	4b42      	ldr	r3, [pc, #264]	; (401944 <xTaskGenericCreate+0x1ec>)
  40183c:	681b      	ldr	r3, [r3, #0]
  40183e:	2b00      	cmp	r3, #0
  401840:	d166      	bne.n	401910 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401842:	4b40      	ldr	r3, [pc, #256]	; (401944 <xTaskGenericCreate+0x1ec>)
  401844:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401846:	6813      	ldr	r3, [r2, #0]
  401848:	2b01      	cmp	r3, #1
  40184a:	d121      	bne.n	401890 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  40184c:	4f3e      	ldr	r7, [pc, #248]	; (401948 <xTaskGenericCreate+0x1f0>)
  40184e:	4638      	mov	r0, r7
  401850:	4e3e      	ldr	r6, [pc, #248]	; (40194c <xTaskGenericCreate+0x1f4>)
  401852:	47b0      	blx	r6
  401854:	f107 0014 	add.w	r0, r7, #20
  401858:	47b0      	blx	r6
  40185a:	f107 0028 	add.w	r0, r7, #40	; 0x28
  40185e:	47b0      	blx	r6
  401860:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401864:	47b0      	blx	r6
  401866:	f107 0050 	add.w	r0, r7, #80	; 0x50
  40186a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  40186c:	f8df 8118 	ldr.w	r8, [pc, #280]	; 401988 <xTaskGenericCreate+0x230>
  401870:	4640      	mov	r0, r8
  401872:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401874:	4f36      	ldr	r7, [pc, #216]	; (401950 <xTaskGenericCreate+0x1f8>)
  401876:	4638      	mov	r0, r7
  401878:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  40187a:	4836      	ldr	r0, [pc, #216]	; (401954 <xTaskGenericCreate+0x1fc>)
  40187c:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  40187e:	4836      	ldr	r0, [pc, #216]	; (401958 <xTaskGenericCreate+0x200>)
  401880:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401882:	4836      	ldr	r0, [pc, #216]	; (40195c <xTaskGenericCreate+0x204>)
  401884:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401886:	4b36      	ldr	r3, [pc, #216]	; (401960 <xTaskGenericCreate+0x208>)
  401888:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40188c:	4b35      	ldr	r3, [pc, #212]	; (401964 <xTaskGenericCreate+0x20c>)
  40188e:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401890:	4a35      	ldr	r2, [pc, #212]	; (401968 <xTaskGenericCreate+0x210>)
  401892:	6813      	ldr	r3, [r2, #0]
  401894:	3301      	adds	r3, #1
  401896:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401898:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40189a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40189c:	4a33      	ldr	r2, [pc, #204]	; (40196c <xTaskGenericCreate+0x214>)
  40189e:	6811      	ldr	r1, [r2, #0]
  4018a0:	2301      	movs	r3, #1
  4018a2:	4083      	lsls	r3, r0
  4018a4:	430b      	orrs	r3, r1
  4018a6:	6013      	str	r3, [r2, #0]
  4018a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4018ac:	4649      	mov	r1, r9
  4018ae:	4b26      	ldr	r3, [pc, #152]	; (401948 <xTaskGenericCreate+0x1f0>)
  4018b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4018b4:	4b2e      	ldr	r3, [pc, #184]	; (401970 <xTaskGenericCreate+0x218>)
  4018b6:	4798      	blx	r3
		taskEXIT_CRITICAL();
  4018b8:	4b2e      	ldr	r3, [pc, #184]	; (401974 <xTaskGenericCreate+0x21c>)
  4018ba:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  4018bc:	4b2e      	ldr	r3, [pc, #184]	; (401978 <xTaskGenericCreate+0x220>)
  4018be:	681b      	ldr	r3, [r3, #0]
  4018c0:	2b00      	cmp	r3, #0
  4018c2:	d031      	beq.n	401928 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  4018c4:	4b1f      	ldr	r3, [pc, #124]	; (401944 <xTaskGenericCreate+0x1ec>)
  4018c6:	681b      	ldr	r3, [r3, #0]
  4018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4018ca:	429d      	cmp	r5, r3
  4018cc:	d92e      	bls.n	40192c <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  4018ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018d2:	4b2a      	ldr	r3, [pc, #168]	; (40197c <xTaskGenericCreate+0x224>)
  4018d4:	601a      	str	r2, [r3, #0]
  4018d6:	f3bf 8f4f 	dsb	sy
  4018da:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  4018de:	2001      	movs	r0, #1
}
  4018e0:	b003      	add	sp, #12
  4018e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  4018e6:	4630      	mov	r0, r6
  4018e8:	4b25      	ldr	r3, [pc, #148]	; (401980 <xTaskGenericCreate+0x228>)
  4018ea:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4018ec:	f04f 30ff 	mov.w	r0, #4294967295
  4018f0:	e7f6      	b.n	4018e0 <xTaskGenericCreate+0x188>
  4018f2:	463b      	mov	r3, r7
  4018f4:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4018f8:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4018fa:	7859      	ldrb	r1, [r3, #1]
  4018fc:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401900:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401904:	2900      	cmp	r1, #0
  401906:	f43f af70 	beq.w	4017ea <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40190a:	42bb      	cmp	r3, r7
  40190c:	d1f5      	bne.n	4018fa <xTaskGenericCreate+0x1a2>
  40190e:	e76c      	b.n	4017ea <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401910:	4b19      	ldr	r3, [pc, #100]	; (401978 <xTaskGenericCreate+0x220>)
  401912:	681b      	ldr	r3, [r3, #0]
  401914:	2b00      	cmp	r3, #0
  401916:	d1bb      	bne.n	401890 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401918:	4b0a      	ldr	r3, [pc, #40]	; (401944 <xTaskGenericCreate+0x1ec>)
  40191a:	681b      	ldr	r3, [r3, #0]
  40191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40191e:	429d      	cmp	r5, r3
  401920:	d3b6      	bcc.n	401890 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401922:	4b08      	ldr	r3, [pc, #32]	; (401944 <xTaskGenericCreate+0x1ec>)
  401924:	601c      	str	r4, [r3, #0]
  401926:	e7b3      	b.n	401890 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401928:	2001      	movs	r0, #1
  40192a:	e7d9      	b.n	4018e0 <xTaskGenericCreate+0x188>
  40192c:	2001      	movs	r0, #1
	return xReturn;
  40192e:	e7d7      	b.n	4018e0 <xTaskGenericCreate+0x188>
  401930:	00400cdd 	.word	0x00400cdd
  401934:	00406df9 	.word	0x00406df9
  401938:	00400a35 	.word	0x00400a35
  40193c:	00400a81 	.word	0x00400a81
  401940:	2040c284 	.word	0x2040c284
  401944:	2040c214 	.word	0x2040c214
  401948:	2040c220 	.word	0x2040c220
  40194c:	00400935 	.word	0x00400935
  401950:	2040c2b0 	.word	0x2040c2b0
  401954:	2040c2cc 	.word	0x2040c2cc
  401958:	2040c2f8 	.word	0x2040c2f8
  40195c:	2040c2e4 	.word	0x2040c2e4
  401960:	2040c218 	.word	0x2040c218
  401964:	2040c21c 	.word	0x2040c21c
  401968:	2040c290 	.word	0x2040c290
  40196c:	2040c298 	.word	0x2040c298
  401970:	00400951 	.word	0x00400951
  401974:	00400acd 	.word	0x00400acd
  401978:	2040c2e0 	.word	0x2040c2e0
  40197c:	e000ed04 	.word	0xe000ed04
  401980:	00400d4d 	.word	0x00400d4d
  401984:	0040094b 	.word	0x0040094b
  401988:	2040c29c 	.word	0x2040c29c

0040198c <vTaskStartScheduler>:
{
  40198c:	b510      	push	{r4, lr}
  40198e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401990:	2300      	movs	r3, #0
  401992:	9303      	str	r3, [sp, #12]
  401994:	9302      	str	r3, [sp, #8]
  401996:	9301      	str	r3, [sp, #4]
  401998:	9300      	str	r3, [sp, #0]
  40199a:	2282      	movs	r2, #130	; 0x82
  40199c:	4916      	ldr	r1, [pc, #88]	; (4019f8 <vTaskStartScheduler+0x6c>)
  40199e:	4817      	ldr	r0, [pc, #92]	; (4019fc <vTaskStartScheduler+0x70>)
  4019a0:	4c17      	ldr	r4, [pc, #92]	; (401a00 <vTaskStartScheduler+0x74>)
  4019a2:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4019a4:	2801      	cmp	r0, #1
  4019a6:	d00b      	beq.n	4019c0 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  4019a8:	bb20      	cbnz	r0, 4019f4 <vTaskStartScheduler+0x68>
  4019aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019ae:	b672      	cpsid	i
  4019b0:	f383 8811 	msr	BASEPRI, r3
  4019b4:	f3bf 8f6f 	isb	sy
  4019b8:	f3bf 8f4f 	dsb	sy
  4019bc:	b662      	cpsie	i
  4019be:	e7fe      	b.n	4019be <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  4019c0:	4b10      	ldr	r3, [pc, #64]	; (401a04 <vTaskStartScheduler+0x78>)
  4019c2:	4798      	blx	r3
	if( xReturn == pdPASS )
  4019c4:	2801      	cmp	r0, #1
  4019c6:	d1ef      	bne.n	4019a8 <vTaskStartScheduler+0x1c>
  4019c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019cc:	b672      	cpsid	i
  4019ce:	f383 8811 	msr	BASEPRI, r3
  4019d2:	f3bf 8f6f 	isb	sy
  4019d6:	f3bf 8f4f 	dsb	sy
  4019da:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4019dc:	f04f 32ff 	mov.w	r2, #4294967295
  4019e0:	4b09      	ldr	r3, [pc, #36]	; (401a08 <vTaskStartScheduler+0x7c>)
  4019e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4019e4:	2201      	movs	r2, #1
  4019e6:	4b09      	ldr	r3, [pc, #36]	; (401a0c <vTaskStartScheduler+0x80>)
  4019e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4019ea:	2200      	movs	r2, #0
  4019ec:	4b08      	ldr	r3, [pc, #32]	; (401a10 <vTaskStartScheduler+0x84>)
  4019ee:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4019f0:	4b08      	ldr	r3, [pc, #32]	; (401a14 <vTaskStartScheduler+0x88>)
  4019f2:	4798      	blx	r3
}
  4019f4:	b004      	add	sp, #16
  4019f6:	bd10      	pop	{r4, pc}
  4019f8:	0040d67c 	.word	0x0040d67c
  4019fc:	00401d31 	.word	0x00401d31
  401a00:	00401759 	.word	0x00401759
  401a04:	00402371 	.word	0x00402371
  401a08:	2040c2c4 	.word	0x2040c2c4
  401a0c:	2040c2e0 	.word	0x2040c2e0
  401a10:	2040c30c 	.word	0x2040c30c
  401a14:	00400bb5 	.word	0x00400bb5

00401a18 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401a18:	4a02      	ldr	r2, [pc, #8]	; (401a24 <vTaskSuspendAll+0xc>)
  401a1a:	6813      	ldr	r3, [r2, #0]
  401a1c:	3301      	adds	r3, #1
  401a1e:	6013      	str	r3, [r2, #0]
  401a20:	4770      	bx	lr
  401a22:	bf00      	nop
  401a24:	2040c28c 	.word	0x2040c28c

00401a28 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401a28:	4b01      	ldr	r3, [pc, #4]	; (401a30 <xTaskGetTickCount+0x8>)
  401a2a:	6818      	ldr	r0, [r3, #0]
}
  401a2c:	4770      	bx	lr
  401a2e:	bf00      	nop
  401a30:	2040c30c 	.word	0x2040c30c

00401a34 <xTaskIncrementTick>:
{
  401a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401a38:	4b42      	ldr	r3, [pc, #264]	; (401b44 <xTaskIncrementTick+0x110>)
  401a3a:	681b      	ldr	r3, [r3, #0]
  401a3c:	2b00      	cmp	r3, #0
  401a3e:	d178      	bne.n	401b32 <xTaskIncrementTick+0xfe>
		++xTickCount;
  401a40:	4b41      	ldr	r3, [pc, #260]	; (401b48 <xTaskIncrementTick+0x114>)
  401a42:	681a      	ldr	r2, [r3, #0]
  401a44:	3201      	adds	r2, #1
  401a46:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401a48:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401a4a:	b9d6      	cbnz	r6, 401a82 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  401a4c:	4b3f      	ldr	r3, [pc, #252]	; (401b4c <xTaskIncrementTick+0x118>)
  401a4e:	681b      	ldr	r3, [r3, #0]
  401a50:	681b      	ldr	r3, [r3, #0]
  401a52:	b153      	cbz	r3, 401a6a <xTaskIncrementTick+0x36>
  401a54:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a58:	b672      	cpsid	i
  401a5a:	f383 8811 	msr	BASEPRI, r3
  401a5e:	f3bf 8f6f 	isb	sy
  401a62:	f3bf 8f4f 	dsb	sy
  401a66:	b662      	cpsie	i
  401a68:	e7fe      	b.n	401a68 <xTaskIncrementTick+0x34>
  401a6a:	4a38      	ldr	r2, [pc, #224]	; (401b4c <xTaskIncrementTick+0x118>)
  401a6c:	6811      	ldr	r1, [r2, #0]
  401a6e:	4b38      	ldr	r3, [pc, #224]	; (401b50 <xTaskIncrementTick+0x11c>)
  401a70:	6818      	ldr	r0, [r3, #0]
  401a72:	6010      	str	r0, [r2, #0]
  401a74:	6019      	str	r1, [r3, #0]
  401a76:	4a37      	ldr	r2, [pc, #220]	; (401b54 <xTaskIncrementTick+0x120>)
  401a78:	6813      	ldr	r3, [r2, #0]
  401a7a:	3301      	adds	r3, #1
  401a7c:	6013      	str	r3, [r2, #0]
  401a7e:	4b36      	ldr	r3, [pc, #216]	; (401b58 <xTaskIncrementTick+0x124>)
  401a80:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  401a82:	4b36      	ldr	r3, [pc, #216]	; (401b5c <xTaskIncrementTick+0x128>)
  401a84:	681b      	ldr	r3, [r3, #0]
  401a86:	429e      	cmp	r6, r3
  401a88:	d218      	bcs.n	401abc <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  401a8a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401a8c:	4b34      	ldr	r3, [pc, #208]	; (401b60 <xTaskIncrementTick+0x12c>)
  401a8e:	681b      	ldr	r3, [r3, #0]
  401a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401a96:	4a33      	ldr	r2, [pc, #204]	; (401b64 <xTaskIncrementTick+0x130>)
  401a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401a9c:	2b02      	cmp	r3, #2
  401a9e:	bf28      	it	cs
  401aa0:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401aa2:	4b31      	ldr	r3, [pc, #196]	; (401b68 <xTaskIncrementTick+0x134>)
  401aa4:	681b      	ldr	r3, [r3, #0]
  401aa6:	b90b      	cbnz	r3, 401aac <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  401aa8:	4b30      	ldr	r3, [pc, #192]	; (401b6c <xTaskIncrementTick+0x138>)
  401aaa:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401aac:	4b30      	ldr	r3, [pc, #192]	; (401b70 <xTaskIncrementTick+0x13c>)
  401aae:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401ab0:	2b00      	cmp	r3, #0
}
  401ab2:	bf0c      	ite	eq
  401ab4:	4620      	moveq	r0, r4
  401ab6:	2001      	movne	r0, #1
  401ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401abc:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401abe:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401b4c <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401ac2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 401b7c <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  401ac6:	4f2b      	ldr	r7, [pc, #172]	; (401b74 <xTaskIncrementTick+0x140>)
  401ac8:	e01f      	b.n	401b0a <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  401aca:	f04f 32ff 	mov.w	r2, #4294967295
  401ace:	4b23      	ldr	r3, [pc, #140]	; (401b5c <xTaskIncrementTick+0x128>)
  401ad0:	601a      	str	r2, [r3, #0]
						break;
  401ad2:	e7db      	b.n	401a8c <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  401ad4:	4a21      	ldr	r2, [pc, #132]	; (401b5c <xTaskIncrementTick+0x128>)
  401ad6:	6013      	str	r3, [r2, #0]
							break;
  401ad8:	e7d8      	b.n	401a8c <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401ada:	f105 0018 	add.w	r0, r5, #24
  401ade:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  401ae0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401ae2:	683a      	ldr	r2, [r7, #0]
  401ae4:	2301      	movs	r3, #1
  401ae6:	4083      	lsls	r3, r0
  401ae8:	4313      	orrs	r3, r2
  401aea:	603b      	str	r3, [r7, #0]
  401aec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401af0:	4651      	mov	r1, sl
  401af2:	4b1c      	ldr	r3, [pc, #112]	; (401b64 <xTaskIncrementTick+0x130>)
  401af4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401af8:	4b1f      	ldr	r3, [pc, #124]	; (401b78 <xTaskIncrementTick+0x144>)
  401afa:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401afc:	4b18      	ldr	r3, [pc, #96]	; (401b60 <xTaskIncrementTick+0x12c>)
  401afe:	681b      	ldr	r3, [r3, #0]
  401b00:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401b04:	429a      	cmp	r2, r3
  401b06:	bf28      	it	cs
  401b08:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401b0a:	f8d9 3000 	ldr.w	r3, [r9]
  401b0e:	681b      	ldr	r3, [r3, #0]
  401b10:	2b00      	cmp	r3, #0
  401b12:	d0da      	beq.n	401aca <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401b14:	f8d9 3000 	ldr.w	r3, [r9]
  401b18:	68db      	ldr	r3, [r3, #12]
  401b1a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401b1c:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  401b1e:	429e      	cmp	r6, r3
  401b20:	d3d8      	bcc.n	401ad4 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b22:	f105 0a04 	add.w	sl, r5, #4
  401b26:	4650      	mov	r0, sl
  401b28:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401b2a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401b2c:	2b00      	cmp	r3, #0
  401b2e:	d1d4      	bne.n	401ada <xTaskIncrementTick+0xa6>
  401b30:	e7d6      	b.n	401ae0 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  401b32:	4a0d      	ldr	r2, [pc, #52]	; (401b68 <xTaskIncrementTick+0x134>)
  401b34:	6813      	ldr	r3, [r2, #0]
  401b36:	3301      	adds	r3, #1
  401b38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401b3a:	4b0c      	ldr	r3, [pc, #48]	; (401b6c <xTaskIncrementTick+0x138>)
  401b3c:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401b3e:	2400      	movs	r4, #0
  401b40:	e7b4      	b.n	401aac <xTaskIncrementTick+0x78>
  401b42:	bf00      	nop
  401b44:	2040c28c 	.word	0x2040c28c
  401b48:	2040c30c 	.word	0x2040c30c
  401b4c:	2040c218 	.word	0x2040c218
  401b50:	2040c21c 	.word	0x2040c21c
  401b54:	2040c2c8 	.word	0x2040c2c8
  401b58:	004016d5 	.word	0x004016d5
  401b5c:	2040c2c4 	.word	0x2040c2c4
  401b60:	2040c214 	.word	0x2040c214
  401b64:	2040c220 	.word	0x2040c220
  401b68:	2040c288 	.word	0x2040c288
  401b6c:	004067c9 	.word	0x004067c9
  401b70:	2040c310 	.word	0x2040c310
  401b74:	2040c298 	.word	0x2040c298
  401b78:	00400951 	.word	0x00400951
  401b7c:	0040099d 	.word	0x0040099d

00401b80 <xTaskResumeAll>:
{
  401b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  401b84:	4b38      	ldr	r3, [pc, #224]	; (401c68 <xTaskResumeAll+0xe8>)
  401b86:	681b      	ldr	r3, [r3, #0]
  401b88:	b953      	cbnz	r3, 401ba0 <xTaskResumeAll+0x20>
  401b8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b8e:	b672      	cpsid	i
  401b90:	f383 8811 	msr	BASEPRI, r3
  401b94:	f3bf 8f6f 	isb	sy
  401b98:	f3bf 8f4f 	dsb	sy
  401b9c:	b662      	cpsie	i
  401b9e:	e7fe      	b.n	401b9e <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  401ba0:	4b32      	ldr	r3, [pc, #200]	; (401c6c <xTaskResumeAll+0xec>)
  401ba2:	4798      	blx	r3
		--uxSchedulerSuspended;
  401ba4:	4b30      	ldr	r3, [pc, #192]	; (401c68 <xTaskResumeAll+0xe8>)
  401ba6:	681a      	ldr	r2, [r3, #0]
  401ba8:	3a01      	subs	r2, #1
  401baa:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401bac:	681b      	ldr	r3, [r3, #0]
  401bae:	2b00      	cmp	r3, #0
  401bb0:	d155      	bne.n	401c5e <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401bb2:	4b2f      	ldr	r3, [pc, #188]	; (401c70 <xTaskResumeAll+0xf0>)
  401bb4:	681b      	ldr	r3, [r3, #0]
  401bb6:	2b00      	cmp	r3, #0
  401bb8:	d132      	bne.n	401c20 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  401bba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401bbc:	4b2d      	ldr	r3, [pc, #180]	; (401c74 <xTaskResumeAll+0xf4>)
  401bbe:	4798      	blx	r3
}
  401bc0:	4620      	mov	r0, r4
  401bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401bc6:	68fb      	ldr	r3, [r7, #12]
  401bc8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401bca:	f104 0018 	add.w	r0, r4, #24
  401bce:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401bd0:	f104 0804 	add.w	r8, r4, #4
  401bd4:	4640      	mov	r0, r8
  401bd6:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401bd8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401bda:	682a      	ldr	r2, [r5, #0]
  401bdc:	2301      	movs	r3, #1
  401bde:	4083      	lsls	r3, r0
  401be0:	4313      	orrs	r3, r2
  401be2:	602b      	str	r3, [r5, #0]
  401be4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401be8:	4641      	mov	r1, r8
  401bea:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401bee:	4b22      	ldr	r3, [pc, #136]	; (401c78 <xTaskResumeAll+0xf8>)
  401bf0:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401bf2:	4b22      	ldr	r3, [pc, #136]	; (401c7c <xTaskResumeAll+0xfc>)
  401bf4:	681b      	ldr	r3, [r3, #0]
  401bf6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401bfa:	429a      	cmp	r2, r3
  401bfc:	d20c      	bcs.n	401c18 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401bfe:	683b      	ldr	r3, [r7, #0]
  401c00:	2b00      	cmp	r3, #0
  401c02:	d1e0      	bne.n	401bc6 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401c04:	4b1e      	ldr	r3, [pc, #120]	; (401c80 <xTaskResumeAll+0x100>)
  401c06:	681b      	ldr	r3, [r3, #0]
  401c08:	b1db      	cbz	r3, 401c42 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401c0a:	4b1d      	ldr	r3, [pc, #116]	; (401c80 <xTaskResumeAll+0x100>)
  401c0c:	681b      	ldr	r3, [r3, #0]
  401c0e:	b1c3      	cbz	r3, 401c42 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401c10:	4e1c      	ldr	r6, [pc, #112]	; (401c84 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  401c12:	4d1d      	ldr	r5, [pc, #116]	; (401c88 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  401c14:	4c1a      	ldr	r4, [pc, #104]	; (401c80 <xTaskResumeAll+0x100>)
  401c16:	e00e      	b.n	401c36 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  401c18:	2201      	movs	r2, #1
  401c1a:	4b1b      	ldr	r3, [pc, #108]	; (401c88 <xTaskResumeAll+0x108>)
  401c1c:	601a      	str	r2, [r3, #0]
  401c1e:	e7ee      	b.n	401bfe <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401c20:	4f1a      	ldr	r7, [pc, #104]	; (401c8c <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401c22:	4e1b      	ldr	r6, [pc, #108]	; (401c90 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  401c24:	4d1b      	ldr	r5, [pc, #108]	; (401c94 <xTaskResumeAll+0x114>)
  401c26:	f8df 9074 	ldr.w	r9, [pc, #116]	; 401c9c <xTaskResumeAll+0x11c>
  401c2a:	e7e8      	b.n	401bfe <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  401c2c:	6823      	ldr	r3, [r4, #0]
  401c2e:	3b01      	subs	r3, #1
  401c30:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401c32:	6823      	ldr	r3, [r4, #0]
  401c34:	b12b      	cbz	r3, 401c42 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401c36:	47b0      	blx	r6
  401c38:	2800      	cmp	r0, #0
  401c3a:	d0f7      	beq.n	401c2c <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  401c3c:	2301      	movs	r3, #1
  401c3e:	602b      	str	r3, [r5, #0]
  401c40:	e7f4      	b.n	401c2c <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  401c42:	4b11      	ldr	r3, [pc, #68]	; (401c88 <xTaskResumeAll+0x108>)
  401c44:	681b      	ldr	r3, [r3, #0]
  401c46:	2b01      	cmp	r3, #1
  401c48:	d10b      	bne.n	401c62 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  401c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c4e:	4b12      	ldr	r3, [pc, #72]	; (401c98 <xTaskResumeAll+0x118>)
  401c50:	601a      	str	r2, [r3, #0]
  401c52:	f3bf 8f4f 	dsb	sy
  401c56:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401c5a:	2401      	movs	r4, #1
  401c5c:	e7ae      	b.n	401bbc <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  401c5e:	2400      	movs	r4, #0
  401c60:	e7ac      	b.n	401bbc <xTaskResumeAll+0x3c>
  401c62:	2400      	movs	r4, #0
  401c64:	e7aa      	b.n	401bbc <xTaskResumeAll+0x3c>
  401c66:	bf00      	nop
  401c68:	2040c28c 	.word	0x2040c28c
  401c6c:	00400a81 	.word	0x00400a81
  401c70:	2040c284 	.word	0x2040c284
  401c74:	00400acd 	.word	0x00400acd
  401c78:	00400951 	.word	0x00400951
  401c7c:	2040c214 	.word	0x2040c214
  401c80:	2040c288 	.word	0x2040c288
  401c84:	00401a35 	.word	0x00401a35
  401c88:	2040c310 	.word	0x2040c310
  401c8c:	2040c2cc 	.word	0x2040c2cc
  401c90:	0040099d 	.word	0x0040099d
  401c94:	2040c298 	.word	0x2040c298
  401c98:	e000ed04 	.word	0xe000ed04
  401c9c:	2040c220 	.word	0x2040c220

00401ca0 <vTaskDelay>:
	{
  401ca0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  401ca2:	2800      	cmp	r0, #0
  401ca4:	d029      	beq.n	401cfa <vTaskDelay+0x5a>
  401ca6:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  401ca8:	4b18      	ldr	r3, [pc, #96]	; (401d0c <vTaskDelay+0x6c>)
  401caa:	681b      	ldr	r3, [r3, #0]
  401cac:	b153      	cbz	r3, 401cc4 <vTaskDelay+0x24>
  401cae:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cb2:	b672      	cpsid	i
  401cb4:	f383 8811 	msr	BASEPRI, r3
  401cb8:	f3bf 8f6f 	isb	sy
  401cbc:	f3bf 8f4f 	dsb	sy
  401cc0:	b662      	cpsie	i
  401cc2:	e7fe      	b.n	401cc2 <vTaskDelay+0x22>
			vTaskSuspendAll();
  401cc4:	4b12      	ldr	r3, [pc, #72]	; (401d10 <vTaskDelay+0x70>)
  401cc6:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  401cc8:	4b12      	ldr	r3, [pc, #72]	; (401d14 <vTaskDelay+0x74>)
  401cca:	681b      	ldr	r3, [r3, #0]
  401ccc:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401cce:	4b12      	ldr	r3, [pc, #72]	; (401d18 <vTaskDelay+0x78>)
  401cd0:	6818      	ldr	r0, [r3, #0]
  401cd2:	3004      	adds	r0, #4
  401cd4:	4b11      	ldr	r3, [pc, #68]	; (401d1c <vTaskDelay+0x7c>)
  401cd6:	4798      	blx	r3
  401cd8:	b948      	cbnz	r0, 401cee <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401cda:	4b0f      	ldr	r3, [pc, #60]	; (401d18 <vTaskDelay+0x78>)
  401cdc:	681a      	ldr	r2, [r3, #0]
  401cde:	4910      	ldr	r1, [pc, #64]	; (401d20 <vTaskDelay+0x80>)
  401ce0:	680b      	ldr	r3, [r1, #0]
  401ce2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401ce4:	2201      	movs	r2, #1
  401ce6:	4082      	lsls	r2, r0
  401ce8:	ea23 0302 	bic.w	r3, r3, r2
  401cec:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401cee:	4620      	mov	r0, r4
  401cf0:	4b0c      	ldr	r3, [pc, #48]	; (401d24 <vTaskDelay+0x84>)
  401cf2:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401cf4:	4b0c      	ldr	r3, [pc, #48]	; (401d28 <vTaskDelay+0x88>)
  401cf6:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401cf8:	b938      	cbnz	r0, 401d0a <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  401cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401cfe:	4b0b      	ldr	r3, [pc, #44]	; (401d2c <vTaskDelay+0x8c>)
  401d00:	601a      	str	r2, [r3, #0]
  401d02:	f3bf 8f4f 	dsb	sy
  401d06:	f3bf 8f6f 	isb	sy
  401d0a:	bd10      	pop	{r4, pc}
  401d0c:	2040c28c 	.word	0x2040c28c
  401d10:	00401a19 	.word	0x00401a19
  401d14:	2040c30c 	.word	0x2040c30c
  401d18:	2040c214 	.word	0x2040c214
  401d1c:	0040099d 	.word	0x0040099d
  401d20:	2040c298 	.word	0x2040c298
  401d24:	00401701 	.word	0x00401701
  401d28:	00401b81 	.word	0x00401b81
  401d2c:	e000ed04 	.word	0xe000ed04

00401d30 <prvIdleTask>:
{
  401d30:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  401d32:	f8df 8088 	ldr.w	r8, [pc, #136]	; 401dbc <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401d36:	4e19      	ldr	r6, [pc, #100]	; (401d9c <prvIdleTask+0x6c>)
				taskYIELD();
  401d38:	f8df 9084 	ldr.w	r9, [pc, #132]	; 401dc0 <prvIdleTask+0x90>
  401d3c:	e02a      	b.n	401d94 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401d3e:	4b18      	ldr	r3, [pc, #96]	; (401da0 <prvIdleTask+0x70>)
  401d40:	681b      	ldr	r3, [r3, #0]
  401d42:	2b01      	cmp	r3, #1
  401d44:	d81e      	bhi.n	401d84 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401d46:	682b      	ldr	r3, [r5, #0]
  401d48:	2b00      	cmp	r3, #0
  401d4a:	d0f8      	beq.n	401d3e <prvIdleTask+0xe>
			vTaskSuspendAll();
  401d4c:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401d4e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  401d50:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  401d52:	2c00      	cmp	r4, #0
  401d54:	d0f7      	beq.n	401d46 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  401d56:	4b13      	ldr	r3, [pc, #76]	; (401da4 <prvIdleTask+0x74>)
  401d58:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401d5a:	68f3      	ldr	r3, [r6, #12]
  401d5c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401d5e:	1d20      	adds	r0, r4, #4
  401d60:	4b11      	ldr	r3, [pc, #68]	; (401da8 <prvIdleTask+0x78>)
  401d62:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401d64:	4a11      	ldr	r2, [pc, #68]	; (401dac <prvIdleTask+0x7c>)
  401d66:	6813      	ldr	r3, [r2, #0]
  401d68:	3b01      	subs	r3, #1
  401d6a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401d6c:	682b      	ldr	r3, [r5, #0]
  401d6e:	3b01      	subs	r3, #1
  401d70:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  401d72:	4b0f      	ldr	r3, [pc, #60]	; (401db0 <prvIdleTask+0x80>)
  401d74:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  401d76:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401d78:	f8df a048 	ldr.w	sl, [pc, #72]	; 401dc4 <prvIdleTask+0x94>
  401d7c:	47d0      	blx	sl
		vPortFree( pxTCB );
  401d7e:	4620      	mov	r0, r4
  401d80:	47d0      	blx	sl
  401d82:	e7e0      	b.n	401d46 <prvIdleTask+0x16>
				taskYIELD();
  401d84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401d88:	f8c9 3000 	str.w	r3, [r9]
  401d8c:	f3bf 8f4f 	dsb	sy
  401d90:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401d94:	4d07      	ldr	r5, [pc, #28]	; (401db4 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  401d96:	4f08      	ldr	r7, [pc, #32]	; (401db8 <prvIdleTask+0x88>)
  401d98:	e7d5      	b.n	401d46 <prvIdleTask+0x16>
  401d9a:	bf00      	nop
  401d9c:	2040c2f8 	.word	0x2040c2f8
  401da0:	2040c220 	.word	0x2040c220
  401da4:	00400a81 	.word	0x00400a81
  401da8:	0040099d 	.word	0x0040099d
  401dac:	2040c284 	.word	0x2040c284
  401db0:	00400acd 	.word	0x00400acd
  401db4:	2040c294 	.word	0x2040c294
  401db8:	00401b81 	.word	0x00401b81
  401dbc:	00401a19 	.word	0x00401a19
  401dc0:	e000ed04 	.word	0xe000ed04
  401dc4:	00400d4d 	.word	0x00400d4d

00401dc8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401dc8:	4b2d      	ldr	r3, [pc, #180]	; (401e80 <vTaskSwitchContext+0xb8>)
  401dca:	681b      	ldr	r3, [r3, #0]
  401dcc:	2b00      	cmp	r3, #0
  401dce:	d12c      	bne.n	401e2a <vTaskSwitchContext+0x62>
{
  401dd0:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  401dd2:	2200      	movs	r2, #0
  401dd4:	4b2b      	ldr	r3, [pc, #172]	; (401e84 <vTaskSwitchContext+0xbc>)
  401dd6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401dd8:	4b2b      	ldr	r3, [pc, #172]	; (401e88 <vTaskSwitchContext+0xc0>)
  401dda:	681b      	ldr	r3, [r3, #0]
  401ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401dde:	681a      	ldr	r2, [r3, #0]
  401de0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401de4:	d103      	bne.n	401dee <vTaskSwitchContext+0x26>
  401de6:	685a      	ldr	r2, [r3, #4]
  401de8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401dec:	d021      	beq.n	401e32 <vTaskSwitchContext+0x6a>
  401dee:	4b26      	ldr	r3, [pc, #152]	; (401e88 <vTaskSwitchContext+0xc0>)
  401df0:	6818      	ldr	r0, [r3, #0]
  401df2:	6819      	ldr	r1, [r3, #0]
  401df4:	3134      	adds	r1, #52	; 0x34
  401df6:	4b25      	ldr	r3, [pc, #148]	; (401e8c <vTaskSwitchContext+0xc4>)
  401df8:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401dfa:	4b25      	ldr	r3, [pc, #148]	; (401e90 <vTaskSwitchContext+0xc8>)
  401dfc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401dfe:	fab3 f383 	clz	r3, r3
  401e02:	b2db      	uxtb	r3, r3
  401e04:	f1c3 031f 	rsb	r3, r3, #31
  401e08:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401e0c:	4a21      	ldr	r2, [pc, #132]	; (401e94 <vTaskSwitchContext+0xcc>)
  401e0e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401e12:	b9ba      	cbnz	r2, 401e44 <vTaskSwitchContext+0x7c>
	__asm volatile
  401e14:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e18:	b672      	cpsid	i
  401e1a:	f383 8811 	msr	BASEPRI, r3
  401e1e:	f3bf 8f6f 	isb	sy
  401e22:	f3bf 8f4f 	dsb	sy
  401e26:	b662      	cpsie	i
  401e28:	e7fe      	b.n	401e28 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  401e2a:	2201      	movs	r2, #1
  401e2c:	4b15      	ldr	r3, [pc, #84]	; (401e84 <vTaskSwitchContext+0xbc>)
  401e2e:	601a      	str	r2, [r3, #0]
  401e30:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  401e32:	689a      	ldr	r2, [r3, #8]
  401e34:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401e38:	d1d9      	bne.n	401dee <vTaskSwitchContext+0x26>
  401e3a:	68db      	ldr	r3, [r3, #12]
  401e3c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401e40:	d1d5      	bne.n	401dee <vTaskSwitchContext+0x26>
  401e42:	e7da      	b.n	401dfa <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401e44:	4a13      	ldr	r2, [pc, #76]	; (401e94 <vTaskSwitchContext+0xcc>)
  401e46:	0099      	lsls	r1, r3, #2
  401e48:	18c8      	adds	r0, r1, r3
  401e4a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401e4e:	6844      	ldr	r4, [r0, #4]
  401e50:	6864      	ldr	r4, [r4, #4]
  401e52:	6044      	str	r4, [r0, #4]
  401e54:	4419      	add	r1, r3
  401e56:	4602      	mov	r2, r0
  401e58:	3208      	adds	r2, #8
  401e5a:	4294      	cmp	r4, r2
  401e5c:	d009      	beq.n	401e72 <vTaskSwitchContext+0xaa>
  401e5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401e62:	4a0c      	ldr	r2, [pc, #48]	; (401e94 <vTaskSwitchContext+0xcc>)
  401e64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401e68:	685b      	ldr	r3, [r3, #4]
  401e6a:	68da      	ldr	r2, [r3, #12]
  401e6c:	4b06      	ldr	r3, [pc, #24]	; (401e88 <vTaskSwitchContext+0xc0>)
  401e6e:	601a      	str	r2, [r3, #0]
  401e70:	bd10      	pop	{r4, pc}
  401e72:	6860      	ldr	r0, [r4, #4]
  401e74:	4a07      	ldr	r2, [pc, #28]	; (401e94 <vTaskSwitchContext+0xcc>)
  401e76:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401e7a:	6050      	str	r0, [r2, #4]
  401e7c:	e7ef      	b.n	401e5e <vTaskSwitchContext+0x96>
  401e7e:	bf00      	nop
  401e80:	2040c28c 	.word	0x2040c28c
  401e84:	2040c310 	.word	0x2040c310
  401e88:	2040c214 	.word	0x2040c214
  401e8c:	004067b1 	.word	0x004067b1
  401e90:	2040c298 	.word	0x2040c298
  401e94:	2040c220 	.word	0x2040c220

00401e98 <vTaskPlaceOnEventList>:
{
  401e98:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  401e9a:	b1e0      	cbz	r0, 401ed6 <vTaskPlaceOnEventList+0x3e>
  401e9c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401e9e:	4d17      	ldr	r5, [pc, #92]	; (401efc <vTaskPlaceOnEventList+0x64>)
  401ea0:	6829      	ldr	r1, [r5, #0]
  401ea2:	3118      	adds	r1, #24
  401ea4:	4b16      	ldr	r3, [pc, #88]	; (401f00 <vTaskPlaceOnEventList+0x68>)
  401ea6:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401ea8:	6828      	ldr	r0, [r5, #0]
  401eaa:	3004      	adds	r0, #4
  401eac:	4b15      	ldr	r3, [pc, #84]	; (401f04 <vTaskPlaceOnEventList+0x6c>)
  401eae:	4798      	blx	r3
  401eb0:	b940      	cbnz	r0, 401ec4 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401eb2:	682a      	ldr	r2, [r5, #0]
  401eb4:	4914      	ldr	r1, [pc, #80]	; (401f08 <vTaskPlaceOnEventList+0x70>)
  401eb6:	680b      	ldr	r3, [r1, #0]
  401eb8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401eba:	2201      	movs	r2, #1
  401ebc:	4082      	lsls	r2, r0
  401ebe:	ea23 0302 	bic.w	r3, r3, r2
  401ec2:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  401ec4:	f1b4 3fff 	cmp.w	r4, #4294967295
  401ec8:	d010      	beq.n	401eec <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  401eca:	4b10      	ldr	r3, [pc, #64]	; (401f0c <vTaskPlaceOnEventList+0x74>)
  401ecc:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401ece:	4420      	add	r0, r4
  401ed0:	4b0f      	ldr	r3, [pc, #60]	; (401f10 <vTaskPlaceOnEventList+0x78>)
  401ed2:	4798      	blx	r3
  401ed4:	bd38      	pop	{r3, r4, r5, pc}
  401ed6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401eda:	b672      	cpsid	i
  401edc:	f383 8811 	msr	BASEPRI, r3
  401ee0:	f3bf 8f6f 	isb	sy
  401ee4:	f3bf 8f4f 	dsb	sy
  401ee8:	b662      	cpsie	i
  401eea:	e7fe      	b.n	401eea <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401eec:	4b03      	ldr	r3, [pc, #12]	; (401efc <vTaskPlaceOnEventList+0x64>)
  401eee:	6819      	ldr	r1, [r3, #0]
  401ef0:	3104      	adds	r1, #4
  401ef2:	4808      	ldr	r0, [pc, #32]	; (401f14 <vTaskPlaceOnEventList+0x7c>)
  401ef4:	4b08      	ldr	r3, [pc, #32]	; (401f18 <vTaskPlaceOnEventList+0x80>)
  401ef6:	4798      	blx	r3
  401ef8:	bd38      	pop	{r3, r4, r5, pc}
  401efa:	bf00      	nop
  401efc:	2040c214 	.word	0x2040c214
  401f00:	00400969 	.word	0x00400969
  401f04:	0040099d 	.word	0x0040099d
  401f08:	2040c298 	.word	0x2040c298
  401f0c:	2040c30c 	.word	0x2040c30c
  401f10:	00401701 	.word	0x00401701
  401f14:	2040c2e4 	.word	0x2040c2e4
  401f18:	00400951 	.word	0x00400951

00401f1c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  401f1c:	b1e8      	cbz	r0, 401f5a <vTaskPlaceOnEventListRestricted+0x3e>
	{
  401f1e:	b570      	push	{r4, r5, r6, lr}
  401f20:	4615      	mov	r5, r2
  401f22:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401f24:	4e16      	ldr	r6, [pc, #88]	; (401f80 <vTaskPlaceOnEventListRestricted+0x64>)
  401f26:	6831      	ldr	r1, [r6, #0]
  401f28:	3118      	adds	r1, #24
  401f2a:	4b16      	ldr	r3, [pc, #88]	; (401f84 <vTaskPlaceOnEventListRestricted+0x68>)
  401f2c:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f2e:	6830      	ldr	r0, [r6, #0]
  401f30:	3004      	adds	r0, #4
  401f32:	4b15      	ldr	r3, [pc, #84]	; (401f88 <vTaskPlaceOnEventListRestricted+0x6c>)
  401f34:	4798      	blx	r3
  401f36:	b940      	cbnz	r0, 401f4a <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401f38:	6832      	ldr	r2, [r6, #0]
  401f3a:	4914      	ldr	r1, [pc, #80]	; (401f8c <vTaskPlaceOnEventListRestricted+0x70>)
  401f3c:	680b      	ldr	r3, [r1, #0]
  401f3e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401f40:	2201      	movs	r2, #1
  401f42:	4082      	lsls	r2, r0
  401f44:	ea23 0302 	bic.w	r3, r3, r2
  401f48:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  401f4a:	2d01      	cmp	r5, #1
  401f4c:	d010      	beq.n	401f70 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  401f4e:	4b10      	ldr	r3, [pc, #64]	; (401f90 <vTaskPlaceOnEventListRestricted+0x74>)
  401f50:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401f52:	4420      	add	r0, r4
  401f54:	4b0f      	ldr	r3, [pc, #60]	; (401f94 <vTaskPlaceOnEventListRestricted+0x78>)
  401f56:	4798      	blx	r3
  401f58:	bd70      	pop	{r4, r5, r6, pc}
  401f5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f5e:	b672      	cpsid	i
  401f60:	f383 8811 	msr	BASEPRI, r3
  401f64:	f3bf 8f6f 	isb	sy
  401f68:	f3bf 8f4f 	dsb	sy
  401f6c:	b662      	cpsie	i
  401f6e:	e7fe      	b.n	401f6e <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401f70:	4b03      	ldr	r3, [pc, #12]	; (401f80 <vTaskPlaceOnEventListRestricted+0x64>)
  401f72:	6819      	ldr	r1, [r3, #0]
  401f74:	3104      	adds	r1, #4
  401f76:	4808      	ldr	r0, [pc, #32]	; (401f98 <vTaskPlaceOnEventListRestricted+0x7c>)
  401f78:	4b02      	ldr	r3, [pc, #8]	; (401f84 <vTaskPlaceOnEventListRestricted+0x68>)
  401f7a:	4798      	blx	r3
  401f7c:	bd70      	pop	{r4, r5, r6, pc}
  401f7e:	bf00      	nop
  401f80:	2040c214 	.word	0x2040c214
  401f84:	00400951 	.word	0x00400951
  401f88:	0040099d 	.word	0x0040099d
  401f8c:	2040c298 	.word	0x2040c298
  401f90:	2040c30c 	.word	0x2040c30c
  401f94:	00401701 	.word	0x00401701
  401f98:	2040c2e4 	.word	0x2040c2e4

00401f9c <xTaskRemoveFromEventList>:
{
  401f9c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401f9e:	68c3      	ldr	r3, [r0, #12]
  401fa0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401fa2:	b324      	cbz	r4, 401fee <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401fa4:	f104 0518 	add.w	r5, r4, #24
  401fa8:	4628      	mov	r0, r5
  401faa:	4b1a      	ldr	r3, [pc, #104]	; (402014 <xTaskRemoveFromEventList+0x78>)
  401fac:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401fae:	4b1a      	ldr	r3, [pc, #104]	; (402018 <xTaskRemoveFromEventList+0x7c>)
  401fb0:	681b      	ldr	r3, [r3, #0]
  401fb2:	bb3b      	cbnz	r3, 402004 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401fb4:	1d25      	adds	r5, r4, #4
  401fb6:	4628      	mov	r0, r5
  401fb8:	4b16      	ldr	r3, [pc, #88]	; (402014 <xTaskRemoveFromEventList+0x78>)
  401fba:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401fbc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401fbe:	4a17      	ldr	r2, [pc, #92]	; (40201c <xTaskRemoveFromEventList+0x80>)
  401fc0:	6811      	ldr	r1, [r2, #0]
  401fc2:	2301      	movs	r3, #1
  401fc4:	4083      	lsls	r3, r0
  401fc6:	430b      	orrs	r3, r1
  401fc8:	6013      	str	r3, [r2, #0]
  401fca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401fce:	4629      	mov	r1, r5
  401fd0:	4b13      	ldr	r3, [pc, #76]	; (402020 <xTaskRemoveFromEventList+0x84>)
  401fd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401fd6:	4b13      	ldr	r3, [pc, #76]	; (402024 <xTaskRemoveFromEventList+0x88>)
  401fd8:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401fda:	4b13      	ldr	r3, [pc, #76]	; (402028 <xTaskRemoveFromEventList+0x8c>)
  401fdc:	681b      	ldr	r3, [r3, #0]
  401fde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401fe2:	429a      	cmp	r2, r3
  401fe4:	d913      	bls.n	40200e <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  401fe6:	2001      	movs	r0, #1
  401fe8:	4b10      	ldr	r3, [pc, #64]	; (40202c <xTaskRemoveFromEventList+0x90>)
  401fea:	6018      	str	r0, [r3, #0]
  401fec:	bd38      	pop	{r3, r4, r5, pc}
  401fee:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ff2:	b672      	cpsid	i
  401ff4:	f383 8811 	msr	BASEPRI, r3
  401ff8:	f3bf 8f6f 	isb	sy
  401ffc:	f3bf 8f4f 	dsb	sy
  402000:	b662      	cpsie	i
  402002:	e7fe      	b.n	402002 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402004:	4629      	mov	r1, r5
  402006:	480a      	ldr	r0, [pc, #40]	; (402030 <xTaskRemoveFromEventList+0x94>)
  402008:	4b06      	ldr	r3, [pc, #24]	; (402024 <xTaskRemoveFromEventList+0x88>)
  40200a:	4798      	blx	r3
  40200c:	e7e5      	b.n	401fda <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  40200e:	2000      	movs	r0, #0
}
  402010:	bd38      	pop	{r3, r4, r5, pc}
  402012:	bf00      	nop
  402014:	0040099d 	.word	0x0040099d
  402018:	2040c28c 	.word	0x2040c28c
  40201c:	2040c298 	.word	0x2040c298
  402020:	2040c220 	.word	0x2040c220
  402024:	00400951 	.word	0x00400951
  402028:	2040c214 	.word	0x2040c214
  40202c:	2040c310 	.word	0x2040c310
  402030:	2040c2cc 	.word	0x2040c2cc

00402034 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402034:	b130      	cbz	r0, 402044 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402036:	4a09      	ldr	r2, [pc, #36]	; (40205c <vTaskSetTimeOutState+0x28>)
  402038:	6812      	ldr	r2, [r2, #0]
  40203a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40203c:	4a08      	ldr	r2, [pc, #32]	; (402060 <vTaskSetTimeOutState+0x2c>)
  40203e:	6812      	ldr	r2, [r2, #0]
  402040:	6042      	str	r2, [r0, #4]
  402042:	4770      	bx	lr
  402044:	f04f 0380 	mov.w	r3, #128	; 0x80
  402048:	b672      	cpsid	i
  40204a:	f383 8811 	msr	BASEPRI, r3
  40204e:	f3bf 8f6f 	isb	sy
  402052:	f3bf 8f4f 	dsb	sy
  402056:	b662      	cpsie	i
  402058:	e7fe      	b.n	402058 <vTaskSetTimeOutState+0x24>
  40205a:	bf00      	nop
  40205c:	2040c2c8 	.word	0x2040c2c8
  402060:	2040c30c 	.word	0x2040c30c

00402064 <xTaskCheckForTimeOut>:
{
  402064:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402066:	b1c0      	cbz	r0, 40209a <xTaskCheckForTimeOut+0x36>
  402068:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  40206a:	b309      	cbz	r1, 4020b0 <xTaskCheckForTimeOut+0x4c>
  40206c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40206e:	4b1d      	ldr	r3, [pc, #116]	; (4020e4 <xTaskCheckForTimeOut+0x80>)
  402070:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402072:	4b1d      	ldr	r3, [pc, #116]	; (4020e8 <xTaskCheckForTimeOut+0x84>)
  402074:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402076:	682b      	ldr	r3, [r5, #0]
  402078:	f1b3 3fff 	cmp.w	r3, #4294967295
  40207c:	d02e      	beq.n	4020dc <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40207e:	491b      	ldr	r1, [pc, #108]	; (4020ec <xTaskCheckForTimeOut+0x88>)
  402080:	6809      	ldr	r1, [r1, #0]
  402082:	6820      	ldr	r0, [r4, #0]
  402084:	4288      	cmp	r0, r1
  402086:	d002      	beq.n	40208e <xTaskCheckForTimeOut+0x2a>
  402088:	6861      	ldr	r1, [r4, #4]
  40208a:	428a      	cmp	r2, r1
  40208c:	d228      	bcs.n	4020e0 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40208e:	6861      	ldr	r1, [r4, #4]
  402090:	1a50      	subs	r0, r2, r1
  402092:	4283      	cmp	r3, r0
  402094:	d817      	bhi.n	4020c6 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402096:	2401      	movs	r4, #1
  402098:	e01c      	b.n	4020d4 <xTaskCheckForTimeOut+0x70>
  40209a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40209e:	b672      	cpsid	i
  4020a0:	f383 8811 	msr	BASEPRI, r3
  4020a4:	f3bf 8f6f 	isb	sy
  4020a8:	f3bf 8f4f 	dsb	sy
  4020ac:	b662      	cpsie	i
  4020ae:	e7fe      	b.n	4020ae <xTaskCheckForTimeOut+0x4a>
  4020b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020b4:	b672      	cpsid	i
  4020b6:	f383 8811 	msr	BASEPRI, r3
  4020ba:	f3bf 8f6f 	isb	sy
  4020be:	f3bf 8f4f 	dsb	sy
  4020c2:	b662      	cpsie	i
  4020c4:	e7fe      	b.n	4020c4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4020c6:	1a9b      	subs	r3, r3, r2
  4020c8:	440b      	add	r3, r1
  4020ca:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4020cc:	4620      	mov	r0, r4
  4020ce:	4b08      	ldr	r3, [pc, #32]	; (4020f0 <xTaskCheckForTimeOut+0x8c>)
  4020d0:	4798      	blx	r3
			xReturn = pdFALSE;
  4020d2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4020d4:	4b07      	ldr	r3, [pc, #28]	; (4020f4 <xTaskCheckForTimeOut+0x90>)
  4020d6:	4798      	blx	r3
}
  4020d8:	4620      	mov	r0, r4
  4020da:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4020dc:	2400      	movs	r4, #0
  4020de:	e7f9      	b.n	4020d4 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  4020e0:	2401      	movs	r4, #1
  4020e2:	e7f7      	b.n	4020d4 <xTaskCheckForTimeOut+0x70>
  4020e4:	00400a81 	.word	0x00400a81
  4020e8:	2040c30c 	.word	0x2040c30c
  4020ec:	2040c2c8 	.word	0x2040c2c8
  4020f0:	00402035 	.word	0x00402035
  4020f4:	00400acd 	.word	0x00400acd

004020f8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4020f8:	2201      	movs	r2, #1
  4020fa:	4b01      	ldr	r3, [pc, #4]	; (402100 <vTaskMissedYield+0x8>)
  4020fc:	601a      	str	r2, [r3, #0]
  4020fe:	4770      	bx	lr
  402100:	2040c310 	.word	0x2040c310

00402104 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402104:	4b05      	ldr	r3, [pc, #20]	; (40211c <xTaskGetSchedulerState+0x18>)
  402106:	681b      	ldr	r3, [r3, #0]
  402108:	b133      	cbz	r3, 402118 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40210a:	4b05      	ldr	r3, [pc, #20]	; (402120 <xTaskGetSchedulerState+0x1c>)
  40210c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40210e:	2b00      	cmp	r3, #0
  402110:	bf0c      	ite	eq
  402112:	2002      	moveq	r0, #2
  402114:	2000      	movne	r0, #0
  402116:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402118:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  40211a:	4770      	bx	lr
  40211c:	2040c2e0 	.word	0x2040c2e0
  402120:	2040c28c 	.word	0x2040c28c

00402124 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402124:	2800      	cmp	r0, #0
  402126:	d044      	beq.n	4021b2 <vTaskPriorityInherit+0x8e>
	{
  402128:	b538      	push	{r3, r4, r5, lr}
  40212a:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  40212c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40212e:	4921      	ldr	r1, [pc, #132]	; (4021b4 <vTaskPriorityInherit+0x90>)
  402130:	6809      	ldr	r1, [r1, #0]
  402132:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402134:	428a      	cmp	r2, r1
  402136:	d214      	bcs.n	402162 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402138:	6981      	ldr	r1, [r0, #24]
  40213a:	2900      	cmp	r1, #0
  40213c:	db05      	blt.n	40214a <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40213e:	491d      	ldr	r1, [pc, #116]	; (4021b4 <vTaskPriorityInherit+0x90>)
  402140:	6809      	ldr	r1, [r1, #0]
  402142:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402144:	f1c1 0105 	rsb	r1, r1, #5
  402148:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40214a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40214e:	491a      	ldr	r1, [pc, #104]	; (4021b8 <vTaskPriorityInherit+0x94>)
  402150:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402154:	6961      	ldr	r1, [r4, #20]
  402156:	4291      	cmp	r1, r2
  402158:	d004      	beq.n	402164 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40215a:	4a16      	ldr	r2, [pc, #88]	; (4021b4 <vTaskPriorityInherit+0x90>)
  40215c:	6812      	ldr	r2, [r2, #0]
  40215e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402160:	62e2      	str	r2, [r4, #44]	; 0x2c
  402162:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402164:	1d25      	adds	r5, r4, #4
  402166:	4628      	mov	r0, r5
  402168:	4b14      	ldr	r3, [pc, #80]	; (4021bc <vTaskPriorityInherit+0x98>)
  40216a:	4798      	blx	r3
  40216c:	b970      	cbnz	r0, 40218c <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40216e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402170:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402174:	4a10      	ldr	r2, [pc, #64]	; (4021b8 <vTaskPriorityInherit+0x94>)
  402176:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40217a:	b93a      	cbnz	r2, 40218c <vTaskPriorityInherit+0x68>
  40217c:	4810      	ldr	r0, [pc, #64]	; (4021c0 <vTaskPriorityInherit+0x9c>)
  40217e:	6802      	ldr	r2, [r0, #0]
  402180:	2101      	movs	r1, #1
  402182:	fa01 f303 	lsl.w	r3, r1, r3
  402186:	ea22 0303 	bic.w	r3, r2, r3
  40218a:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40218c:	4b09      	ldr	r3, [pc, #36]	; (4021b4 <vTaskPriorityInherit+0x90>)
  40218e:	681b      	ldr	r3, [r3, #0]
  402190:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402192:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402194:	4a0a      	ldr	r2, [pc, #40]	; (4021c0 <vTaskPriorityInherit+0x9c>)
  402196:	6811      	ldr	r1, [r2, #0]
  402198:	2301      	movs	r3, #1
  40219a:	4083      	lsls	r3, r0
  40219c:	430b      	orrs	r3, r1
  40219e:	6013      	str	r3, [r2, #0]
  4021a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4021a4:	4629      	mov	r1, r5
  4021a6:	4b04      	ldr	r3, [pc, #16]	; (4021b8 <vTaskPriorityInherit+0x94>)
  4021a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4021ac:	4b05      	ldr	r3, [pc, #20]	; (4021c4 <vTaskPriorityInherit+0xa0>)
  4021ae:	4798      	blx	r3
  4021b0:	bd38      	pop	{r3, r4, r5, pc}
  4021b2:	4770      	bx	lr
  4021b4:	2040c214 	.word	0x2040c214
  4021b8:	2040c220 	.word	0x2040c220
  4021bc:	0040099d 	.word	0x0040099d
  4021c0:	2040c298 	.word	0x2040c298
  4021c4:	00400951 	.word	0x00400951

004021c8 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  4021c8:	2800      	cmp	r0, #0
  4021ca:	d04d      	beq.n	402268 <xTaskPriorityDisinherit+0xa0>
	{
  4021cc:	b538      	push	{r3, r4, r5, lr}
  4021ce:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  4021d0:	4a27      	ldr	r2, [pc, #156]	; (402270 <xTaskPriorityDisinherit+0xa8>)
  4021d2:	6812      	ldr	r2, [r2, #0]
  4021d4:	4290      	cmp	r0, r2
  4021d6:	d00a      	beq.n	4021ee <xTaskPriorityDisinherit+0x26>
  4021d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021dc:	b672      	cpsid	i
  4021de:	f383 8811 	msr	BASEPRI, r3
  4021e2:	f3bf 8f6f 	isb	sy
  4021e6:	f3bf 8f4f 	dsb	sy
  4021ea:	b662      	cpsie	i
  4021ec:	e7fe      	b.n	4021ec <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  4021ee:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4021f0:	b952      	cbnz	r2, 402208 <xTaskPriorityDisinherit+0x40>
  4021f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021f6:	b672      	cpsid	i
  4021f8:	f383 8811 	msr	BASEPRI, r3
  4021fc:	f3bf 8f6f 	isb	sy
  402200:	f3bf 8f4f 	dsb	sy
  402204:	b662      	cpsie	i
  402206:	e7fe      	b.n	402206 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402208:	3a01      	subs	r2, #1
  40220a:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40220c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40220e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402210:	4288      	cmp	r0, r1
  402212:	d02b      	beq.n	40226c <xTaskPriorityDisinherit+0xa4>
  402214:	bb52      	cbnz	r2, 40226c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402216:	1d25      	adds	r5, r4, #4
  402218:	4628      	mov	r0, r5
  40221a:	4b16      	ldr	r3, [pc, #88]	; (402274 <xTaskPriorityDisinherit+0xac>)
  40221c:	4798      	blx	r3
  40221e:	b968      	cbnz	r0, 40223c <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402220:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402222:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402226:	4b14      	ldr	r3, [pc, #80]	; (402278 <xTaskPriorityDisinherit+0xb0>)
  402228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40222c:	b933      	cbnz	r3, 40223c <xTaskPriorityDisinherit+0x74>
  40222e:	4813      	ldr	r0, [pc, #76]	; (40227c <xTaskPriorityDisinherit+0xb4>)
  402230:	6803      	ldr	r3, [r0, #0]
  402232:	2201      	movs	r2, #1
  402234:	408a      	lsls	r2, r1
  402236:	ea23 0302 	bic.w	r3, r3, r2
  40223a:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40223c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40223e:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402240:	f1c0 0305 	rsb	r3, r0, #5
  402244:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402246:	4a0d      	ldr	r2, [pc, #52]	; (40227c <xTaskPriorityDisinherit+0xb4>)
  402248:	6811      	ldr	r1, [r2, #0]
  40224a:	2401      	movs	r4, #1
  40224c:	fa04 f300 	lsl.w	r3, r4, r0
  402250:	430b      	orrs	r3, r1
  402252:	6013      	str	r3, [r2, #0]
  402254:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402258:	4629      	mov	r1, r5
  40225a:	4b07      	ldr	r3, [pc, #28]	; (402278 <xTaskPriorityDisinherit+0xb0>)
  40225c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402260:	4b07      	ldr	r3, [pc, #28]	; (402280 <xTaskPriorityDisinherit+0xb8>)
  402262:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402264:	4620      	mov	r0, r4
  402266:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402268:	2000      	movs	r0, #0
  40226a:	4770      	bx	lr
  40226c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40226e:	bd38      	pop	{r3, r4, r5, pc}
  402270:	2040c214 	.word	0x2040c214
  402274:	0040099d 	.word	0x0040099d
  402278:	2040c220 	.word	0x2040c220
  40227c:	2040c298 	.word	0x2040c298
  402280:	00400951 	.word	0x00400951

00402284 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402284:	4b05      	ldr	r3, [pc, #20]	; (40229c <pvTaskIncrementMutexHeldCount+0x18>)
  402286:	681b      	ldr	r3, [r3, #0]
  402288:	b123      	cbz	r3, 402294 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40228a:	4b04      	ldr	r3, [pc, #16]	; (40229c <pvTaskIncrementMutexHeldCount+0x18>)
  40228c:	681a      	ldr	r2, [r3, #0]
  40228e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402290:	3301      	adds	r3, #1
  402292:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402294:	4b01      	ldr	r3, [pc, #4]	; (40229c <pvTaskIncrementMutexHeldCount+0x18>)
  402296:	6818      	ldr	r0, [r3, #0]
	}
  402298:	4770      	bx	lr
  40229a:	bf00      	nop
  40229c:	2040c214 	.word	0x2040c214

004022a0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4022a0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4022a2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4022a4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4022a6:	4291      	cmp	r1, r2
  4022a8:	d80c      	bhi.n	4022c4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  4022aa:	1ad2      	subs	r2, r2, r3
  4022ac:	6983      	ldr	r3, [r0, #24]
  4022ae:	429a      	cmp	r2, r3
  4022b0:	d301      	bcc.n	4022b6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4022b2:	2001      	movs	r0, #1
  4022b4:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4022b6:	1d01      	adds	r1, r0, #4
  4022b8:	4b09      	ldr	r3, [pc, #36]	; (4022e0 <prvInsertTimerInActiveList+0x40>)
  4022ba:	6818      	ldr	r0, [r3, #0]
  4022bc:	4b09      	ldr	r3, [pc, #36]	; (4022e4 <prvInsertTimerInActiveList+0x44>)
  4022be:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4022c0:	2000      	movs	r0, #0
  4022c2:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4022c4:	429a      	cmp	r2, r3
  4022c6:	d203      	bcs.n	4022d0 <prvInsertTimerInActiveList+0x30>
  4022c8:	4299      	cmp	r1, r3
  4022ca:	d301      	bcc.n	4022d0 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4022cc:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4022ce:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4022d0:	1d01      	adds	r1, r0, #4
  4022d2:	4b05      	ldr	r3, [pc, #20]	; (4022e8 <prvInsertTimerInActiveList+0x48>)
  4022d4:	6818      	ldr	r0, [r3, #0]
  4022d6:	4b03      	ldr	r3, [pc, #12]	; (4022e4 <prvInsertTimerInActiveList+0x44>)
  4022d8:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4022da:	2000      	movs	r0, #0
  4022dc:	bd08      	pop	{r3, pc}
  4022de:	bf00      	nop
  4022e0:	2040c318 	.word	0x2040c318
  4022e4:	00400969 	.word	0x00400969
  4022e8:	2040c314 	.word	0x2040c314

004022ec <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4022ec:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4022ee:	4b15      	ldr	r3, [pc, #84]	; (402344 <prvCheckForValidListAndQueue+0x58>)
  4022f0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4022f2:	4b15      	ldr	r3, [pc, #84]	; (402348 <prvCheckForValidListAndQueue+0x5c>)
  4022f4:	681b      	ldr	r3, [r3, #0]
  4022f6:	b113      	cbz	r3, 4022fe <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4022f8:	4b14      	ldr	r3, [pc, #80]	; (40234c <prvCheckForValidListAndQueue+0x60>)
  4022fa:	4798      	blx	r3
  4022fc:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4022fe:	4d14      	ldr	r5, [pc, #80]	; (402350 <prvCheckForValidListAndQueue+0x64>)
  402300:	4628      	mov	r0, r5
  402302:	4e14      	ldr	r6, [pc, #80]	; (402354 <prvCheckForValidListAndQueue+0x68>)
  402304:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402306:	4c14      	ldr	r4, [pc, #80]	; (402358 <prvCheckForValidListAndQueue+0x6c>)
  402308:	4620      	mov	r0, r4
  40230a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  40230c:	4b13      	ldr	r3, [pc, #76]	; (40235c <prvCheckForValidListAndQueue+0x70>)
  40230e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402310:	4b13      	ldr	r3, [pc, #76]	; (402360 <prvCheckForValidListAndQueue+0x74>)
  402312:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402314:	2200      	movs	r2, #0
  402316:	2110      	movs	r1, #16
  402318:	2005      	movs	r0, #5
  40231a:	4b12      	ldr	r3, [pc, #72]	; (402364 <prvCheckForValidListAndQueue+0x78>)
  40231c:	4798      	blx	r3
  40231e:	4b0a      	ldr	r3, [pc, #40]	; (402348 <prvCheckForValidListAndQueue+0x5c>)
  402320:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402322:	b118      	cbz	r0, 40232c <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402324:	4910      	ldr	r1, [pc, #64]	; (402368 <prvCheckForValidListAndQueue+0x7c>)
  402326:	4b11      	ldr	r3, [pc, #68]	; (40236c <prvCheckForValidListAndQueue+0x80>)
  402328:	4798      	blx	r3
  40232a:	e7e5      	b.n	4022f8 <prvCheckForValidListAndQueue+0xc>
  40232c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402330:	b672      	cpsid	i
  402332:	f383 8811 	msr	BASEPRI, r3
  402336:	f3bf 8f6f 	isb	sy
  40233a:	f3bf 8f4f 	dsb	sy
  40233e:	b662      	cpsie	i
  402340:	e7fe      	b.n	402340 <prvCheckForValidListAndQueue+0x54>
  402342:	bf00      	nop
  402344:	00400a81 	.word	0x00400a81
  402348:	2040c348 	.word	0x2040c348
  40234c:	00400acd 	.word	0x00400acd
  402350:	2040c31c 	.word	0x2040c31c
  402354:	00400935 	.word	0x00400935
  402358:	2040c330 	.word	0x2040c330
  40235c:	2040c314 	.word	0x2040c314
  402360:	2040c318 	.word	0x2040c318
  402364:	00400fd9 	.word	0x00400fd9
  402368:	0040d684 	.word	0x0040d684
  40236c:	00401649 	.word	0x00401649

00402370 <xTimerCreateTimerTask>:
{
  402370:	b510      	push	{r4, lr}
  402372:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402374:	4b0f      	ldr	r3, [pc, #60]	; (4023b4 <xTimerCreateTimerTask+0x44>)
  402376:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402378:	4b0f      	ldr	r3, [pc, #60]	; (4023b8 <xTimerCreateTimerTask+0x48>)
  40237a:	681b      	ldr	r3, [r3, #0]
  40237c:	b173      	cbz	r3, 40239c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40237e:	2300      	movs	r3, #0
  402380:	9303      	str	r3, [sp, #12]
  402382:	9302      	str	r3, [sp, #8]
  402384:	9301      	str	r3, [sp, #4]
  402386:	2204      	movs	r2, #4
  402388:	9200      	str	r2, [sp, #0]
  40238a:	f44f 7282 	mov.w	r2, #260	; 0x104
  40238e:	490b      	ldr	r1, [pc, #44]	; (4023bc <xTimerCreateTimerTask+0x4c>)
  402390:	480b      	ldr	r0, [pc, #44]	; (4023c0 <xTimerCreateTimerTask+0x50>)
  402392:	4c0c      	ldr	r4, [pc, #48]	; (4023c4 <xTimerCreateTimerTask+0x54>)
  402394:	47a0      	blx	r4
	configASSERT( xReturn );
  402396:	b108      	cbz	r0, 40239c <xTimerCreateTimerTask+0x2c>
}
  402398:	b004      	add	sp, #16
  40239a:	bd10      	pop	{r4, pc}
  40239c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023a0:	b672      	cpsid	i
  4023a2:	f383 8811 	msr	BASEPRI, r3
  4023a6:	f3bf 8f6f 	isb	sy
  4023aa:	f3bf 8f4f 	dsb	sy
  4023ae:	b662      	cpsie	i
  4023b0:	e7fe      	b.n	4023b0 <xTimerCreateTimerTask+0x40>
  4023b2:	bf00      	nop
  4023b4:	004022ed 	.word	0x004022ed
  4023b8:	2040c348 	.word	0x2040c348
  4023bc:	0040d68c 	.word	0x0040d68c
  4023c0:	004024f1 	.word	0x004024f1
  4023c4:	00401759 	.word	0x00401759

004023c8 <xTimerGenericCommand>:
	configASSERT( xTimer );
  4023c8:	b1d8      	cbz	r0, 402402 <xTimerGenericCommand+0x3a>
{
  4023ca:	b530      	push	{r4, r5, lr}
  4023cc:	b085      	sub	sp, #20
  4023ce:	4615      	mov	r5, r2
  4023d0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4023d2:	4a15      	ldr	r2, [pc, #84]	; (402428 <xTimerGenericCommand+0x60>)
  4023d4:	6810      	ldr	r0, [r2, #0]
  4023d6:	b320      	cbz	r0, 402422 <xTimerGenericCommand+0x5a>
  4023d8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  4023da:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4023dc:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4023de:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4023e0:	2905      	cmp	r1, #5
  4023e2:	dc19      	bgt.n	402418 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4023e4:	4b11      	ldr	r3, [pc, #68]	; (40242c <xTimerGenericCommand+0x64>)
  4023e6:	4798      	blx	r3
  4023e8:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4023ea:	f04f 0300 	mov.w	r3, #0
  4023ee:	bf0c      	ite	eq
  4023f0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4023f2:	461a      	movne	r2, r3
  4023f4:	4669      	mov	r1, sp
  4023f6:	480c      	ldr	r0, [pc, #48]	; (402428 <xTimerGenericCommand+0x60>)
  4023f8:	6800      	ldr	r0, [r0, #0]
  4023fa:	4c0d      	ldr	r4, [pc, #52]	; (402430 <xTimerGenericCommand+0x68>)
  4023fc:	47a0      	blx	r4
}
  4023fe:	b005      	add	sp, #20
  402400:	bd30      	pop	{r4, r5, pc}
  402402:	f04f 0380 	mov.w	r3, #128	; 0x80
  402406:	b672      	cpsid	i
  402408:	f383 8811 	msr	BASEPRI, r3
  40240c:	f3bf 8f6f 	isb	sy
  402410:	f3bf 8f4f 	dsb	sy
  402414:	b662      	cpsie	i
  402416:	e7fe      	b.n	402416 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402418:	2300      	movs	r3, #0
  40241a:	4669      	mov	r1, sp
  40241c:	4c05      	ldr	r4, [pc, #20]	; (402434 <xTimerGenericCommand+0x6c>)
  40241e:	47a0      	blx	r4
  402420:	e7ed      	b.n	4023fe <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402422:	2000      	movs	r0, #0
	return xReturn;
  402424:	e7eb      	b.n	4023fe <xTimerGenericCommand+0x36>
  402426:	bf00      	nop
  402428:	2040c348 	.word	0x2040c348
  40242c:	00402105 	.word	0x00402105
  402430:	004010b5 	.word	0x004010b5
  402434:	00401299 	.word	0x00401299

00402438 <prvSampleTimeNow>:
{
  402438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40243c:	b082      	sub	sp, #8
  40243e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402440:	4b24      	ldr	r3, [pc, #144]	; (4024d4 <prvSampleTimeNow+0x9c>)
  402442:	4798      	blx	r3
  402444:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402446:	4b24      	ldr	r3, [pc, #144]	; (4024d8 <prvSampleTimeNow+0xa0>)
  402448:	681b      	ldr	r3, [r3, #0]
  40244a:	4298      	cmp	r0, r3
  40244c:	d31b      	bcc.n	402486 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  40244e:	2300      	movs	r3, #0
  402450:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402454:	4b20      	ldr	r3, [pc, #128]	; (4024d8 <prvSampleTimeNow+0xa0>)
  402456:	601f      	str	r7, [r3, #0]
}
  402458:	4638      	mov	r0, r7
  40245a:	b002      	add	sp, #8
  40245c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402460:	2100      	movs	r1, #0
  402462:	9100      	str	r1, [sp, #0]
  402464:	460b      	mov	r3, r1
  402466:	4652      	mov	r2, sl
  402468:	4620      	mov	r0, r4
  40246a:	4c1c      	ldr	r4, [pc, #112]	; (4024dc <prvSampleTimeNow+0xa4>)
  40246c:	47a0      	blx	r4
				configASSERT( xResult );
  40246e:	b960      	cbnz	r0, 40248a <prvSampleTimeNow+0x52>
  402470:	f04f 0380 	mov.w	r3, #128	; 0x80
  402474:	b672      	cpsid	i
  402476:	f383 8811 	msr	BASEPRI, r3
  40247a:	f3bf 8f6f 	isb	sy
  40247e:	f3bf 8f4f 	dsb	sy
  402482:	b662      	cpsie	i
  402484:	e7fe      	b.n	402484 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402486:	4d16      	ldr	r5, [pc, #88]	; (4024e0 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402488:	4e16      	ldr	r6, [pc, #88]	; (4024e4 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40248a:	682b      	ldr	r3, [r5, #0]
  40248c:	681a      	ldr	r2, [r3, #0]
  40248e:	b1c2      	cbz	r2, 4024c2 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402490:	68db      	ldr	r3, [r3, #12]
  402492:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402496:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402498:	f104 0904 	add.w	r9, r4, #4
  40249c:	4648      	mov	r0, r9
  40249e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4024a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4024a2:	4620      	mov	r0, r4
  4024a4:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4024a6:	69e3      	ldr	r3, [r4, #28]
  4024a8:	2b01      	cmp	r3, #1
  4024aa:	d1ee      	bne.n	40248a <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4024ac:	69a3      	ldr	r3, [r4, #24]
  4024ae:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4024b0:	459a      	cmp	sl, r3
  4024b2:	d2d5      	bcs.n	402460 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4024b4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4024b6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4024b8:	4649      	mov	r1, r9
  4024ba:	6828      	ldr	r0, [r5, #0]
  4024bc:	4b0a      	ldr	r3, [pc, #40]	; (4024e8 <prvSampleTimeNow+0xb0>)
  4024be:	4798      	blx	r3
  4024c0:	e7e3      	b.n	40248a <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  4024c2:	4a0a      	ldr	r2, [pc, #40]	; (4024ec <prvSampleTimeNow+0xb4>)
  4024c4:	6810      	ldr	r0, [r2, #0]
  4024c6:	4906      	ldr	r1, [pc, #24]	; (4024e0 <prvSampleTimeNow+0xa8>)
  4024c8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4024ca:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  4024cc:	2301      	movs	r3, #1
  4024ce:	f8c8 3000 	str.w	r3, [r8]
  4024d2:	e7bf      	b.n	402454 <prvSampleTimeNow+0x1c>
  4024d4:	00401a29 	.word	0x00401a29
  4024d8:	2040c344 	.word	0x2040c344
  4024dc:	004023c9 	.word	0x004023c9
  4024e0:	2040c314 	.word	0x2040c314
  4024e4:	0040099d 	.word	0x0040099d
  4024e8:	00400969 	.word	0x00400969
  4024ec:	2040c318 	.word	0x2040c318

004024f0 <prvTimerTask>:
{
  4024f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4024f4:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4024f6:	4e75      	ldr	r6, [pc, #468]	; (4026cc <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4024f8:	4f75      	ldr	r7, [pc, #468]	; (4026d0 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4024fa:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 4026f8 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4024fe:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 4026fc <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402502:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402504:	681a      	ldr	r2, [r3, #0]
  402506:	2a00      	cmp	r2, #0
  402508:	f000 80ce 	beq.w	4026a8 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40250c:	68db      	ldr	r3, [r3, #12]
  40250e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402510:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402512:	a804      	add	r0, sp, #16
  402514:	4b6f      	ldr	r3, [pc, #444]	; (4026d4 <prvTimerTask+0x1e4>)
  402516:	4798      	blx	r3
  402518:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40251a:	9b04      	ldr	r3, [sp, #16]
  40251c:	2b00      	cmp	r3, #0
  40251e:	d144      	bne.n	4025aa <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402520:	42a0      	cmp	r0, r4
  402522:	d212      	bcs.n	40254a <prvTimerTask+0x5a>
  402524:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402526:	1b61      	subs	r1, r4, r5
  402528:	4b6b      	ldr	r3, [pc, #428]	; (4026d8 <prvTimerTask+0x1e8>)
  40252a:	6818      	ldr	r0, [r3, #0]
  40252c:	4b6b      	ldr	r3, [pc, #428]	; (4026dc <prvTimerTask+0x1ec>)
  40252e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402530:	4b6b      	ldr	r3, [pc, #428]	; (4026e0 <prvTimerTask+0x1f0>)
  402532:	4798      	blx	r3
  402534:	2800      	cmp	r0, #0
  402536:	d13a      	bne.n	4025ae <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402538:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40253c:	f8c9 3000 	str.w	r3, [r9]
  402540:	f3bf 8f4f 	dsb	sy
  402544:	f3bf 8f6f 	isb	sy
  402548:	e031      	b.n	4025ae <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  40254a:	4b65      	ldr	r3, [pc, #404]	; (4026e0 <prvTimerTask+0x1f0>)
  40254c:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40254e:	6833      	ldr	r3, [r6, #0]
  402550:	68db      	ldr	r3, [r3, #12]
  402552:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402556:	f10a 0004 	add.w	r0, sl, #4
  40255a:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40255c:	f8da 301c 	ldr.w	r3, [sl, #28]
  402560:	2b01      	cmp	r3, #1
  402562:	d004      	beq.n	40256e <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402564:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402568:	4650      	mov	r0, sl
  40256a:	4798      	blx	r3
  40256c:	e01f      	b.n	4025ae <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40256e:	f8da 1018 	ldr.w	r1, [sl, #24]
  402572:	4623      	mov	r3, r4
  402574:	462a      	mov	r2, r5
  402576:	4421      	add	r1, r4
  402578:	4650      	mov	r0, sl
  40257a:	4d5a      	ldr	r5, [pc, #360]	; (4026e4 <prvTimerTask+0x1f4>)
  40257c:	47a8      	blx	r5
  40257e:	2801      	cmp	r0, #1
  402580:	d1f0      	bne.n	402564 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402582:	2100      	movs	r1, #0
  402584:	9100      	str	r1, [sp, #0]
  402586:	460b      	mov	r3, r1
  402588:	4622      	mov	r2, r4
  40258a:	4650      	mov	r0, sl
  40258c:	4c56      	ldr	r4, [pc, #344]	; (4026e8 <prvTimerTask+0x1f8>)
  40258e:	47a0      	blx	r4
			configASSERT( xResult );
  402590:	2800      	cmp	r0, #0
  402592:	d1e7      	bne.n	402564 <prvTimerTask+0x74>
  402594:	f04f 0380 	mov.w	r3, #128	; 0x80
  402598:	b672      	cpsid	i
  40259a:	f383 8811 	msr	BASEPRI, r3
  40259e:	f3bf 8f6f 	isb	sy
  4025a2:	f3bf 8f4f 	dsb	sy
  4025a6:	b662      	cpsie	i
  4025a8:	e7fe      	b.n	4025a8 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  4025aa:	4b4d      	ldr	r3, [pc, #308]	; (4026e0 <prvTimerTask+0x1f0>)
  4025ac:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4025ae:	4d4a      	ldr	r5, [pc, #296]	; (4026d8 <prvTimerTask+0x1e8>)
  4025b0:	4c4e      	ldr	r4, [pc, #312]	; (4026ec <prvTimerTask+0x1fc>)
  4025b2:	e006      	b.n	4025c2 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4025b4:	9907      	ldr	r1, [sp, #28]
  4025b6:	9806      	ldr	r0, [sp, #24]
  4025b8:	9b05      	ldr	r3, [sp, #20]
  4025ba:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4025bc:	9b04      	ldr	r3, [sp, #16]
  4025be:	2b00      	cmp	r3, #0
  4025c0:	da09      	bge.n	4025d6 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4025c2:	2300      	movs	r3, #0
  4025c4:	461a      	mov	r2, r3
  4025c6:	a904      	add	r1, sp, #16
  4025c8:	6828      	ldr	r0, [r5, #0]
  4025ca:	47a0      	blx	r4
  4025cc:	2800      	cmp	r0, #0
  4025ce:	d098      	beq.n	402502 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4025d0:	9b04      	ldr	r3, [sp, #16]
  4025d2:	2b00      	cmp	r3, #0
  4025d4:	dbee      	blt.n	4025b4 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4025d6:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4025da:	f8da 3014 	ldr.w	r3, [sl, #20]
  4025de:	b113      	cbz	r3, 4025e6 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4025e0:	f10a 0004 	add.w	r0, sl, #4
  4025e4:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4025e6:	a803      	add	r0, sp, #12
  4025e8:	4b3a      	ldr	r3, [pc, #232]	; (4026d4 <prvTimerTask+0x1e4>)
  4025ea:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4025ec:	9b04      	ldr	r3, [sp, #16]
  4025ee:	2b09      	cmp	r3, #9
  4025f0:	d8e7      	bhi.n	4025c2 <prvTimerTask+0xd2>
  4025f2:	a201      	add	r2, pc, #4	; (adr r2, 4025f8 <prvTimerTask+0x108>)
  4025f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4025f8:	00402621 	.word	0x00402621
  4025fc:	00402621 	.word	0x00402621
  402600:	00402621 	.word	0x00402621
  402604:	004025c3 	.word	0x004025c3
  402608:	00402675 	.word	0x00402675
  40260c:	004026a1 	.word	0x004026a1
  402610:	00402621 	.word	0x00402621
  402614:	00402621 	.word	0x00402621
  402618:	004025c3 	.word	0x004025c3
  40261c:	00402675 	.word	0x00402675
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402620:	9c05      	ldr	r4, [sp, #20]
  402622:	f8da 1018 	ldr.w	r1, [sl, #24]
  402626:	4623      	mov	r3, r4
  402628:	4602      	mov	r2, r0
  40262a:	4421      	add	r1, r4
  40262c:	4650      	mov	r0, sl
  40262e:	4c2d      	ldr	r4, [pc, #180]	; (4026e4 <prvTimerTask+0x1f4>)
  402630:	47a0      	blx	r4
  402632:	2801      	cmp	r0, #1
  402634:	d1bc      	bne.n	4025b0 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402636:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40263a:	4650      	mov	r0, sl
  40263c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40263e:	f8da 301c 	ldr.w	r3, [sl, #28]
  402642:	2b01      	cmp	r3, #1
  402644:	d1b4      	bne.n	4025b0 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402646:	f8da 2018 	ldr.w	r2, [sl, #24]
  40264a:	2100      	movs	r1, #0
  40264c:	9100      	str	r1, [sp, #0]
  40264e:	460b      	mov	r3, r1
  402650:	9805      	ldr	r0, [sp, #20]
  402652:	4402      	add	r2, r0
  402654:	4650      	mov	r0, sl
  402656:	4c24      	ldr	r4, [pc, #144]	; (4026e8 <prvTimerTask+0x1f8>)
  402658:	47a0      	blx	r4
							configASSERT( xResult );
  40265a:	2800      	cmp	r0, #0
  40265c:	d1a8      	bne.n	4025b0 <prvTimerTask+0xc0>
  40265e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402662:	b672      	cpsid	i
  402664:	f383 8811 	msr	BASEPRI, r3
  402668:	f3bf 8f6f 	isb	sy
  40266c:	f3bf 8f4f 	dsb	sy
  402670:	b662      	cpsie	i
  402672:	e7fe      	b.n	402672 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402674:	9905      	ldr	r1, [sp, #20]
  402676:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40267a:	b131      	cbz	r1, 40268a <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40267c:	4603      	mov	r3, r0
  40267e:	4602      	mov	r2, r0
  402680:	4401      	add	r1, r0
  402682:	4650      	mov	r0, sl
  402684:	4c17      	ldr	r4, [pc, #92]	; (4026e4 <prvTimerTask+0x1f4>)
  402686:	47a0      	blx	r4
  402688:	e792      	b.n	4025b0 <prvTimerTask+0xc0>
  40268a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40268e:	b672      	cpsid	i
  402690:	f383 8811 	msr	BASEPRI, r3
  402694:	f3bf 8f6f 	isb	sy
  402698:	f3bf 8f4f 	dsb	sy
  40269c:	b662      	cpsie	i
  40269e:	e7fe      	b.n	40269e <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  4026a0:	4650      	mov	r0, sl
  4026a2:	4b13      	ldr	r3, [pc, #76]	; (4026f0 <prvTimerTask+0x200>)
  4026a4:	4798      	blx	r3
  4026a6:	e783      	b.n	4025b0 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  4026a8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4026aa:	a804      	add	r0, sp, #16
  4026ac:	4b09      	ldr	r3, [pc, #36]	; (4026d4 <prvTimerTask+0x1e4>)
  4026ae:	4798      	blx	r3
  4026b0:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4026b2:	9b04      	ldr	r3, [sp, #16]
  4026b4:	2b00      	cmp	r3, #0
  4026b6:	f47f af78 	bne.w	4025aa <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4026ba:	4b0e      	ldr	r3, [pc, #56]	; (4026f4 <prvTimerTask+0x204>)
  4026bc:	681b      	ldr	r3, [r3, #0]
  4026be:	681a      	ldr	r2, [r3, #0]
  4026c0:	fab2 f282 	clz	r2, r2
  4026c4:	0952      	lsrs	r2, r2, #5
  4026c6:	2400      	movs	r4, #0
  4026c8:	e72d      	b.n	402526 <prvTimerTask+0x36>
  4026ca:	bf00      	nop
  4026cc:	2040c314 	.word	0x2040c314
  4026d0:	00401a19 	.word	0x00401a19
  4026d4:	00402439 	.word	0x00402439
  4026d8:	2040c348 	.word	0x2040c348
  4026dc:	0040167d 	.word	0x0040167d
  4026e0:	00401b81 	.word	0x00401b81
  4026e4:	004022a1 	.word	0x004022a1
  4026e8:	004023c9 	.word	0x004023c9
  4026ec:	00401479 	.word	0x00401479
  4026f0:	00400d4d 	.word	0x00400d4d
  4026f4:	2040c318 	.word	0x2040c318
  4026f8:	e000ed04 	.word	0xe000ed04
  4026fc:	0040099d 	.word	0x0040099d

00402700 <chip_isr>:
  //CORSI acorda task wifi freertos
  //BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  //xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  //vTaskNotifyGiveFromISR( xHandleWifi, &xHigherPriorityTaskWoken );
  
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  402700:	2810      	cmp	r0, #16
  402702:	d108      	bne.n	402716 <chip_isr+0x16>
  402704:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402708:	d105      	bne.n	402716 <chip_isr+0x16>
{
  40270a:	b508      	push	{r3, lr}
		if (gpfIsr) {
  40270c:	4b02      	ldr	r3, [pc, #8]	; (402718 <chip_isr+0x18>)
  40270e:	681b      	ldr	r3, [r3, #0]
  402710:	b103      	cbz	r3, 402714 <chip_isr+0x14>
			gpfIsr();
  402712:	4798      	blx	r3
  402714:	bd08      	pop	{r3, pc}
  402716:	4770      	bx	lr
  402718:	2040c34c 	.word	0x2040c34c

0040271c <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  40271c:	b150      	cbz	r0, 402734 <nm_bsp_sleep+0x18>
{
  40271e:	b570      	push	{r4, r5, r6, lr}
  402720:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  402722:	4e05      	ldr	r6, [pc, #20]	; (402738 <nm_bsp_sleep+0x1c>)
  402724:	4d05      	ldr	r5, [pc, #20]	; (40273c <nm_bsp_sleep+0x20>)
  402726:	4630      	mov	r0, r6
  402728:	47a8      	blx	r5
	while(u32TimeMsec--) {
  40272a:	3c01      	subs	r4, #1
  40272c:	f1b4 3fff 	cmp.w	r4, #4294967295
  402730:	d1f9      	bne.n	402726 <nm_bsp_sleep+0xa>
  402732:	bd70      	pop	{r4, r5, r6, pc}
  402734:	4770      	bx	lr
  402736:	bf00      	nop
  402738:	00031635 	.word	0x00031635
  40273c:	20400001 	.word	0x20400001

00402740 <nm_bsp_reset>:
{
  402740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402744:	4f09      	ldr	r7, [pc, #36]	; (40276c <nm_bsp_reset+0x2c>)
  402746:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  40274a:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  40274e:	4d08      	ldr	r5, [pc, #32]	; (402770 <nm_bsp_reset+0x30>)
  402750:	2608      	movs	r6, #8
  402752:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  402754:	2064      	movs	r0, #100	; 0x64
  402756:	4c07      	ldr	r4, [pc, #28]	; (402774 <nm_bsp_reset+0x34>)
  402758:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40275a:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  40275e:	2064      	movs	r0, #100	; 0x64
  402760:	47a0      	blx	r4
  402762:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  402764:	2064      	movs	r0, #100	; 0x64
  402766:	47a0      	blx	r4
  402768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40276c:	400e1200 	.word	0x400e1200
  402770:	400e1000 	.word	0x400e1000
  402774:	0040271d 	.word	0x0040271d

00402778 <nm_bsp_init>:
{
  402778:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  40277a:	2200      	movs	r2, #0
  40277c:	4b14      	ldr	r3, [pc, #80]	; (4027d0 <nm_bsp_init+0x58>)
  40277e:	601a      	str	r2, [r3, #0]
  402780:	200a      	movs	r0, #10
  402782:	4c14      	ldr	r4, [pc, #80]	; (4027d4 <nm_bsp_init+0x5c>)
  402784:	47a0      	blx	r4
  402786:	200b      	movs	r0, #11
  402788:	47a0      	blx	r4
  40278a:	200c      	movs	r0, #12
  40278c:	47a0      	blx	r4
  40278e:	2010      	movs	r0, #16
  402790:	47a0      	blx	r4
  402792:	2011      	movs	r0, #17
  402794:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402796:	4b10      	ldr	r3, [pc, #64]	; (4027d8 <nm_bsp_init+0x60>)
  402798:	2208      	movs	r2, #8
  40279a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40279c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4027a0:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4027a2:	4a0e      	ldr	r2, [pc, #56]	; (4027dc <nm_bsp_init+0x64>)
  4027a4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4027a8:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4027aa:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4027ae:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4027b0:	2204      	movs	r2, #4
  4027b2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4027b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4027b8:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  4027ba:	4b09      	ldr	r3, [pc, #36]	; (4027e0 <nm_bsp_init+0x68>)
  4027bc:	681b      	ldr	r3, [r3, #0]
  4027be:	f013 0f01 	tst.w	r3, #1
  4027c2:	d001      	beq.n	4027c8 <nm_bsp_init+0x50>
  4027c4:	4b06      	ldr	r3, [pc, #24]	; (4027e0 <nm_bsp_init+0x68>)
  4027c6:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  4027c8:	4b06      	ldr	r3, [pc, #24]	; (4027e4 <nm_bsp_init+0x6c>)
  4027ca:	4798      	blx	r3
}
  4027cc:	2000      	movs	r0, #0
  4027ce:	bd10      	pop	{r4, pc}
  4027d0:	2040c34c 	.word	0x2040c34c
  4027d4:	00405a5d 	.word	0x00405a5d
  4027d8:	400e1000 	.word	0x400e1000
  4027dc:	400e1200 	.word	0x400e1200
  4027e0:	e000e010 	.word	0xe000e010
  4027e4:	00402741 	.word	0x00402741

004027e8 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  4027e8:	b530      	push	{r4, r5, lr}
  4027ea:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  4027ec:	4b17      	ldr	r3, [pc, #92]	; (40284c <nm_bsp_register_isr+0x64>)
  4027ee:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  4027f0:	2010      	movs	r0, #16
  4027f2:	4b17      	ldr	r3, [pc, #92]	; (402850 <nm_bsp_register_isr+0x68>)
  4027f4:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  4027f6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4027fa:	207c      	movs	r0, #124	; 0x7c
  4027fc:	4b15      	ldr	r3, [pc, #84]	; (402854 <nm_bsp_register_isr+0x6c>)
  4027fe:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  402800:	4c15      	ldr	r4, [pc, #84]	; (402858 <nm_bsp_register_isr+0x70>)
  402802:	2201      	movs	r2, #1
  402804:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402808:	4620      	mov	r0, r4
  40280a:	4b14      	ldr	r3, [pc, #80]	; (40285c <nm_bsp_register_isr+0x74>)
  40280c:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  40280e:	4b14      	ldr	r3, [pc, #80]	; (402860 <nm_bsp_register_isr+0x78>)
  402810:	9300      	str	r3, [sp, #0]
  402812:	2351      	movs	r3, #81	; 0x51
  402814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402818:	2110      	movs	r1, #16
  40281a:	4620      	mov	r0, r4
  40281c:	4d11      	ldr	r5, [pc, #68]	; (402864 <nm_bsp_register_isr+0x7c>)
  40281e:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  402820:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402824:	4620      	mov	r0, r4
  402826:	4b10      	ldr	r3, [pc, #64]	; (402868 <nm_bsp_register_isr+0x80>)
  402828:	4798      	blx	r3
  // corsi: clear PIO IRQ before enable nvic
  pio_get_interrupt_status(CONF_WINC_SPI_INT_PIO);
  40282a:	4620      	mov	r0, r4
  40282c:	4b0f      	ldr	r3, [pc, #60]	; (40286c <nm_bsp_register_isr+0x84>)
  40282e:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402830:	4b0f      	ldr	r3, [pc, #60]	; (402870 <nm_bsp_register_isr+0x88>)
  402832:	22a0      	movs	r2, #160	; 0xa0
  402834:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402838:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40283c:	601a      	str	r2, [r3, #0]
  // corsi: for use with RTOS priority shall be < configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY 
 	NVIC_SetPriority((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID, 5);
 	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  40283e:	2205      	movs	r2, #5
  402840:	2110      	movs	r1, #16
  402842:	4620      	mov	r0, r4
  402844:	4b0b      	ldr	r3, [pc, #44]	; (402874 <nm_bsp_register_isr+0x8c>)
  402846:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  402848:	b003      	add	sp, #12
  40284a:	bd30      	pop	{r4, r5, pc}
  40284c:	2040c34c 	.word	0x2040c34c
  402850:	00405a5d 	.word	0x00405a5d
  402854:	00405665 	.word	0x00405665
  402858:	400e1400 	.word	0x400e1400
  40285c:	00405475 	.word	0x00405475
  402860:	00402701 	.word	0x00402701
  402864:	004057e5 	.word	0x004057e5
  402868:	00405653 	.word	0x00405653
  40286c:	0040565b 	.word	0x0040565b
  402870:	e000e100 	.word	0xe000e100
  402874:	004058b9 	.word	0x004058b9

00402878 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  402878:	b508      	push	{r3, lr}
	if (u8Enable) {
  40287a:	b928      	cbnz	r0, 402888 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  40287c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402880:	4804      	ldr	r0, [pc, #16]	; (402894 <nm_bsp_interrupt_ctrl+0x1c>)
  402882:	4b05      	ldr	r3, [pc, #20]	; (402898 <nm_bsp_interrupt_ctrl+0x20>)
  402884:	4798      	blx	r3
  402886:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  402888:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40288c:	4801      	ldr	r0, [pc, #4]	; (402894 <nm_bsp_interrupt_ctrl+0x1c>)
  40288e:	4b03      	ldr	r3, [pc, #12]	; (40289c <nm_bsp_interrupt_ctrl+0x24>)
  402890:	4798      	blx	r3
  402892:	bd08      	pop	{r3, pc}
  402894:	400e1400 	.word	0x400e1400
  402898:	00405657 	.word	0x00405657
  40289c:	00405653 	.word	0x00405653

004028a0 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  4028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  4028a2:	4c39      	ldr	r4, [pc, #228]	; (402988 <nm_bus_init+0xe8>)
  4028a4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4028a8:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4028aa:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4028ae:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4028b0:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4028b2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4028b6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4028b8:	430b      	orrs	r3, r1
  4028ba:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4028bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4028be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  4028c2:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4028c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4028c8:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4028ca:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4028ce:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4028d0:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4028d2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4028d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4028d8:	4313      	orrs	r3, r2
  4028da:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4028dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4028de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  4028e2:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  4028e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  4028e8:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4028ea:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4028ee:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4028f0:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4028f2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4028f6:	6f20      	ldr	r0, [r4, #112]	; 0x70
  4028f8:	4318      	orrs	r0, r3
  4028fa:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4028fc:	6f60      	ldr	r0, [r4, #116]	; 0x74
  4028fe:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  402902:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402904:	6061      	str	r1, [r4, #4]
  402906:	6062      	str	r2, [r4, #4]
  402908:	6063      	str	r3, [r4, #4]
  40290a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  40290e:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  402910:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  402912:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  402914:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  402916:	4d1d      	ldr	r5, [pc, #116]	; (40298c <nm_bus_init+0xec>)
  402918:	4628      	mov	r0, r5
  40291a:	4b1d      	ldr	r3, [pc, #116]	; (402990 <nm_bus_init+0xf0>)
  40291c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40291e:	2302      	movs	r3, #2
  402920:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  402922:	2380      	movs	r3, #128	; 0x80
  402924:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  402926:	686b      	ldr	r3, [r5, #4]
  402928:	f043 0301 	orr.w	r3, r3, #1
  40292c:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40292e:	686b      	ldr	r3, [r5, #4]
  402930:	f043 0310 	orr.w	r3, r3, #16
  402934:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  402936:	2101      	movs	r1, #1
  402938:	4628      	mov	r0, r5
  40293a:	4b16      	ldr	r3, [pc, #88]	; (402994 <nm_bus_init+0xf4>)
  40293c:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  40293e:	2200      	movs	r2, #0
  402940:	2101      	movs	r1, #1
  402942:	4628      	mov	r0, r5
  402944:	4b14      	ldr	r3, [pc, #80]	; (402998 <nm_bus_init+0xf8>)
  402946:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  402948:	2201      	movs	r2, #1
  40294a:	4611      	mov	r1, r2
  40294c:	4628      	mov	r0, r5
  40294e:	4b13      	ldr	r3, [pc, #76]	; (40299c <nm_bus_init+0xfc>)
  402950:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  402952:	2200      	movs	r2, #0
  402954:	2101      	movs	r1, #1
  402956:	4628      	mov	r0, r5
  402958:	4b11      	ldr	r3, [pc, #68]	; (4029a0 <nm_bus_init+0x100>)
  40295a:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  40295c:	4911      	ldr	r1, [pc, #68]	; (4029a4 <nm_bus_init+0x104>)
  40295e:	4812      	ldr	r0, [pc, #72]	; (4029a8 <nm_bus_init+0x108>)
  402960:	4b12      	ldr	r3, [pc, #72]	; (4029ac <nm_bus_init+0x10c>)
  402962:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  402964:	b2c2      	uxtb	r2, r0
  402966:	2101      	movs	r1, #1
  402968:	4628      	mov	r0, r5
  40296a:	4b11      	ldr	r3, [pc, #68]	; (4029b0 <nm_bus_init+0x110>)
  40296c:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  40296e:	2300      	movs	r3, #0
  402970:	461a      	mov	r2, r3
  402972:	2101      	movs	r1, #1
  402974:	4628      	mov	r0, r5
  402976:	4f0f      	ldr	r7, [pc, #60]	; (4029b4 <nm_bus_init+0x114>)
  402978:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40297a:	2301      	movs	r3, #1
  40297c:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  40297e:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  402980:	4b0d      	ldr	r3, [pc, #52]	; (4029b8 <nm_bus_init+0x118>)
  402982:	4798      	blx	r3
#endif
	return result;
}
  402984:	2000      	movs	r0, #0
  402986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402988:	400e1400 	.word	0x400e1400
  40298c:	40008000 	.word	0x40008000
  402990:	00405ab1 	.word	0x00405ab1
  402994:	00405add 	.word	0x00405add
  402998:	00405b57 	.word	0x00405b57
  40299c:	00405b75 	.word	0x00405b75
  4029a0:	00405b93 	.word	0x00405b93
  4029a4:	11e1a300 	.word	0x11e1a300
  4029a8:	02dc6c00 	.word	0x02dc6c00
  4029ac:	00405ba7 	.word	0x00405ba7
  4029b0:	00405bbd 	.word	0x00405bbd
  4029b4:	00405be5 	.word	0x00405be5
  4029b8:	00402741 	.word	0x00402741

004029bc <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  4029bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029c0:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  4029c2:	2803      	cmp	r0, #3
  4029c4:	d144      	bne.n	402a50 <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  4029c6:	680e      	ldr	r6, [r1, #0]
  4029c8:	684d      	ldr	r5, [r1, #4]
  4029ca:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  4029cc:	2300      	movs	r3, #0
  4029ce:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  4029d2:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  4029d6:	b186      	cbz	r6, 4029fa <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  4029d8:	2d00      	cmp	r5, #0
  4029da:	d136      	bne.n	402a4a <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  4029dc:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  4029e0:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  4029e2:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  4029e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4029e8:	4b20      	ldr	r3, [pc, #128]	; (402a6c <nm_bus_ioctl+0xb0>)
  4029ea:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  4029ec:	b32c      	cbz	r4, 402a3a <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  4029ee:	4f20      	ldr	r7, [pc, #128]	; (402a70 <nm_bus_ioctl+0xb4>)
  4029f0:	f8df b094 	ldr.w	fp, [pc, #148]	; 402a88 <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  4029f4:	f8df a094 	ldr.w	sl, [pc, #148]	; 402a8c <nm_bus_ioctl+0xd0>
  4029f8:	e006      	b.n	402a08 <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  4029fa:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  4029fe:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  402a02:	ae01      	add	r6, sp, #4
  402a04:	e7ee      	b.n	4029e4 <nm_bus_ioctl+0x28>
	while (u16Sz) {
  402a06:	b1c4      	cbz	r4, 402a3a <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  402a08:	2300      	movs	r3, #0
  402a0a:	461a      	mov	r2, r3
  402a0c:	7831      	ldrb	r1, [r6, #0]
  402a0e:	4638      	mov	r0, r7
  402a10:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  402a12:	f10d 0205 	add.w	r2, sp, #5
  402a16:	f10d 0106 	add.w	r1, sp, #6
  402a1a:	4638      	mov	r0, r7
  402a1c:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  402a1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402a22:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  402a24:	3c01      	subs	r4, #1
  402a26:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  402a28:	f1b8 0f00 	cmp.w	r8, #0
  402a2c:	d100      	bne.n	402a30 <nm_bus_ioctl+0x74>
			pu8Miso++;
  402a2e:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  402a30:	f1b9 0f00 	cmp.w	r9, #0
  402a34:	d1e7      	bne.n	402a06 <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  402a36:	3601      	adds	r6, #1
  402a38:	e7e5      	b.n	402a06 <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  402a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402a3e:	4b0b      	ldr	r3, [pc, #44]	; (402a6c <nm_bus_ioctl+0xb0>)
  402a40:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  402a42:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  402a44:	b003      	add	sp, #12
  402a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  402a4a:	f06f 0005 	mvn.w	r0, #5
		break;
  402a4e:	e7f9      	b.n	402a44 <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  402a50:	f240 121f 	movw	r2, #287	; 0x11f
  402a54:	4907      	ldr	r1, [pc, #28]	; (402a74 <nm_bus_ioctl+0xb8>)
  402a56:	4808      	ldr	r0, [pc, #32]	; (402a78 <nm_bus_ioctl+0xbc>)
  402a58:	4c08      	ldr	r4, [pc, #32]	; (402a7c <nm_bus_ioctl+0xc0>)
  402a5a:	47a0      	blx	r4
  402a5c:	4808      	ldr	r0, [pc, #32]	; (402a80 <nm_bus_ioctl+0xc4>)
  402a5e:	47a0      	blx	r4
  402a60:	4808      	ldr	r0, [pc, #32]	; (402a84 <nm_bus_ioctl+0xc8>)
  402a62:	47a0      	blx	r4
			s8Ret = -1;
  402a64:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  402a68:	e7ec      	b.n	402a44 <nm_bus_ioctl+0x88>
  402a6a:	bf00      	nop
  402a6c:	400e1400 	.word	0x400e1400
  402a70:	40008000 	.word	0x40008000
  402a74:	0040d694 	.word	0x0040d694
  402a78:	0040d6a4 	.word	0x0040d6a4
  402a7c:	00406c9d 	.word	0x00406c9d
  402a80:	0040d6b8 	.word	0x0040d6b8
  402a84:	0040d6d0 	.word	0x0040d6d0
  402a88:	00405b23 	.word	0x00405b23
  402a8c:	00405af3 	.word	0x00405af3

00402a90 <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  402a90:	2202      	movs	r2, #2
  402a92:	4b0e      	ldr	r3, [pc, #56]	; (402acc <nm_bus_deinit+0x3c>)
  402a94:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402a96:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  402a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  402a9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402aa2:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402aa4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402aa8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402aac:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402aae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402ab2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402ab6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402ab8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402abc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402ac0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402ac2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  402ac6:	2000      	movs	r0, #0
  402ac8:	4770      	bx	lr
  402aca:	bf00      	nop
  402acc:	40008000 	.word	0x40008000

00402ad0 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  402ad0:	b13a      	cbz	r2, 402ae2 <m2m_memcpy+0x12>
  402ad2:	3901      	subs	r1, #1
  402ad4:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  402ad6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402ada:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  402ade:	4290      	cmp	r0, r2
  402ae0:	d1f9      	bne.n	402ad6 <m2m_memcpy+0x6>
  402ae2:	4770      	bx	lr

00402ae4 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  402ae4:	b122      	cbz	r2, 402af0 <m2m_memset+0xc>
  402ae6:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  402ae8:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  402aec:	4290      	cmp	r0, r2
  402aee:	d1fb      	bne.n	402ae8 <m2m_memset+0x4>
  402af0:	4770      	bx	lr

00402af2 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  402af2:	7803      	ldrb	r3, [r0, #0]
  402af4:	b143      	cbz	r3, 402b08 <m2m_strlen+0x16>
  402af6:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  402af8:	3301      	adds	r3, #1
  402afa:	b29b      	uxth	r3, r3
	while(*pcStr)
  402afc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  402b00:	2a00      	cmp	r2, #0
  402b02:	d1f9      	bne.n	402af8 <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  402b04:	4618      	mov	r0, r3
  402b06:	4770      	bx	lr
	uint16	u16StrLen = 0;
  402b08:	2300      	movs	r3, #0
  402b0a:	e7fb      	b.n	402b04 <m2m_strlen+0x12>

00402b0c <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  402b0c:	4a02      	ldr	r2, [pc, #8]	; (402b18 <isr+0xc>)
  402b0e:	7813      	ldrb	r3, [r2, #0]
  402b10:	3301      	adds	r3, #1
  402b12:	b2db      	uxtb	r3, r3
  402b14:	7013      	strb	r3, [r2, #0]
  402b16:	4770      	bx	lr
  402b18:	2040c353 	.word	0x2040c353

00402b1c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402b1c:	4770      	bx	lr
	...

00402b20 <hif_set_rx_done>:
{
  402b20:	b500      	push	{lr}
  402b22:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  402b24:	2001      	movs	r0, #1
  402b26:	4b0b      	ldr	r3, [pc, #44]	; (402b54 <hif_set_rx_done+0x34>)
  402b28:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  402b2a:	a901      	add	r1, sp, #4
  402b2c:	f241 0070 	movw	r0, #4208	; 0x1070
  402b30:	4b09      	ldr	r3, [pc, #36]	; (402b58 <hif_set_rx_done+0x38>)
  402b32:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402b34:	4603      	mov	r3, r0
  402b36:	b118      	cbz	r0, 402b40 <hif_set_rx_done+0x20>
}
  402b38:	4618      	mov	r0, r3
  402b3a:	b003      	add	sp, #12
  402b3c:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  402b40:	9901      	ldr	r1, [sp, #4]
  402b42:	f041 0102 	orr.w	r1, r1, #2
  402b46:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  402b48:	f241 0070 	movw	r0, #4208	; 0x1070
  402b4c:	4b03      	ldr	r3, [pc, #12]	; (402b5c <hif_set_rx_done+0x3c>)
  402b4e:	4798      	blx	r3
  402b50:	4603      	mov	r3, r0
  402b52:	e7f1      	b.n	402b38 <hif_set_rx_done+0x18>
  402b54:	00402879 	.word	0x00402879
  402b58:	00403e0d 	.word	0x00403e0d
  402b5c:	00403e19 	.word	0x00403e19

00402b60 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  402b60:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  402b62:	4b12      	ldr	r3, [pc, #72]	; (402bac <hif_chip_wake+0x4c>)
  402b64:	781b      	ldrb	r3, [r3, #0]
  402b66:	b94b      	cbnz	r3, 402b7c <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  402b68:	4b11      	ldr	r3, [pc, #68]	; (402bb0 <hif_chip_wake+0x50>)
  402b6a:	781b      	ldrb	r3, [r3, #0]
  402b6c:	b2db      	uxtb	r3, r3
  402b6e:	2b03      	cmp	r3, #3
  402b70:	d00c      	beq.n	402b8c <hif_chip_wake+0x2c>
  402b72:	4b0f      	ldr	r3, [pc, #60]	; (402bb0 <hif_chip_wake+0x50>)
  402b74:	781b      	ldrb	r3, [r3, #0]
  402b76:	b2db      	uxtb	r3, r3
  402b78:	2b04      	cmp	r3, #4
  402b7a:	d007      	beq.n	402b8c <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  402b7c:	4a0b      	ldr	r2, [pc, #44]	; (402bac <hif_chip_wake+0x4c>)
  402b7e:	7813      	ldrb	r3, [r2, #0]
  402b80:	3301      	adds	r3, #1
  402b82:	b2db      	uxtb	r3, r3
  402b84:	7013      	strb	r3, [r2, #0]
  402b86:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  402b88:	4618      	mov	r0, r3
  402b8a:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  402b8c:	4b09      	ldr	r3, [pc, #36]	; (402bb4 <hif_chip_wake+0x54>)
  402b8e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402b90:	4603      	mov	r3, r0
  402b92:	2800      	cmp	r0, #0
  402b94:	d1f8      	bne.n	402b88 <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  402b96:	f245 6178 	movw	r1, #22136	; 0x5678
  402b9a:	f241 0074 	movw	r0, #4212	; 0x1074
  402b9e:	4b06      	ldr	r3, [pc, #24]	; (402bb8 <hif_chip_wake+0x58>)
  402ba0:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402ba2:	4603      	mov	r3, r0
  402ba4:	2800      	cmp	r0, #0
  402ba6:	d0e9      	beq.n	402b7c <hif_chip_wake+0x1c>
  402ba8:	e7ee      	b.n	402b88 <hif_chip_wake+0x28>
  402baa:	bf00      	nop
  402bac:	2040c351 	.word	0x2040c351
  402bb0:	2040c350 	.word	0x2040c350
  402bb4:	0040397d 	.word	0x0040397d
  402bb8:	00403e19 	.word	0x00403e19

00402bbc <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  402bbc:	4b1e      	ldr	r3, [pc, #120]	; (402c38 <hif_chip_sleep+0x7c>)
  402bbe:	781b      	ldrb	r3, [r3, #0]
  402bc0:	b123      	cbz	r3, 402bcc <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  402bc2:	4a1d      	ldr	r2, [pc, #116]	; (402c38 <hif_chip_sleep+0x7c>)
  402bc4:	7813      	ldrb	r3, [r2, #0]
  402bc6:	3b01      	subs	r3, #1
  402bc8:	b2db      	uxtb	r3, r3
  402bca:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  402bcc:	4b1a      	ldr	r3, [pc, #104]	; (402c38 <hif_chip_sleep+0x7c>)
  402bce:	781b      	ldrb	r3, [r3, #0]
  402bd0:	2b00      	cmp	r3, #0
  402bd2:	d12e      	bne.n	402c32 <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  402bd4:	4b19      	ldr	r3, [pc, #100]	; (402c3c <hif_chip_sleep+0x80>)
  402bd6:	781b      	ldrb	r3, [r3, #0]
  402bd8:	b2db      	uxtb	r3, r3
  402bda:	2b03      	cmp	r3, #3
  402bdc:	d006      	beq.n	402bec <hif_chip_sleep+0x30>
  402bde:	4b17      	ldr	r3, [pc, #92]	; (402c3c <hif_chip_sleep+0x80>)
  402be0:	781b      	ldrb	r3, [r3, #0]
  402be2:	b2db      	uxtb	r3, r3
  402be4:	2b04      	cmp	r3, #4
  402be6:	d001      	beq.n	402bec <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  402be8:	2300      	movs	r3, #0
  402bea:	e023      	b.n	402c34 <hif_chip_sleep+0x78>
{
  402bec:	b500      	push	{lr}
  402bee:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  402bf0:	2300      	movs	r3, #0
  402bf2:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  402bf4:	f244 3121 	movw	r1, #17185	; 0x4321
  402bf8:	f241 0074 	movw	r0, #4212	; 0x1074
  402bfc:	4b10      	ldr	r3, [pc, #64]	; (402c40 <hif_chip_sleep+0x84>)
  402bfe:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402c00:	4603      	mov	r3, r0
  402c02:	b118      	cbz	r0, 402c0c <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  402c04:	4618      	mov	r0, r3
  402c06:	b003      	add	sp, #12
  402c08:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  402c0c:	a901      	add	r1, sp, #4
  402c0e:	2001      	movs	r0, #1
  402c10:	4b0c      	ldr	r3, [pc, #48]	; (402c44 <hif_chip_sleep+0x88>)
  402c12:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402c14:	4603      	mov	r3, r0
  402c16:	2800      	cmp	r0, #0
  402c18:	d1f4      	bne.n	402c04 <hif_chip_sleep+0x48>
			if(reg&0x2)
  402c1a:	9901      	ldr	r1, [sp, #4]
  402c1c:	f011 0f02 	tst.w	r1, #2
  402c20:	d0f0      	beq.n	402c04 <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  402c22:	f021 0102 	bic.w	r1, r1, #2
  402c26:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  402c28:	2001      	movs	r0, #1
  402c2a:	4b05      	ldr	r3, [pc, #20]	; (402c40 <hif_chip_sleep+0x84>)
  402c2c:	4798      	blx	r3
  402c2e:	4603      	mov	r3, r0
  402c30:	e7e8      	b.n	402c04 <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  402c32:	2300      	movs	r3, #0
}
  402c34:	4618      	mov	r0, r3
  402c36:	4770      	bx	lr
  402c38:	2040c351 	.word	0x2040c351
  402c3c:	2040c350 	.word	0x2040c350
  402c40:	00403e19 	.word	0x00403e19
  402c44:	00403e0d 	.word	0x00403e0d

00402c48 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  402c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c4c:	b087      	sub	sp, #28
  402c4e:	4607      	mov	r7, r0
  402c50:	4688      	mov	r8, r1
  402c52:	4692      	mov	sl, r2
  402c54:	4699      	mov	r9, r3
  402c56:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402c58:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  402c5c:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  402c60:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  402c64:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  402c68:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  402c6c:	2308      	movs	r3, #8
  402c6e:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  402c72:	2c00      	cmp	r4, #0
  402c74:	f000 809f 	beq.w	402db6 <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  402c78:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402c7c:	fa16 f383 	uxtah	r3, r6, r3
  402c80:	442b      	add	r3, r5
  402c82:	b29b      	uxth	r3, r3
  402c84:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  402c88:	4b5c      	ldr	r3, [pc, #368]	; (402dfc <hif_send+0x1b4>)
  402c8a:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  402c8c:	4683      	mov	fp, r0
  402c8e:	2800      	cmp	r0, #0
  402c90:	f040 80a2 	bne.w	402dd8 <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  402c94:	2300      	movs	r3, #0
  402c96:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  402c98:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  402c9c:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  402c9e:	9b02      	ldr	r3, [sp, #8]
  402ca0:	431f      	orrs	r7, r3
  402ca2:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  402ca4:	9b02      	ldr	r3, [sp, #8]
  402ca6:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  402caa:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  402cac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  402cb0:	9b02      	ldr	r3, [sp, #8]
  402cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402cb6:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  402cb8:	9902      	ldr	r1, [sp, #8]
  402cba:	f241 008c 	movw	r0, #4236	; 0x108c
  402cbe:	4b50      	ldr	r3, [pc, #320]	; (402e00 <hif_send+0x1b8>)
  402cc0:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  402cc2:	4683      	mov	fp, r0
  402cc4:	2800      	cmp	r0, #0
  402cc6:	f040 8091 	bne.w	402dec <hif_send+0x1a4>


		reg = 0;
  402cca:	2300      	movs	r3, #0
  402ccc:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  402cce:	9b02      	ldr	r3, [sp, #8]
  402cd0:	f043 0302 	orr.w	r3, r3, #2
  402cd4:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  402cd6:	9902      	ldr	r1, [sp, #8]
  402cd8:	f241 0078 	movw	r0, #4216	; 0x1078
  402cdc:	4b48      	ldr	r3, [pc, #288]	; (402e00 <hif_send+0x1b8>)
  402cde:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  402ce0:	4683      	mov	fp, r0
  402ce2:	2800      	cmp	r0, #0
  402ce4:	f040 8082 	bne.w	402dec <hif_send+0x1a4>
		dma_addr = 0;
  402ce8:	2300      	movs	r3, #0
  402cea:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  402cec:	f8ad 3006 	strh.w	r3, [sp, #6]
  402cf0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402cf4:	b29b      	uxth	r3, r3
  402cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402cfa:	d216      	bcs.n	402d2a <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  402cfc:	f241 0878 	movw	r8, #4216	; 0x1078
  402d00:	4f40      	ldr	r7, [pc, #256]	; (402e04 <hif_send+0x1bc>)
  402d02:	a902      	add	r1, sp, #8
  402d04:	4640      	mov	r0, r8
  402d06:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  402d08:	b978      	cbnz	r0, 402d2a <hif_send+0xe2>
			if (!(reg & 0x2))
  402d0a:	9b02      	ldr	r3, [sp, #8]
  402d0c:	f013 0f02 	tst.w	r3, #2
  402d10:	d059      	beq.n	402dc6 <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  402d12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402d16:	3301      	adds	r3, #1
  402d18:	b29b      	uxth	r3, r3
  402d1a:	f8ad 3006 	strh.w	r3, [sp, #6]
  402d1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402d22:	b29b      	uxth	r3, r3
  402d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402d28:	d3eb      	bcc.n	402d02 <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  402d2a:	9b03      	ldr	r3, [sp, #12]
  402d2c:	2b00      	cmp	r3, #0
  402d2e:	d061      	beq.n	402df4 <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  402d30:	9b03      	ldr	r3, [sp, #12]
  402d32:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  402d34:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402d38:	b29b      	uxth	r3, r3
  402d3a:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  402d3e:	9804      	ldr	r0, [sp, #16]
  402d40:	2208      	movs	r2, #8
  402d42:	a905      	add	r1, sp, #20
  402d44:	4b30      	ldr	r3, [pc, #192]	; (402e08 <hif_send+0x1c0>)
  402d46:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  402d48:	4683      	mov	fp, r0
  402d4a:	2800      	cmp	r0, #0
  402d4c:	d14e      	bne.n	402dec <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  402d4e:	9b04      	ldr	r3, [sp, #16]
  402d50:	3308      	adds	r3, #8
  402d52:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  402d54:	f1ba 0f00 	cmp.w	sl, #0
  402d58:	d00a      	beq.n	402d70 <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  402d5a:	9804      	ldr	r0, [sp, #16]
  402d5c:	464a      	mov	r2, r9
  402d5e:	4651      	mov	r1, sl
  402d60:	4b29      	ldr	r3, [pc, #164]	; (402e08 <hif_send+0x1c0>)
  402d62:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  402d64:	4683      	mov	fp, r0
  402d66:	2800      	cmp	r0, #0
  402d68:	d140      	bne.n	402dec <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  402d6a:	9b04      	ldr	r3, [sp, #16]
  402d6c:	444b      	add	r3, r9
  402d6e:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  402d70:	b17c      	cbz	r4, 402d92 <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  402d72:	9b04      	ldr	r3, [sp, #16]
  402d74:	eba5 0509 	sub.w	r5, r5, r9
  402d78:	441d      	add	r5, r3
  402d7a:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  402d7c:	9804      	ldr	r0, [sp, #16]
  402d7e:	4632      	mov	r2, r6
  402d80:	4621      	mov	r1, r4
  402d82:	4b21      	ldr	r3, [pc, #132]	; (402e08 <hif_send+0x1c0>)
  402d84:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  402d86:	4683      	mov	fp, r0
  402d88:	2800      	cmp	r0, #0
  402d8a:	d12f      	bne.n	402dec <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  402d8c:	9b04      	ldr	r3, [sp, #16]
  402d8e:	441e      	add	r6, r3
  402d90:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  402d92:	9b03      	ldr	r3, [sp, #12]
  402d94:	009b      	lsls	r3, r3, #2
  402d96:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  402d98:	9b02      	ldr	r3, [sp, #8]
  402d9a:	f043 0302 	orr.w	r3, r3, #2
  402d9e:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  402da0:	9902      	ldr	r1, [sp, #8]
  402da2:	f241 006c 	movw	r0, #4204	; 0x106c
  402da6:	4b16      	ldr	r3, [pc, #88]	; (402e00 <hif_send+0x1b8>)
  402da8:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  402daa:	4683      	mov	fp, r0
  402dac:	b9f0      	cbnz	r0, 402dec <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  402dae:	4b17      	ldr	r3, [pc, #92]	; (402e0c <hif_send+0x1c4>)
  402db0:	4798      	blx	r3
  402db2:	4683      	mov	fp, r0
  402db4:	e01a      	b.n	402dec <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  402db6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402dba:	fa19 f383 	uxtah	r3, r9, r3
  402dbe:	b29b      	uxth	r3, r3
  402dc0:	f8ad 3016 	strh.w	r3, [sp, #22]
  402dc4:	e760      	b.n	402c88 <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  402dc6:	a903      	add	r1, sp, #12
  402dc8:	4811      	ldr	r0, [pc, #68]	; (402e10 <hif_send+0x1c8>)
  402dca:	4b0e      	ldr	r3, [pc, #56]	; (402e04 <hif_send+0x1bc>)
  402dcc:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  402dce:	2800      	cmp	r0, #0
  402dd0:	d0ab      	beq.n	402d2a <hif_send+0xe2>
					dma_addr = 0;
  402dd2:	2300      	movs	r3, #0
  402dd4:	9303      	str	r3, [sp, #12]
  402dd6:	e7a8      	b.n	402d2a <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  402dd8:	f240 129f 	movw	r2, #415	; 0x19f
  402ddc:	490d      	ldr	r1, [pc, #52]	; (402e14 <hif_send+0x1cc>)
  402dde:	480e      	ldr	r0, [pc, #56]	; (402e18 <hif_send+0x1d0>)
  402de0:	4c0e      	ldr	r4, [pc, #56]	; (402e1c <hif_send+0x1d4>)
  402de2:	47a0      	blx	r4
  402de4:	480e      	ldr	r0, [pc, #56]	; (402e20 <hif_send+0x1d8>)
  402de6:	47a0      	blx	r4
  402de8:	480e      	ldr	r0, [pc, #56]	; (402e24 <hif_send+0x1dc>)
  402dea:	47a0      	blx	r4

ERR1:
	return ret;
}
  402dec:	4658      	mov	r0, fp
  402dee:	b007      	add	sp, #28
  402df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  402df4:	f06f 0b02 	mvn.w	fp, #2
  402df8:	e7f8      	b.n	402dec <hif_send+0x1a4>
  402dfa:	bf00      	nop
  402dfc:	00402b61 	.word	0x00402b61
  402e00:	00403e19 	.word	0x00403e19
  402e04:	00403e0d 	.word	0x00403e0d
  402e08:	00403e81 	.word	0x00403e81
  402e0c:	00402bbd 	.word	0x00402bbd
  402e10:	00150400 	.word	0x00150400
  402e14:	0040d6d4 	.word	0x0040d6d4
  402e18:	0040d6a4 	.word	0x0040d6a4
  402e1c:	00406c9d 	.word	0x00406c9d
  402e20:	0040d928 	.word	0x0040d928
  402e24:	0040d6d0 	.word	0x0040d6d0

00402e28 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  402e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402e2c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  402e2e:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 403128 <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  402e32:	4fa2      	ldr	r7, [pc, #648]	; (4030bc <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402e34:	4ea2      	ldr	r6, [pc, #648]	; (4030c0 <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  402e36:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 40312c <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  402e3a:	e0d5      	b.n	402fe8 <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  402e3c:	2204      	movs	r2, #4
  402e3e:	a904      	add	r1, sp, #16
  402e40:	9805      	ldr	r0, [sp, #20]
  402e42:	4ba0      	ldr	r3, [pc, #640]	; (4030c4 <hif_handle_isr+0x29c>)
  402e44:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  402e46:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402e4a:	b29b      	uxth	r3, r3
  402e4c:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  402e50:	4604      	mov	r4, r0
  402e52:	2800      	cmp	r0, #0
  402e54:	d130      	bne.n	402eb8 <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  402e56:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402e5a:	b29b      	uxth	r3, r3
  402e5c:	429d      	cmp	r5, r3
  402e5e:	d005      	beq.n	402e6c <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  402e60:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402e64:	b29b      	uxth	r3, r3
  402e66:	1aeb      	subs	r3, r5, r3
  402e68:	2b04      	cmp	r3, #4
  402e6a:	dc33      	bgt.n	402ed4 <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  402e6c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402e70:	b2db      	uxtb	r3, r3
  402e72:	2b01      	cmp	r3, #1
  402e74:	d047      	beq.n	402f06 <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  402e76:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402e7a:	b2db      	uxtb	r3, r3
  402e7c:	2b02      	cmp	r3, #2
  402e7e:	d05f      	beq.n	402f40 <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  402e80:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402e84:	b2db      	uxtb	r3, r3
  402e86:	2b04      	cmp	r3, #4
  402e88:	d068      	beq.n	402f5c <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  402e8a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402e8e:	b2db      	uxtb	r3, r3
  402e90:	2b06      	cmp	r3, #6
  402e92:	d071      	beq.n	402f78 <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  402e94:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402e98:	b2db      	uxtb	r3, r3
  402e9a:	2b07      	cmp	r3, #7
  402e9c:	d07a      	beq.n	402f94 <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  402e9e:	f240 2202 	movw	r2, #514	; 0x202
  402ea2:	4641      	mov	r1, r8
  402ea4:	4630      	mov	r0, r6
  402ea6:	4c88      	ldr	r4, [pc, #544]	; (4030c8 <hif_handle_isr+0x2a0>)
  402ea8:	47a0      	blx	r4
  402eaa:	4888      	ldr	r0, [pc, #544]	; (4030cc <hif_handle_isr+0x2a4>)
  402eac:	47a0      	blx	r4
  402eae:	4888      	ldr	r0, [pc, #544]	; (4030d0 <hif_handle_isr+0x2a8>)
  402eb0:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  402eb2:	f06f 0405 	mvn.w	r4, #5
  402eb6:	e096      	b.n	402fe6 <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  402eb8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  402ebc:	4641      	mov	r1, r8
  402ebe:	4630      	mov	r0, r6
  402ec0:	4d81      	ldr	r5, [pc, #516]	; (4030c8 <hif_handle_isr+0x2a0>)
  402ec2:	47a8      	blx	r5
  402ec4:	4883      	ldr	r0, [pc, #524]	; (4030d4 <hif_handle_isr+0x2ac>)
  402ec6:	47a8      	blx	r5
  402ec8:	4881      	ldr	r0, [pc, #516]	; (4030d0 <hif_handle_isr+0x2a8>)
  402eca:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  402ecc:	2001      	movs	r0, #1
  402ece:	4b82      	ldr	r3, [pc, #520]	; (4030d8 <hif_handle_isr+0x2b0>)
  402ed0:	4798      	blx	r3
  402ed2:	e088      	b.n	402fe6 <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  402ed4:	f240 12df 	movw	r2, #479	; 0x1df
  402ed8:	4641      	mov	r1, r8
  402eda:	4630      	mov	r0, r6
  402edc:	4c7a      	ldr	r4, [pc, #488]	; (4030c8 <hif_handle_isr+0x2a0>)
  402ede:	47a0      	blx	r4
  402ee0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  402ee4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402ee8:	f89d 1011 	ldrb.w	r1, [sp, #17]
  402eec:	9100      	str	r1, [sp, #0]
  402eee:	b292      	uxth	r2, r2
  402ef0:	4629      	mov	r1, r5
  402ef2:	487a      	ldr	r0, [pc, #488]	; (4030dc <hif_handle_isr+0x2b4>)
  402ef4:	47a0      	blx	r4
  402ef6:	4876      	ldr	r0, [pc, #472]	; (4030d0 <hif_handle_isr+0x2a8>)
  402ef8:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  402efa:	2001      	movs	r0, #1
  402efc:	4b76      	ldr	r3, [pc, #472]	; (4030d8 <hif_handle_isr+0x2b0>)
  402efe:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  402f00:	f06f 0405 	mvn.w	r4, #5
  402f04:	e06f      	b.n	402fe6 <hif_handle_isr+0x1be>
						if(pfWifiCb)
  402f06:	4b76      	ldr	r3, [pc, #472]	; (4030e0 <hif_handle_isr+0x2b8>)
  402f08:	681b      	ldr	r3, [r3, #0]
  402f0a:	b143      	cbz	r3, 402f1e <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402f0c:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402f10:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402f14:	3908      	subs	r1, #8
  402f16:	9a05      	ldr	r2, [sp, #20]
  402f18:	3208      	adds	r2, #8
  402f1a:	b289      	uxth	r1, r1
  402f1c:	4798      	blx	r3
					if(!gu8HifSizeDone)
  402f1e:	4b71      	ldr	r3, [pc, #452]	; (4030e4 <hif_handle_isr+0x2bc>)
  402f20:	781b      	ldrb	r3, [r3, #0]
  402f22:	2b00      	cmp	r3, #0
  402f24:	d15c      	bne.n	402fe0 <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  402f26:	f240 2209 	movw	r2, #521	; 0x209
  402f2a:	4641      	mov	r1, r8
  402f2c:	4630      	mov	r0, r6
  402f2e:	4c66      	ldr	r4, [pc, #408]	; (4030c8 <hif_handle_isr+0x2a0>)
  402f30:	47a0      	blx	r4
  402f32:	486d      	ldr	r0, [pc, #436]	; (4030e8 <hif_handle_isr+0x2c0>)
  402f34:	47a0      	blx	r4
  402f36:	4866      	ldr	r0, [pc, #408]	; (4030d0 <hif_handle_isr+0x2a8>)
  402f38:	47a0      	blx	r4
						ret = hif_set_rx_done();
  402f3a:	4b6c      	ldr	r3, [pc, #432]	; (4030ec <hif_handle_isr+0x2c4>)
  402f3c:	4798      	blx	r3
  402f3e:	e04f      	b.n	402fe0 <hif_handle_isr+0x1b8>
						if(pfIpCb)
  402f40:	4b6b      	ldr	r3, [pc, #428]	; (4030f0 <hif_handle_isr+0x2c8>)
  402f42:	681b      	ldr	r3, [r3, #0]
  402f44:	2b00      	cmp	r3, #0
  402f46:	d0ea      	beq.n	402f1e <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402f48:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402f4c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402f50:	3908      	subs	r1, #8
  402f52:	9a05      	ldr	r2, [sp, #20]
  402f54:	3208      	adds	r2, #8
  402f56:	b289      	uxth	r1, r1
  402f58:	4798      	blx	r3
  402f5a:	e7e0      	b.n	402f1e <hif_handle_isr+0xf6>
						if(pfOtaCb)
  402f5c:	4b65      	ldr	r3, [pc, #404]	; (4030f4 <hif_handle_isr+0x2cc>)
  402f5e:	681b      	ldr	r3, [r3, #0]
  402f60:	2b00      	cmp	r3, #0
  402f62:	d0dc      	beq.n	402f1e <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402f64:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402f68:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402f6c:	3908      	subs	r1, #8
  402f6e:	9a05      	ldr	r2, [sp, #20]
  402f70:	3208      	adds	r2, #8
  402f72:	b289      	uxth	r1, r1
  402f74:	4798      	blx	r3
  402f76:	e7d2      	b.n	402f1e <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  402f78:	4b5f      	ldr	r3, [pc, #380]	; (4030f8 <hif_handle_isr+0x2d0>)
  402f7a:	681b      	ldr	r3, [r3, #0]
  402f7c:	2b00      	cmp	r3, #0
  402f7e:	d0ce      	beq.n	402f1e <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402f80:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402f84:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402f88:	3908      	subs	r1, #8
  402f8a:	9a05      	ldr	r2, [sp, #20]
  402f8c:	3208      	adds	r2, #8
  402f8e:	b289      	uxth	r1, r1
  402f90:	4798      	blx	r3
  402f92:	e7c4      	b.n	402f1e <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  402f94:	4b59      	ldr	r3, [pc, #356]	; (4030fc <hif_handle_isr+0x2d4>)
  402f96:	681b      	ldr	r3, [r3, #0]
  402f98:	2b00      	cmp	r3, #0
  402f9a:	d0c0      	beq.n	402f1e <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402f9c:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402fa0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402fa4:	3908      	subs	r1, #8
  402fa6:	9a05      	ldr	r2, [sp, #20]
  402fa8:	3208      	adds	r2, #8
  402faa:	b289      	uxth	r1, r1
  402fac:	4798      	blx	r3
  402fae:	e7b6      	b.n	402f1e <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  402fb0:	f240 2211 	movw	r2, #529	; 0x211
  402fb4:	4641      	mov	r1, r8
  402fb6:	4630      	mov	r0, r6
  402fb8:	4c43      	ldr	r4, [pc, #268]	; (4030c8 <hif_handle_isr+0x2a0>)
  402fba:	47a0      	blx	r4
  402fbc:	4850      	ldr	r0, [pc, #320]	; (403100 <hif_handle_isr+0x2d8>)
  402fbe:	47a0      	blx	r4
  402fc0:	4843      	ldr	r0, [pc, #268]	; (4030d0 <hif_handle_isr+0x2a8>)
  402fc2:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  402fc4:	f06f 0401 	mvn.w	r4, #1
  402fc8:	e02f      	b.n	40302a <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  402fca:	f44f 7206 	mov.w	r2, #536	; 0x218
  402fce:	4641      	mov	r1, r8
  402fd0:	4630      	mov	r0, r6
  402fd2:	4c3d      	ldr	r4, [pc, #244]	; (4030c8 <hif_handle_isr+0x2a0>)
  402fd4:	47a0      	blx	r4
  402fd6:	9903      	ldr	r1, [sp, #12]
  402fd8:	484a      	ldr	r0, [pc, #296]	; (403104 <hif_handle_isr+0x2dc>)
  402fda:	47a0      	blx	r4
  402fdc:	483c      	ldr	r0, [pc, #240]	; (4030d0 <hif_handle_isr+0x2a8>)
  402fde:	47a0      	blx	r4
	ret = hif_chip_sleep();
  402fe0:	4b49      	ldr	r3, [pc, #292]	; (403108 <hif_handle_isr+0x2e0>)
  402fe2:	4798      	blx	r3
  402fe4:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  402fe6:	bb04      	cbnz	r4, 40302a <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  402fe8:	f899 3000 	ldrb.w	r3, [r9]
  402fec:	2b00      	cmp	r3, #0
  402fee:	f000 809f 	beq.w	403130 <hif_handle_isr+0x308>
		gu8Interrupt--;
  402ff2:	f899 3000 	ldrb.w	r3, [r9]
  402ff6:	3b01      	subs	r3, #1
  402ff8:	b2db      	uxtb	r3, r3
  402ffa:	f889 3000 	strb.w	r3, [r9]
  402ffe:	e01f      	b.n	403040 <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  403000:	f240 221e 	movw	r2, #542	; 0x21e
  403004:	4641      	mov	r1, r8
  403006:	4630      	mov	r0, r6
  403008:	4d2f      	ldr	r5, [pc, #188]	; (4030c8 <hif_handle_isr+0x2a0>)
  40300a:	47a8      	blx	r5
  40300c:	483f      	ldr	r0, [pc, #252]	; (40310c <hif_handle_isr+0x2e4>)
  40300e:	47a8      	blx	r5
  403010:	482f      	ldr	r0, [pc, #188]	; (4030d0 <hif_handle_isr+0x2a8>)
  403012:	47a8      	blx	r5
  403014:	e009      	b.n	40302a <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  403016:	f44f 7209 	mov.w	r2, #548	; 0x224
  40301a:	4641      	mov	r1, r8
  40301c:	4630      	mov	r0, r6
  40301e:	4d2a      	ldr	r5, [pc, #168]	; (4030c8 <hif_handle_isr+0x2a0>)
  403020:	47a8      	blx	r5
  403022:	483b      	ldr	r0, [pc, #236]	; (403110 <hif_handle_isr+0x2e8>)
  403024:	47a8      	blx	r5
  403026:	482a      	ldr	r0, [pc, #168]	; (4030d0 <hif_handle_isr+0x2a8>)
  403028:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  40302a:	f240 2243 	movw	r2, #579	; 0x243
  40302e:	4939      	ldr	r1, [pc, #228]	; (403114 <hif_handle_isr+0x2ec>)
  403030:	4630      	mov	r0, r6
  403032:	4d25      	ldr	r5, [pc, #148]	; (4030c8 <hif_handle_isr+0x2a0>)
  403034:	47a8      	blx	r5
  403036:	4621      	mov	r1, r4
  403038:	4837      	ldr	r0, [pc, #220]	; (403118 <hif_handle_isr+0x2f0>)
  40303a:	47a8      	blx	r5
  40303c:	4824      	ldr	r0, [pc, #144]	; (4030d0 <hif_handle_isr+0x2a8>)
  40303e:	47a8      	blx	r5
	ret = hif_chip_wake();
  403040:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  403042:	4604      	mov	r4, r0
  403044:	2800      	cmp	r0, #0
  403046:	d1e6      	bne.n	403016 <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  403048:	a903      	add	r1, sp, #12
  40304a:	f241 0070 	movw	r0, #4208	; 0x1070
  40304e:	4b33      	ldr	r3, [pc, #204]	; (40311c <hif_handle_isr+0x2f4>)
  403050:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  403052:	4604      	mov	r4, r0
  403054:	2800      	cmp	r0, #0
  403056:	d1d3      	bne.n	403000 <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  403058:	9b03      	ldr	r3, [sp, #12]
  40305a:	f013 0f01 	tst.w	r3, #1
  40305e:	d0b4      	beq.n	402fca <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  403060:	4b1d      	ldr	r3, [pc, #116]	; (4030d8 <hif_handle_isr+0x2b0>)
  403062:	4798      	blx	r3
				reg &= ~(1<<0);
  403064:	9903      	ldr	r1, [sp, #12]
  403066:	f021 0101 	bic.w	r1, r1, #1
  40306a:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  40306c:	f241 0070 	movw	r0, #4208	; 0x1070
  403070:	4b2b      	ldr	r3, [pc, #172]	; (403120 <hif_handle_isr+0x2f8>)
  403072:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  403074:	4604      	mov	r4, r0
  403076:	2800      	cmp	r0, #0
  403078:	d1d7      	bne.n	40302a <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  40307a:	2200      	movs	r2, #0
  40307c:	4b19      	ldr	r3, [pc, #100]	; (4030e4 <hif_handle_isr+0x2bc>)
  40307e:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  403080:	9d03      	ldr	r5, [sp, #12]
  403082:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  403086:	2d00      	cmp	r5, #0
  403088:	d092      	beq.n	402fb0 <hif_handle_isr+0x188>
					uint32 address = 0;
  40308a:	a906      	add	r1, sp, #24
  40308c:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  403090:	f241 0084 	movw	r0, #4228	; 0x1084
  403094:	4b21      	ldr	r3, [pc, #132]	; (40311c <hif_handle_isr+0x2f4>)
  403096:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  403098:	4604      	mov	r4, r0
  40309a:	2800      	cmp	r0, #0
  40309c:	f43f aece 	beq.w	402e3c <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  4030a0:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  4030a4:	4641      	mov	r1, r8
  4030a6:	4630      	mov	r0, r6
  4030a8:	4d07      	ldr	r5, [pc, #28]	; (4030c8 <hif_handle_isr+0x2a0>)
  4030aa:	47a8      	blx	r5
  4030ac:	481d      	ldr	r0, [pc, #116]	; (403124 <hif_handle_isr+0x2fc>)
  4030ae:	47a8      	blx	r5
  4030b0:	4807      	ldr	r0, [pc, #28]	; (4030d0 <hif_handle_isr+0x2a8>)
  4030b2:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4030b4:	2001      	movs	r0, #1
  4030b6:	4b08      	ldr	r3, [pc, #32]	; (4030d8 <hif_handle_isr+0x2b0>)
  4030b8:	4798      	blx	r3
  4030ba:	e794      	b.n	402fe6 <hif_handle_isr+0x1be>
  4030bc:	00402b61 	.word	0x00402b61
  4030c0:	0040d6a4 	.word	0x0040d6a4
  4030c4:	00403e25 	.word	0x00403e25
  4030c8:	00406c9d 	.word	0x00406c9d
  4030cc:	0040d794 	.word	0x0040d794
  4030d0:	0040d6d0 	.word	0x0040d6d0
  4030d4:	0040d73c 	.word	0x0040d73c
  4030d8:	00402879 	.word	0x00402879
  4030dc:	0040d754 	.word	0x0040d754
  4030e0:	2040c368 	.word	0x2040c368
  4030e4:	2040c352 	.word	0x2040c352
  4030e8:	0040d7ac 	.word	0x0040d7ac
  4030ec:	00402b21 	.word	0x00402b21
  4030f0:	2040c35c 	.word	0x2040c35c
  4030f4:	2040c360 	.word	0x2040c360
  4030f8:	2040c354 	.word	0x2040c354
  4030fc:	2040c364 	.word	0x2040c364
  403100:	0040d7d0 	.word	0x0040d7d0
  403104:	0040d7e4 	.word	0x0040d7e4
  403108:	00402bbd 	.word	0x00402bbd
  40310c:	0040d800 	.word	0x0040d800
  403110:	0040d824 	.word	0x0040d824
  403114:	0040d6e8 	.word	0x0040d6e8
  403118:	0040d844 	.word	0x0040d844
  40311c:	00403e0d 	.word	0x00403e0d
  403120:	00403e19 	.word	0x00403e19
  403124:	0040d714 	.word	0x0040d714
  403128:	2040c353 	.word	0x2040c353
  40312c:	0040d6e0 	.word	0x0040d6e0
			}
		}
	}

	return ret;
}
  403130:	2000      	movs	r0, #0
  403132:	b007      	add	sp, #28
  403134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00403138 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  403138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40313c:	b083      	sub	sp, #12
  40313e:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  403140:	2a00      	cmp	r2, #0
  403142:	bf18      	it	ne
  403144:	2900      	cmpne	r1, #0
  403146:	d003      	beq.n	403150 <hif_receive+0x18>
  403148:	4605      	mov	r5, r0
  40314a:	460f      	mov	r7, r1
  40314c:	4616      	mov	r6, r2
  40314e:	b9b8      	cbnz	r0, 403180 <hif_receive+0x48>
	{
		if(isDone)
  403150:	b14c      	cbz	r4, 403166 <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  403152:	2201      	movs	r2, #1
  403154:	4b32      	ldr	r3, [pc, #200]	; (403220 <hif_receive+0xe8>)
  403156:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  403158:	4b32      	ldr	r3, [pc, #200]	; (403224 <hif_receive+0xec>)
  40315a:	4798      	blx	r3
  40315c:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  40315e:	4618      	mov	r0, r3
  403160:	b003      	add	sp, #12
  403162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  403166:	f240 2269 	movw	r2, #617	; 0x269
  40316a:	492f      	ldr	r1, [pc, #188]	; (403228 <hif_receive+0xf0>)
  40316c:	482f      	ldr	r0, [pc, #188]	; (40322c <hif_receive+0xf4>)
  40316e:	4c30      	ldr	r4, [pc, #192]	; (403230 <hif_receive+0xf8>)
  403170:	47a0      	blx	r4
  403172:	4830      	ldr	r0, [pc, #192]	; (403234 <hif_receive+0xfc>)
  403174:	47a0      	blx	r4
  403176:	4830      	ldr	r0, [pc, #192]	; (403238 <hif_receive+0x100>)
  403178:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40317a:	f06f 030b 	mvn.w	r3, #11
  40317e:	e7ee      	b.n	40315e <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  403180:	4669      	mov	r1, sp
  403182:	f241 0070 	movw	r0, #4208	; 0x1070
  403186:	4b2d      	ldr	r3, [pc, #180]	; (40323c <hif_receive+0x104>)
  403188:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  40318a:	4603      	mov	r3, r0
  40318c:	2800      	cmp	r0, #0
  40318e:	d1e6      	bne.n	40315e <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  403190:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  403194:	a901      	add	r1, sp, #4
  403196:	f241 0084 	movw	r0, #4228	; 0x1084
  40319a:	4b28      	ldr	r3, [pc, #160]	; (40323c <hif_receive+0x104>)
  40319c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  40319e:	4603      	mov	r3, r0
  4031a0:	2800      	cmp	r0, #0
  4031a2:	d1dc      	bne.n	40315e <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  4031a4:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  4031a8:	4546      	cmp	r6, r8
  4031aa:	d81c      	bhi.n	4031e6 <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  4031ac:	9b01      	ldr	r3, [sp, #4]
  4031ae:	429d      	cmp	r5, r3
  4031b0:	d328      	bcc.n	403204 <hif_receive+0xcc>
  4031b2:	eb05 0906 	add.w	r9, r5, r6
  4031b6:	4443      	add	r3, r8
  4031b8:	4599      	cmp	r9, r3
  4031ba:	d823      	bhi.n	403204 <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  4031bc:	4632      	mov	r2, r6
  4031be:	4639      	mov	r1, r7
  4031c0:	4628      	mov	r0, r5
  4031c2:	4b1f      	ldr	r3, [pc, #124]	; (403240 <hif_receive+0x108>)
  4031c4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4031c6:	4603      	mov	r3, r0
  4031c8:	2800      	cmp	r0, #0
  4031ca:	d1c8      	bne.n	40315e <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  4031cc:	9a01      	ldr	r2, [sp, #4]
  4031ce:	4490      	add	r8, r2
  4031d0:	45c8      	cmp	r8, r9
  4031d2:	d001      	beq.n	4031d8 <hif_receive+0xa0>
  4031d4:	2c00      	cmp	r4, #0
  4031d6:	d0c2      	beq.n	40315e <hif_receive+0x26>
		gu8HifSizeDone = 1;
  4031d8:	2201      	movs	r2, #1
  4031da:	4b11      	ldr	r3, [pc, #68]	; (403220 <hif_receive+0xe8>)
  4031dc:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  4031de:	4b11      	ldr	r3, [pc, #68]	; (403224 <hif_receive+0xec>)
  4031e0:	4798      	blx	r3
  4031e2:	4603      	mov	r3, r0
  4031e4:	e7bb      	b.n	40315e <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  4031e6:	f240 227a 	movw	r2, #634	; 0x27a
  4031ea:	490f      	ldr	r1, [pc, #60]	; (403228 <hif_receive+0xf0>)
  4031ec:	480f      	ldr	r0, [pc, #60]	; (40322c <hif_receive+0xf4>)
  4031ee:	4c10      	ldr	r4, [pc, #64]	; (403230 <hif_receive+0xf8>)
  4031f0:	47a0      	blx	r4
  4031f2:	4642      	mov	r2, r8
  4031f4:	4631      	mov	r1, r6
  4031f6:	4813      	ldr	r0, [pc, #76]	; (403244 <hif_receive+0x10c>)
  4031f8:	47a0      	blx	r4
  4031fa:	480f      	ldr	r0, [pc, #60]	; (403238 <hif_receive+0x100>)
  4031fc:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4031fe:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  403202:	e7ac      	b.n	40315e <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  403204:	f44f 7220 	mov.w	r2, #640	; 0x280
  403208:	4907      	ldr	r1, [pc, #28]	; (403228 <hif_receive+0xf0>)
  40320a:	4808      	ldr	r0, [pc, #32]	; (40322c <hif_receive+0xf4>)
  40320c:	4c08      	ldr	r4, [pc, #32]	; (403230 <hif_receive+0xf8>)
  40320e:	47a0      	blx	r4
  403210:	480d      	ldr	r0, [pc, #52]	; (403248 <hif_receive+0x110>)
  403212:	47a0      	blx	r4
  403214:	4808      	ldr	r0, [pc, #32]	; (403238 <hif_receive+0x100>)
  403216:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  403218:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  40321c:	e79f      	b.n	40315e <hif_receive+0x26>
  40321e:	bf00      	nop
  403220:	2040c352 	.word	0x2040c352
  403224:	00402b21 	.word	0x00402b21
  403228:	0040d6f8 	.word	0x0040d6f8
  40322c:	0040d6a4 	.word	0x0040d6a4
  403230:	00406c9d 	.word	0x00406c9d
  403234:	0040d874 	.word	0x0040d874
  403238:	0040d6d0 	.word	0x0040d6d0
  40323c:	00403e0d 	.word	0x00403e0d
  403240:	00403e25 	.word	0x00403e25
  403244:	0040d894 	.word	0x0040d894
  403248:	0040d8d8 	.word	0x0040d8d8

0040324c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  40324c:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  40324e:	1e43      	subs	r3, r0, #1
  403250:	2b06      	cmp	r3, #6
  403252:	d81d      	bhi.n	403290 <hif_register_cb+0x44>
  403254:	e8df f003 	tbb	[pc, r3]
  403258:	0c100408 	.word	0x0c100408
  40325c:	141c      	.short	0x141c
  40325e:	18          	.byte	0x18
  40325f:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  403260:	4b13      	ldr	r3, [pc, #76]	; (4032b0 <hif_register_cb+0x64>)
  403262:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  403264:	2000      	movs	r0, #0
			break;
  403266:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  403268:	4b12      	ldr	r3, [pc, #72]	; (4032b4 <hif_register_cb+0x68>)
  40326a:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  40326c:	2000      	movs	r0, #0
			break;
  40326e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  403270:	4b11      	ldr	r3, [pc, #68]	; (4032b8 <hif_register_cb+0x6c>)
  403272:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  403274:	2000      	movs	r0, #0
			break;
  403276:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  403278:	4b10      	ldr	r3, [pc, #64]	; (4032bc <hif_register_cb+0x70>)
  40327a:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  40327c:	2000      	movs	r0, #0
			break;
  40327e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  403280:	4b0f      	ldr	r3, [pc, #60]	; (4032c0 <hif_register_cb+0x74>)
  403282:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  403284:	2000      	movs	r0, #0
			break;
  403286:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  403288:	4b0e      	ldr	r3, [pc, #56]	; (4032c4 <hif_register_cb+0x78>)
  40328a:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  40328c:	2000      	movs	r0, #0
			break;
  40328e:	bd38      	pop	{r3, r4, r5, pc}
  403290:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  403292:	f240 22b9 	movw	r2, #697	; 0x2b9
  403296:	490c      	ldr	r1, [pc, #48]	; (4032c8 <hif_register_cb+0x7c>)
  403298:	480c      	ldr	r0, [pc, #48]	; (4032cc <hif_register_cb+0x80>)
  40329a:	4d0d      	ldr	r5, [pc, #52]	; (4032d0 <hif_register_cb+0x84>)
  40329c:	47a8      	blx	r5
  40329e:	4621      	mov	r1, r4
  4032a0:	480c      	ldr	r0, [pc, #48]	; (4032d4 <hif_register_cb+0x88>)
  4032a2:	47a8      	blx	r5
  4032a4:	480c      	ldr	r0, [pc, #48]	; (4032d8 <hif_register_cb+0x8c>)
  4032a6:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  4032a8:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  4032ac:	bd38      	pop	{r3, r4, r5, pc}
  4032ae:	bf00      	nop
  4032b0:	2040c35c 	.word	0x2040c35c
  4032b4:	2040c368 	.word	0x2040c368
  4032b8:	2040c360 	.word	0x2040c360
  4032bc:	2040c358 	.word	0x2040c358
  4032c0:	2040c354 	.word	0x2040c354
  4032c4:	2040c364 	.word	0x2040c364
  4032c8:	0040d704 	.word	0x0040d704
  4032cc:	0040d6a4 	.word	0x0040d6a4
  4032d0:	00406c9d 	.word	0x00406c9d
  4032d4:	0040d91c 	.word	0x0040d91c
  4032d8:	0040d6d0 	.word	0x0040d6d0

004032dc <hif_init>:
{
  4032dc:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  4032de:	2400      	movs	r4, #0
  4032e0:	4b09      	ldr	r3, [pc, #36]	; (403308 <hif_init+0x2c>)
  4032e2:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  4032e4:	4b09      	ldr	r3, [pc, #36]	; (40330c <hif_init+0x30>)
  4032e6:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  4032e8:	4b09      	ldr	r3, [pc, #36]	; (403310 <hif_init+0x34>)
  4032ea:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  4032ec:	4b09      	ldr	r3, [pc, #36]	; (403314 <hif_init+0x38>)
  4032ee:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  4032f0:	4b09      	ldr	r3, [pc, #36]	; (403318 <hif_init+0x3c>)
  4032f2:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  4032f4:	4809      	ldr	r0, [pc, #36]	; (40331c <hif_init+0x40>)
  4032f6:	4b0a      	ldr	r3, [pc, #40]	; (403320 <hif_init+0x44>)
  4032f8:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  4032fa:	490a      	ldr	r1, [pc, #40]	; (403324 <hif_init+0x48>)
  4032fc:	2003      	movs	r0, #3
  4032fe:	4b0a      	ldr	r3, [pc, #40]	; (403328 <hif_init+0x4c>)
  403300:	4798      	blx	r3
}
  403302:	4620      	mov	r0, r4
  403304:	bd10      	pop	{r4, pc}
  403306:	bf00      	nop
  403308:	2040c368 	.word	0x2040c368
  40330c:	2040c35c 	.word	0x2040c35c
  403310:	2040c351 	.word	0x2040c351
  403314:	2040c350 	.word	0x2040c350
  403318:	2040c353 	.word	0x2040c353
  40331c:	00402b0d 	.word	0x00402b0d
  403320:	004027e9 	.word	0x004027e9
  403324:	00402b1d 	.word	0x00402b1d
  403328:	0040324d 	.word	0x0040324d

0040332c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  40332c:	b530      	push	{r4, r5, lr}
  40332e:	b09f      	sub	sp, #124	; 0x7c
  403330:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  403332:	282c      	cmp	r0, #44	; 0x2c
  403334:	d02e      	beq.n	403394 <m2m_wifi_cb+0x68>
  403336:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  403338:	281b      	cmp	r0, #27
  40333a:	d03b      	beq.n	4033b4 <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  40333c:	2806      	cmp	r0, #6
  40333e:	d049      	beq.n	4033d4 <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  403340:	280e      	cmp	r0, #14
  403342:	d025      	beq.n	403390 <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  403344:	2832      	cmp	r0, #50	; 0x32
  403346:	d055      	beq.n	4033f4 <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  403348:	282f      	cmp	r0, #47	; 0x2f
  40334a:	d063      	beq.n	403414 <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  40334c:	2834      	cmp	r0, #52	; 0x34
  40334e:	d076      	beq.n	40343e <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  403350:	2811      	cmp	r0, #17
  403352:	f000 8093 	beq.w	40347c <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  403356:	2813      	cmp	r0, #19
  403358:	f000 80a8 	beq.w	4034ac <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  40335c:	2804      	cmp	r0, #4
  40335e:	f000 80b7 	beq.w	4034d0 <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  403362:	2865      	cmp	r0, #101	; 0x65
  403364:	f000 80c6 	beq.w	4034f4 <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  403368:	2809      	cmp	r0, #9
  40336a:	f000 80d5 	beq.w	403518 <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  40336e:	282a      	cmp	r0, #42	; 0x2a
  403370:	f000 80e4 	beq.w	40353c <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  403374:	2820      	cmp	r0, #32
  403376:	f000 80f3 	beq.w	403560 <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  40337a:	f44f 7295 	mov.w	r2, #298	; 0x12a
  40337e:	4986      	ldr	r1, [pc, #536]	; (403598 <m2m_wifi_cb+0x26c>)
  403380:	4886      	ldr	r0, [pc, #536]	; (40359c <m2m_wifi_cb+0x270>)
  403382:	4d87      	ldr	r5, [pc, #540]	; (4035a0 <m2m_wifi_cb+0x274>)
  403384:	47a8      	blx	r5
  403386:	4621      	mov	r1, r4
  403388:	4886      	ldr	r0, [pc, #536]	; (4035a4 <m2m_wifi_cb+0x278>)
  40338a:	47a8      	blx	r5
  40338c:	4886      	ldr	r0, [pc, #536]	; (4035a8 <m2m_wifi_cb+0x27c>)
  40338e:	47a8      	blx	r5
	}
}
  403390:	b01f      	add	sp, #124	; 0x7c
  403392:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  403394:	2300      	movs	r3, #0
  403396:	2204      	movs	r2, #4
  403398:	a903      	add	r1, sp, #12
  40339a:	4628      	mov	r0, r5
  40339c:	4c83      	ldr	r4, [pc, #524]	; (4035ac <m2m_wifi_cb+0x280>)
  40339e:	47a0      	blx	r4
  4033a0:	2800      	cmp	r0, #0
  4033a2:	d1f5      	bne.n	403390 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  4033a4:	4b82      	ldr	r3, [pc, #520]	; (4035b0 <m2m_wifi_cb+0x284>)
  4033a6:	681b      	ldr	r3, [r3, #0]
  4033a8:	2b00      	cmp	r3, #0
  4033aa:	d0f1      	beq.n	403390 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  4033ac:	a903      	add	r1, sp, #12
  4033ae:	202c      	movs	r0, #44	; 0x2c
  4033b0:	4798      	blx	r3
  4033b2:	e7ed      	b.n	403390 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  4033b4:	2300      	movs	r3, #0
  4033b6:	2208      	movs	r2, #8
  4033b8:	a903      	add	r1, sp, #12
  4033ba:	4628      	mov	r0, r5
  4033bc:	4c7b      	ldr	r4, [pc, #492]	; (4035ac <m2m_wifi_cb+0x280>)
  4033be:	47a0      	blx	r4
  4033c0:	2800      	cmp	r0, #0
  4033c2:	d1e5      	bne.n	403390 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  4033c4:	4b7a      	ldr	r3, [pc, #488]	; (4035b0 <m2m_wifi_cb+0x284>)
  4033c6:	681b      	ldr	r3, [r3, #0]
  4033c8:	2b00      	cmp	r3, #0
  4033ca:	d0e1      	beq.n	403390 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  4033cc:	a903      	add	r1, sp, #12
  4033ce:	201b      	movs	r0, #27
  4033d0:	4798      	blx	r3
  4033d2:	e7dd      	b.n	403390 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  4033d4:	2301      	movs	r3, #1
  4033d6:	2230      	movs	r2, #48	; 0x30
  4033d8:	a903      	add	r1, sp, #12
  4033da:	4628      	mov	r0, r5
  4033dc:	4c73      	ldr	r4, [pc, #460]	; (4035ac <m2m_wifi_cb+0x280>)
  4033de:	47a0      	blx	r4
  4033e0:	2800      	cmp	r0, #0
  4033e2:	d1d5      	bne.n	403390 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  4033e4:	4b72      	ldr	r3, [pc, #456]	; (4035b0 <m2m_wifi_cb+0x284>)
  4033e6:	681b      	ldr	r3, [r3, #0]
  4033e8:	2b00      	cmp	r3, #0
  4033ea:	d0d1      	beq.n	403390 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  4033ec:	a903      	add	r1, sp, #12
  4033ee:	2006      	movs	r0, #6
  4033f0:	4798      	blx	r3
  4033f2:	e7cd      	b.n	403390 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  4033f4:	2300      	movs	r3, #0
  4033f6:	2210      	movs	r2, #16
  4033f8:	a903      	add	r1, sp, #12
  4033fa:	4628      	mov	r0, r5
  4033fc:	4c6b      	ldr	r4, [pc, #428]	; (4035ac <m2m_wifi_cb+0x280>)
  4033fe:	47a0      	blx	r4
  403400:	2800      	cmp	r0, #0
  403402:	d1c5      	bne.n	403390 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403404:	4b6a      	ldr	r3, [pc, #424]	; (4035b0 <m2m_wifi_cb+0x284>)
  403406:	681b      	ldr	r3, [r3, #0]
  403408:	2b00      	cmp	r3, #0
  40340a:	d0c1      	beq.n	403390 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  40340c:	a903      	add	r1, sp, #12
  40340e:	2032      	movs	r0, #50	; 0x32
  403410:	4798      	blx	r3
  403412:	e7bd      	b.n	403390 <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  403414:	2264      	movs	r2, #100	; 0x64
  403416:	2100      	movs	r1, #0
  403418:	a803      	add	r0, sp, #12
  40341a:	4b66      	ldr	r3, [pc, #408]	; (4035b4 <m2m_wifi_cb+0x288>)
  40341c:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  40341e:	2300      	movs	r3, #0
  403420:	2264      	movs	r2, #100	; 0x64
  403422:	a903      	add	r1, sp, #12
  403424:	4628      	mov	r0, r5
  403426:	4c61      	ldr	r4, [pc, #388]	; (4035ac <m2m_wifi_cb+0x280>)
  403428:	47a0      	blx	r4
  40342a:	2800      	cmp	r0, #0
  40342c:	d1b0      	bne.n	403390 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  40342e:	4b60      	ldr	r3, [pc, #384]	; (4035b0 <m2m_wifi_cb+0x284>)
  403430:	681b      	ldr	r3, [r3, #0]
  403432:	2b00      	cmp	r3, #0
  403434:	d0ac      	beq.n	403390 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  403436:	a903      	add	r1, sp, #12
  403438:	202f      	movs	r0, #47	; 0x2f
  40343a:	4798      	blx	r3
  40343c:	e7a8      	b.n	403390 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  40343e:	2300      	movs	r3, #0
  403440:	2204      	movs	r2, #4
  403442:	a903      	add	r1, sp, #12
  403444:	4628      	mov	r0, r5
  403446:	4c59      	ldr	r4, [pc, #356]	; (4035ac <m2m_wifi_cb+0x280>)
  403448:	47a0      	blx	r4
  40344a:	2800      	cmp	r0, #0
  40344c:	d1a0      	bne.n	403390 <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  40344e:	485a      	ldr	r0, [pc, #360]	; (4035b8 <m2m_wifi_cb+0x28c>)
  403450:	4c53      	ldr	r4, [pc, #332]	; (4035a0 <m2m_wifi_cb+0x274>)
  403452:	47a0      	blx	r4
  403454:	9903      	ldr	r1, [sp, #12]
  403456:	b2cb      	uxtb	r3, r1
  403458:	9300      	str	r3, [sp, #0]
  40345a:	f3c1 2307 	ubfx	r3, r1, #8, #8
  40345e:	f3c1 4207 	ubfx	r2, r1, #16, #8
  403462:	0e09      	lsrs	r1, r1, #24
  403464:	4855      	ldr	r0, [pc, #340]	; (4035bc <m2m_wifi_cb+0x290>)
  403466:	47a0      	blx	r4
  403468:	484f      	ldr	r0, [pc, #316]	; (4035a8 <m2m_wifi_cb+0x27c>)
  40346a:	47a0      	blx	r4
			if (gpfAppWifiCb)
  40346c:	4b50      	ldr	r3, [pc, #320]	; (4035b0 <m2m_wifi_cb+0x284>)
  40346e:	681b      	ldr	r3, [r3, #0]
  403470:	2b00      	cmp	r3, #0
  403472:	d08d      	beq.n	403390 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  403474:	2100      	movs	r1, #0
  403476:	2034      	movs	r0, #52	; 0x34
  403478:	4798      	blx	r3
  40347a:	e789      	b.n	403390 <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  40347c:	2300      	movs	r3, #0
  40347e:	4a50      	ldr	r2, [pc, #320]	; (4035c0 <m2m_wifi_cb+0x294>)
  403480:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  403482:	2204      	movs	r2, #4
  403484:	a903      	add	r1, sp, #12
  403486:	4628      	mov	r0, r5
  403488:	4c48      	ldr	r4, [pc, #288]	; (4035ac <m2m_wifi_cb+0x280>)
  40348a:	47a0      	blx	r4
  40348c:	2800      	cmp	r0, #0
  40348e:	f47f af7f 	bne.w	403390 <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  403492:	f89d 200c 	ldrb.w	r2, [sp, #12]
  403496:	4b4b      	ldr	r3, [pc, #300]	; (4035c4 <m2m_wifi_cb+0x298>)
  403498:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  40349a:	4b45      	ldr	r3, [pc, #276]	; (4035b0 <m2m_wifi_cb+0x284>)
  40349c:	681b      	ldr	r3, [r3, #0]
  40349e:	2b00      	cmp	r3, #0
  4034a0:	f43f af76 	beq.w	403390 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  4034a4:	a903      	add	r1, sp, #12
  4034a6:	2011      	movs	r0, #17
  4034a8:	4798      	blx	r3
  4034aa:	e771      	b.n	403390 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  4034ac:	2300      	movs	r3, #0
  4034ae:	222c      	movs	r2, #44	; 0x2c
  4034b0:	a903      	add	r1, sp, #12
  4034b2:	4628      	mov	r0, r5
  4034b4:	4c3d      	ldr	r4, [pc, #244]	; (4035ac <m2m_wifi_cb+0x280>)
  4034b6:	47a0      	blx	r4
  4034b8:	2800      	cmp	r0, #0
  4034ba:	f47f af69 	bne.w	403390 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  4034be:	4b3c      	ldr	r3, [pc, #240]	; (4035b0 <m2m_wifi_cb+0x284>)
  4034c0:	681b      	ldr	r3, [r3, #0]
  4034c2:	2b00      	cmp	r3, #0
  4034c4:	f43f af64 	beq.w	403390 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  4034c8:	a903      	add	r1, sp, #12
  4034ca:	2013      	movs	r0, #19
  4034cc:	4798      	blx	r3
  4034ce:	e75f      	b.n	403390 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  4034d0:	2300      	movs	r3, #0
  4034d2:	2204      	movs	r2, #4
  4034d4:	a91c      	add	r1, sp, #112	; 0x70
  4034d6:	4628      	mov	r0, r5
  4034d8:	4c34      	ldr	r4, [pc, #208]	; (4035ac <m2m_wifi_cb+0x280>)
  4034da:	47a0      	blx	r4
  4034dc:	2800      	cmp	r0, #0
  4034de:	f47f af57 	bne.w	403390 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  4034e2:	4b33      	ldr	r3, [pc, #204]	; (4035b0 <m2m_wifi_cb+0x284>)
  4034e4:	681b      	ldr	r3, [r3, #0]
  4034e6:	2b00      	cmp	r3, #0
  4034e8:	f43f af52 	beq.w	403390 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  4034ec:	a91c      	add	r1, sp, #112	; 0x70
  4034ee:	2004      	movs	r0, #4
  4034f0:	4798      	blx	r3
  4034f2:	e74d      	b.n	403390 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  4034f4:	2300      	movs	r3, #0
  4034f6:	2204      	movs	r2, #4
  4034f8:	a91c      	add	r1, sp, #112	; 0x70
  4034fa:	4628      	mov	r0, r5
  4034fc:	4c2b      	ldr	r4, [pc, #172]	; (4035ac <m2m_wifi_cb+0x280>)
  4034fe:	47a0      	blx	r4
  403500:	2800      	cmp	r0, #0
  403502:	f47f af45 	bne.w	403390 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403506:	4b2a      	ldr	r3, [pc, #168]	; (4035b0 <m2m_wifi_cb+0x284>)
  403508:	681b      	ldr	r3, [r3, #0]
  40350a:	2b00      	cmp	r3, #0
  40350c:	f43f af40 	beq.w	403390 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  403510:	a91c      	add	r1, sp, #112	; 0x70
  403512:	2065      	movs	r0, #101	; 0x65
  403514:	4798      	blx	r3
  403516:	e73b      	b.n	403390 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  403518:	2301      	movs	r3, #1
  40351a:	2264      	movs	r2, #100	; 0x64
  40351c:	a903      	add	r1, sp, #12
  40351e:	4628      	mov	r0, r5
  403520:	4c22      	ldr	r4, [pc, #136]	; (4035ac <m2m_wifi_cb+0x280>)
  403522:	47a0      	blx	r4
  403524:	2800      	cmp	r0, #0
  403526:	f47f af33 	bne.w	403390 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  40352a:	4b21      	ldr	r3, [pc, #132]	; (4035b0 <m2m_wifi_cb+0x284>)
  40352c:	681b      	ldr	r3, [r3, #0]
  40352e:	2b00      	cmp	r3, #0
  403530:	f43f af2e 	beq.w	403390 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  403534:	a903      	add	r1, sp, #12
  403536:	2009      	movs	r0, #9
  403538:	4798      	blx	r3
  40353a:	e729      	b.n	403390 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  40353c:	2301      	movs	r3, #1
  40353e:	2204      	movs	r2, #4
  403540:	a903      	add	r1, sp, #12
  403542:	4628      	mov	r0, r5
  403544:	4c19      	ldr	r4, [pc, #100]	; (4035ac <m2m_wifi_cb+0x280>)
  403546:	47a0      	blx	r4
  403548:	2800      	cmp	r0, #0
  40354a:	f47f af21 	bne.w	403390 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  40354e:	4b18      	ldr	r3, [pc, #96]	; (4035b0 <m2m_wifi_cb+0x284>)
  403550:	681b      	ldr	r3, [r3, #0]
  403552:	2b00      	cmp	r3, #0
  403554:	f43f af1c 	beq.w	403390 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  403558:	a903      	add	r1, sp, #12
  40355a:	202a      	movs	r0, #42	; 0x2a
  40355c:	4798      	blx	r3
  40355e:	e717      	b.n	403390 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  403560:	2300      	movs	r3, #0
  403562:	2208      	movs	r2, #8
  403564:	a903      	add	r1, sp, #12
  403566:	4628      	mov	r0, r5
  403568:	4c10      	ldr	r4, [pc, #64]	; (4035ac <m2m_wifi_cb+0x280>)
  40356a:	47a0      	blx	r4
  40356c:	2800      	cmp	r0, #0
  40356e:	f47f af0f 	bne.w	403390 <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  403572:	2301      	movs	r3, #1
  403574:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  403578:	9903      	ldr	r1, [sp, #12]
  40357a:	f105 0008 	add.w	r0, r5, #8
  40357e:	47a0      	blx	r4
  403580:	2800      	cmp	r0, #0
  403582:	f47f af05 	bne.w	403390 <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  403586:	4b0a      	ldr	r3, [pc, #40]	; (4035b0 <m2m_wifi_cb+0x284>)
  403588:	681b      	ldr	r3, [r3, #0]
  40358a:	2b00      	cmp	r3, #0
  40358c:	f43f af00 	beq.w	403390 <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  403590:	a903      	add	r1, sp, #12
  403592:	2020      	movs	r0, #32
  403594:	4798      	blx	r3
  403596:	e6fb      	b.n	403390 <m2m_wifi_cb+0x64>
  403598:	0040d948 	.word	0x0040d948
  40359c:	0040d6a4 	.word	0x0040d6a4
  4035a0:	00406c9d 	.word	0x00406c9d
  4035a4:	0040d9a4 	.word	0x0040d9a4
  4035a8:	0040d6d0 	.word	0x0040d6d0
  4035ac:	00403139 	.word	0x00403139
  4035b0:	2040c36c 	.word	0x2040c36c
  4035b4:	00402ae5 	.word	0x00402ae5
  4035b8:	0040d978 	.word	0x0040d978
  4035bc:	0040d984 	.word	0x0040d984
  4035c0:	2040c371 	.word	0x2040c371
  4035c4:	2040c370 	.word	0x2040c370

004035c8 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  4035c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4035ca:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  4035cc:	2301      	movs	r3, #1
  4035ce:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  4035d2:	2800      	cmp	r0, #0
  4035d4:	d050      	beq.n	403678 <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  4035d6:	6802      	ldr	r2, [r0, #0]
  4035d8:	4b29      	ldr	r3, [pc, #164]	; (403680 <m2m_wifi_init+0xb8>)
  4035da:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  4035dc:	2200      	movs	r2, #0
  4035de:	4b29      	ldr	r3, [pc, #164]	; (403684 <m2m_wifi_init+0xbc>)
  4035e0:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  4035e2:	f10d 0007 	add.w	r0, sp, #7
  4035e6:	4b28      	ldr	r3, [pc, #160]	; (403688 <m2m_wifi_init+0xc0>)
  4035e8:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  4035ea:	4604      	mov	r4, r0
  4035ec:	b110      	cbz	r0, 4035f4 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  4035ee:	4620      	mov	r0, r4
  4035f0:	b00b      	add	sp, #44	; 0x2c
  4035f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  4035f4:	4b25      	ldr	r3, [pc, #148]	; (40368c <m2m_wifi_init+0xc4>)
  4035f6:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  4035f8:	4604      	mov	r4, r0
  4035fa:	2800      	cmp	r0, #0
  4035fc:	d138      	bne.n	403670 <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  4035fe:	4924      	ldr	r1, [pc, #144]	; (403690 <m2m_wifi_init+0xc8>)
  403600:	2001      	movs	r0, #1
  403602:	4b24      	ldr	r3, [pc, #144]	; (403694 <m2m_wifi_init+0xcc>)
  403604:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  403606:	a802      	add	r0, sp, #8
  403608:	4b23      	ldr	r3, [pc, #140]	; (403698 <m2m_wifi_init+0xd0>)
  40360a:	4798      	blx	r3
  40360c:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  40360e:	4f23      	ldr	r7, [pc, #140]	; (40369c <m2m_wifi_init+0xd4>)
  403610:	4638      	mov	r0, r7
  403612:	4d23      	ldr	r5, [pc, #140]	; (4036a0 <m2m_wifi_init+0xd8>)
  403614:	47a8      	blx	r5
  403616:	f89d 300e 	ldrb.w	r3, [sp, #14]
  40361a:	f89d 200d 	ldrb.w	r2, [sp, #13]
  40361e:	f89d 100c 	ldrb.w	r1, [sp, #12]
  403622:	4820      	ldr	r0, [pc, #128]	; (4036a4 <m2m_wifi_init+0xdc>)
  403624:	47a8      	blx	r5
  403626:	4e20      	ldr	r6, [pc, #128]	; (4036a8 <m2m_wifi_init+0xe0>)
  403628:	4630      	mov	r0, r6
  40362a:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  40362c:	4638      	mov	r0, r7
  40362e:	47a8      	blx	r5
  403630:	f89d 3011 	ldrb.w	r3, [sp, #17]
  403634:	f89d 2010 	ldrb.w	r2, [sp, #16]
  403638:	f89d 100f 	ldrb.w	r1, [sp, #15]
  40363c:	481b      	ldr	r0, [pc, #108]	; (4036ac <m2m_wifi_init+0xe4>)
  40363e:	47a8      	blx	r5
  403640:	4630      	mov	r0, r6
  403642:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  403644:	4638      	mov	r0, r7
  403646:	47a8      	blx	r5
  403648:	2300      	movs	r3, #0
  40364a:	2203      	movs	r2, #3
  40364c:	2113      	movs	r1, #19
  40364e:	4818      	ldr	r0, [pc, #96]	; (4036b0 <m2m_wifi_init+0xe8>)
  403650:	47a8      	blx	r5
  403652:	4630      	mov	r0, r6
  403654:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  403656:	f114 0f0d 	cmn.w	r4, #13
  40365a:	d1c8      	bne.n	4035ee <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  40365c:	f240 12d5 	movw	r2, #469	; 0x1d5
  403660:	4914      	ldr	r1, [pc, #80]	; (4036b4 <m2m_wifi_init+0xec>)
  403662:	4815      	ldr	r0, [pc, #84]	; (4036b8 <m2m_wifi_init+0xf0>)
  403664:	47a8      	blx	r5
  403666:	4815      	ldr	r0, [pc, #84]	; (4036bc <m2m_wifi_init+0xf4>)
  403668:	47a8      	blx	r5
  40366a:	4630      	mov	r0, r6
  40366c:	47a8      	blx	r5
  40366e:	e7be      	b.n	4035ee <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  403670:	2000      	movs	r0, #0
  403672:	4b13      	ldr	r3, [pc, #76]	; (4036c0 <m2m_wifi_init+0xf8>)
  403674:	4798      	blx	r3
  403676:	e7ba      	b.n	4035ee <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  403678:	f06f 040b 	mvn.w	r4, #11
  40367c:	e7b7      	b.n	4035ee <m2m_wifi_init+0x26>
  40367e:	bf00      	nop
  403680:	2040c36c 	.word	0x2040c36c
  403684:	2040c371 	.word	0x2040c371
  403688:	00403f8d 	.word	0x00403f8d
  40368c:	004032dd 	.word	0x004032dd
  403690:	0040332d 	.word	0x0040332d
  403694:	0040324d 	.word	0x0040324d
  403698:	00403edd 	.word	0x00403edd
  40369c:	0040d978 	.word	0x0040d978
  4036a0:	00406c9d 	.word	0x00406c9d
  4036a4:	0040da64 	.word	0x0040da64
  4036a8:	0040d6d0 	.word	0x0040d6d0
  4036ac:	0040da80 	.word	0x0040da80
  4036b0:	0040da9c 	.word	0x0040da9c
  4036b4:	0040d954 	.word	0x0040d954
  4036b8:	0040d6a4 	.word	0x0040d6a4
  4036bc:	0040dab8 	.word	0x0040dab8
  4036c0:	00404059 	.word	0x00404059

004036c4 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  4036c4:	b508      	push	{r3, lr}
	return hif_handle_isr();
  4036c6:	4b01      	ldr	r3, [pc, #4]	; (4036cc <m2m_wifi_handle_events+0x8>)
  4036c8:	4798      	blx	r3
}
  4036ca:	bd08      	pop	{r3, pc}
  4036cc:	00402e29 	.word	0x00402e29

004036d0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  4036d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4036d4:	b0a0      	sub	sp, #128	; 0x80
  4036d6:	4680      	mov	r8, r0
  4036d8:	460d      	mov	r5, r1
  4036da:	4614      	mov	r4, r2
  4036dc:	461e      	mov	r6, r3
  4036de:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  4036e2:	2a01      	cmp	r2, #1
  4036e4:	d003      	beq.n	4036ee <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  4036e6:	2b00      	cmp	r3, #0
  4036e8:	d037      	beq.n	40375a <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  4036ea:	2a02      	cmp	r2, #2
  4036ec:	d042      	beq.n	403774 <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  4036ee:	1e6b      	subs	r3, r5, #1
  4036f0:	b2db      	uxtb	r3, r3
  4036f2:	2b1f      	cmp	r3, #31
  4036f4:	d875      	bhi.n	4037e2 <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  4036f6:	2fff      	cmp	r7, #255	; 0xff
  4036f8:	d001      	beq.n	4036fe <m2m_wifi_connect_sc+0x2e>
  4036fa:	2f0d      	cmp	r7, #13
  4036fc:	d87e      	bhi.n	4037fc <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  4036fe:	462a      	mov	r2, r5
  403700:	4641      	mov	r1, r8
  403702:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  403706:	4b77      	ldr	r3, [pc, #476]	; (4038e4 <m2m_wifi_connect_sc+0x214>)
  403708:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  40370a:	ab20      	add	r3, sp, #128	; 0x80
  40370c:	441d      	add	r5, r3
  40370e:	2300      	movs	r3, #0
  403710:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  403714:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  403718:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  40371c:	3300      	adds	r3, #0
  40371e:	bf18      	it	ne
  403720:	2301      	movne	r3, #1
  403722:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  403726:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  40372a:	2c03      	cmp	r4, #3
  40372c:	d073      	beq.n	403816 <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  40372e:	2c02      	cmp	r4, #2
  403730:	f000 80aa 	beq.w	403888 <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  403734:	2c04      	cmp	r4, #4
  403736:	f000 80c1 	beq.w	4038bc <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  40373a:	2c01      	cmp	r4, #1
  40373c:	f040 80c4 	bne.w	4038c8 <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  403740:	2300      	movs	r3, #0
  403742:	9302      	str	r3, [sp, #8]
  403744:	9301      	str	r3, [sp, #4]
  403746:	9300      	str	r3, [sp, #0]
  403748:	236c      	movs	r3, #108	; 0x6c
  40374a:	aa05      	add	r2, sp, #20
  40374c:	2128      	movs	r1, #40	; 0x28
  40374e:	2001      	movs	r0, #1
  403750:	4c65      	ldr	r4, [pc, #404]	; (4038e8 <m2m_wifi_connect_sc+0x218>)
  403752:	47a0      	blx	r4

ERR1:
	return ret;
}
  403754:	b020      	add	sp, #128	; 0x80
  403756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  40375a:	f240 2203 	movw	r2, #515	; 0x203
  40375e:	4963      	ldr	r1, [pc, #396]	; (4038ec <m2m_wifi_connect_sc+0x21c>)
  403760:	4863      	ldr	r0, [pc, #396]	; (4038f0 <m2m_wifi_connect_sc+0x220>)
  403762:	4c64      	ldr	r4, [pc, #400]	; (4038f4 <m2m_wifi_connect_sc+0x224>)
  403764:	47a0      	blx	r4
  403766:	4864      	ldr	r0, [pc, #400]	; (4038f8 <m2m_wifi_connect_sc+0x228>)
  403768:	47a0      	blx	r4
  40376a:	4864      	ldr	r0, [pc, #400]	; (4038fc <m2m_wifi_connect_sc+0x22c>)
  40376c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40376e:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403772:	e7ef      	b.n	403754 <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  403774:	4618      	mov	r0, r3
  403776:	4b62      	ldr	r3, [pc, #392]	; (403900 <m2m_wifi_connect_sc+0x230>)
  403778:	4798      	blx	r3
  40377a:	2840      	cmp	r0, #64	; 0x40
  40377c:	d1b7      	bne.n	4036ee <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  40377e:	7833      	ldrb	r3, [r6, #0]
  403780:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  403784:	b2d2      	uxtb	r2, r2
  403786:	2a06      	cmp	r2, #6
  403788:	d91e      	bls.n	4037c8 <m2m_wifi_connect_sc+0xf8>
  40378a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40378e:	b2d2      	uxtb	r2, r2
  403790:	2a36      	cmp	r2, #54	; 0x36
  403792:	d819      	bhi.n	4037c8 <m2m_wifi_connect_sc+0xf8>
  403794:	3b47      	subs	r3, #71	; 0x47
  403796:	b2db      	uxtb	r3, r3
  403798:	2b19      	cmp	r3, #25
  40379a:	d915      	bls.n	4037c8 <m2m_wifi_connect_sc+0xf8>
  40379c:	4631      	mov	r1, r6
  40379e:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  4037a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4037a6:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  4037aa:	b2d2      	uxtb	r2, r2
  4037ac:	2a06      	cmp	r2, #6
  4037ae:	d90b      	bls.n	4037c8 <m2m_wifi_connect_sc+0xf8>
  4037b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4037b4:	b2d2      	uxtb	r2, r2
  4037b6:	2a36      	cmp	r2, #54	; 0x36
  4037b8:	d806      	bhi.n	4037c8 <m2m_wifi_connect_sc+0xf8>
  4037ba:	3b47      	subs	r3, #71	; 0x47
  4037bc:	b2db      	uxtb	r3, r3
  4037be:	2b19      	cmp	r3, #25
  4037c0:	d902      	bls.n	4037c8 <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  4037c2:	4288      	cmp	r0, r1
  4037c4:	d1ed      	bne.n	4037a2 <m2m_wifi_connect_sc+0xd2>
  4037c6:	e792      	b.n	4036ee <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  4037c8:	f240 220f 	movw	r2, #527	; 0x20f
  4037cc:	4947      	ldr	r1, [pc, #284]	; (4038ec <m2m_wifi_connect_sc+0x21c>)
  4037ce:	4848      	ldr	r0, [pc, #288]	; (4038f0 <m2m_wifi_connect_sc+0x220>)
  4037d0:	4c48      	ldr	r4, [pc, #288]	; (4038f4 <m2m_wifi_connect_sc+0x224>)
  4037d2:	47a0      	blx	r4
  4037d4:	484b      	ldr	r0, [pc, #300]	; (403904 <m2m_wifi_connect_sc+0x234>)
  4037d6:	47a0      	blx	r4
  4037d8:	4848      	ldr	r0, [pc, #288]	; (4038fc <m2m_wifi_connect_sc+0x22c>)
  4037da:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  4037dc:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  4037e0:	e7b8      	b.n	403754 <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  4037e2:	f240 2219 	movw	r2, #537	; 0x219
  4037e6:	4941      	ldr	r1, [pc, #260]	; (4038ec <m2m_wifi_connect_sc+0x21c>)
  4037e8:	4841      	ldr	r0, [pc, #260]	; (4038f0 <m2m_wifi_connect_sc+0x220>)
  4037ea:	4c42      	ldr	r4, [pc, #264]	; (4038f4 <m2m_wifi_connect_sc+0x224>)
  4037ec:	47a0      	blx	r4
  4037ee:	4846      	ldr	r0, [pc, #280]	; (403908 <m2m_wifi_connect_sc+0x238>)
  4037f0:	47a0      	blx	r4
  4037f2:	4842      	ldr	r0, [pc, #264]	; (4038fc <m2m_wifi_connect_sc+0x22c>)
  4037f4:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4037f6:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4037fa:	e7ab      	b.n	403754 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  4037fc:	f240 2222 	movw	r2, #546	; 0x222
  403800:	493a      	ldr	r1, [pc, #232]	; (4038ec <m2m_wifi_connect_sc+0x21c>)
  403802:	483b      	ldr	r0, [pc, #236]	; (4038f0 <m2m_wifi_connect_sc+0x220>)
  403804:	4c3b      	ldr	r4, [pc, #236]	; (4038f4 <m2m_wifi_connect_sc+0x224>)
  403806:	47a0      	blx	r4
  403808:	4840      	ldr	r0, [pc, #256]	; (40390c <m2m_wifi_connect_sc+0x23c>)
  40380a:	47a0      	blx	r4
  40380c:	483b      	ldr	r0, [pc, #236]	; (4038fc <m2m_wifi_connect_sc+0x22c>)
  40380e:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  403810:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403814:	e79e      	b.n	403754 <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  403816:	7833      	ldrb	r3, [r6, #0]
  403818:	3b01      	subs	r3, #1
  40381a:	b2db      	uxtb	r3, r3
  40381c:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  403820:	2b03      	cmp	r3, #3
  403822:	d813      	bhi.n	40384c <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  403824:	7872      	ldrb	r2, [r6, #1]
  403826:	1e53      	subs	r3, r2, #1
  403828:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  40382c:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  403830:	2b0b      	cmp	r3, #11
  403832:	d11a      	bne.n	40386a <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  403834:	1cb1      	adds	r1, r6, #2
  403836:	f10d 0016 	add.w	r0, sp, #22
  40383a:	4b2a      	ldr	r3, [pc, #168]	; (4038e4 <m2m_wifi_connect_sc+0x214>)
  40383c:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  40383e:	7873      	ldrb	r3, [r6, #1]
  403840:	aa20      	add	r2, sp, #128	; 0x80
  403842:	4413      	add	r3, r2
  403844:	2200      	movs	r2, #0
  403846:	f803 2c6a 	strb.w	r2, [r3, #-106]
  40384a:	e779      	b.n	403740 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  40384c:	f240 2239 	movw	r2, #569	; 0x239
  403850:	4926      	ldr	r1, [pc, #152]	; (4038ec <m2m_wifi_connect_sc+0x21c>)
  403852:	4827      	ldr	r0, [pc, #156]	; (4038f0 <m2m_wifi_connect_sc+0x220>)
  403854:	4c27      	ldr	r4, [pc, #156]	; (4038f4 <m2m_wifi_connect_sc+0x224>)
  403856:	47a0      	blx	r4
  403858:	f89d 1014 	ldrb.w	r1, [sp, #20]
  40385c:	482c      	ldr	r0, [pc, #176]	; (403910 <m2m_wifi_connect_sc+0x240>)
  40385e:	47a0      	blx	r4
  403860:	4826      	ldr	r0, [pc, #152]	; (4038fc <m2m_wifi_connect_sc+0x22c>)
  403862:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  403864:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403868:	e774      	b.n	403754 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  40386a:	f44f 7210 	mov.w	r2, #576	; 0x240
  40386e:	491f      	ldr	r1, [pc, #124]	; (4038ec <m2m_wifi_connect_sc+0x21c>)
  403870:	481f      	ldr	r0, [pc, #124]	; (4038f0 <m2m_wifi_connect_sc+0x220>)
  403872:	4c20      	ldr	r4, [pc, #128]	; (4038f4 <m2m_wifi_connect_sc+0x224>)
  403874:	47a0      	blx	r4
  403876:	f89d 1015 	ldrb.w	r1, [sp, #21]
  40387a:	4826      	ldr	r0, [pc, #152]	; (403914 <m2m_wifi_connect_sc+0x244>)
  40387c:	47a0      	blx	r4
  40387e:	481f      	ldr	r0, [pc, #124]	; (4038fc <m2m_wifi_connect_sc+0x22c>)
  403880:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  403882:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403886:	e765      	b.n	403754 <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  403888:	4630      	mov	r0, r6
  40388a:	4b1d      	ldr	r3, [pc, #116]	; (403900 <m2m_wifi_connect_sc+0x230>)
  40388c:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  40388e:	1e43      	subs	r3, r0, #1
  403890:	b29b      	uxth	r3, r3
  403892:	2b3f      	cmp	r3, #63	; 0x3f
  403894:	d805      	bhi.n	4038a2 <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  403896:	1c42      	adds	r2, r0, #1
  403898:	4631      	mov	r1, r6
  40389a:	a805      	add	r0, sp, #20
  40389c:	4b11      	ldr	r3, [pc, #68]	; (4038e4 <m2m_wifi_connect_sc+0x214>)
  40389e:	4798      	blx	r3
  4038a0:	e74e      	b.n	403740 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  4038a2:	f240 224f 	movw	r2, #591	; 0x24f
  4038a6:	4911      	ldr	r1, [pc, #68]	; (4038ec <m2m_wifi_connect_sc+0x21c>)
  4038a8:	4811      	ldr	r0, [pc, #68]	; (4038f0 <m2m_wifi_connect_sc+0x220>)
  4038aa:	4c12      	ldr	r4, [pc, #72]	; (4038f4 <m2m_wifi_connect_sc+0x224>)
  4038ac:	47a0      	blx	r4
  4038ae:	481a      	ldr	r0, [pc, #104]	; (403918 <m2m_wifi_connect_sc+0x248>)
  4038b0:	47a0      	blx	r4
  4038b2:	4812      	ldr	r0, [pc, #72]	; (4038fc <m2m_wifi_connect_sc+0x22c>)
  4038b4:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4038b6:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4038ba:	e74b      	b.n	403754 <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  4038bc:	223e      	movs	r2, #62	; 0x3e
  4038be:	4631      	mov	r1, r6
  4038c0:	a805      	add	r0, sp, #20
  4038c2:	4b08      	ldr	r3, [pc, #32]	; (4038e4 <m2m_wifi_connect_sc+0x214>)
  4038c4:	4798      	blx	r3
  4038c6:	e73b      	b.n	403740 <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  4038c8:	f240 225f 	movw	r2, #607	; 0x25f
  4038cc:	4907      	ldr	r1, [pc, #28]	; (4038ec <m2m_wifi_connect_sc+0x21c>)
  4038ce:	4808      	ldr	r0, [pc, #32]	; (4038f0 <m2m_wifi_connect_sc+0x220>)
  4038d0:	4c08      	ldr	r4, [pc, #32]	; (4038f4 <m2m_wifi_connect_sc+0x224>)
  4038d2:	47a0      	blx	r4
  4038d4:	4811      	ldr	r0, [pc, #68]	; (40391c <m2m_wifi_connect_sc+0x24c>)
  4038d6:	47a0      	blx	r4
  4038d8:	4808      	ldr	r0, [pc, #32]	; (4038fc <m2m_wifi_connect_sc+0x22c>)
  4038da:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4038dc:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  4038e0:	e738      	b.n	403754 <m2m_wifi_connect_sc+0x84>
  4038e2:	bf00      	nop
  4038e4:	00402ad1 	.word	0x00402ad1
  4038e8:	00402c49 	.word	0x00402c49
  4038ec:	0040d964 	.word	0x0040d964
  4038f0:	0040d6a4 	.word	0x0040d6a4
  4038f4:	00406c9d 	.word	0x00406c9d
  4038f8:	0040d9b8 	.word	0x0040d9b8
  4038fc:	0040d6d0 	.word	0x0040d6d0
  403900:	00402af3 	.word	0x00402af3
  403904:	0040d9cc 	.word	0x0040d9cc
  403908:	0040d9dc 	.word	0x0040d9dc
  40390c:	0040d9f0 	.word	0x0040d9f0
  403910:	0040d9fc 	.word	0x0040d9fc
  403914:	0040da18 	.word	0x0040da18
  403918:	0040da34 	.word	0x0040da34
  40391c:	0040da50 	.word	0x0040da50

00403920 <m2m_wifi_connect>:
{
  403920:	b510      	push	{r4, lr}
  403922:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  403924:	2400      	movs	r4, #0
  403926:	9401      	str	r4, [sp, #4]
  403928:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  40392c:	9400      	str	r4, [sp, #0]
  40392e:	4c02      	ldr	r4, [pc, #8]	; (403938 <m2m_wifi_connect+0x18>)
  403930:	47a0      	blx	r4
}
  403932:	b002      	add	sp, #8
  403934:	bd10      	pop	{r4, pc}
  403936:	bf00      	nop
  403938:	004036d1 	.word	0x004036d1

0040393c <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  40393c:	2000      	movs	r0, #0
  40393e:	4770      	bx	lr

00403940 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  403940:	b5f0      	push	{r4, r5, r6, r7, lr}
  403942:	b083      	sub	sp, #12
  403944:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  403946:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  40394a:	4e0a      	ldr	r6, [pc, #40]	; (403974 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  40394c:	4f0a      	ldr	r7, [pc, #40]	; (403978 <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  40394e:	4621      	mov	r1, r4
  403950:	4628      	mov	r0, r5
  403952:	47b0      	blx	r6
		if(val32 != 0) {		
  403954:	b154      	cbz	r4, 40396c <chip_apply_conf+0x2c>
			uint32 reg = 0;
  403956:	a902      	add	r1, sp, #8
  403958:	2300      	movs	r3, #0
  40395a:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  40395e:	4628      	mov	r0, r5
  403960:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  403962:	2800      	cmp	r0, #0
  403964:	d1f3      	bne.n	40394e <chip_apply_conf+0xe>
				if(reg == val32)
  403966:	9b01      	ldr	r3, [sp, #4]
  403968:	429c      	cmp	r4, r3
  40396a:	d1f0      	bne.n	40394e <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  40396c:	2000      	movs	r0, #0
  40396e:	b003      	add	sp, #12
  403970:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403972:	bf00      	nop
  403974:	00403e19 	.word	0x00403e19
  403978:	00403e0d 	.word	0x00403e0d

0040397c <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  40397c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403980:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  403982:	2001      	movs	r0, #1
  403984:	4b3c      	ldr	r3, [pc, #240]	; (403a78 <nm_clkless_wake+0xfc>)
  403986:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  403988:	a901      	add	r1, sp, #4
  40398a:	2001      	movs	r0, #1
  40398c:	4b3b      	ldr	r3, [pc, #236]	; (403a7c <nm_clkless_wake+0x100>)
  40398e:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  403990:	4682      	mov	sl, r0
  403992:	b938      	cbnz	r0, 4039a4 <nm_clkless_wake+0x28>
  403994:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  403996:	f04f 0801 	mov.w	r8, #1
  40399a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 403aa4 <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  40399e:	4d36      	ldr	r5, [pc, #216]	; (403a78 <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4039a0:	4f37      	ldr	r7, [pc, #220]	; (403a80 <nm_clkless_wake+0x104>)
  4039a2:	e020      	b.n	4039e6 <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  4039a4:	2272      	movs	r2, #114	; 0x72
  4039a6:	4937      	ldr	r1, [pc, #220]	; (403a84 <nm_clkless_wake+0x108>)
  4039a8:	4837      	ldr	r0, [pc, #220]	; (403a88 <nm_clkless_wake+0x10c>)
  4039aa:	4c38      	ldr	r4, [pc, #224]	; (403a8c <nm_clkless_wake+0x110>)
  4039ac:	47a0      	blx	r4
  4039ae:	4838      	ldr	r0, [pc, #224]	; (403a90 <nm_clkless_wake+0x114>)
  4039b0:	47a0      	blx	r4
  4039b2:	4838      	ldr	r0, [pc, #224]	; (403a94 <nm_clkless_wake+0x118>)
  4039b4:	47a0      	blx	r4
		goto _WAKE_EXIT;
  4039b6:	e009      	b.n	4039cc <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  4039b8:	2296      	movs	r2, #150	; 0x96
  4039ba:	4932      	ldr	r1, [pc, #200]	; (403a84 <nm_clkless_wake+0x108>)
  4039bc:	4832      	ldr	r0, [pc, #200]	; (403a88 <nm_clkless_wake+0x10c>)
  4039be:	4c33      	ldr	r4, [pc, #204]	; (403a8c <nm_clkless_wake+0x110>)
  4039c0:	47a0      	blx	r4
  4039c2:	4835      	ldr	r0, [pc, #212]	; (403a98 <nm_clkless_wake+0x11c>)
  4039c4:	47a0      	blx	r4
  4039c6:	4833      	ldr	r0, [pc, #204]	; (403a94 <nm_clkless_wake+0x118>)
  4039c8:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4039ca:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  4039cc:	4650      	mov	r0, sl
  4039ce:	b003      	add	sp, #12
  4039d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  4039d4:	9901      	ldr	r1, [sp, #4]
  4039d6:	f041 0102 	orr.w	r1, r1, #2
  4039da:	4640      	mov	r0, r8
  4039dc:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  4039de:	9b00      	ldr	r3, [sp, #0]
  4039e0:	f013 0f04 	tst.w	r3, #4
  4039e4:	d1f2      	bne.n	4039cc <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  4039e6:	9901      	ldr	r1, [sp, #4]
  4039e8:	f041 0102 	orr.w	r1, r1, #2
  4039ec:	4640      	mov	r0, r8
  4039ee:	47c8      	blx	r9
		nm_bsp_sleep(1);
  4039f0:	4640      	mov	r0, r8
  4039f2:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4039f4:	4669      	mov	r1, sp
  4039f6:	4b29      	ldr	r3, [pc, #164]	; (403a9c <nm_clkless_wake+0x120>)
  4039f8:	6818      	ldr	r0, [r3, #0]
  4039fa:	4b20      	ldr	r3, [pc, #128]	; (403a7c <nm_clkless_wake+0x100>)
  4039fc:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4039fe:	b908      	cbnz	r0, 403a04 <nm_clkless_wake+0x88>
  403a00:	9b00      	ldr	r3, [sp, #0]
  403a02:	b9bb      	cbnz	r3, 403a34 <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  403a04:	4e25      	ldr	r6, [pc, #148]	; (403a9c <nm_clkless_wake+0x120>)
  403a06:	230e      	movs	r3, #14
  403a08:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  403a0a:	4640      	mov	r0, r8
  403a0c:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403a0e:	4669      	mov	r1, sp
  403a10:	6830      	ldr	r0, [r6, #0]
  403a12:	4b1a      	ldr	r3, [pc, #104]	; (403a7c <nm_clkless_wake+0x100>)
  403a14:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  403a16:	b908      	cbnz	r0, 403a1c <nm_clkless_wake+0xa0>
  403a18:	9b00      	ldr	r3, [sp, #0]
  403a1a:	b95b      	cbnz	r3, 403a34 <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  403a1c:	4e1f      	ldr	r6, [pc, #124]	; (403a9c <nm_clkless_wake+0x120>)
  403a1e:	2313      	movs	r3, #19
  403a20:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  403a22:	4640      	mov	r0, r8
  403a24:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403a26:	4669      	mov	r1, sp
  403a28:	6830      	ldr	r0, [r6, #0]
  403a2a:	4b14      	ldr	r3, [pc, #80]	; (403a7c <nm_clkless_wake+0x100>)
  403a2c:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  403a2e:	4606      	mov	r6, r0
  403a30:	2800      	cmp	r0, #0
  403a32:	d1c1      	bne.n	4039b8 <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403a34:	4e19      	ldr	r6, [pc, #100]	; (403a9c <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  403a36:	9b00      	ldr	r3, [sp, #0]
  403a38:	f013 0f04 	tst.w	r3, #4
  403a3c:	d1c6      	bne.n	4039cc <nm_clkless_wake+0x50>
  403a3e:	3401      	adds	r4, #1
  403a40:	fba7 2304 	umull	r2, r3, r7, r4
  403a44:	085b      	lsrs	r3, r3, #1
  403a46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  403a4a:	429c      	cmp	r4, r3
  403a4c:	d1c2      	bne.n	4039d4 <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  403a4e:	2002      	movs	r0, #2
  403a50:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403a52:	4669      	mov	r1, sp
  403a54:	6830      	ldr	r0, [r6, #0]
  403a56:	4b09      	ldr	r3, [pc, #36]	; (403a7c <nm_clkless_wake+0x100>)
  403a58:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  403a5a:	9b00      	ldr	r3, [sp, #0]
  403a5c:	f013 0f04 	tst.w	r3, #4
  403a60:	d1e9      	bne.n	403a36 <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  403a62:	22aa      	movs	r2, #170	; 0xaa
  403a64:	4907      	ldr	r1, [pc, #28]	; (403a84 <nm_clkless_wake+0x108>)
  403a66:	4808      	ldr	r0, [pc, #32]	; (403a88 <nm_clkless_wake+0x10c>)
  403a68:	f8df b020 	ldr.w	fp, [pc, #32]	; 403a8c <nm_clkless_wake+0x110>
  403a6c:	47d8      	blx	fp
  403a6e:	480c      	ldr	r0, [pc, #48]	; (403aa0 <nm_clkless_wake+0x124>)
  403a70:	47d8      	blx	fp
  403a72:	4808      	ldr	r0, [pc, #32]	; (403a94 <nm_clkless_wake+0x118>)
  403a74:	47d8      	blx	fp
  403a76:	e7de      	b.n	403a36 <nm_clkless_wake+0xba>
  403a78:	0040271d 	.word	0x0040271d
  403a7c:	00403e0d 	.word	0x00403e0d
  403a80:	aaaaaaab 	.word	0xaaaaaaab
  403a84:	0040dad4 	.word	0x0040dad4
  403a88:	0040d6a4 	.word	0x0040d6a4
  403a8c:	00406c9d 	.word	0x00406c9d
  403a90:	0040db44 	.word	0x0040db44
  403a94:	0040d6d0 	.word	0x0040d6d0
  403a98:	0040db64 	.word	0x0040db64
  403a9c:	20400014 	.word	0x20400014
  403aa0:	0040db84 	.word	0x0040db84
  403aa4:	00403e19 	.word	0x00403e19

00403aa8 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  403aa8:	b500      	push	{lr}
  403aaa:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  403aac:	a901      	add	r1, sp, #4
  403aae:	f241 4008 	movw	r0, #5128	; 0x1408
  403ab2:	4b15      	ldr	r3, [pc, #84]	; (403b08 <enable_interrupts+0x60>)
  403ab4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403ab6:	b9e8      	cbnz	r0, 403af4 <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  403ab8:	9901      	ldr	r1, [sp, #4]
  403aba:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  403abe:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  403ac0:	f241 4008 	movw	r0, #5128	; 0x1408
  403ac4:	4b11      	ldr	r3, [pc, #68]	; (403b0c <enable_interrupts+0x64>)
  403ac6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403ac8:	b9b8      	cbnz	r0, 403afa <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  403aca:	a901      	add	r1, sp, #4
  403acc:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  403ad0:	4b0d      	ldr	r3, [pc, #52]	; (403b08 <enable_interrupts+0x60>)
  403ad2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403ad4:	b9a0      	cbnz	r0, 403b00 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  403ad6:	9901      	ldr	r1, [sp, #4]
  403ad8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403adc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  403ade:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  403ae2:	4b0a      	ldr	r3, [pc, #40]	; (403b0c <enable_interrupts+0x64>)
  403ae4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403ae6:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  403ae8:	bf18      	it	ne
  403aea:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  403aee:	b003      	add	sp, #12
  403af0:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  403af4:	f06f 0005 	mvn.w	r0, #5
  403af8:	e7f9      	b.n	403aee <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  403afa:	f06f 0005 	mvn.w	r0, #5
  403afe:	e7f6      	b.n	403aee <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  403b00:	f06f 0005 	mvn.w	r0, #5
  403b04:	e7f3      	b.n	403aee <enable_interrupts+0x46>
  403b06:	bf00      	nop
  403b08:	00403e0d 	.word	0x00403e0d
  403b0c:	00403e19 	.word	0x00403e19

00403b10 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  403b10:	b510      	push	{r4, lr}
  403b12:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  403b14:	4b25      	ldr	r3, [pc, #148]	; (403bac <nmi_get_chipid+0x9c>)
  403b16:	681c      	ldr	r4, [r3, #0]
  403b18:	b124      	cbz	r4, 403b24 <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  403b1a:	4b24      	ldr	r3, [pc, #144]	; (403bac <nmi_get_chipid+0x9c>)
  403b1c:	681c      	ldr	r4, [r3, #0]
}
  403b1e:	4620      	mov	r0, r4
  403b20:	b002      	add	sp, #8
  403b22:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  403b24:	4619      	mov	r1, r3
  403b26:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  403b2a:	4b21      	ldr	r3, [pc, #132]	; (403bb0 <nmi_get_chipid+0xa0>)
  403b2c:	4798      	blx	r3
  403b2e:	b118      	cbz	r0, 403b38 <nmi_get_chipid+0x28>
			chipid = 0;
  403b30:	2200      	movs	r2, #0
  403b32:	4b1e      	ldr	r3, [pc, #120]	; (403bac <nmi_get_chipid+0x9c>)
  403b34:	601a      	str	r2, [r3, #0]
			return 0;
  403b36:	e7f2      	b.n	403b1e <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  403b38:	a901      	add	r1, sp, #4
  403b3a:	f241 30f4 	movw	r0, #5108	; 0x13f4
  403b3e:	4b1c      	ldr	r3, [pc, #112]	; (403bb0 <nmi_get_chipid+0xa0>)
  403b40:	4798      	blx	r3
  403b42:	b118      	cbz	r0, 403b4c <nmi_get_chipid+0x3c>
			chipid = 0;
  403b44:	2200      	movs	r2, #0
  403b46:	4b19      	ldr	r3, [pc, #100]	; (403bac <nmi_get_chipid+0x9c>)
  403b48:	601a      	str	r2, [r3, #0]
			return 0;
  403b4a:	e7e8      	b.n	403b1e <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  403b4c:	4b17      	ldr	r3, [pc, #92]	; (403bac <nmi_get_chipid+0x9c>)
  403b4e:	681b      	ldr	r3, [r3, #0]
  403b50:	4a18      	ldr	r2, [pc, #96]	; (403bb4 <nmi_get_chipid+0xa4>)
  403b52:	4293      	cmp	r3, r2
  403b54:	d00d      	beq.n	403b72 <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  403b56:	4a18      	ldr	r2, [pc, #96]	; (403bb8 <nmi_get_chipid+0xa8>)
  403b58:	4293      	cmp	r3, r2
  403b5a:	d011      	beq.n	403b80 <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  403b5c:	4a17      	ldr	r2, [pc, #92]	; (403bbc <nmi_get_chipid+0xac>)
  403b5e:	4293      	cmp	r3, r2
  403b60:	d018      	beq.n	403b94 <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  403b62:	4a12      	ldr	r2, [pc, #72]	; (403bac <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  403b64:	6813      	ldr	r3, [r2, #0]
  403b66:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  403b6a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  403b6e:	6013      	str	r3, [r2, #0]
  403b70:	e7d3      	b.n	403b1a <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  403b72:	9b01      	ldr	r3, [sp, #4]
  403b74:	2b01      	cmp	r3, #1
  403b76:	d0f4      	beq.n	403b62 <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  403b78:	3201      	adds	r2, #1
  403b7a:	4b0c      	ldr	r3, [pc, #48]	; (403bac <nmi_get_chipid+0x9c>)
  403b7c:	601a      	str	r2, [r3, #0]
  403b7e:	e7f0      	b.n	403b62 <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  403b80:	9b01      	ldr	r3, [sp, #4]
  403b82:	2b03      	cmp	r3, #3
  403b84:	d0ed      	beq.n	403b62 <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  403b86:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  403b88:	bf0c      	ite	eq
  403b8a:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  403b8c:	4a0c      	ldrne	r2, [pc, #48]	; (403bc0 <nmi_get_chipid+0xb0>)
  403b8e:	4b07      	ldr	r3, [pc, #28]	; (403bac <nmi_get_chipid+0x9c>)
  403b90:	601a      	str	r2, [r3, #0]
  403b92:	e7e6      	b.n	403b62 <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  403b94:	4905      	ldr	r1, [pc, #20]	; (403bac <nmi_get_chipid+0x9c>)
  403b96:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  403b9a:	4b05      	ldr	r3, [pc, #20]	; (403bb0 <nmi_get_chipid+0xa0>)
  403b9c:	4798      	blx	r3
  403b9e:	2800      	cmp	r0, #0
  403ba0:	d0df      	beq.n	403b62 <nmi_get_chipid+0x52>
			chipid = 0;
  403ba2:	2200      	movs	r2, #0
  403ba4:	4b01      	ldr	r3, [pc, #4]	; (403bac <nmi_get_chipid+0x9c>)
  403ba6:	601a      	str	r2, [r3, #0]
			return 0;
  403ba8:	e7b9      	b.n	403b1e <nmi_get_chipid+0xe>
  403baa:	bf00      	nop
  403bac:	2040c374 	.word	0x2040c374
  403bb0:	00403e0d 	.word	0x00403e0d
  403bb4:	001002a0 	.word	0x001002a0
  403bb8:	001002b0 	.word	0x001002b0
  403bbc:	001000f0 	.word	0x001000f0
  403bc0:	001002b2 	.word	0x001002b2

00403bc4 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  403bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403bc8:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403bca:	f241 0514 	movw	r5, #4116	; 0x1014
  403bce:	4c28      	ldr	r4, [pc, #160]	; (403c70 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403bd0:	4e28      	ldr	r6, [pc, #160]	; (403c74 <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403bd2:	4628      	mov	r0, r5
  403bd4:	47a0      	blx	r4
		if (reg & 0x80000000) {
  403bd6:	2800      	cmp	r0, #0
  403bd8:	db02      	blt.n	403be0 <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403bda:	2001      	movs	r0, #1
  403bdc:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403bde:	e7f8      	b.n	403bd2 <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  403be0:	4825      	ldr	r0, [pc, #148]	; (403c78 <wait_for_bootrom+0xb4>)
  403be2:	4b23      	ldr	r3, [pc, #140]	; (403c70 <wait_for_bootrom+0xac>)
  403be4:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  403be6:	f010 0f01 	tst.w	r0, #1
  403bea:	d110      	bne.n	403c0e <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  403bec:	f8df 8084 	ldr.w	r8, [pc, #132]	; 403c74 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  403bf0:	4e1f      	ldr	r6, [pc, #124]	; (403c70 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  403bf2:	4d22      	ldr	r5, [pc, #136]	; (403c7c <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  403bf4:	2001      	movs	r0, #1
  403bf6:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  403bf8:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403bfc:	47b0      	blx	r6
  403bfe:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  403c00:	462a      	mov	r2, r5
  403c02:	4601      	mov	r1, r0
  403c04:	481e      	ldr	r0, [pc, #120]	; (403c80 <wait_for_bootrom+0xbc>)
  403c06:	4b1f      	ldr	r3, [pc, #124]	; (403c84 <wait_for_bootrom+0xc0>)
  403c08:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  403c0a:	42ac      	cmp	r4, r5
  403c0c:	d1f2      	bne.n	403bf4 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  403c0e:	2f02      	cmp	r7, #2
  403c10:	d019      	beq.n	403c46 <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  403c12:	2f03      	cmp	r7, #3
  403c14:	d022      	beq.n	403c5c <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  403c16:	2f04      	cmp	r7, #4
  403c18:	bf14      	ite	ne
  403c1a:	2400      	movne	r4, #0
  403c1c:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  403c1e:	4b1a      	ldr	r3, [pc, #104]	; (403c88 <wait_for_bootrom+0xc4>)
  403c20:	4798      	blx	r3
  403c22:	f3c0 000b 	ubfx	r0, r0, #0, #12
  403c26:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  403c2a:	bf0c      	ite	eq
  403c2c:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  403c30:	4620      	movne	r0, r4
  403c32:	4b16      	ldr	r3, [pc, #88]	; (403c8c <wait_for_bootrom+0xc8>)
  403c34:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  403c36:	4916      	ldr	r1, [pc, #88]	; (403c90 <wait_for_bootrom+0xcc>)
  403c38:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403c3c:	4b15      	ldr	r3, [pc, #84]	; (403c94 <wait_for_bootrom+0xd0>)
  403c3e:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  403c40:	2000      	movs	r0, #0
  403c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  403c46:	4914      	ldr	r1, [pc, #80]	; (403c98 <wait_for_bootrom+0xd4>)
  403c48:	4814      	ldr	r0, [pc, #80]	; (403c9c <wait_for_bootrom+0xd8>)
  403c4a:	4c12      	ldr	r4, [pc, #72]	; (403c94 <wait_for_bootrom+0xd0>)
  403c4c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  403c4e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  403c52:	f241 008c 	movw	r0, #4236	; 0x108c
  403c56:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  403c58:	2400      	movs	r4, #0
  403c5a:	e7e0      	b.n	403c1e <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  403c5c:	490e      	ldr	r1, [pc, #56]	; (403c98 <wait_for_bootrom+0xd4>)
  403c5e:	480f      	ldr	r0, [pc, #60]	; (403c9c <wait_for_bootrom+0xd8>)
  403c60:	4c0c      	ldr	r4, [pc, #48]	; (403c94 <wait_for_bootrom+0xd0>)
  403c62:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  403c64:	2100      	movs	r1, #0
  403c66:	f241 008c 	movw	r0, #4236	; 0x108c
  403c6a:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  403c6c:	2400      	movs	r4, #0
  403c6e:	e7d6      	b.n	403c1e <wait_for_bootrom+0x5a>
  403c70:	00403e01 	.word	0x00403e01
  403c74:	0040271d 	.word	0x0040271d
  403c78:	000207bc 	.word	0x000207bc
  403c7c:	10add09e 	.word	0x10add09e
  403c80:	0040dba8 	.word	0x0040dba8
  403c84:	00406c9d 	.word	0x00406c9d
  403c88:	00403b11 	.word	0x00403b11
  403c8c:	00403941 	.word	0x00403941
  403c90:	ef522f61 	.word	0xef522f61
  403c94:	00403e19 	.word	0x00403e19
  403c98:	3c1cd57d 	.word	0x3c1cd57d
  403c9c:	000207ac 	.word	0x000207ac

00403ca0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  403ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
  403ca2:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  403ca4:	f241 038c 	movw	r3, #4236	; 0x108c
  403ca8:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  403caa:	4b18      	ldr	r3, [pc, #96]	; (403d0c <wait_for_firmware_start+0x6c>)
  403cac:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  403cae:	3802      	subs	r0, #2
  403cb0:	b2c0      	uxtb	r0, r0
  403cb2:	2801      	cmp	r0, #1
  403cb4:	d911      	bls.n	403cda <wait_for_firmware_start+0x3a>
{
  403cb6:	f04f 34ff 	mov.w	r4, #4294967295
  403cba:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403cbc:	2702      	movs	r7, #2
  403cbe:	4e14      	ldr	r6, [pc, #80]	; (403d10 <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  403cc0:	4d14      	ldr	r5, [pc, #80]	; (403d14 <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  403cc2:	9b00      	ldr	r3, [sp, #0]
  403cc4:	4298      	cmp	r0, r3
  403cc6:	d012      	beq.n	403cee <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403cc8:	4638      	mov	r0, r7
  403cca:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  403ccc:	9801      	ldr	r0, [sp, #4]
  403cce:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  403cd0:	3c01      	subs	r4, #1
  403cd2:	d1f6      	bne.n	403cc2 <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  403cd4:	f06f 0004 	mvn.w	r0, #4
  403cd8:	e00e      	b.n	403cf8 <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  403cda:	4b0f      	ldr	r3, [pc, #60]	; (403d18 <wait_for_firmware_start+0x78>)
  403cdc:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  403cde:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  403ce2:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  403ce6:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  403cea:	9300      	str	r3, [sp, #0]
  403cec:	e7e3      	b.n	403cb6 <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  403cee:	9a00      	ldr	r2, [sp, #0]
  403cf0:	4b06      	ldr	r3, [pc, #24]	; (403d0c <wait_for_firmware_start+0x6c>)
  403cf2:	429a      	cmp	r2, r3
  403cf4:	d002      	beq.n	403cfc <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  403cf6:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  403cf8:	b003      	add	sp, #12
  403cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  403cfc:	2100      	movs	r1, #0
  403cfe:	f241 008c 	movw	r0, #4236	; 0x108c
  403d02:	4b06      	ldr	r3, [pc, #24]	; (403d1c <wait_for_firmware_start+0x7c>)
  403d04:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  403d06:	2000      	movs	r0, #0
  403d08:	e7f6      	b.n	403cf8 <wait_for_firmware_start+0x58>
  403d0a:	bf00      	nop
  403d0c:	02532636 	.word	0x02532636
  403d10:	0040271d 	.word	0x0040271d
  403d14:	00403e01 	.word	0x00403e01
  403d18:	000207ac 	.word	0x000207ac
  403d1c:	00403e19 	.word	0x00403e19

00403d20 <chip_deinit>:

sint8 chip_deinit(void)
{
  403d20:	b5f0      	push	{r4, r5, r6, r7, lr}
  403d22:	b083      	sub	sp, #12
	uint32 reg = 0;
  403d24:	a902      	add	r1, sp, #8
  403d26:	2300      	movs	r3, #0
  403d28:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403d2c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  403d30:	4b24      	ldr	r3, [pc, #144]	; (403dc4 <chip_deinit+0xa4>)
  403d32:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  403d34:	bb20      	cbnz	r0, 403d80 <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  403d36:	9901      	ldr	r1, [sp, #4]
  403d38:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  403d3c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  403d3e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  403d42:	4b21      	ldr	r3, [pc, #132]	; (403dc8 <chip_deinit+0xa8>)
  403d44:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  403d46:	4605      	mov	r5, r0
  403d48:	bb28      	cbnz	r0, 403d96 <chip_deinit+0x76>
  403d4a:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403d4c:	4e1d      	ldr	r6, [pc, #116]	; (403dc4 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  403d4e:	4f1e      	ldr	r7, [pc, #120]	; (403dc8 <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403d50:	a901      	add	r1, sp, #4
  403d52:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  403d56:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  403d58:	4605      	mov	r5, r0
  403d5a:	bb38      	cbnz	r0, 403dac <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  403d5c:	9901      	ldr	r1, [sp, #4]
  403d5e:	f411 6f80 	tst.w	r1, #1024	; 0x400
  403d62:	d00a      	beq.n	403d7a <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  403d64:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  403d68:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  403d6a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  403d6e:	47b8      	blx	r7
  403d70:	4605      	mov	r5, r0
  403d72:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  403d74:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403d78:	d1ea      	bne.n	403d50 <chip_deinit+0x30>

	return ret;
}
  403d7a:	4628      	mov	r0, r5
  403d7c:	b003      	add	sp, #12
  403d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  403d80:	f240 2231 	movw	r2, #561	; 0x231
  403d84:	4911      	ldr	r1, [pc, #68]	; (403dcc <chip_deinit+0xac>)
  403d86:	4812      	ldr	r0, [pc, #72]	; (403dd0 <chip_deinit+0xb0>)
  403d88:	4c12      	ldr	r4, [pc, #72]	; (403dd4 <chip_deinit+0xb4>)
  403d8a:	47a0      	blx	r4
  403d8c:	4812      	ldr	r0, [pc, #72]	; (403dd8 <chip_deinit+0xb8>)
  403d8e:	47a0      	blx	r4
  403d90:	4812      	ldr	r0, [pc, #72]	; (403ddc <chip_deinit+0xbc>)
  403d92:	47a0      	blx	r4
  403d94:	e7cf      	b.n	403d36 <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  403d96:	f240 2237 	movw	r2, #567	; 0x237
  403d9a:	490c      	ldr	r1, [pc, #48]	; (403dcc <chip_deinit+0xac>)
  403d9c:	480c      	ldr	r0, [pc, #48]	; (403dd0 <chip_deinit+0xb0>)
  403d9e:	4c0d      	ldr	r4, [pc, #52]	; (403dd4 <chip_deinit+0xb4>)
  403da0:	47a0      	blx	r4
  403da2:	480f      	ldr	r0, [pc, #60]	; (403de0 <chip_deinit+0xc0>)
  403da4:	47a0      	blx	r4
  403da6:	480d      	ldr	r0, [pc, #52]	; (403ddc <chip_deinit+0xbc>)
  403da8:	47a0      	blx	r4
		return ret;
  403daa:	e7e6      	b.n	403d7a <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  403dac:	f240 223e 	movw	r2, #574	; 0x23e
  403db0:	4906      	ldr	r1, [pc, #24]	; (403dcc <chip_deinit+0xac>)
  403db2:	4807      	ldr	r0, [pc, #28]	; (403dd0 <chip_deinit+0xb0>)
  403db4:	4c07      	ldr	r4, [pc, #28]	; (403dd4 <chip_deinit+0xb4>)
  403db6:	47a0      	blx	r4
  403db8:	480a      	ldr	r0, [pc, #40]	; (403de4 <chip_deinit+0xc4>)
  403dba:	47a0      	blx	r4
  403dbc:	4807      	ldr	r0, [pc, #28]	; (403ddc <chip_deinit+0xbc>)
  403dbe:	47a0      	blx	r4
			return ret;
  403dc0:	e7db      	b.n	403d7a <chip_deinit+0x5a>
  403dc2:	bf00      	nop
  403dc4:	00403e0d 	.word	0x00403e0d
  403dc8:	00403e19 	.word	0x00403e19
  403dcc:	0040dae4 	.word	0x0040dae4
  403dd0:	0040d6a4 	.word	0x0040d6a4
  403dd4:	00406c9d 	.word	0x00406c9d
  403dd8:	0040daf0 	.word	0x0040daf0
  403ddc:	0040d6d0 	.word	0x0040d6d0
  403de0:	0040db0c 	.word	0x0040db0c
  403de4:	0040db28 	.word	0x0040db28

00403de8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  403de8:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  403dea:	4b01      	ldr	r3, [pc, #4]	; (403df0 <nm_bus_iface_init+0x8>)
  403dec:	4798      	blx	r3

	return ret;
}
  403dee:	bd08      	pop	{r3, pc}
  403df0:	004028a1 	.word	0x004028a1

00403df4 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  403df4:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  403df6:	4b01      	ldr	r3, [pc, #4]	; (403dfc <nm_bus_iface_deinit+0x8>)
  403df8:	4798      	blx	r3

	return ret;
}
  403dfa:	bd08      	pop	{r3, pc}
  403dfc:	00402a91 	.word	0x00402a91

00403e00 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  403e00:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  403e02:	4b01      	ldr	r3, [pc, #4]	; (403e08 <nm_read_reg+0x8>)
  403e04:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  403e06:	bd08      	pop	{r3, pc}
  403e08:	00404655 	.word	0x00404655

00403e0c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403e0c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  403e0e:	4b01      	ldr	r3, [pc, #4]	; (403e14 <nm_read_reg_with_ret+0x8>)
  403e10:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  403e12:	bd08      	pop	{r3, pc}
  403e14:	0040466d 	.word	0x0040466d

00403e18 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  403e18:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  403e1a:	4b01      	ldr	r3, [pc, #4]	; (403e20 <nm_write_reg+0x8>)
  403e1c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  403e1e:	bd08      	pop	{r3, pc}
  403e20:	00404685 	.word	0x00404685

00403e24 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  403e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403e28:	4607      	mov	r7, r0
  403e2a:	4689      	mov	r9, r1
  403e2c:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  403e2e:	4b12      	ldr	r3, [pc, #72]	; (403e78 <nm_read_block+0x54>)
  403e30:	f8b3 8000 	ldrh.w	r8, [r3]
  403e34:	f1a8 0808 	sub.w	r8, r8, #8
  403e38:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403e3c:	4542      	cmp	r2, r8
  403e3e:	d919      	bls.n	403e74 <nm_read_block+0x50>
  403e40:	4644      	mov	r4, r8
  403e42:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  403e44:	f8df a034 	ldr.w	sl, [pc, #52]	; 403e7c <nm_read_block+0x58>
  403e48:	4642      	mov	r2, r8
  403e4a:	eb09 0106 	add.w	r1, r9, r6
  403e4e:	4638      	mov	r0, r7
  403e50:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  403e52:	4603      	mov	r3, r0
  403e54:	b958      	cbnz	r0, 403e6e <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  403e56:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  403e58:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  403e5a:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  403e5c:	42a5      	cmp	r5, r4
  403e5e:	d8f3      	bhi.n	403e48 <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  403e60:	b2aa      	uxth	r2, r5
  403e62:	eb09 0106 	add.w	r1, r9, r6
  403e66:	4638      	mov	r0, r7
  403e68:	4b04      	ldr	r3, [pc, #16]	; (403e7c <nm_read_block+0x58>)
  403e6a:	4798      	blx	r3
  403e6c:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403e6e:	4618      	mov	r0, r3
  403e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  403e74:	2600      	movs	r6, #0
  403e76:	e7f3      	b.n	403e60 <nm_read_block+0x3c>
  403e78:	20400010 	.word	0x20400010
  403e7c:	004047b1 	.word	0x004047b1

00403e80 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  403e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403e84:	4607      	mov	r7, r0
  403e86:	4689      	mov	r9, r1
  403e88:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  403e8a:	4b12      	ldr	r3, [pc, #72]	; (403ed4 <nm_write_block+0x54>)
  403e8c:	f8b3 8000 	ldrh.w	r8, [r3]
  403e90:	f1a8 0808 	sub.w	r8, r8, #8
  403e94:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403e98:	4542      	cmp	r2, r8
  403e9a:	d919      	bls.n	403ed0 <nm_write_block+0x50>
  403e9c:	4644      	mov	r4, r8
  403e9e:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403ea0:	f8df a034 	ldr.w	sl, [pc, #52]	; 403ed8 <nm_write_block+0x58>
  403ea4:	4642      	mov	r2, r8
  403ea6:	eb09 0106 	add.w	r1, r9, r6
  403eaa:	4638      	mov	r0, r7
  403eac:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  403eae:	4603      	mov	r3, r0
  403eb0:	b958      	cbnz	r0, 403eca <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  403eb2:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  403eb4:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  403eb6:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  403eb8:	42a5      	cmp	r5, r4
  403eba:	d8f3      	bhi.n	403ea4 <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403ebc:	b2aa      	uxth	r2, r5
  403ebe:	eb09 0106 	add.w	r1, r9, r6
  403ec2:	4638      	mov	r0, r7
  403ec4:	4b04      	ldr	r3, [pc, #16]	; (403ed8 <nm_write_block+0x58>)
  403ec6:	4798      	blx	r3
  403ec8:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403eca:	4618      	mov	r0, r3
  403ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  403ed0:	2600      	movs	r6, #0
  403ed2:	e7f3      	b.n	403ebc <nm_write_block+0x3c>
  403ed4:	20400010 	.word	0x20400010
  403ed8:	00404879 	.word	0x00404879

00403edc <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  403edc:	b530      	push	{r4, r5, lr}
  403ede:	b083      	sub	sp, #12
  403ee0:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  403ee2:	a902      	add	r1, sp, #8
  403ee4:	2300      	movs	r3, #0
  403ee6:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  403eea:	4824      	ldr	r0, [pc, #144]	; (403f7c <nm_get_firmware_info+0xa0>)
  403eec:	4b24      	ldr	r3, [pc, #144]	; (403f80 <nm_get_firmware_info+0xa4>)
  403eee:	4798      	blx	r3
  403ef0:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  403ef2:	9a01      	ldr	r2, [sp, #4]
  403ef4:	4b23      	ldr	r3, [pc, #140]	; (403f84 <nm_get_firmware_info+0xa8>)
  403ef6:	429a      	cmp	r2, r3
  403ef8:	d039      	beq.n	403f6e <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  403efa:	9b01      	ldr	r3, [sp, #4]
  403efc:	0c1a      	lsrs	r2, r3, #16
  403efe:	b291      	uxth	r1, r2
  403f00:	0a08      	lsrs	r0, r1, #8
  403f02:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  403f04:	f3c1 1103 	ubfx	r1, r1, #4, #4
  403f08:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  403f0a:	f002 020f 	and.w	r2, r2, #15
  403f0e:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  403f10:	b29a      	uxth	r2, r3
  403f12:	0a11      	lsrs	r1, r2, #8
  403f14:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  403f16:	f3c2 1203 	ubfx	r2, r2, #4, #4
  403f1a:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  403f1c:	f003 030f 	and.w	r3, r3, #15
  403f20:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  403f22:	4b19      	ldr	r3, [pc, #100]	; (403f88 <nm_get_firmware_info+0xac>)
  403f24:	4798      	blx	r3
  403f26:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  403f28:	7922      	ldrb	r2, [r4, #4]
  403f2a:	79a3      	ldrb	r3, [r4, #6]
  403f2c:	f003 030f 	and.w	r3, r3, #15
  403f30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403f34:	7962      	ldrb	r2, [r4, #5]
  403f36:	0112      	lsls	r2, r2, #4
  403f38:	b2d2      	uxtb	r2, r2
  403f3a:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  403f3c:	79e1      	ldrb	r1, [r4, #7]
  403f3e:	7a62      	ldrb	r2, [r4, #9]
  403f40:	f002 020f 	and.w	r2, r2, #15
  403f44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  403f48:	7a21      	ldrb	r1, [r4, #8]
  403f4a:	0109      	lsls	r1, r1, #4
  403f4c:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  403f4e:	430a      	orrs	r2, r1
  403f50:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  403f54:	428a      	cmp	r2, r1
  403f56:	bf88      	it	hi
  403f58:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  403f5c:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  403f60:	4293      	cmp	r3, r2
	}
	return ret;
}
  403f62:	bf8c      	ite	hi
  403f64:	4628      	movhi	r0, r5
  403f66:	f06f 000c 	mvnls.w	r0, #12
  403f6a:	b003      	add	sp, #12
  403f6c:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  403f6e:	a901      	add	r1, sp, #4
  403f70:	f241 0048 	movw	r0, #4168	; 0x1048
  403f74:	4b02      	ldr	r3, [pc, #8]	; (403f80 <nm_get_firmware_info+0xa4>)
  403f76:	4798      	blx	r3
  403f78:	4605      	mov	r5, r0
  403f7a:	e7be      	b.n	403efa <nm_get_firmware_info+0x1e>
  403f7c:	000207ac 	.word	0x000207ac
  403f80:	00403e0d 	.word	0x00403e0d
  403f84:	d75dc1c3 	.word	0xd75dc1c3
  403f88:	00403b11 	.word	0x00403b11

00403f8c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  403f8c:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  403f8e:	2800      	cmp	r0, #0
  403f90:	d037      	beq.n	404002 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  403f92:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  403f94:	1e63      	subs	r3, r4, #1
  403f96:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  403f98:	2b04      	cmp	r3, #4
  403f9a:	bf28      	it	cs
  403f9c:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  403f9e:	2000      	movs	r0, #0
  403fa0:	4b1e      	ldr	r3, [pc, #120]	; (40401c <nm_drv_init+0x90>)
  403fa2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403fa4:	4605      	mov	r5, r0
  403fa6:	2800      	cmp	r0, #0
  403fa8:	d12d      	bne.n	404006 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  403faa:	481d      	ldr	r0, [pc, #116]	; (404020 <nm_drv_init+0x94>)
  403fac:	4d1d      	ldr	r5, [pc, #116]	; (404024 <nm_drv_init+0x98>)
  403fae:	47a8      	blx	r5
  403fb0:	4b1d      	ldr	r3, [pc, #116]	; (404028 <nm_drv_init+0x9c>)
  403fb2:	4798      	blx	r3
  403fb4:	4601      	mov	r1, r0
  403fb6:	481d      	ldr	r0, [pc, #116]	; (40402c <nm_drv_init+0xa0>)
  403fb8:	47a8      	blx	r5
  403fba:	481d      	ldr	r0, [pc, #116]	; (404030 <nm_drv_init+0xa4>)
  403fbc:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  403fbe:	4b1d      	ldr	r3, [pc, #116]	; (404034 <nm_drv_init+0xa8>)
  403fc0:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  403fc2:	4620      	mov	r0, r4
  403fc4:	4b1c      	ldr	r3, [pc, #112]	; (404038 <nm_drv_init+0xac>)
  403fc6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403fc8:	4605      	mov	r5, r0
  403fca:	b9b0      	cbnz	r0, 403ffa <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  403fcc:	4620      	mov	r0, r4
  403fce:	4b1b      	ldr	r3, [pc, #108]	; (40403c <nm_drv_init+0xb0>)
  403fd0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403fd2:	4605      	mov	r5, r0
  403fd4:	b988      	cbnz	r0, 403ffa <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  403fd6:	3c02      	subs	r4, #2
  403fd8:	b2e4      	uxtb	r4, r4
  403fda:	2c01      	cmp	r4, #1
  403fdc:	d90f      	bls.n	403ffe <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  403fde:	4b18      	ldr	r3, [pc, #96]	; (404040 <nm_drv_init+0xb4>)
  403fe0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403fe2:	4605      	mov	r5, r0
  403fe4:	b158      	cbz	r0, 403ffe <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  403fe6:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  403fea:	4916      	ldr	r1, [pc, #88]	; (404044 <nm_drv_init+0xb8>)
  403fec:	4816      	ldr	r0, [pc, #88]	; (404048 <nm_drv_init+0xbc>)
  403fee:	4c0d      	ldr	r4, [pc, #52]	; (404024 <nm_drv_init+0x98>)
  403ff0:	47a0      	blx	r4
  403ff2:	4816      	ldr	r0, [pc, #88]	; (40404c <nm_drv_init+0xc0>)
  403ff4:	47a0      	blx	r4
  403ff6:	480e      	ldr	r0, [pc, #56]	; (404030 <nm_drv_init+0xa4>)
  403ff8:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  403ffa:	4b15      	ldr	r3, [pc, #84]	; (404050 <nm_drv_init+0xc4>)
  403ffc:	4798      	blx	r3
ERR1:
	return ret;
}
  403ffe:	4628      	mov	r0, r5
  404000:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  404002:	2401      	movs	r4, #1
  404004:	e7cb      	b.n	403f9e <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  404006:	f44f 7292 	mov.w	r2, #292	; 0x124
  40400a:	490e      	ldr	r1, [pc, #56]	; (404044 <nm_drv_init+0xb8>)
  40400c:	480e      	ldr	r0, [pc, #56]	; (404048 <nm_drv_init+0xbc>)
  40400e:	4c05      	ldr	r4, [pc, #20]	; (404024 <nm_drv_init+0x98>)
  404010:	47a0      	blx	r4
  404012:	4810      	ldr	r0, [pc, #64]	; (404054 <nm_drv_init+0xc8>)
  404014:	47a0      	blx	r4
  404016:	4806      	ldr	r0, [pc, #24]	; (404030 <nm_drv_init+0xa4>)
  404018:	47a0      	blx	r4
		goto ERR1;
  40401a:	e7f0      	b.n	403ffe <nm_drv_init+0x72>
  40401c:	00403de9 	.word	0x00403de9
  404020:	0040d978 	.word	0x0040d978
  404024:	00406c9d 	.word	0x00406c9d
  404028:	00403b11 	.word	0x00403b11
  40402c:	0040dc70 	.word	0x0040dc70
  404030:	0040d6d0 	.word	0x0040d6d0
  404034:	0040469d 	.word	0x0040469d
  404038:	00403bc5 	.word	0x00403bc5
  40403c:	00403ca1 	.word	0x00403ca1
  404040:	00403aa9 	.word	0x00403aa9
  404044:	0040dbb8 	.word	0x0040dbb8
  404048:	0040d6a4 	.word	0x0040d6a4
  40404c:	0040dc34 	.word	0x0040dc34
  404050:	00403df5 	.word	0x00403df5
  404054:	0040dc54 	.word	0x0040dc54

00404058 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  404058:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  40405a:	4b19      	ldr	r3, [pc, #100]	; (4040c0 <nm_drv_deinit+0x68>)
  40405c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40405e:	b958      	cbnz	r0, 404078 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  404060:	2000      	movs	r0, #0
  404062:	4b18      	ldr	r3, [pc, #96]	; (4040c4 <nm_drv_deinit+0x6c>)
  404064:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  404066:	4604      	mov	r4, r0
  404068:	b998      	cbnz	r0, 404092 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  40406a:	4b17      	ldr	r3, [pc, #92]	; (4040c8 <nm_drv_deinit+0x70>)
  40406c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40406e:	4604      	mov	r4, r0
  404070:	b9d0      	cbnz	r0, 4040a8 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  404072:	4b16      	ldr	r3, [pc, #88]	; (4040cc <nm_drv_deinit+0x74>)
  404074:	4798      	blx	r3
  404076:	e00a      	b.n	40408e <nm_drv_deinit+0x36>
  404078:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  40407a:	f44f 72ba 	mov.w	r2, #372	; 0x174
  40407e:	4914      	ldr	r1, [pc, #80]	; (4040d0 <nm_drv_deinit+0x78>)
  404080:	4814      	ldr	r0, [pc, #80]	; (4040d4 <nm_drv_deinit+0x7c>)
  404082:	4d15      	ldr	r5, [pc, #84]	; (4040d8 <nm_drv_deinit+0x80>)
  404084:	47a8      	blx	r5
  404086:	4815      	ldr	r0, [pc, #84]	; (4040dc <nm_drv_deinit+0x84>)
  404088:	47a8      	blx	r5
  40408a:	4815      	ldr	r0, [pc, #84]	; (4040e0 <nm_drv_deinit+0x88>)
  40408c:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  40408e:	4620      	mov	r0, r4
  404090:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  404092:	f240 127b 	movw	r2, #379	; 0x17b
  404096:	490e      	ldr	r1, [pc, #56]	; (4040d0 <nm_drv_deinit+0x78>)
  404098:	480e      	ldr	r0, [pc, #56]	; (4040d4 <nm_drv_deinit+0x7c>)
  40409a:	4d0f      	ldr	r5, [pc, #60]	; (4040d8 <nm_drv_deinit+0x80>)
  40409c:	47a8      	blx	r5
  40409e:	4811      	ldr	r0, [pc, #68]	; (4040e4 <nm_drv_deinit+0x8c>)
  4040a0:	47a8      	blx	r5
  4040a2:	480f      	ldr	r0, [pc, #60]	; (4040e0 <nm_drv_deinit+0x88>)
  4040a4:	47a8      	blx	r5
		goto ERR1;
  4040a6:	e7f2      	b.n	40408e <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  4040a8:	f240 1281 	movw	r2, #385	; 0x181
  4040ac:	4908      	ldr	r1, [pc, #32]	; (4040d0 <nm_drv_deinit+0x78>)
  4040ae:	4809      	ldr	r0, [pc, #36]	; (4040d4 <nm_drv_deinit+0x7c>)
  4040b0:	4d09      	ldr	r5, [pc, #36]	; (4040d8 <nm_drv_deinit+0x80>)
  4040b2:	47a8      	blx	r5
  4040b4:	480c      	ldr	r0, [pc, #48]	; (4040e8 <nm_drv_deinit+0x90>)
  4040b6:	47a8      	blx	r5
  4040b8:	4809      	ldr	r0, [pc, #36]	; (4040e0 <nm_drv_deinit+0x88>)
  4040ba:	47a8      	blx	r5
		goto ERR1;
  4040bc:	e7e7      	b.n	40408e <nm_drv_deinit+0x36>
  4040be:	bf00      	nop
  4040c0:	00403d21 	.word	0x00403d21
  4040c4:	004050fd 	.word	0x004050fd
  4040c8:	00403df5 	.word	0x00403df5
  4040cc:	00404649 	.word	0x00404649
  4040d0:	0040dbc4 	.word	0x0040dbc4
  4040d4:	0040d6a4 	.word	0x0040d6a4
  4040d8:	00406c9d 	.word	0x00406c9d
  4040dc:	0040dbd4 	.word	0x0040dbd4
  4040e0:	0040d6d0 	.word	0x0040d6d0
  4040e4:	0040dbf4 	.word	0x0040dbf4
  4040e8:	0040dc18 	.word	0x0040dc18

004040ec <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  4040ec:	b500      	push	{lr}
  4040ee:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  4040f0:	2300      	movs	r3, #0
  4040f2:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  4040f4:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  4040f6:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  4040fa:	a901      	add	r1, sp, #4
  4040fc:	2003      	movs	r0, #3
  4040fe:	4b02      	ldr	r3, [pc, #8]	; (404108 <nmi_spi_read+0x1c>)
  404100:	4798      	blx	r3
}
  404102:	b005      	add	sp, #20
  404104:	f85d fb04 	ldr.w	pc, [sp], #4
  404108:	004029bd 	.word	0x004029bd

0040410c <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  40410c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404110:	b082      	sub	sp, #8
  404112:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  404114:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  404118:	b2db      	uxtb	r3, r3
  40411a:	2b01      	cmp	r3, #1
  40411c:	d927      	bls.n	40416e <spi_cmd_rsp+0x62>
  40411e:	28cf      	cmp	r0, #207	; 0xcf
  404120:	d025      	beq.n	40416e <spi_cmd_rsp+0x62>
{
  404122:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  404124:	f04f 0801 	mov.w	r8, #1
  404128:	4f23      	ldr	r7, [pc, #140]	; (4041b8 <spi_cmd_rsp+0xac>)
  40412a:	4641      	mov	r1, r8
  40412c:	f10d 0007 	add.w	r0, sp, #7
  404130:	47b8      	blx	r7
  404132:	4606      	mov	r6, r0
  404134:	bb20      	cbnz	r0, 404180 <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  404136:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40413a:	42ab      	cmp	r3, r5
  40413c:	d02c      	beq.n	404198 <spi_cmd_rsp+0x8c>
  40413e:	1e63      	subs	r3, r4, #1
  404140:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  404144:	d1f1      	bne.n	40412a <spi_cmd_rsp+0x1e>
  404146:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  404148:	2701      	movs	r7, #1
  40414a:	4d1b      	ldr	r5, [pc, #108]	; (4041b8 <spi_cmd_rsp+0xac>)
  40414c:	4639      	mov	r1, r7
  40414e:	f10d 0007 	add.w	r0, sp, #7
  404152:	47a8      	blx	r5
  404154:	bb10      	cbnz	r0, 40419c <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  404156:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40415a:	b353      	cbz	r3, 4041b2 <spi_cmd_rsp+0xa6>
  40415c:	1e63      	subs	r3, r4, #1
  40415e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  404162:	d1f3      	bne.n	40414c <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  404164:	2601      	movs	r6, #1

_fail_:

	return result;
}
  404166:	4630      	mov	r0, r6
  404168:	b002      	add	sp, #8
  40416a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  40416e:	2101      	movs	r1, #1
  404170:	f10d 0007 	add.w	r0, sp, #7
  404174:	4b10      	ldr	r3, [pc, #64]	; (4041b8 <spi_cmd_rsp+0xac>)
  404176:	4798      	blx	r3
  404178:	2800      	cmp	r0, #0
  40417a:	d0d2      	beq.n	404122 <spi_cmd_rsp+0x16>
			result = N_FAIL;
  40417c:	2600      	movs	r6, #0
  40417e:	e7f2      	b.n	404166 <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  404180:	f240 1227 	movw	r2, #295	; 0x127
  404184:	490d      	ldr	r1, [pc, #52]	; (4041bc <spi_cmd_rsp+0xb0>)
  404186:	480e      	ldr	r0, [pc, #56]	; (4041c0 <spi_cmd_rsp+0xb4>)
  404188:	4c0e      	ldr	r4, [pc, #56]	; (4041c4 <spi_cmd_rsp+0xb8>)
  40418a:	47a0      	blx	r4
  40418c:	480e      	ldr	r0, [pc, #56]	; (4041c8 <spi_cmd_rsp+0xbc>)
  40418e:	47a0      	blx	r4
  404190:	480e      	ldr	r0, [pc, #56]	; (4041cc <spi_cmd_rsp+0xc0>)
  404192:	47a0      	blx	r4
			result = N_FAIL;
  404194:	2600      	movs	r6, #0
			goto _fail_;
  404196:	e7e6      	b.n	404166 <spi_cmd_rsp+0x5a>
  404198:	240b      	movs	r4, #11
  40419a:	e7d5      	b.n	404148 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  40419c:	f240 1235 	movw	r2, #309	; 0x135
  4041a0:	4906      	ldr	r1, [pc, #24]	; (4041bc <spi_cmd_rsp+0xb0>)
  4041a2:	4807      	ldr	r0, [pc, #28]	; (4041c0 <spi_cmd_rsp+0xb4>)
  4041a4:	4c07      	ldr	r4, [pc, #28]	; (4041c4 <spi_cmd_rsp+0xb8>)
  4041a6:	47a0      	blx	r4
  4041a8:	4807      	ldr	r0, [pc, #28]	; (4041c8 <spi_cmd_rsp+0xbc>)
  4041aa:	47a0      	blx	r4
  4041ac:	4807      	ldr	r0, [pc, #28]	; (4041cc <spi_cmd_rsp+0xc0>)
  4041ae:	47a0      	blx	r4
			goto _fail_;
  4041b0:	e7d9      	b.n	404166 <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  4041b2:	2601      	movs	r6, #1
  4041b4:	e7d7      	b.n	404166 <spi_cmd_rsp+0x5a>
  4041b6:	bf00      	nop
  4041b8:	004040ed 	.word	0x004040ed
  4041bc:	0040dc88 	.word	0x0040dc88
  4041c0:	0040d6a4 	.word	0x0040d6a4
  4041c4:	00406c9d 	.word	0x00406c9d
  4041c8:	0040e0c8 	.word	0x0040e0c8
  4041cc:	0040d6d0 	.word	0x0040d6d0

004041d0 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  4041d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041d4:	b085      	sub	sp, #20
  4041d6:	4683      	mov	fp, r0
  4041d8:	468a      	mov	sl, r1
  4041da:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  4041dc:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4041e0:	4d37      	ldr	r5, [pc, #220]	; (4042c0 <spi_data_read+0xf0>)
  4041e2:	e027      	b.n	404234 <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  4041e4:	f240 1257 	movw	r2, #343	; 0x157
  4041e8:	4936      	ldr	r1, [pc, #216]	; (4042c4 <spi_data_read+0xf4>)
  4041ea:	4837      	ldr	r0, [pc, #220]	; (4042c8 <spi_data_read+0xf8>)
  4041ec:	4c37      	ldr	r4, [pc, #220]	; (4042cc <spi_data_read+0xfc>)
  4041ee:	47a0      	blx	r4
  4041f0:	4837      	ldr	r0, [pc, #220]	; (4042d0 <spi_data_read+0x100>)
  4041f2:	47a0      	blx	r4
  4041f4:	4837      	ldr	r0, [pc, #220]	; (4042d4 <spi_data_read+0x104>)
  4041f6:	47a0      	blx	r4
  4041f8:	2300      	movs	r3, #0
  4041fa:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  4041fc:	9801      	ldr	r0, [sp, #4]
  4041fe:	b005      	add	sp, #20
  404200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  404204:	2c00      	cmp	r4, #0
  404206:	dd2e      	ble.n	404266 <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  404208:	4641      	mov	r1, r8
  40420a:	eb0b 0009 	add.w	r0, fp, r9
  40420e:	47a8      	blx	r5
  404210:	4604      	mov	r4, r0
  404212:	2800      	cmp	r0, #0
  404214:	d134      	bne.n	404280 <spi_data_read+0xb0>
		if(!clockless)
  404216:	b91f      	cbnz	r7, 404220 <spi_data_read+0x50>
			if (!gu8Crc_off) {
  404218:	4b2f      	ldr	r3, [pc, #188]	; (4042d8 <spi_data_read+0x108>)
  40421a:	781b      	ldrb	r3, [r3, #0]
  40421c:	2b00      	cmp	r3, #0
  40421e:	d03a      	beq.n	404296 <spi_data_read+0xc6>
		ix += nbytes;
  404220:	44c1      	add	r9, r8
  404222:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  404226:	ebaa 0a08 	sub.w	sl, sl, r8
  40422a:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  40422e:	f1ba 0f00 	cmp.w	sl, #0
  404232:	d041      	beq.n	4042b8 <spi_data_read+0xe8>
  404234:	46d0      	mov	r8, sl
  404236:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  40423a:	bf28      	it	cs
  40423c:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  404240:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  404242:	2601      	movs	r6, #1
  404244:	4631      	mov	r1, r6
  404246:	f10d 000b 	add.w	r0, sp, #11
  40424a:	47a8      	blx	r5
  40424c:	9001      	str	r0, [sp, #4]
  40424e:	2800      	cmp	r0, #0
  404250:	d1c8      	bne.n	4041e4 <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  404252:	f89d 300b 	ldrb.w	r3, [sp, #11]
  404256:	091b      	lsrs	r3, r3, #4
  404258:	2b0f      	cmp	r3, #15
  40425a:	d0d3      	beq.n	404204 <spi_data_read+0x34>
  40425c:	3c01      	subs	r4, #1
  40425e:	b224      	sxth	r4, r4
		} while (retry--);
  404260:	f1b4 3fff 	cmp.w	r4, #4294967295
  404264:	d1ee      	bne.n	404244 <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  404266:	f240 1263 	movw	r2, #355	; 0x163
  40426a:	4916      	ldr	r1, [pc, #88]	; (4042c4 <spi_data_read+0xf4>)
  40426c:	4816      	ldr	r0, [pc, #88]	; (4042c8 <spi_data_read+0xf8>)
  40426e:	4c17      	ldr	r4, [pc, #92]	; (4042cc <spi_data_read+0xfc>)
  404270:	47a0      	blx	r4
  404272:	f89d 100b 	ldrb.w	r1, [sp, #11]
  404276:	4819      	ldr	r0, [pc, #100]	; (4042dc <spi_data_read+0x10c>)
  404278:	47a0      	blx	r4
  40427a:	4816      	ldr	r0, [pc, #88]	; (4042d4 <spi_data_read+0x104>)
  40427c:	47a0      	blx	r4
			break;
  40427e:	e7bd      	b.n	4041fc <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  404280:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  404284:	490f      	ldr	r1, [pc, #60]	; (4042c4 <spi_data_read+0xf4>)
  404286:	4810      	ldr	r0, [pc, #64]	; (4042c8 <spi_data_read+0xf8>)
  404288:	4c10      	ldr	r4, [pc, #64]	; (4042cc <spi_data_read+0xfc>)
  40428a:	47a0      	blx	r4
  40428c:	4814      	ldr	r0, [pc, #80]	; (4042e0 <spi_data_read+0x110>)
  40428e:	47a0      	blx	r4
  404290:	4810      	ldr	r0, [pc, #64]	; (4042d4 <spi_data_read+0x104>)
  404292:	47a0      	blx	r4
			break;
  404294:	e7b2      	b.n	4041fc <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  404296:	2102      	movs	r1, #2
  404298:	a803      	add	r0, sp, #12
  40429a:	47a8      	blx	r5
  40429c:	2800      	cmp	r0, #0
  40429e:	d0bf      	beq.n	404220 <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  4042a0:	f240 1277 	movw	r2, #375	; 0x177
  4042a4:	4907      	ldr	r1, [pc, #28]	; (4042c4 <spi_data_read+0xf4>)
  4042a6:	4808      	ldr	r0, [pc, #32]	; (4042c8 <spi_data_read+0xf8>)
  4042a8:	4d08      	ldr	r5, [pc, #32]	; (4042cc <spi_data_read+0xfc>)
  4042aa:	47a8      	blx	r5
  4042ac:	480d      	ldr	r0, [pc, #52]	; (4042e4 <spi_data_read+0x114>)
  4042ae:	47a8      	blx	r5
  4042b0:	4808      	ldr	r0, [pc, #32]	; (4042d4 <spi_data_read+0x104>)
  4042b2:	47a8      	blx	r5
					result = N_FAIL;
  4042b4:	9401      	str	r4, [sp, #4]
					break;
  4042b6:	e7a1      	b.n	4041fc <spi_data_read+0x2c>
  4042b8:	2301      	movs	r3, #1
  4042ba:	9301      	str	r3, [sp, #4]
  4042bc:	e79e      	b.n	4041fc <spi_data_read+0x2c>
  4042be:	bf00      	nop
  4042c0:	004040ed 	.word	0x004040ed
  4042c4:	0040dc94 	.word	0x0040dc94
  4042c8:	0040d6a4 	.word	0x0040d6a4
  4042cc:	00406c9d 	.word	0x00406c9d
  4042d0:	0040e0fc 	.word	0x0040e0fc
  4042d4:	0040d6d0 	.word	0x0040d6d0
  4042d8:	2040c378 	.word	0x2040c378
  4042dc:	0040e130 	.word	0x0040e130
  4042e0:	0040e160 	.word	0x0040e160
  4042e4:	0040e194 	.word	0x0040e194

004042e8 <nmi_spi_write>:
{
  4042e8:	b500      	push	{lr}
  4042ea:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  4042ec:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  4042ee:	2300      	movs	r3, #0
  4042f0:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  4042f2:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  4042f6:	a901      	add	r1, sp, #4
  4042f8:	2003      	movs	r0, #3
  4042fa:	4b02      	ldr	r3, [pc, #8]	; (404304 <nmi_spi_write+0x1c>)
  4042fc:	4798      	blx	r3
}
  4042fe:	b005      	add	sp, #20
  404300:	f85d fb04 	ldr.w	pc, [sp], #4
  404304:	004029bd 	.word	0x004029bd

00404308 <spi_cmd>:
{
  404308:	b570      	push	{r4, r5, r6, lr}
  40430a:	b084      	sub	sp, #16
  40430c:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  404310:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  404314:	38c1      	subs	r0, #193	; 0xc1
  404316:	280e      	cmp	r0, #14
  404318:	f200 80a2 	bhi.w	404460 <spi_cmd+0x158>
  40431c:	e8df f000 	tbb	[pc, r0]
  404320:	19664545 	.word	0x19664545
  404324:	5454332a 	.word	0x5454332a
  404328:	a0a0087f 	.word	0xa0a0087f
  40432c:	a0a0      	.short	0xa0a0
  40432e:	3c          	.byte	0x3c
  40432f:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  404330:	0c0b      	lsrs	r3, r1, #16
  404332:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  404336:	0a0b      	lsrs	r3, r1, #8
  404338:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  40433c:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  404340:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  404342:	4b55      	ldr	r3, [pc, #340]	; (404498 <spi_cmd+0x190>)
  404344:	781b      	ldrb	r3, [r3, #0]
  404346:	2b00      	cmp	r3, #0
  404348:	f000 808c 	beq.w	404464 <spi_cmd+0x15c>
			len-=1;
  40434c:	3901      	subs	r1, #1
  40434e:	b2c9      	uxtb	r1, r1
  404350:	e09a      	b.n	404488 <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  404352:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  404356:	b944      	cbnz	r4, 40436a <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  404358:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  40435c:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  404360:	2300      	movs	r3, #0
  404362:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  404366:	2105      	movs	r1, #5
		break;
  404368:	e7eb      	b.n	404342 <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  40436a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40436e:	f88d 3005 	strb.w	r3, [sp, #5]
  404372:	e7f3      	b.n	40435c <spi_cmd+0x54>
		bc[1] = 0x00;
  404374:	2300      	movs	r3, #0
  404376:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  40437a:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  40437e:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  404382:	2105      	movs	r1, #5
		break;
  404384:	e7dd      	b.n	404342 <spi_cmd+0x3a>
		bc[1] = 0x00;
  404386:	2300      	movs	r3, #0
  404388:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  40438c:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  404390:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  404394:	2105      	movs	r1, #5
		break;
  404396:	e7d4      	b.n	404342 <spi_cmd+0x3a>
		bc[1] = 0xff;
  404398:	23ff      	movs	r3, #255	; 0xff
  40439a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  40439e:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  4043a2:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  4043a6:	2105      	movs	r1, #5
		break;
  4043a8:	e7cb      	b.n	404342 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  4043aa:	0c0a      	lsrs	r2, r1, #16
  4043ac:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  4043b0:	0a0a      	lsrs	r2, r1, #8
  4043b2:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  4043b6:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  4043ba:	0a1a      	lsrs	r2, r3, #8
  4043bc:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  4043c0:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  4043c4:	2107      	movs	r1, #7
		break;
  4043c6:	e7bc      	b.n	404342 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  4043c8:	0c0a      	lsrs	r2, r1, #16
  4043ca:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  4043ce:	0a0a      	lsrs	r2, r1, #8
  4043d0:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  4043d4:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  4043d8:	0c1a      	lsrs	r2, r3, #16
  4043da:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  4043de:	0a1a      	lsrs	r2, r3, #8
  4043e0:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  4043e4:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  4043e8:	2108      	movs	r1, #8
		break;
  4043ea:	e7aa      	b.n	404342 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  4043ec:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  4043f0:	b984      	cbnz	r4, 404414 <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  4043f2:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  4043f6:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  4043fa:	0e13      	lsrs	r3, r2, #24
  4043fc:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  404400:	0c13      	lsrs	r3, r2, #16
  404402:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  404406:	0a13      	lsrs	r3, r2, #8
  404408:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  40440c:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  404410:	2108      	movs	r1, #8
		break;
  404412:	e796      	b.n	404342 <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  404414:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404418:	f88d 3005 	strb.w	r3, [sp, #5]
  40441c:	e7eb      	b.n	4043f6 <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  40441e:	0c0b      	lsrs	r3, r1, #16
  404420:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  404424:	0a0b      	lsrs	r3, r1, #8
  404426:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  40442a:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  40442e:	0e13      	lsrs	r3, r2, #24
  404430:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  404434:	0c13      	lsrs	r3, r2, #16
  404436:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  40443a:	0a13      	lsrs	r3, r2, #8
  40443c:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  404440:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  404444:	2109      	movs	r1, #9
		break;
  404446:	e77c      	b.n	404342 <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  404448:	f44f 7284 	mov.w	r2, #264	; 0x108
  40444c:	4913      	ldr	r1, [pc, #76]	; (40449c <spi_cmd+0x194>)
  40444e:	4814      	ldr	r0, [pc, #80]	; (4044a0 <spi_cmd+0x198>)
  404450:	4c14      	ldr	r4, [pc, #80]	; (4044a4 <spi_cmd+0x19c>)
  404452:	47a0      	blx	r4
  404454:	4814      	ldr	r0, [pc, #80]	; (4044a8 <spi_cmd+0x1a0>)
  404456:	47a0      	blx	r4
  404458:	4814      	ldr	r0, [pc, #80]	; (4044ac <spi_cmd+0x1a4>)
  40445a:	47a0      	blx	r4
			result = N_FAIL;
  40445c:	2000      	movs	r0, #0
  40445e:	e019      	b.n	404494 <spi_cmd+0x18c>
	switch (cmd) {
  404460:	2000      	movs	r0, #0
  404462:	e017      	b.n	404494 <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  404464:	1e4e      	subs	r6, r1, #1
  404466:	ab01      	add	r3, sp, #4
  404468:	199d      	adds	r5, r3, r6
  40446a:	207f      	movs	r0, #127	; 0x7f
  40446c:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  40446e:	4c10      	ldr	r4, [pc, #64]	; (4044b0 <spi_cmd+0x1a8>)
  404470:	f812 3b01 	ldrb.w	r3, [r2], #1
  404474:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  404478:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  40447a:	4295      	cmp	r5, r2
  40447c:	d1f8      	bne.n	404470 <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  40447e:	ab04      	add	r3, sp, #16
  404480:	441e      	add	r6, r3
  404482:	0043      	lsls	r3, r0, #1
  404484:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  404488:	a801      	add	r0, sp, #4
  40448a:	4b0a      	ldr	r3, [pc, #40]	; (4044b4 <spi_cmd+0x1ac>)
  40448c:	4798      	blx	r3
  40448e:	2800      	cmp	r0, #0
  404490:	d1da      	bne.n	404448 <spi_cmd+0x140>
  404492:	2001      	movs	r0, #1
}
  404494:	b004      	add	sp, #16
  404496:	bd70      	pop	{r4, r5, r6, pc}
  404498:	2040c378 	.word	0x2040c378
  40449c:	0040dc80 	.word	0x0040dc80
  4044a0:	0040d6a4 	.word	0x0040d6a4
  4044a4:	00406c9d 	.word	0x00406c9d
  4044a8:	0040e09c 	.word	0x0040e09c
  4044ac:	0040d6d0 	.word	0x0040d6d0
  4044b0:	0040dcfc 	.word	0x0040dcfc
  4044b4:	004042e9 	.word	0x004042e9

004044b8 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  4044b8:	b570      	push	{r4, r5, r6, lr}
  4044ba:	b082      	sub	sp, #8
  4044bc:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  4044be:	2831      	cmp	r0, #49	; 0x31
  4044c0:	bf35      	itete	cc
  4044c2:	2301      	movcc	r3, #1
  4044c4:	2300      	movcs	r3, #0
  4044c6:	25c3      	movcc	r5, #195	; 0xc3
  4044c8:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  4044ca:	9300      	str	r3, [sp, #0]
  4044cc:	2304      	movs	r3, #4
  4044ce:	460a      	mov	r2, r1
  4044d0:	4601      	mov	r1, r0
  4044d2:	4628      	mov	r0, r5
  4044d4:	4e15      	ldr	r6, [pc, #84]	; (40452c <spi_write_reg+0x74>)
  4044d6:	47b0      	blx	r6
	if (result != N_OK) {
  4044d8:	2801      	cmp	r0, #1
  4044da:	d00d      	beq.n	4044f8 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  4044dc:	f240 12eb 	movw	r2, #491	; 0x1eb
  4044e0:	4913      	ldr	r1, [pc, #76]	; (404530 <spi_write_reg+0x78>)
  4044e2:	4814      	ldr	r0, [pc, #80]	; (404534 <spi_write_reg+0x7c>)
  4044e4:	4d14      	ldr	r5, [pc, #80]	; (404538 <spi_write_reg+0x80>)
  4044e6:	47a8      	blx	r5
  4044e8:	4621      	mov	r1, r4
  4044ea:	4814      	ldr	r0, [pc, #80]	; (40453c <spi_write_reg+0x84>)
  4044ec:	47a8      	blx	r5
  4044ee:	4814      	ldr	r0, [pc, #80]	; (404540 <spi_write_reg+0x88>)
  4044f0:	47a8      	blx	r5
		return N_FAIL;
  4044f2:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  4044f4:	b002      	add	sp, #8
  4044f6:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  4044f8:	4628      	mov	r0, r5
  4044fa:	4b12      	ldr	r3, [pc, #72]	; (404544 <spi_write_reg+0x8c>)
  4044fc:	4798      	blx	r3
	if (result != N_OK) {
  4044fe:	2801      	cmp	r0, #1
  404500:	d0f8      	beq.n	4044f4 <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  404502:	f240 12f1 	movw	r2, #497	; 0x1f1
  404506:	490a      	ldr	r1, [pc, #40]	; (404530 <spi_write_reg+0x78>)
  404508:	480a      	ldr	r0, [pc, #40]	; (404534 <spi_write_reg+0x7c>)
  40450a:	4d0b      	ldr	r5, [pc, #44]	; (404538 <spi_write_reg+0x80>)
  40450c:	47a8      	blx	r5
  40450e:	4621      	mov	r1, r4
  404510:	480d      	ldr	r0, [pc, #52]	; (404548 <spi_write_reg+0x90>)
  404512:	47a8      	blx	r5
  404514:	480a      	ldr	r0, [pc, #40]	; (404540 <spi_write_reg+0x88>)
  404516:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404518:	2400      	movs	r4, #0
  40451a:	9400      	str	r4, [sp, #0]
  40451c:	4623      	mov	r3, r4
  40451e:	4622      	mov	r2, r4
  404520:	4621      	mov	r1, r4
  404522:	20cf      	movs	r0, #207	; 0xcf
  404524:	4d01      	ldr	r5, [pc, #4]	; (40452c <spi_write_reg+0x74>)
  404526:	47a8      	blx	r5
		return N_FAIL;
  404528:	4620      	mov	r0, r4
  40452a:	e7e3      	b.n	4044f4 <spi_write_reg+0x3c>
  40452c:	00404309 	.word	0x00404309
  404530:	0040dcb4 	.word	0x0040dcb4
  404534:	0040d6a4 	.word	0x0040d6a4
  404538:	00406c9d 	.word	0x00406c9d
  40453c:	0040e24c 	.word	0x0040e24c
  404540:	0040d6d0 	.word	0x0040d6d0
  404544:	0040410d 	.word	0x0040410d
  404548:	0040e278 	.word	0x0040e278

0040454c <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  40454c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404550:	b084      	sub	sp, #16
  404552:	4604      	mov	r4, r0
  404554:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  404556:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40455a:	bf35      	itete	cc
  40455c:	2601      	movcc	r6, #1
  40455e:	2600      	movcs	r6, #0
  404560:	25c4      	movcc	r5, #196	; 0xc4
  404562:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  404564:	9600      	str	r6, [sp, #0]
  404566:	2304      	movs	r3, #4
  404568:	2200      	movs	r2, #0
  40456a:	4601      	mov	r1, r0
  40456c:	4628      	mov	r0, r5
  40456e:	4f2c      	ldr	r7, [pc, #176]	; (404620 <spi_read_reg+0xd4>)
  404570:	47b8      	blx	r7
	if (result != N_OK) {
  404572:	2801      	cmp	r0, #1
  404574:	d00e      	beq.n	404594 <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  404576:	f240 2245 	movw	r2, #581	; 0x245
  40457a:	492a      	ldr	r1, [pc, #168]	; (404624 <spi_read_reg+0xd8>)
  40457c:	482a      	ldr	r0, [pc, #168]	; (404628 <spi_read_reg+0xdc>)
  40457e:	4d2b      	ldr	r5, [pc, #172]	; (40462c <spi_read_reg+0xe0>)
  404580:	47a8      	blx	r5
  404582:	4621      	mov	r1, r4
  404584:	482a      	ldr	r0, [pc, #168]	; (404630 <spi_read_reg+0xe4>)
  404586:	47a8      	blx	r5
  404588:	482a      	ldr	r0, [pc, #168]	; (404634 <spi_read_reg+0xe8>)
  40458a:	47a8      	blx	r5
		return N_FAIL;
  40458c:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  40458e:	b004      	add	sp, #16
  404590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  404594:	4628      	mov	r0, r5
  404596:	4b28      	ldr	r3, [pc, #160]	; (404638 <spi_read_reg+0xec>)
  404598:	4798      	blx	r3
	if (result != N_OK) {
  40459a:	2801      	cmp	r0, #1
  40459c:	d014      	beq.n	4045c8 <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  40459e:	f240 224b 	movw	r2, #587	; 0x24b
  4045a2:	4920      	ldr	r1, [pc, #128]	; (404624 <spi_read_reg+0xd8>)
  4045a4:	4820      	ldr	r0, [pc, #128]	; (404628 <spi_read_reg+0xdc>)
  4045a6:	4d21      	ldr	r5, [pc, #132]	; (40462c <spi_read_reg+0xe0>)
  4045a8:	47a8      	blx	r5
  4045aa:	4621      	mov	r1, r4
  4045ac:	4823      	ldr	r0, [pc, #140]	; (40463c <spi_read_reg+0xf0>)
  4045ae:	47a8      	blx	r5
  4045b0:	4820      	ldr	r0, [pc, #128]	; (404634 <spi_read_reg+0xe8>)
  4045b2:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4045b4:	2400      	movs	r4, #0
  4045b6:	9400      	str	r4, [sp, #0]
  4045b8:	4623      	mov	r3, r4
  4045ba:	4622      	mov	r2, r4
  4045bc:	4621      	mov	r1, r4
  4045be:	20cf      	movs	r0, #207	; 0xcf
  4045c0:	4d17      	ldr	r5, [pc, #92]	; (404620 <spi_read_reg+0xd4>)
  4045c2:	47a8      	blx	r5
		return N_FAIL;
  4045c4:	4620      	mov	r0, r4
  4045c6:	e7e2      	b.n	40458e <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  4045c8:	4632      	mov	r2, r6
  4045ca:	2104      	movs	r1, #4
  4045cc:	a803      	add	r0, sp, #12
  4045ce:	4b1c      	ldr	r3, [pc, #112]	; (404640 <spi_read_reg+0xf4>)
  4045d0:	4798      	blx	r3
	if (result != N_OK) {
  4045d2:	2801      	cmp	r0, #1
  4045d4:	d110      	bne.n	4045f8 <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  4045d6:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  4045da:	f89d 300e 	ldrb.w	r3, [sp, #14]
  4045de:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  4045e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  4045e4:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  4045e8:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  4045ea:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  4045ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  4045f2:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  4045f6:	e7ca      	b.n	40458e <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  4045f8:	f240 2253 	movw	r2, #595	; 0x253
  4045fc:	4909      	ldr	r1, [pc, #36]	; (404624 <spi_read_reg+0xd8>)
  4045fe:	480a      	ldr	r0, [pc, #40]	; (404628 <spi_read_reg+0xdc>)
  404600:	4c0a      	ldr	r4, [pc, #40]	; (40462c <spi_read_reg+0xe0>)
  404602:	47a0      	blx	r4
  404604:	480f      	ldr	r0, [pc, #60]	; (404644 <spi_read_reg+0xf8>)
  404606:	47a0      	blx	r4
  404608:	480a      	ldr	r0, [pc, #40]	; (404634 <spi_read_reg+0xe8>)
  40460a:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40460c:	2400      	movs	r4, #0
  40460e:	9400      	str	r4, [sp, #0]
  404610:	4623      	mov	r3, r4
  404612:	4622      	mov	r2, r4
  404614:	4621      	mov	r1, r4
  404616:	20cf      	movs	r0, #207	; 0xcf
  404618:	4d01      	ldr	r5, [pc, #4]	; (404620 <spi_read_reg+0xd4>)
  40461a:	47a8      	blx	r5
		return N_FAIL;
  40461c:	4620      	mov	r0, r4
  40461e:	e7b6      	b.n	40458e <spi_read_reg+0x42>
  404620:	00404309 	.word	0x00404309
  404624:	0040dcd4 	.word	0x0040dcd4
  404628:	0040d6a4 	.word	0x0040d6a4
  40462c:	00406c9d 	.word	0x00406c9d
  404630:	0040e1cc 	.word	0x0040e1cc
  404634:	0040d6d0 	.word	0x0040d6d0
  404638:	0040410d 	.word	0x0040410d
  40463c:	0040e1f8 	.word	0x0040e1f8
  404640:	004041d1 	.word	0x004041d1
  404644:	0040e22c 	.word	0x0040e22c

00404648 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  404648:	2000      	movs	r0, #0
  40464a:	4b01      	ldr	r3, [pc, #4]	; (404650 <nm_spi_deinit+0x8>)
  40464c:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  40464e:	4770      	bx	lr
  404650:	2040c378 	.word	0x2040c378

00404654 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  404654:	b500      	push	{lr}
  404656:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  404658:	a901      	add	r1, sp, #4
  40465a:	4b03      	ldr	r3, [pc, #12]	; (404668 <nm_spi_read_reg+0x14>)
  40465c:	4798      	blx	r3

	return u32Val;
}
  40465e:	9801      	ldr	r0, [sp, #4]
  404660:	b003      	add	sp, #12
  404662:	f85d fb04 	ldr.w	pc, [sp], #4
  404666:	bf00      	nop
  404668:	0040454d 	.word	0x0040454d

0040466c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  40466c:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  40466e:	4b04      	ldr	r3, [pc, #16]	; (404680 <nm_spi_read_reg_with_ret+0x14>)
  404670:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  404672:	2801      	cmp	r0, #1

	return s8Ret;
}
  404674:	bf0c      	ite	eq
  404676:	2000      	moveq	r0, #0
  404678:	f06f 0005 	mvnne.w	r0, #5
  40467c:	bd08      	pop	{r3, pc}
  40467e:	bf00      	nop
  404680:	0040454d 	.word	0x0040454d

00404684 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  404684:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  404686:	4b04      	ldr	r3, [pc, #16]	; (404698 <nm_spi_write_reg+0x14>)
  404688:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40468a:	2801      	cmp	r0, #1

	return s8Ret;
}
  40468c:	bf0c      	ite	eq
  40468e:	2000      	moveq	r0, #0
  404690:	f06f 0005 	mvnne.w	r0, #5
  404694:	bd08      	pop	{r3, pc}
  404696:	bf00      	nop
  404698:	004044b9 	.word	0x004044b9

0040469c <nm_spi_init>:
{
  40469c:	b530      	push	{r4, r5, lr}
  40469e:	b083      	sub	sp, #12
	uint32 reg =0;
  4046a0:	2300      	movs	r3, #0
  4046a2:	a902      	add	r1, sp, #8
  4046a4:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  4046a8:	4a34      	ldr	r2, [pc, #208]	; (40477c <nm_spi_init+0xe0>)
  4046aa:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  4046ac:	f64e 0024 	movw	r0, #59428	; 0xe824
  4046b0:	4b33      	ldr	r3, [pc, #204]	; (404780 <nm_spi_init+0xe4>)
  4046b2:	4798      	blx	r3
  4046b4:	b348      	cbz	r0, 40470a <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  4046b6:	4b31      	ldr	r3, [pc, #196]	; (40477c <nm_spi_init+0xe0>)
  4046b8:	781b      	ldrb	r3, [r3, #0]
  4046ba:	b97b      	cbnz	r3, 4046dc <nm_spi_init+0x40>
		reg &= ~0x70;
  4046bc:	9900      	ldr	r1, [sp, #0]
  4046be:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  4046c2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4046c6:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  4046c8:	f64e 0024 	movw	r0, #59428	; 0xe824
  4046cc:	4b2d      	ldr	r3, [pc, #180]	; (404784 <nm_spi_init+0xe8>)
  4046ce:	4798      	blx	r3
  4046d0:	4604      	mov	r4, r0
  4046d2:	2800      	cmp	r0, #0
  4046d4:	d039      	beq.n	40474a <nm_spi_init+0xae>
		gu8Crc_off = 1;
  4046d6:	2201      	movs	r2, #1
  4046d8:	4b28      	ldr	r3, [pc, #160]	; (40477c <nm_spi_init+0xe0>)
  4046da:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  4046dc:	a901      	add	r1, sp, #4
  4046de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4046e2:	4b27      	ldr	r3, [pc, #156]	; (404780 <nm_spi_init+0xe4>)
  4046e4:	4798      	blx	r3
  4046e6:	2800      	cmp	r0, #0
  4046e8:	d03a      	beq.n	404760 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  4046ea:	f64e 0024 	movw	r0, #59428	; 0xe824
  4046ee:	4b26      	ldr	r3, [pc, #152]	; (404788 <nm_spi_init+0xec>)
  4046f0:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  4046f2:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  4046f6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  4046fa:	f64e 0024 	movw	r0, #59428	; 0xe824
  4046fe:	4b23      	ldr	r3, [pc, #140]	; (40478c <nm_spi_init+0xf0>)
  404700:	4798      	blx	r3
	return M2M_SUCCESS;
  404702:	2400      	movs	r4, #0
}
  404704:	4620      	mov	r0, r4
  404706:	b003      	add	sp, #12
  404708:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  40470a:	2201      	movs	r2, #1
  40470c:	4b1b      	ldr	r3, [pc, #108]	; (40477c <nm_spi_init+0xe0>)
  40470e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  404710:	f240 22c5 	movw	r2, #709	; 0x2c5
  404714:	491e      	ldr	r1, [pc, #120]	; (404790 <nm_spi_init+0xf4>)
  404716:	481f      	ldr	r0, [pc, #124]	; (404794 <nm_spi_init+0xf8>)
  404718:	4c1f      	ldr	r4, [pc, #124]	; (404798 <nm_spi_init+0xfc>)
  40471a:	47a0      	blx	r4
  40471c:	481f      	ldr	r0, [pc, #124]	; (40479c <nm_spi_init+0x100>)
  40471e:	47a0      	blx	r4
  404720:	481f      	ldr	r0, [pc, #124]	; (4047a0 <nm_spi_init+0x104>)
  404722:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  404724:	4669      	mov	r1, sp
  404726:	f64e 0024 	movw	r0, #59428	; 0xe824
  40472a:	4b15      	ldr	r3, [pc, #84]	; (404780 <nm_spi_init+0xe4>)
  40472c:	4798      	blx	r3
  40472e:	4604      	mov	r4, r0
  404730:	2800      	cmp	r0, #0
  404732:	d1c0      	bne.n	4046b6 <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  404734:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  404738:	4915      	ldr	r1, [pc, #84]	; (404790 <nm_spi_init+0xf4>)
  40473a:	4816      	ldr	r0, [pc, #88]	; (404794 <nm_spi_init+0xf8>)
  40473c:	4d16      	ldr	r5, [pc, #88]	; (404798 <nm_spi_init+0xfc>)
  40473e:	47a8      	blx	r5
  404740:	4818      	ldr	r0, [pc, #96]	; (4047a4 <nm_spi_init+0x108>)
  404742:	47a8      	blx	r5
  404744:	4816      	ldr	r0, [pc, #88]	; (4047a0 <nm_spi_init+0x104>)
  404746:	47a8      	blx	r5
			return 0;
  404748:	e7dc      	b.n	404704 <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  40474a:	f240 22d2 	movw	r2, #722	; 0x2d2
  40474e:	4910      	ldr	r1, [pc, #64]	; (404790 <nm_spi_init+0xf4>)
  404750:	4810      	ldr	r0, [pc, #64]	; (404794 <nm_spi_init+0xf8>)
  404752:	4d11      	ldr	r5, [pc, #68]	; (404798 <nm_spi_init+0xfc>)
  404754:	47a8      	blx	r5
  404756:	4814      	ldr	r0, [pc, #80]	; (4047a8 <nm_spi_init+0x10c>)
  404758:	47a8      	blx	r5
  40475a:	4811      	ldr	r0, [pc, #68]	; (4047a0 <nm_spi_init+0x104>)
  40475c:	47a8      	blx	r5
			return 0;
  40475e:	e7d1      	b.n	404704 <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  404760:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  404764:	490a      	ldr	r1, [pc, #40]	; (404790 <nm_spi_init+0xf4>)
  404766:	480b      	ldr	r0, [pc, #44]	; (404794 <nm_spi_init+0xf8>)
  404768:	4c0b      	ldr	r4, [pc, #44]	; (404798 <nm_spi_init+0xfc>)
  40476a:	47a0      	blx	r4
  40476c:	480f      	ldr	r0, [pc, #60]	; (4047ac <nm_spi_init+0x110>)
  40476e:	47a0      	blx	r4
  404770:	480b      	ldr	r0, [pc, #44]	; (4047a0 <nm_spi_init+0x104>)
  404772:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  404774:	f06f 0405 	mvn.w	r4, #5
  404778:	e7c4      	b.n	404704 <nm_spi_init+0x68>
  40477a:	bf00      	nop
  40477c:	2040c378 	.word	0x2040c378
  404780:	0040454d 	.word	0x0040454d
  404784:	004044b9 	.word	0x004044b9
  404788:	00404655 	.word	0x00404655
  40478c:	00404685 	.word	0x00404685
  404790:	0040dcf0 	.word	0x0040dcf0
  404794:	0040d6a4 	.word	0x0040d6a4
  404798:	00406c9d 	.word	0x00406c9d
  40479c:	0040ddfc 	.word	0x0040ddfc
  4047a0:	0040d6d0 	.word	0x0040d6d0
  4047a4:	0040de4c 	.word	0x0040de4c
  4047a8:	0040de7c 	.word	0x0040de7c
  4047ac:	0040deb0 	.word	0x0040deb0

004047b0 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4047b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4047b2:	b083      	sub	sp, #12
  4047b4:	4604      	mov	r4, r0
  4047b6:	460f      	mov	r7, r1
  4047b8:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  4047ba:	2200      	movs	r2, #0
  4047bc:	9200      	str	r2, [sp, #0]
  4047be:	462b      	mov	r3, r5
  4047c0:	4601      	mov	r1, r0
  4047c2:	20c8      	movs	r0, #200	; 0xc8
  4047c4:	4e22      	ldr	r6, [pc, #136]	; (404850 <nm_spi_read_block+0xa0>)
  4047c6:	47b0      	blx	r6
	if (result != N_OK) {
  4047c8:	2801      	cmp	r0, #1
  4047ca:	d00e      	beq.n	4047ea <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  4047cc:	f44f 721d 	mov.w	r2, #628	; 0x274
  4047d0:	4920      	ldr	r1, [pc, #128]	; (404854 <nm_spi_read_block+0xa4>)
  4047d2:	4821      	ldr	r0, [pc, #132]	; (404858 <nm_spi_read_block+0xa8>)
  4047d4:	4d21      	ldr	r5, [pc, #132]	; (40485c <nm_spi_read_block+0xac>)
  4047d6:	47a8      	blx	r5
  4047d8:	4621      	mov	r1, r4
  4047da:	4821      	ldr	r0, [pc, #132]	; (404860 <nm_spi_read_block+0xb0>)
  4047dc:	47a8      	blx	r5
  4047de:	4821      	ldr	r0, [pc, #132]	; (404864 <nm_spi_read_block+0xb4>)
  4047e0:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4047e2:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4047e6:	b003      	add	sp, #12
  4047e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  4047ea:	20c8      	movs	r0, #200	; 0xc8
  4047ec:	4b1e      	ldr	r3, [pc, #120]	; (404868 <nm_spi_read_block+0xb8>)
  4047ee:	4798      	blx	r3
	if (result != N_OK) {
  4047f0:	2801      	cmp	r0, #1
  4047f2:	d012      	beq.n	40481a <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  4047f4:	f240 227a 	movw	r2, #634	; 0x27a
  4047f8:	4916      	ldr	r1, [pc, #88]	; (404854 <nm_spi_read_block+0xa4>)
  4047fa:	4817      	ldr	r0, [pc, #92]	; (404858 <nm_spi_read_block+0xa8>)
  4047fc:	4d17      	ldr	r5, [pc, #92]	; (40485c <nm_spi_read_block+0xac>)
  4047fe:	47a8      	blx	r5
  404800:	4621      	mov	r1, r4
  404802:	481a      	ldr	r0, [pc, #104]	; (40486c <nm_spi_read_block+0xbc>)
  404804:	47a8      	blx	r5
  404806:	4817      	ldr	r0, [pc, #92]	; (404864 <nm_spi_read_block+0xb4>)
  404808:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40480a:	2100      	movs	r1, #0
  40480c:	9100      	str	r1, [sp, #0]
  40480e:	460b      	mov	r3, r1
  404810:	460a      	mov	r2, r1
  404812:	20cf      	movs	r0, #207	; 0xcf
  404814:	4c0e      	ldr	r4, [pc, #56]	; (404850 <nm_spi_read_block+0xa0>)
  404816:	47a0      	blx	r4
  404818:	e7e3      	b.n	4047e2 <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  40481a:	2200      	movs	r2, #0
  40481c:	4629      	mov	r1, r5
  40481e:	4638      	mov	r0, r7
  404820:	4b13      	ldr	r3, [pc, #76]	; (404870 <nm_spi_read_block+0xc0>)
  404822:	4798      	blx	r3
	if (result != N_OK) {
  404824:	2801      	cmp	r0, #1
  404826:	d011      	beq.n	40484c <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  404828:	f44f 7221 	mov.w	r2, #644	; 0x284
  40482c:	4909      	ldr	r1, [pc, #36]	; (404854 <nm_spi_read_block+0xa4>)
  40482e:	480a      	ldr	r0, [pc, #40]	; (404858 <nm_spi_read_block+0xa8>)
  404830:	4c0a      	ldr	r4, [pc, #40]	; (40485c <nm_spi_read_block+0xac>)
  404832:	47a0      	blx	r4
  404834:	480f      	ldr	r0, [pc, #60]	; (404874 <nm_spi_read_block+0xc4>)
  404836:	47a0      	blx	r4
  404838:	480a      	ldr	r0, [pc, #40]	; (404864 <nm_spi_read_block+0xb4>)
  40483a:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40483c:	2100      	movs	r1, #0
  40483e:	9100      	str	r1, [sp, #0]
  404840:	460b      	mov	r3, r1
  404842:	460a      	mov	r2, r1
  404844:	20cf      	movs	r0, #207	; 0xcf
  404846:	4c02      	ldr	r4, [pc, #8]	; (404850 <nm_spi_read_block+0xa0>)
  404848:	47a0      	blx	r4
  40484a:	e7ca      	b.n	4047e2 <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40484c:	2000      	movs	r0, #0
  40484e:	e7ca      	b.n	4047e6 <nm_spi_read_block+0x36>
  404850:	00404309 	.word	0x00404309
  404854:	0040dce4 	.word	0x0040dce4
  404858:	0040d6a4 	.word	0x0040d6a4
  40485c:	00406c9d 	.word	0x00406c9d
  404860:	0040ded8 	.word	0x0040ded8
  404864:	0040d6d0 	.word	0x0040d6d0
  404868:	0040410d 	.word	0x0040410d
  40486c:	0040df08 	.word	0x0040df08
  404870:	004041d1 	.word	0x004041d1
  404874:	0040df40 	.word	0x0040df40

00404878 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  404878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40487c:	b085      	sub	sp, #20
  40487e:	4604      	mov	r4, r0
  404880:	4688      	mov	r8, r1
  404882:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  404884:	2200      	movs	r2, #0
  404886:	9200      	str	r2, [sp, #0]
  404888:	462b      	mov	r3, r5
  40488a:	4601      	mov	r1, r0
  40488c:	20c7      	movs	r0, #199	; 0xc7
  40488e:	4e4d      	ldr	r6, [pc, #308]	; (4049c4 <nm_spi_write_block+0x14c>)
  404890:	47b0      	blx	r6
	if (result != N_OK) {
  404892:	2801      	cmp	r0, #1
  404894:	d00f      	beq.n	4048b6 <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  404896:	f240 220f 	movw	r2, #527	; 0x20f
  40489a:	494b      	ldr	r1, [pc, #300]	; (4049c8 <nm_spi_write_block+0x150>)
  40489c:	484b      	ldr	r0, [pc, #300]	; (4049cc <nm_spi_write_block+0x154>)
  40489e:	4d4c      	ldr	r5, [pc, #304]	; (4049d0 <nm_spi_write_block+0x158>)
  4048a0:	47a8      	blx	r5
  4048a2:	4621      	mov	r1, r4
  4048a4:	484b      	ldr	r0, [pc, #300]	; (4049d4 <nm_spi_write_block+0x15c>)
  4048a6:	47a8      	blx	r5
  4048a8:	484b      	ldr	r0, [pc, #300]	; (4049d8 <nm_spi_write_block+0x160>)
  4048aa:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4048ac:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4048b0:	b005      	add	sp, #20
  4048b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  4048b6:	20c7      	movs	r0, #199	; 0xc7
  4048b8:	4b48      	ldr	r3, [pc, #288]	; (4049dc <nm_spi_write_block+0x164>)
  4048ba:	4798      	blx	r3
	if (result != N_OK) {
  4048bc:	2801      	cmp	r0, #1
  4048be:	d012      	beq.n	4048e6 <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  4048c0:	f240 2215 	movw	r2, #533	; 0x215
  4048c4:	4940      	ldr	r1, [pc, #256]	; (4049c8 <nm_spi_write_block+0x150>)
  4048c6:	4841      	ldr	r0, [pc, #260]	; (4049cc <nm_spi_write_block+0x154>)
  4048c8:	4d41      	ldr	r5, [pc, #260]	; (4049d0 <nm_spi_write_block+0x158>)
  4048ca:	47a8      	blx	r5
  4048cc:	4621      	mov	r1, r4
  4048ce:	4844      	ldr	r0, [pc, #272]	; (4049e0 <nm_spi_write_block+0x168>)
  4048d0:	47a8      	blx	r5
  4048d2:	4841      	ldr	r0, [pc, #260]	; (4049d8 <nm_spi_write_block+0x160>)
  4048d4:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4048d6:	2100      	movs	r1, #0
  4048d8:	9100      	str	r1, [sp, #0]
  4048da:	460b      	mov	r3, r1
  4048dc:	460a      	mov	r2, r1
  4048de:	20cf      	movs	r0, #207	; 0xcf
  4048e0:	4c38      	ldr	r4, [pc, #224]	; (4049c4 <nm_spi_write_block+0x14c>)
  4048e2:	47a0      	blx	r4
  4048e4:	e7e2      	b.n	4048ac <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  4048e6:	2400      	movs	r4, #0
  4048e8:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4048ec:	4f3d      	ldr	r7, [pc, #244]	; (4049e4 <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  4048ee:	f8df 910c 	ldr.w	r9, [pc, #268]	; 4049fc <nm_spi_write_block+0x184>
  4048f2:	e01d      	b.n	404930 <nm_spi_write_block+0xb8>
				order = 0x2;
  4048f4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4048f8:	bf94      	ite	ls
  4048fa:	2303      	movls	r3, #3
  4048fc:	2302      	movhi	r3, #2
		cmd |= order;
  4048fe:	f063 030f 	orn	r3, r3, #15
  404902:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  404906:	2101      	movs	r1, #1
  404908:	f10d 000b 	add.w	r0, sp, #11
  40490c:	47b8      	blx	r7
  40490e:	b9e8      	cbnz	r0, 40494c <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  404910:	4631      	mov	r1, r6
  404912:	eb08 0004 	add.w	r0, r8, r4
  404916:	47b8      	blx	r7
  404918:	2800      	cmp	r0, #0
  40491a:	d135      	bne.n	404988 <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  40491c:	f899 3000 	ldrb.w	r3, [r9]
  404920:	2b00      	cmp	r3, #0
  404922:	d03c      	beq.n	40499e <nm_spi_write_block+0x126>
		ix += nbytes;
  404924:	4434      	add	r4, r6
  404926:	b224      	sxth	r4, r4
		sz -= nbytes;
  404928:	1bad      	subs	r5, r5, r6
  40492a:	b2ad      	uxth	r5, r5
	} while (sz);
  40492c:	2d00      	cmp	r5, #0
  40492e:	d046      	beq.n	4049be <nm_spi_write_block+0x146>
  404930:	462e      	mov	r6, r5
  404932:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404936:	bf28      	it	cs
  404938:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  40493c:	2c00      	cmp	r4, #0
  40493e:	d1d9      	bne.n	4048f4 <nm_spi_write_block+0x7c>
				order = 0x1;
  404940:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404944:	bf94      	ite	ls
  404946:	2303      	movls	r3, #3
  404948:	2301      	movhi	r3, #1
  40494a:	e7d8      	b.n	4048fe <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  40494c:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  404950:	4925      	ldr	r1, [pc, #148]	; (4049e8 <nm_spi_write_block+0x170>)
  404952:	481e      	ldr	r0, [pc, #120]	; (4049cc <nm_spi_write_block+0x154>)
  404954:	4c1e      	ldr	r4, [pc, #120]	; (4049d0 <nm_spi_write_block+0x158>)
  404956:	47a0      	blx	r4
  404958:	4824      	ldr	r0, [pc, #144]	; (4049ec <nm_spi_write_block+0x174>)
  40495a:	47a0      	blx	r4
  40495c:	481e      	ldr	r0, [pc, #120]	; (4049d8 <nm_spi_write_block+0x160>)
  40495e:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  404960:	f240 2226 	movw	r2, #550	; 0x226
  404964:	4918      	ldr	r1, [pc, #96]	; (4049c8 <nm_spi_write_block+0x150>)
  404966:	4819      	ldr	r0, [pc, #100]	; (4049cc <nm_spi_write_block+0x154>)
  404968:	4c19      	ldr	r4, [pc, #100]	; (4049d0 <nm_spi_write_block+0x158>)
  40496a:	47a0      	blx	r4
  40496c:	4820      	ldr	r0, [pc, #128]	; (4049f0 <nm_spi_write_block+0x178>)
  40496e:	47a0      	blx	r4
  404970:	4819      	ldr	r0, [pc, #100]	; (4049d8 <nm_spi_write_block+0x160>)
  404972:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404974:	2400      	movs	r4, #0
  404976:	9400      	str	r4, [sp, #0]
  404978:	4623      	mov	r3, r4
  40497a:	4622      	mov	r2, r4
  40497c:	4621      	mov	r1, r4
  40497e:	20cf      	movs	r0, #207	; 0xcf
  404980:	4d10      	ldr	r5, [pc, #64]	; (4049c4 <nm_spi_write_block+0x14c>)
  404982:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  404984:	4620      	mov	r0, r4
  404986:	e793      	b.n	4048b0 <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  404988:	f240 12b1 	movw	r2, #433	; 0x1b1
  40498c:	4916      	ldr	r1, [pc, #88]	; (4049e8 <nm_spi_write_block+0x170>)
  40498e:	480f      	ldr	r0, [pc, #60]	; (4049cc <nm_spi_write_block+0x154>)
  404990:	4c0f      	ldr	r4, [pc, #60]	; (4049d0 <nm_spi_write_block+0x158>)
  404992:	47a0      	blx	r4
  404994:	4817      	ldr	r0, [pc, #92]	; (4049f4 <nm_spi_write_block+0x17c>)
  404996:	47a0      	blx	r4
  404998:	480f      	ldr	r0, [pc, #60]	; (4049d8 <nm_spi_write_block+0x160>)
  40499a:	47a0      	blx	r4
  40499c:	e7e0      	b.n	404960 <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  40499e:	2102      	movs	r1, #2
  4049a0:	a803      	add	r0, sp, #12
  4049a2:	47b8      	blx	r7
  4049a4:	2800      	cmp	r0, #0
  4049a6:	d0bd      	beq.n	404924 <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  4049a8:	f240 12bb 	movw	r2, #443	; 0x1bb
  4049ac:	490e      	ldr	r1, [pc, #56]	; (4049e8 <nm_spi_write_block+0x170>)
  4049ae:	4807      	ldr	r0, [pc, #28]	; (4049cc <nm_spi_write_block+0x154>)
  4049b0:	4c07      	ldr	r4, [pc, #28]	; (4049d0 <nm_spi_write_block+0x158>)
  4049b2:	47a0      	blx	r4
  4049b4:	4810      	ldr	r0, [pc, #64]	; (4049f8 <nm_spi_write_block+0x180>)
  4049b6:	47a0      	blx	r4
  4049b8:	4807      	ldr	r0, [pc, #28]	; (4049d8 <nm_spi_write_block+0x160>)
  4049ba:	47a0      	blx	r4
  4049bc:	e7d0      	b.n	404960 <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4049be:	2000      	movs	r0, #0
  4049c0:	e776      	b.n	4048b0 <nm_spi_write_block+0x38>
  4049c2:	bf00      	nop
  4049c4:	00404309 	.word	0x00404309
  4049c8:	0040dcc4 	.word	0x0040dcc4
  4049cc:	0040d6a4 	.word	0x0040d6a4
  4049d0:	00406c9d 	.word	0x00406c9d
  4049d4:	0040df68 	.word	0x0040df68
  4049d8:	0040d6d0 	.word	0x0040d6d0
  4049dc:	0040410d 	.word	0x0040410d
  4049e0:	0040df98 	.word	0x0040df98
  4049e4:	004042e9 	.word	0x004042e9
  4049e8:	0040dca4 	.word	0x0040dca4
  4049ec:	0040dfd0 	.word	0x0040dfd0
  4049f0:	0040e074 	.word	0x0040e074
  4049f4:	0040e008 	.word	0x0040e008
  4049f8:	0040e03c 	.word	0x0040e03c
  4049fc:	2040c378 	.word	0x2040c378

00404a00 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  404a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a04:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  404a08:	b194      	cbz	r4, 404a30 <Socket_ReadSocketData+0x30>
  404a0a:	4681      	mov	r9, r0
  404a0c:	460e      	mov	r6, r1
  404a0e:	4692      	mov	sl, r2
  404a10:	4698      	mov	r8, r3
  404a12:	0103      	lsls	r3, r0, #4
  404a14:	4922      	ldr	r1, [pc, #136]	; (404aa0 <Socket_ReadSocketData+0xa0>)
  404a16:	58cb      	ldr	r3, [r1, r3]
  404a18:	b153      	cbz	r3, 404a30 <Socket_ReadSocketData+0x30>
  404a1a:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  404a1e:	889b      	ldrh	r3, [r3, #4]
  404a20:	b29b      	uxth	r3, r3
  404a22:	b12b      	cbz	r3, 404a30 <Socket_ReadSocketData+0x30>
  404a24:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  404a28:	7a9b      	ldrb	r3, [r3, #10]
  404a2a:	b2db      	uxtb	r3, r3
  404a2c:	2b01      	cmp	r3, #1
  404a2e:	d001      	beq.n	404a34 <Socket_ReadSocketData+0x34>
  404a30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  404a34:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  404a36:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  404a3a:	f8df b07c 	ldr.w	fp, [pc, #124]	; 404ab8 <Socket_ReadSocketData+0xb8>
  404a3e:	e006      	b.n	404a4e <Socket_ReadSocketData+0x4e>
  404a40:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  404a42:	2301      	movs	r3, #1
  404a44:	e00b      	b.n	404a5e <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  404a46:	1b64      	subs	r4, r4, r5
  404a48:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  404a4a:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  404a4c:	b1ec      	cbz	r4, 404a8a <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  404a4e:	88bb      	ldrh	r3, [r7, #4]
  404a50:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  404a52:	b21b      	sxth	r3, r3
  404a54:	2b00      	cmp	r3, #0
  404a56:	ddf3      	ble.n	404a40 <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  404a58:	88bd      	ldrh	r5, [r7, #4]
  404a5a:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  404a5c:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  404a5e:	6839      	ldr	r1, [r7, #0]
  404a60:	462a      	mov	r2, r5
  404a62:	4640      	mov	r0, r8
  404a64:	47d8      	blx	fp
  404a66:	b990      	cbnz	r0, 404a8e <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  404a68:	683b      	ldr	r3, [r7, #0]
  404a6a:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  404a6c:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  404a6e:	88f3      	ldrh	r3, [r6, #6]
  404a70:	1b5b      	subs	r3, r3, r5
  404a72:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  404a74:	4b0b      	ldr	r3, [pc, #44]	; (404aa4 <Socket_ReadSocketData+0xa4>)
  404a76:	681b      	ldr	r3, [r3, #0]
  404a78:	2b00      	cmp	r3, #0
  404a7a:	d0e4      	beq.n	404a46 <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  404a7c:	4b09      	ldr	r3, [pc, #36]	; (404aa4 <Socket_ReadSocketData+0xa4>)
  404a7e:	681b      	ldr	r3, [r3, #0]
  404a80:	4632      	mov	r2, r6
  404a82:	4651      	mov	r1, sl
  404a84:	4648      	mov	r0, r9
  404a86:	4798      	blx	r3
  404a88:	e7dd      	b.n	404a46 <Socket_ReadSocketData+0x46>
  404a8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  404a8e:	4806      	ldr	r0, [pc, #24]	; (404aa8 <Socket_ReadSocketData+0xa8>)
  404a90:	4d06      	ldr	r5, [pc, #24]	; (404aac <Socket_ReadSocketData+0xac>)
  404a92:	47a8      	blx	r5
  404a94:	4621      	mov	r1, r4
  404a96:	4806      	ldr	r0, [pc, #24]	; (404ab0 <Socket_ReadSocketData+0xb0>)
  404a98:	47a8      	blx	r5
  404a9a:	4806      	ldr	r0, [pc, #24]	; (404ab4 <Socket_ReadSocketData+0xb4>)
  404a9c:	47a8      	blx	r5
	}
}
  404a9e:	e7c7      	b.n	404a30 <Socket_ReadSocketData+0x30>
  404aa0:	2040d004 	.word	0x2040d004
  404aa4:	2040d0b4 	.word	0x2040d0b4
  404aa8:	0040d978 	.word	0x0040d978
  404aac:	00406c9d 	.word	0x00406c9d
  404ab0:	0040e2b0 	.word	0x0040e2b0
  404ab4:	0040d6d0 	.word	0x0040d6d0
  404ab8:	00403139 	.word	0x00403139

00404abc <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  404abc:	b5f0      	push	{r4, r5, r6, r7, lr}
  404abe:	b099      	sub	sp, #100	; 0x64
  404ac0:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  404ac2:	2841      	cmp	r0, #65	; 0x41
  404ac4:	d049      	beq.n	404b5a <m2m_ip_cb+0x9e>
  404ac6:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  404ac8:	2842      	cmp	r0, #66	; 0x42
  404aca:	d05f      	beq.n	404b8c <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  404acc:	2843      	cmp	r0, #67	; 0x43
  404ace:	d075      	beq.n	404bbc <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  404ad0:	2844      	cmp	r0, #68	; 0x44
  404ad2:	f000 80b0 	beq.w	404c36 <m2m_ip_cb+0x17a>
  404ad6:	284b      	cmp	r0, #75	; 0x4b
  404ad8:	f000 80ad 	beq.w	404c36 <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  404adc:	284a      	cmp	r0, #74	; 0x4a
  404ade:	f000 80cc 	beq.w	404c7a <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  404ae2:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  404ae6:	b2db      	uxtb	r3, r3
  404ae8:	2b07      	cmp	r3, #7
  404aea:	f200 80f4 	bhi.w	404cd6 <m2m_ip_cb+0x21a>
  404aee:	2285      	movs	r2, #133	; 0x85
  404af0:	fa22 f303 	lsr.w	r3, r2, r3
  404af4:	f013 0f01 	tst.w	r3, #1
  404af8:	f000 80ed 	beq.w	404cd6 <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  404afc:	2848      	cmp	r0, #72	; 0x48
  404afe:	bf14      	ite	ne
  404b00:	2706      	movne	r7, #6
  404b02:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  404b04:	2300      	movs	r3, #0
  404b06:	2210      	movs	r2, #16
  404b08:	a903      	add	r1, sp, #12
  404b0a:	4620      	mov	r0, r4
  404b0c:	4e93      	ldr	r6, [pc, #588]	; (404d5c <m2m_ip_cb+0x2a0>)
  404b0e:	47b0      	blx	r6
  404b10:	2800      	cmp	r0, #0
  404b12:	f040 80b0 	bne.w	404c76 <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  404b16:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  404b1a:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  404b1e:	4a90      	ldr	r2, [pc, #576]	; (404d60 <m2m_ip_cb+0x2a4>)
  404b20:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  404b24:	2300      	movs	r3, #0
  404b26:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  404b28:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  404b2c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  404b30:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  404b34:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  404b38:	9e04      	ldr	r6, [sp, #16]
  404b3a:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  404b3c:	88d2      	ldrh	r2, [r2, #6]
  404b3e:	b292      	uxth	r2, r2
  404b40:	4291      	cmp	r1, r2
  404b42:	f000 80ac 	beq.w	404c9e <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  404b46:	2d10      	cmp	r5, #16
  404b48:	f240 8095 	bls.w	404c76 <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  404b4c:	2301      	movs	r3, #1
  404b4e:	2200      	movs	r2, #0
  404b50:	4611      	mov	r1, r2
  404b52:	4610      	mov	r0, r2
  404b54:	4c81      	ldr	r4, [pc, #516]	; (404d5c <m2m_ip_cb+0x2a0>)
  404b56:	47a0      	blx	r4
	{
  404b58:	e08d      	b.n	404c76 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  404b5a:	2300      	movs	r3, #0
  404b5c:	2204      	movs	r2, #4
  404b5e:	a907      	add	r1, sp, #28
  404b60:	4620      	mov	r0, r4
  404b62:	4c7e      	ldr	r4, [pc, #504]	; (404d5c <m2m_ip_cb+0x2a0>)
  404b64:	47a0      	blx	r4
  404b66:	2800      	cmp	r0, #0
  404b68:	f040 8085 	bne.w	404c76 <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  404b6c:	f89d 301d 	ldrb.w	r3, [sp, #29]
  404b70:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  404b74:	4b7b      	ldr	r3, [pc, #492]	; (404d64 <m2m_ip_cb+0x2a8>)
  404b76:	681b      	ldr	r3, [r3, #0]
  404b78:	2b00      	cmp	r3, #0
  404b7a:	d07c      	beq.n	404c76 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  404b7c:	4b79      	ldr	r3, [pc, #484]	; (404d64 <m2m_ip_cb+0x2a8>)
  404b7e:	681b      	ldr	r3, [r3, #0]
  404b80:	aa03      	add	r2, sp, #12
  404b82:	2101      	movs	r1, #1
  404b84:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404b88:	4798      	blx	r3
  404b8a:	e074      	b.n	404c76 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  404b8c:	2300      	movs	r3, #0
  404b8e:	2204      	movs	r2, #4
  404b90:	a907      	add	r1, sp, #28
  404b92:	4620      	mov	r0, r4
  404b94:	4c71      	ldr	r4, [pc, #452]	; (404d5c <m2m_ip_cb+0x2a0>)
  404b96:	47a0      	blx	r4
  404b98:	2800      	cmp	r0, #0
  404b9a:	d16c      	bne.n	404c76 <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  404b9c:	f89d 301d 	ldrb.w	r3, [sp, #29]
  404ba0:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  404ba4:	4b6f      	ldr	r3, [pc, #444]	; (404d64 <m2m_ip_cb+0x2a8>)
  404ba6:	681b      	ldr	r3, [r3, #0]
  404ba8:	2b00      	cmp	r3, #0
  404baa:	d064      	beq.n	404c76 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  404bac:	4b6d      	ldr	r3, [pc, #436]	; (404d64 <m2m_ip_cb+0x2a8>)
  404bae:	681b      	ldr	r3, [r3, #0]
  404bb0:	aa03      	add	r2, sp, #12
  404bb2:	2102      	movs	r1, #2
  404bb4:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404bb8:	4798      	blx	r3
  404bba:	e05c      	b.n	404c76 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  404bbc:	2300      	movs	r3, #0
  404bbe:	220c      	movs	r2, #12
  404bc0:	eb0d 0102 	add.w	r1, sp, r2
  404bc4:	4620      	mov	r0, r4
  404bc6:	4c65      	ldr	r4, [pc, #404]	; (404d5c <m2m_ip_cb+0x2a0>)
  404bc8:	47a0      	blx	r4
  404bca:	2800      	cmp	r0, #0
  404bcc:	d153      	bne.n	404c76 <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  404bce:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  404bd2:	2b00      	cmp	r3, #0
  404bd4:	db19      	blt.n	404c0a <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  404bd6:	4a62      	ldr	r2, [pc, #392]	; (404d60 <m2m_ip_cb+0x2a4>)
  404bd8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404bdc:	2100      	movs	r1, #0
  404bde:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  404be0:	2101      	movs	r1, #1
  404be2:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  404be4:	4960      	ldr	r1, [pc, #384]	; (404d68 <m2m_ip_cb+0x2ac>)
  404be6:	880a      	ldrh	r2, [r1, #0]
  404be8:	3201      	adds	r2, #1
  404bea:	b292      	uxth	r2, r2
  404bec:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  404bee:	880a      	ldrh	r2, [r1, #0]
  404bf0:	b292      	uxth	r2, r2
  404bf2:	b91a      	cbnz	r2, 404bfc <m2m_ip_cb+0x140>
					++gu16SessionID;
  404bf4:	880a      	ldrh	r2, [r1, #0]
  404bf6:	3201      	adds	r2, #1
  404bf8:	b292      	uxth	r2, r2
  404bfa:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  404bfc:	4a5a      	ldr	r2, [pc, #360]	; (404d68 <m2m_ip_cb+0x2ac>)
  404bfe:	8811      	ldrh	r1, [r2, #0]
  404c00:	b289      	uxth	r1, r1
  404c02:	4a57      	ldr	r2, [pc, #348]	; (404d60 <m2m_ip_cb+0x2a4>)
  404c04:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404c08:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  404c0a:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  404c0e:	2302      	movs	r3, #2
  404c10:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  404c14:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  404c18:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  404c1c:	9b04      	ldr	r3, [sp, #16]
  404c1e:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  404c20:	4b50      	ldr	r3, [pc, #320]	; (404d64 <m2m_ip_cb+0x2a8>)
  404c22:	681b      	ldr	r3, [r3, #0]
  404c24:	b33b      	cbz	r3, 404c76 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  404c26:	4b4f      	ldr	r3, [pc, #316]	; (404d64 <m2m_ip_cb+0x2a8>)
  404c28:	681b      	ldr	r3, [r3, #0]
  404c2a:	aa07      	add	r2, sp, #28
  404c2c:	2104      	movs	r1, #4
  404c2e:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  404c32:	4798      	blx	r3
  404c34:	e01f      	b.n	404c76 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  404c36:	2300      	movs	r3, #0
  404c38:	2204      	movs	r2, #4
  404c3a:	a907      	add	r1, sp, #28
  404c3c:	4620      	mov	r0, r4
  404c3e:	4c47      	ldr	r4, [pc, #284]	; (404d5c <m2m_ip_cb+0x2a0>)
  404c40:	47a0      	blx	r4
  404c42:	b9c0      	cbnz	r0, 404c76 <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  404c44:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404c48:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  404c4c:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  404c50:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  404c54:	b93b      	cbnz	r3, 404c66 <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  404c56:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  404c5a:	3b08      	subs	r3, #8
  404c5c:	b29b      	uxth	r3, r3
  404c5e:	4a40      	ldr	r2, [pc, #256]	; (404d60 <m2m_ip_cb+0x2a4>)
  404c60:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  404c64:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  404c66:	4b3f      	ldr	r3, [pc, #252]	; (404d64 <m2m_ip_cb+0x2a8>)
  404c68:	681b      	ldr	r3, [r3, #0]
  404c6a:	b123      	cbz	r3, 404c76 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  404c6c:	4b3d      	ldr	r3, [pc, #244]	; (404d64 <m2m_ip_cb+0x2a8>)
  404c6e:	681b      	ldr	r3, [r3, #0]
  404c70:	aa03      	add	r2, sp, #12
  404c72:	2105      	movs	r1, #5
  404c74:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  404c76:	b019      	add	sp, #100	; 0x64
  404c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  404c7a:	2300      	movs	r3, #0
  404c7c:	2244      	movs	r2, #68	; 0x44
  404c7e:	a907      	add	r1, sp, #28
  404c80:	4620      	mov	r0, r4
  404c82:	4c36      	ldr	r4, [pc, #216]	; (404d5c <m2m_ip_cb+0x2a0>)
  404c84:	47a0      	blx	r4
  404c86:	2800      	cmp	r0, #0
  404c88:	d1f5      	bne.n	404c76 <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  404c8a:	4b38      	ldr	r3, [pc, #224]	; (404d6c <m2m_ip_cb+0x2b0>)
  404c8c:	681b      	ldr	r3, [r3, #0]
  404c8e:	2b00      	cmp	r3, #0
  404c90:	d0f1      	beq.n	404c76 <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  404c92:	4b36      	ldr	r3, [pc, #216]	; (404d6c <m2m_ip_cb+0x2b0>)
  404c94:	681b      	ldr	r3, [r3, #0]
  404c96:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404c98:	a807      	add	r0, sp, #28
  404c9a:	4798      	blx	r3
  404c9c:	e7eb      	b.n	404c76 <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  404c9e:	f1be 0f00 	cmp.w	lr, #0
  404ca2:	dd01      	ble.n	404ca8 <m2m_ip_cb+0x1ec>
  404ca4:	45ae      	cmp	lr, r5
  404ca6:	db0d      	blt.n	404cc4 <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  404ca8:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  404cac:	2300      	movs	r3, #0
  404cae:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  404cb0:	4b2c      	ldr	r3, [pc, #176]	; (404d64 <m2m_ip_cb+0x2a8>)
  404cb2:	681b      	ldr	r3, [r3, #0]
  404cb4:	2b00      	cmp	r3, #0
  404cb6:	d0de      	beq.n	404c76 <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  404cb8:	4b2a      	ldr	r3, [pc, #168]	; (404d64 <m2m_ip_cb+0x2a8>)
  404cba:	681b      	ldr	r3, [r3, #0]
  404cbc:	aa07      	add	r2, sp, #28
  404cbe:	4639      	mov	r1, r7
  404cc0:	4798      	blx	r3
  404cc2:	e7d8      	b.n	404c76 <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  404cc4:	fa1f f28e 	uxth.w	r2, lr
  404cc8:	9200      	str	r2, [sp, #0]
  404cca:	4423      	add	r3, r4
  404ccc:	463a      	mov	r2, r7
  404cce:	a907      	add	r1, sp, #28
  404cd0:	4c27      	ldr	r4, [pc, #156]	; (404d70 <m2m_ip_cb+0x2b4>)
  404cd2:	47a0      	blx	r4
  404cd4:	e7cf      	b.n	404c76 <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  404cd6:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  404cda:	2b45      	cmp	r3, #69	; 0x45
  404cdc:	d019      	beq.n	404d12 <m2m_ip_cb+0x256>
  404cde:	284c      	cmp	r0, #76	; 0x4c
  404ce0:	d017      	beq.n	404d12 <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  404ce2:	2852      	cmp	r0, #82	; 0x52
  404ce4:	d1c7      	bne.n	404c76 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  404ce6:	2301      	movs	r3, #1
  404ce8:	2214      	movs	r2, #20
  404cea:	a907      	add	r1, sp, #28
  404cec:	4620      	mov	r0, r4
  404cee:	4c1b      	ldr	r4, [pc, #108]	; (404d5c <m2m_ip_cb+0x2a0>)
  404cf0:	47a0      	blx	r4
  404cf2:	2800      	cmp	r0, #0
  404cf4:	d1bf      	bne.n	404c76 <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  404cf6:	4b1f      	ldr	r3, [pc, #124]	; (404d74 <m2m_ip_cb+0x2b8>)
  404cf8:	9a08      	ldr	r2, [sp, #32]
  404cfa:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  404cfc:	681b      	ldr	r3, [r3, #0]
  404cfe:	2b00      	cmp	r3, #0
  404d00:	d0b9      	beq.n	404c76 <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  404d02:	4b1c      	ldr	r3, [pc, #112]	; (404d74 <m2m_ip_cb+0x2b8>)
  404d04:	681b      	ldr	r3, [r3, #0]
  404d06:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  404d0a:	9909      	ldr	r1, [sp, #36]	; 0x24
  404d0c:	9807      	ldr	r0, [sp, #28]
  404d0e:	4798      	blx	r3
}
  404d10:	e7b1      	b.n	404c76 <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  404d12:	2847      	cmp	r0, #71	; 0x47
  404d14:	bf14      	ite	ne
  404d16:	2507      	movne	r5, #7
  404d18:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  404d1a:	2300      	movs	r3, #0
  404d1c:	2208      	movs	r2, #8
  404d1e:	a907      	add	r1, sp, #28
  404d20:	4620      	mov	r0, r4
  404d22:	4c0e      	ldr	r4, [pc, #56]	; (404d5c <m2m_ip_cb+0x2a0>)
  404d24:	47a0      	blx	r4
  404d26:	2800      	cmp	r0, #0
  404d28:	d1a5      	bne.n	404c76 <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  404d2a:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  404d2e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  404d32:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  404d36:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  404d3a:	4b09      	ldr	r3, [pc, #36]	; (404d60 <m2m_ip_cb+0x2a4>)
  404d3c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404d40:	88db      	ldrh	r3, [r3, #6]
  404d42:	b29b      	uxth	r3, r3
  404d44:	429a      	cmp	r2, r3
  404d46:	d196      	bne.n	404c76 <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  404d48:	4b06      	ldr	r3, [pc, #24]	; (404d64 <m2m_ip_cb+0x2a8>)
  404d4a:	681b      	ldr	r3, [r3, #0]
  404d4c:	2b00      	cmp	r3, #0
  404d4e:	d092      	beq.n	404c76 <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  404d50:	4b04      	ldr	r3, [pc, #16]	; (404d64 <m2m_ip_cb+0x2a8>)
  404d52:	681b      	ldr	r3, [r3, #0]
  404d54:	aa03      	add	r2, sp, #12
  404d56:	4629      	mov	r1, r5
  404d58:	4798      	blx	r3
	{
  404d5a:	e78c      	b.n	404c76 <m2m_ip_cb+0x1ba>
  404d5c:	00403139 	.word	0x00403139
  404d60:	2040d004 	.word	0x2040d004
  404d64:	2040d0b4 	.word	0x2040d0b4
  404d68:	2040c37a 	.word	0x2040c37a
  404d6c:	2040d0bc 	.word	0x2040d0bc
  404d70:	00404a01 	.word	0x00404a01
  404d74:	2040d0b8 	.word	0x2040d0b8

00404d78 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  404d78:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  404d7a:	4b0a      	ldr	r3, [pc, #40]	; (404da4 <socketInit+0x2c>)
  404d7c:	781b      	ldrb	r3, [r3, #0]
  404d7e:	b103      	cbz	r3, 404d82 <socketInit+0xa>
  404d80:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  404d82:	22b0      	movs	r2, #176	; 0xb0
  404d84:	2100      	movs	r1, #0
  404d86:	4808      	ldr	r0, [pc, #32]	; (404da8 <socketInit+0x30>)
  404d88:	4b08      	ldr	r3, [pc, #32]	; (404dac <socketInit+0x34>)
  404d8a:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  404d8c:	4908      	ldr	r1, [pc, #32]	; (404db0 <socketInit+0x38>)
  404d8e:	2002      	movs	r0, #2
  404d90:	4b08      	ldr	r3, [pc, #32]	; (404db4 <socketInit+0x3c>)
  404d92:	4798      	blx	r3
		gbSocketInit=1;
  404d94:	2201      	movs	r2, #1
  404d96:	4b03      	ldr	r3, [pc, #12]	; (404da4 <socketInit+0x2c>)
  404d98:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  404d9a:	2200      	movs	r2, #0
  404d9c:	4b06      	ldr	r3, [pc, #24]	; (404db8 <socketInit+0x40>)
  404d9e:	801a      	strh	r2, [r3, #0]
	}
}
  404da0:	e7ee      	b.n	404d80 <socketInit+0x8>
  404da2:	bf00      	nop
  404da4:	2040c379 	.word	0x2040c379
  404da8:	2040d004 	.word	0x2040d004
  404dac:	00402ae5 	.word	0x00402ae5
  404db0:	00404abd 	.word	0x00404abd
  404db4:	0040324d 	.word	0x0040324d
  404db8:	2040c37a 	.word	0x2040c37a

00404dbc <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  404dbc:	4b02      	ldr	r3, [pc, #8]	; (404dc8 <registerSocketCallback+0xc>)
  404dbe:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  404dc0:	4b02      	ldr	r3, [pc, #8]	; (404dcc <registerSocketCallback+0x10>)
  404dc2:	6019      	str	r1, [r3, #0]
  404dc4:	4770      	bx	lr
  404dc6:	bf00      	nop
  404dc8:	2040d0b4 	.word	0x2040d0b4
  404dcc:	2040d0bc 	.word	0x2040d0bc

00404dd0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  404dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  404dd2:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  404dd4:	2802      	cmp	r0, #2
  404dd6:	d158      	bne.n	404e8a <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  404dd8:	2901      	cmp	r1, #1
  404dda:	d059      	beq.n	404e90 <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  404ddc:	2902      	cmp	r1, #2
  404dde:	d116      	bne.n	404e0e <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  404de0:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  404de2:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  404de4:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  404de6:	4b2e      	ldr	r3, [pc, #184]	; (404ea0 <socket+0xd0>)
  404de8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404dec:	7a9b      	ldrb	r3, [r3, #10]
  404dee:	2b00      	cmp	r3, #0
  404df0:	d051      	beq.n	404e96 <socket+0xc6>
  404df2:	1c63      	adds	r3, r4, #1
  404df4:	b2db      	uxtb	r3, r3
  404df6:	4f2a      	ldr	r7, [pc, #168]	; (404ea0 <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  404df8:	b2dc      	uxtb	r4, r3
  404dfa:	42b4      	cmp	r4, r6
  404dfc:	d240      	bcs.n	404e80 <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  404dfe:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  404e00:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  404e04:	7a89      	ldrb	r1, [r1, #10]
  404e06:	1c58      	adds	r0, r3, #1
  404e08:	b121      	cbz	r1, 404e14 <socket+0x44>
  404e0a:	4603      	mov	r3, r0
  404e0c:	e7f4      	b.n	404df8 <socket+0x28>
			return sock;
  404e0e:	f04f 34ff 	mov.w	r4, #4294967295
  404e12:	e037      	b.n	404e84 <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  404e14:	4822      	ldr	r0, [pc, #136]	; (404ea0 <socket+0xd0>)
  404e16:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  404e1a:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  404e1c:	2210      	movs	r2, #16
  404e1e:	2100      	movs	r1, #0
  404e20:	4b20      	ldr	r3, [pc, #128]	; (404ea4 <socket+0xd4>)
  404e22:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  404e24:	4b1e      	ldr	r3, [pc, #120]	; (404ea0 <socket+0xd0>)
  404e26:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  404e2a:	2201      	movs	r2, #1
  404e2c:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  404e2e:	4a1e      	ldr	r2, [pc, #120]	; (404ea8 <socket+0xd8>)
  404e30:	8813      	ldrh	r3, [r2, #0]
  404e32:	3301      	adds	r3, #1
  404e34:	b29b      	uxth	r3, r3
  404e36:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  404e38:	8813      	ldrh	r3, [r2, #0]
  404e3a:	b29b      	uxth	r3, r3
  404e3c:	b91b      	cbnz	r3, 404e46 <socket+0x76>
					++gu16SessionID;
  404e3e:	8813      	ldrh	r3, [r2, #0]
  404e40:	3301      	adds	r3, #1
  404e42:	b29b      	uxth	r3, r3
  404e44:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  404e46:	4b18      	ldr	r3, [pc, #96]	; (404ea8 <socket+0xd8>)
  404e48:	881a      	ldrh	r2, [r3, #0]
  404e4a:	b292      	uxth	r2, r2
  404e4c:	4b14      	ldr	r3, [pc, #80]	; (404ea0 <socket+0xd0>)
  404e4e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  404e52:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  404e54:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  404e56:	f016 0f01 	tst.w	r6, #1
  404e5a:	d013      	beq.n	404e84 <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  404e5c:	aa06      	add	r2, sp, #24
  404e5e:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  404e62:	4b0f      	ldr	r3, [pc, #60]	; (404ea0 <socket+0xd0>)
  404e64:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  404e68:	2321      	movs	r3, #33	; 0x21
  404e6a:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  404e6c:	2300      	movs	r3, #0
  404e6e:	9302      	str	r3, [sp, #8]
  404e70:	9301      	str	r3, [sp, #4]
  404e72:	9300      	str	r3, [sp, #0]
  404e74:	2304      	movs	r3, #4
  404e76:	2150      	movs	r1, #80	; 0x50
  404e78:	2002      	movs	r0, #2
  404e7a:	4d0c      	ldr	r5, [pc, #48]	; (404eac <socket+0xdc>)
  404e7c:	47a8      	blx	r5
  404e7e:	e001      	b.n	404e84 <socket+0xb4>
	SOCKET		sock = -1;
  404e80:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  404e84:	4620      	mov	r0, r4
  404e86:	b007      	add	sp, #28
  404e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  404e8a:	f04f 34ff 	mov.w	r4, #4294967295
  404e8e:	e7f9      	b.n	404e84 <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  404e90:	2607      	movs	r6, #7
			u8Count = 0;
  404e92:	2400      	movs	r4, #0
  404e94:	e7a6      	b.n	404de4 <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  404e96:	4802      	ldr	r0, [pc, #8]	; (404ea0 <socket+0xd0>)
  404e98:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404e9c:	e7bd      	b.n	404e1a <socket+0x4a>
  404e9e:	bf00      	nop
  404ea0:	2040d004 	.word	0x2040d004
  404ea4:	00402ae5 	.word	0x00402ae5
  404ea8:	2040c37a 	.word	0x2040c37a
  404eac:	00402c49 	.word	0x00402c49

00404eb0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  404eb0:	b530      	push	{r4, r5, lr}
  404eb2:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  404eb4:	1e04      	subs	r4, r0, #0
  404eb6:	db36      	blt.n	404f26 <connect+0x76>
  404eb8:	2900      	cmp	r1, #0
  404eba:	d034      	beq.n	404f26 <connect+0x76>
  404ebc:	4b1d      	ldr	r3, [pc, #116]	; (404f34 <connect+0x84>)
  404ebe:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404ec2:	7a9b      	ldrb	r3, [r3, #10]
  404ec4:	b2db      	uxtb	r3, r3
  404ec6:	2a00      	cmp	r2, #0
  404ec8:	d030      	beq.n	404f2c <connect+0x7c>
  404eca:	2b01      	cmp	r3, #1
  404ecc:	d12e      	bne.n	404f2c <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  404ece:	4b19      	ldr	r3, [pc, #100]	; (404f34 <connect+0x84>)
  404ed0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404ed4:	7adb      	ldrb	r3, [r3, #11]
  404ed6:	f013 0f01 	tst.w	r3, #1
  404eda:	d022      	beq.n	404f22 <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  404edc:	4b15      	ldr	r3, [pc, #84]	; (404f34 <connect+0x84>)
  404ede:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404ee2:	7adb      	ldrb	r3, [r3, #11]
  404ee4:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  404ee8:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  404eea:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  404eee:	2208      	movs	r2, #8
  404ef0:	a805      	add	r0, sp, #20
  404ef2:	4b11      	ldr	r3, [pc, #68]	; (404f38 <connect+0x88>)
  404ef4:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  404ef6:	480f      	ldr	r0, [pc, #60]	; (404f34 <connect+0x84>)
  404ef8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404efc:	88c3      	ldrh	r3, [r0, #6]
  404efe:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  404f02:	2300      	movs	r3, #0
  404f04:	9302      	str	r3, [sp, #8]
  404f06:	9301      	str	r3, [sp, #4]
  404f08:	9300      	str	r3, [sp, #0]
  404f0a:	230c      	movs	r3, #12
  404f0c:	aa05      	add	r2, sp, #20
  404f0e:	4629      	mov	r1, r5
  404f10:	2002      	movs	r0, #2
  404f12:	4c0a      	ldr	r4, [pc, #40]	; (404f3c <connect+0x8c>)
  404f14:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404f16:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404f18:	bf18      	it	ne
  404f1a:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  404f1e:	b009      	add	sp, #36	; 0x24
  404f20:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  404f22:	2544      	movs	r5, #68	; 0x44
  404f24:	e7e1      	b.n	404eea <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404f26:	f06f 0005 	mvn.w	r0, #5
  404f2a:	e7f8      	b.n	404f1e <connect+0x6e>
  404f2c:	f06f 0005 	mvn.w	r0, #5
  404f30:	e7f5      	b.n	404f1e <connect+0x6e>
  404f32:	bf00      	nop
  404f34:	2040d004 	.word	0x2040d004
  404f38:	00402ad1 	.word	0x00402ad1
  404f3c:	00402c49 	.word	0x00402c49

00404f40 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  404f40:	b530      	push	{r4, r5, lr}
  404f42:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  404f44:	460c      	mov	r4, r1
  404f46:	3100      	adds	r1, #0
  404f48:	bf18      	it	ne
  404f4a:	2101      	movne	r1, #1
  404f4c:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  404f50:	bf88      	it	hi
  404f52:	2100      	movhi	r1, #0
  404f54:	2900      	cmp	r1, #0
  404f56:	d037      	beq.n	404fc8 <send+0x88>
  404f58:	2800      	cmp	r0, #0
  404f5a:	db35      	blt.n	404fc8 <send+0x88>
  404f5c:	4b1d      	ldr	r3, [pc, #116]	; (404fd4 <send+0x94>)
  404f5e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404f62:	7a9b      	ldrb	r3, [r3, #10]
  404f64:	b2db      	uxtb	r3, r3
  404f66:	2b01      	cmp	r3, #1
  404f68:	d131      	bne.n	404fce <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  404f6a:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  404f6e:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  404f72:	4b18      	ldr	r3, [pc, #96]	; (404fd4 <send+0x94>)
  404f74:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404f78:	88db      	ldrh	r3, [r3, #6]
  404f7a:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  404f7e:	2807      	cmp	r0, #7
  404f80:	bfb4      	ite	lt
  404f82:	2550      	movlt	r5, #80	; 0x50
  404f84:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404f86:	4b13      	ldr	r3, [pc, #76]	; (404fd4 <send+0x94>)
  404f88:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404f8c:	7adb      	ldrb	r3, [r3, #11]
  404f8e:	f013 0f01 	tst.w	r3, #1
  404f92:	d017      	beq.n	404fc4 <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  404f94:	4b0f      	ldr	r3, [pc, #60]	; (404fd4 <send+0x94>)
  404f96:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404f9a:	8905      	ldrh	r5, [r0, #8]
  404f9c:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  404f9e:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  404fa0:	9502      	str	r5, [sp, #8]
  404fa2:	9201      	str	r2, [sp, #4]
  404fa4:	9400      	str	r4, [sp, #0]
  404fa6:	2310      	movs	r3, #16
  404fa8:	eb0d 0203 	add.w	r2, sp, r3
  404fac:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  404fb0:	2002      	movs	r0, #2
  404fb2:	4c09      	ldr	r4, [pc, #36]	; (404fd8 <send+0x98>)
  404fb4:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  404fb6:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  404fb8:	bf0c      	ite	eq
  404fba:	2000      	moveq	r0, #0
  404fbc:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  404fc0:	b009      	add	sp, #36	; 0x24
  404fc2:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  404fc4:	2145      	movs	r1, #69	; 0x45
  404fc6:	e7eb      	b.n	404fa0 <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404fc8:	f06f 0005 	mvn.w	r0, #5
  404fcc:	e7f8      	b.n	404fc0 <send+0x80>
  404fce:	f06f 0005 	mvn.w	r0, #5
  404fd2:	e7f5      	b.n	404fc0 <send+0x80>
  404fd4:	2040d004 	.word	0x2040d004
  404fd8:	00402c49 	.word	0x00402c49

00404fdc <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404fdc:	2900      	cmp	r1, #0
  404fde:	bf18      	it	ne
  404fe0:	2a00      	cmpne	r2, #0
  404fe2:	d044      	beq.n	40506e <recv+0x92>
{
  404fe4:	b570      	push	{r4, r5, r6, lr}
  404fe6:	b086      	sub	sp, #24
  404fe8:	460e      	mov	r6, r1
  404fea:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404fec:	2800      	cmp	r0, #0
  404fee:	db36      	blt.n	40505e <recv+0x82>
  404ff0:	4a20      	ldr	r2, [pc, #128]	; (405074 <recv+0x98>)
  404ff2:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  404ff6:	7a92      	ldrb	r2, [r2, #10]
  404ff8:	b2d2      	uxtb	r2, r2
  404ffa:	2a01      	cmp	r2, #1
  404ffc:	d132      	bne.n	405064 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  404ffe:	4c1d      	ldr	r4, [pc, #116]	; (405074 <recv+0x98>)
  405000:	0101      	lsls	r1, r0, #4
  405002:	1862      	adds	r2, r4, r1
  405004:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  405006:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  405008:	7b12      	ldrb	r2, [r2, #12]
  40500a:	2a00      	cmp	r2, #0
  40500c:	d12d      	bne.n	40506a <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  40500e:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  405012:	2101      	movs	r1, #1
  405014:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  405016:	7ad2      	ldrb	r2, [r2, #11]
  405018:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  40501a:	2a00      	cmp	r2, #0
  40501c:	bf0c      	ite	eq
  40501e:	2146      	moveq	r1, #70	; 0x46
  405020:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  405022:	b9d3      	cbnz	r3, 40505a <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  405024:	f04f 33ff 	mov.w	r3, #4294967295
  405028:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  40502a:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  40502e:	4b11      	ldr	r3, [pc, #68]	; (405074 <recv+0x98>)
  405030:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  405034:	88c3      	ldrh	r3, [r0, #6]
  405036:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  40503a:	2300      	movs	r3, #0
  40503c:	9302      	str	r3, [sp, #8]
  40503e:	9301      	str	r3, [sp, #4]
  405040:	9300      	str	r3, [sp, #0]
  405042:	2308      	movs	r3, #8
  405044:	aa04      	add	r2, sp, #16
  405046:	2002      	movs	r0, #2
  405048:	4c0b      	ldr	r4, [pc, #44]	; (405078 <recv+0x9c>)
  40504a:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  40504c:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  40504e:	bf0c      	ite	eq
  405050:	2000      	moveq	r0, #0
  405052:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  405056:	b006      	add	sp, #24
  405058:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  40505a:	9304      	str	r3, [sp, #16]
  40505c:	e7e5      	b.n	40502a <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  40505e:	f06f 0005 	mvn.w	r0, #5
  405062:	e7f8      	b.n	405056 <recv+0x7a>
  405064:	f06f 0005 	mvn.w	r0, #5
  405068:	e7f5      	b.n	405056 <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  40506a:	2000      	movs	r0, #0
  40506c:	e7f3      	b.n	405056 <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  40506e:	f06f 0005 	mvn.w	r0, #5
}
  405072:	4770      	bx	lr
  405074:	2040d004 	.word	0x2040d004
  405078:	00402c49 	.word	0x00402c49

0040507c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  40507c:	b530      	push	{r4, r5, lr}
  40507e:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  405080:	1e04      	subs	r4, r0, #0
  405082:	db2f      	blt.n	4050e4 <close+0x68>
  405084:	4b1a      	ldr	r3, [pc, #104]	; (4050f0 <close+0x74>)
  405086:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40508a:	7a9b      	ldrb	r3, [r3, #10]
  40508c:	b2db      	uxtb	r3, r3
  40508e:	2b01      	cmp	r3, #1
  405090:	d12b      	bne.n	4050ea <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  405092:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  405096:	4b16      	ldr	r3, [pc, #88]	; (4050f0 <close+0x74>)
  405098:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40509c:	88da      	ldrh	r2, [r3, #6]
  40509e:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  4050a2:	2200      	movs	r2, #0
  4050a4:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  4050a6:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4050a8:	7adb      	ldrb	r3, [r3, #11]
  4050aa:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  4050ae:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  4050b0:	9202      	str	r2, [sp, #8]
  4050b2:	9201      	str	r2, [sp, #4]
  4050b4:	9200      	str	r2, [sp, #0]
  4050b6:	f04f 0304 	mov.w	r3, #4
  4050ba:	aa05      	add	r2, sp, #20
  4050bc:	bf0c      	ite	eq
  4050be:	2149      	moveq	r1, #73	; 0x49
  4050c0:	214e      	movne	r1, #78	; 0x4e
  4050c2:	2002      	movs	r0, #2
  4050c4:	4d0b      	ldr	r5, [pc, #44]	; (4050f4 <close+0x78>)
  4050c6:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  4050c8:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  4050ca:	bf18      	it	ne
  4050cc:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  4050d0:	2210      	movs	r2, #16
  4050d2:	2100      	movs	r1, #0
  4050d4:	4806      	ldr	r0, [pc, #24]	; (4050f0 <close+0x74>)
  4050d6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4050da:	4b07      	ldr	r3, [pc, #28]	; (4050f8 <close+0x7c>)
  4050dc:	4798      	blx	r3
	}
	return s8Ret;
}
  4050de:	4628      	mov	r0, r5
  4050e0:	b007      	add	sp, #28
  4050e2:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  4050e4:	f06f 0505 	mvn.w	r5, #5
  4050e8:	e7f9      	b.n	4050de <close+0x62>
  4050ea:	f06f 0505 	mvn.w	r5, #5
  4050ee:	e7f6      	b.n	4050de <close+0x62>
  4050f0:	2040d004 	.word	0x2040d004
  4050f4:	00402c49 	.word	0x00402c49
  4050f8:	00402ae5 	.word	0x00402ae5

004050fc <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  4050fc:	b570      	push	{r4, r5, r6, lr}
  4050fe:	b082      	sub	sp, #8
  405100:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  405102:	4b2b      	ldr	r3, [pc, #172]	; (4051b0 <spi_flash_enable+0xb4>)
  405104:	4798      	blx	r3
  405106:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40510a:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  40510e:	d203      	bcs.n	405118 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  405110:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  405112:	4620      	mov	r0, r4
  405114:	b002      	add	sp, #8
  405116:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  405118:	a901      	add	r1, sp, #4
  40511a:	f241 4010 	movw	r0, #5136	; 0x1410
  40511e:	4b25      	ldr	r3, [pc, #148]	; (4051b4 <spi_flash_enable+0xb8>)
  405120:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  405122:	4604      	mov	r4, r0
  405124:	2800      	cmp	r0, #0
  405126:	d1f4      	bne.n	405112 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  405128:	4b23      	ldr	r3, [pc, #140]	; (4051b8 <spi_flash_enable+0xbc>)
  40512a:	9a01      	ldr	r2, [sp, #4]
  40512c:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  40512e:	4923      	ldr	r1, [pc, #140]	; (4051bc <spi_flash_enable+0xc0>)
  405130:	4319      	orrs	r1, r3
  405132:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  405134:	f241 4010 	movw	r0, #5136	; 0x1410
  405138:	4b21      	ldr	r3, [pc, #132]	; (4051c0 <spi_flash_enable+0xc4>)
  40513a:	4798      	blx	r3
		if(enable) {
  40513c:	b305      	cbz	r5, 405180 <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  40513e:	2100      	movs	r1, #0
  405140:	4820      	ldr	r0, [pc, #128]	; (4051c4 <spi_flash_enable+0xc8>)
  405142:	4d1f      	ldr	r5, [pc, #124]	; (4051c0 <spi_flash_enable+0xc4>)
  405144:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  405146:	21ab      	movs	r1, #171	; 0xab
  405148:	481f      	ldr	r0, [pc, #124]	; (4051c8 <spi_flash_enable+0xcc>)
  40514a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  40514c:	2101      	movs	r1, #1
  40514e:	481f      	ldr	r0, [pc, #124]	; (4051cc <spi_flash_enable+0xd0>)
  405150:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  405152:	2100      	movs	r1, #0
  405154:	481e      	ldr	r0, [pc, #120]	; (4051d0 <spi_flash_enable+0xd4>)
  405156:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  405158:	2181      	movs	r1, #129	; 0x81
  40515a:	481e      	ldr	r0, [pc, #120]	; (4051d4 <spi_flash_enable+0xd8>)
  40515c:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  40515e:	4e1e      	ldr	r6, [pc, #120]	; (4051d8 <spi_flash_enable+0xdc>)
  405160:	4d1e      	ldr	r5, [pc, #120]	; (4051dc <spi_flash_enable+0xe0>)
  405162:	4630      	mov	r0, r6
  405164:	47a8      	blx	r5
  405166:	2801      	cmp	r0, #1
  405168:	d1fb      	bne.n	405162 <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  40516a:	4913      	ldr	r1, [pc, #76]	; (4051b8 <spi_flash_enable+0xbc>)
  40516c:	9b01      	ldr	r3, [sp, #4]
  40516e:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  405170:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  405174:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  405176:	f241 4010 	movw	r0, #5136	; 0x1410
  40517a:	4b11      	ldr	r3, [pc, #68]	; (4051c0 <spi_flash_enable+0xc4>)
  40517c:	4798      	blx	r3
  40517e:	e7c8      	b.n	405112 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  405180:	2100      	movs	r1, #0
  405182:	4810      	ldr	r0, [pc, #64]	; (4051c4 <spi_flash_enable+0xc8>)
  405184:	4d0e      	ldr	r5, [pc, #56]	; (4051c0 <spi_flash_enable+0xc4>)
  405186:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  405188:	21b9      	movs	r1, #185	; 0xb9
  40518a:	480f      	ldr	r0, [pc, #60]	; (4051c8 <spi_flash_enable+0xcc>)
  40518c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  40518e:	2101      	movs	r1, #1
  405190:	480e      	ldr	r0, [pc, #56]	; (4051cc <spi_flash_enable+0xd0>)
  405192:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  405194:	2100      	movs	r1, #0
  405196:	480e      	ldr	r0, [pc, #56]	; (4051d0 <spi_flash_enable+0xd4>)
  405198:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  40519a:	2181      	movs	r1, #129	; 0x81
  40519c:	480d      	ldr	r0, [pc, #52]	; (4051d4 <spi_flash_enable+0xd8>)
  40519e:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  4051a0:	4e0d      	ldr	r6, [pc, #52]	; (4051d8 <spi_flash_enable+0xdc>)
  4051a2:	4d0e      	ldr	r5, [pc, #56]	; (4051dc <spi_flash_enable+0xe0>)
  4051a4:	4630      	mov	r0, r6
  4051a6:	47a8      	blx	r5
  4051a8:	2801      	cmp	r0, #1
  4051aa:	d1fb      	bne.n	4051a4 <spi_flash_enable+0xa8>
  4051ac:	e7dd      	b.n	40516a <spi_flash_enable+0x6e>
  4051ae:	bf00      	nop
  4051b0:	00403b11 	.word	0x00403b11
  4051b4:	00403e0d 	.word	0x00403e0d
  4051b8:	f8888fff 	.word	0xf8888fff
  4051bc:	01111000 	.word	0x01111000
  4051c0:	00403e19 	.word	0x00403e19
  4051c4:	00010208 	.word	0x00010208
  4051c8:	0001020c 	.word	0x0001020c
  4051cc:	00010214 	.word	0x00010214
  4051d0:	0001021c 	.word	0x0001021c
  4051d4:	00010204 	.word	0x00010204
  4051d8:	00010218 	.word	0x00010218
  4051dc:	00403e01 	.word	0x00403e01

004051e0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4051e0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4051e2:	4810      	ldr	r0, [pc, #64]	; (405224 <sysclk_init+0x44>)
  4051e4:	4b10      	ldr	r3, [pc, #64]	; (405228 <sysclk_init+0x48>)
  4051e6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4051e8:	213e      	movs	r1, #62	; 0x3e
  4051ea:	2000      	movs	r0, #0
  4051ec:	4b0f      	ldr	r3, [pc, #60]	; (40522c <sysclk_init+0x4c>)
  4051ee:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4051f0:	4c0f      	ldr	r4, [pc, #60]	; (405230 <sysclk_init+0x50>)
  4051f2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4051f4:	2800      	cmp	r0, #0
  4051f6:	d0fc      	beq.n	4051f2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4051f8:	4b0e      	ldr	r3, [pc, #56]	; (405234 <sysclk_init+0x54>)
  4051fa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4051fc:	4a0e      	ldr	r2, [pc, #56]	; (405238 <sysclk_init+0x58>)
  4051fe:	4b0f      	ldr	r3, [pc, #60]	; (40523c <sysclk_init+0x5c>)
  405200:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  405202:	4c0f      	ldr	r4, [pc, #60]	; (405240 <sysclk_init+0x60>)
  405204:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  405206:	2800      	cmp	r0, #0
  405208:	d0fc      	beq.n	405204 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40520a:	2002      	movs	r0, #2
  40520c:	4b0d      	ldr	r3, [pc, #52]	; (405244 <sysclk_init+0x64>)
  40520e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  405210:	2000      	movs	r0, #0
  405212:	4b0d      	ldr	r3, [pc, #52]	; (405248 <sysclk_init+0x68>)
  405214:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  405216:	4b0d      	ldr	r3, [pc, #52]	; (40524c <sysclk_init+0x6c>)
  405218:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40521a:	4802      	ldr	r0, [pc, #8]	; (405224 <sysclk_init+0x44>)
  40521c:	4b02      	ldr	r3, [pc, #8]	; (405228 <sysclk_init+0x48>)
  40521e:	4798      	blx	r3
  405220:	bd10      	pop	{r4, pc}
  405222:	bf00      	nop
  405224:	11e1a300 	.word	0x11e1a300
  405228:	00405f11 	.word	0x00405f11
  40522c:	004059d9 	.word	0x004059d9
  405230:	00405a2d 	.word	0x00405a2d
  405234:	00405a3d 	.word	0x00405a3d
  405238:	20183f01 	.word	0x20183f01
  40523c:	400e0600 	.word	0x400e0600
  405240:	00405a4d 	.word	0x00405a4d
  405244:	0040593d 	.word	0x0040593d
  405248:	00405975 	.word	0x00405975
  40524c:	00405e05 	.word	0x00405e05

00405250 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  405250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  405254:	b980      	cbnz	r0, 405278 <_read+0x28>
  405256:	460c      	mov	r4, r1
  405258:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40525a:	2a00      	cmp	r2, #0
  40525c:	dd0f      	ble.n	40527e <_read+0x2e>
  40525e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  405260:	4e08      	ldr	r6, [pc, #32]	; (405284 <_read+0x34>)
  405262:	4d09      	ldr	r5, [pc, #36]	; (405288 <_read+0x38>)
  405264:	6830      	ldr	r0, [r6, #0]
  405266:	4621      	mov	r1, r4
  405268:	682b      	ldr	r3, [r5, #0]
  40526a:	4798      	blx	r3
		ptr++;
  40526c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40526e:	42bc      	cmp	r4, r7
  405270:	d1f8      	bne.n	405264 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  405272:	4640      	mov	r0, r8
  405274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  405278:	f04f 38ff 	mov.w	r8, #4294967295
  40527c:	e7f9      	b.n	405272 <_read+0x22>
	for (; len > 0; --len) {
  40527e:	4680      	mov	r8, r0
  405280:	e7f7      	b.n	405272 <_read+0x22>
  405282:	bf00      	nop
  405284:	2040d0c8 	.word	0x2040d0c8
  405288:	2040d0c0 	.word	0x2040d0c0

0040528c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40528c:	3801      	subs	r0, #1
  40528e:	2802      	cmp	r0, #2
  405290:	d815      	bhi.n	4052be <_write+0x32>
{
  405292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405296:	460e      	mov	r6, r1
  405298:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40529a:	b19a      	cbz	r2, 4052c4 <_write+0x38>
  40529c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40529e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4052d8 <_write+0x4c>
  4052a2:	4f0c      	ldr	r7, [pc, #48]	; (4052d4 <_write+0x48>)
  4052a4:	f8d8 0000 	ldr.w	r0, [r8]
  4052a8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4052ac:	683b      	ldr	r3, [r7, #0]
  4052ae:	4798      	blx	r3
  4052b0:	2800      	cmp	r0, #0
  4052b2:	db0a      	blt.n	4052ca <_write+0x3e>
  4052b4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4052b6:	3c01      	subs	r4, #1
  4052b8:	d1f4      	bne.n	4052a4 <_write+0x18>
  4052ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4052be:	f04f 30ff 	mov.w	r0, #4294967295
  4052c2:	4770      	bx	lr
	for (; len != 0; --len) {
  4052c4:	4610      	mov	r0, r2
  4052c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4052ca:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4052ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4052d2:	bf00      	nop
  4052d4:	2040d0c4 	.word	0x2040d0c4
  4052d8:	2040d0c8 	.word	0x2040d0c8

004052dc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4052de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4052e2:	4b5c      	ldr	r3, [pc, #368]	; (405454 <board_init+0x178>)
  4052e4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  4052e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4052ea:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4052ee:	4b5a      	ldr	r3, [pc, #360]	; (405458 <board_init+0x17c>)
  4052f0:	2200      	movs	r2, #0
  4052f2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4052f6:	695a      	ldr	r2, [r3, #20]
  4052f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4052fc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4052fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405302:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  405306:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40530a:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40530e:	f007 0007 	and.w	r0, r7, #7
  405312:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  405314:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  405318:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40531c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  405320:	f3bf 8f4f 	dsb	sy
  405324:	f04f 34ff 	mov.w	r4, #4294967295
  405328:	fa04 fc00 	lsl.w	ip, r4, r0
  40532c:	fa06 f000 	lsl.w	r0, r6, r0
  405330:	fa04 f40e 	lsl.w	r4, r4, lr
  405334:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  405338:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40533a:	463a      	mov	r2, r7
  40533c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40533e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  405342:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  405346:	3a01      	subs	r2, #1
  405348:	4423      	add	r3, r4
  40534a:	f1b2 3fff 	cmp.w	r2, #4294967295
  40534e:	d1f6      	bne.n	40533e <board_init+0x62>
        } while(sets--);
  405350:	3e01      	subs	r6, #1
  405352:	4460      	add	r0, ip
  405354:	f1b6 3fff 	cmp.w	r6, #4294967295
  405358:	d1ef      	bne.n	40533a <board_init+0x5e>
  40535a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40535e:	4b3e      	ldr	r3, [pc, #248]	; (405458 <board_init+0x17c>)
  405360:	695a      	ldr	r2, [r3, #20]
  405362:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  405366:	615a      	str	r2, [r3, #20]
  405368:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40536c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  405370:	4a3a      	ldr	r2, [pc, #232]	; (40545c <board_init+0x180>)
  405372:	493b      	ldr	r1, [pc, #236]	; (405460 <board_init+0x184>)
  405374:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  405376:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40537a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  40537c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405380:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  405384:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  405388:	f022 0201 	bic.w	r2, r2, #1
  40538c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  405390:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  405394:	f022 0201 	bic.w	r2, r2, #1
  405398:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  40539c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4053a0:	f3bf 8f6f 	isb	sy
  4053a4:	200a      	movs	r0, #10
  4053a6:	4c2f      	ldr	r4, [pc, #188]	; (405464 <board_init+0x188>)
  4053a8:	47a0      	blx	r4
  4053aa:	200b      	movs	r0, #11
  4053ac:	47a0      	blx	r4
  4053ae:	200c      	movs	r0, #12
  4053b0:	47a0      	blx	r4
  4053b2:	2010      	movs	r0, #16
  4053b4:	47a0      	blx	r4
  4053b6:	2011      	movs	r0, #17
  4053b8:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4053ba:	4b2b      	ldr	r3, [pc, #172]	; (405468 <board_init+0x18c>)
  4053bc:	f44f 7280 	mov.w	r2, #256	; 0x100
  4053c0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4053c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4053c6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4053c8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4053cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4053d0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4053d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4053d6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4053d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4053dc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4053de:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4053e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4053e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4053e6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4053ea:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4053ec:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4053ee:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4053f2:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4053f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4053f8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4053fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  405400:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  405404:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405406:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40540a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40540c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40540e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405412:	6f19      	ldr	r1, [r3, #112]	; 0x70
  405414:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  405418:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40541a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40541c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  405420:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405422:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  405424:	4a11      	ldr	r2, [pc, #68]	; (40546c <board_init+0x190>)
  405426:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40542a:	f043 0310 	orr.w	r3, r3, #16
  40542e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  405432:	4b0f      	ldr	r3, [pc, #60]	; (405470 <board_init+0x194>)
  405434:	2210      	movs	r2, #16
  405436:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  405438:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40543c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40543e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  405444:	6f19      	ldr	r1, [r3, #112]	; 0x70
  405446:	4311      	orrs	r1, r2
  405448:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40544a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40544c:	4311      	orrs	r1, r2
  40544e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405450:	605a      	str	r2, [r3, #4]
  405452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405454:	400e1850 	.word	0x400e1850
  405458:	e000ed00 	.word	0xe000ed00
  40545c:	400e0c00 	.word	0x400e0c00
  405460:	5a00080c 	.word	0x5a00080c
  405464:	00405a5d 	.word	0x00405a5d
  405468:	400e1200 	.word	0x400e1200
  40546c:	40088000 	.word	0x40088000
  405470:	400e1000 	.word	0x400e1000

00405474 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  405474:	b90a      	cbnz	r2, 40547a <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  405476:	6601      	str	r1, [r0, #96]	; 0x60
  405478:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40547a:	6641      	str	r1, [r0, #100]	; 0x64
  40547c:	4770      	bx	lr

0040547e <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  40547e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  405482:	0053      	lsls	r3, r2, #1
  405484:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405488:	fbb2 f2f3 	udiv	r2, r2, r3
  40548c:	3a01      	subs	r2, #1
  40548e:	f3c2 020d 	ubfx	r2, r2, #0, #14
  405492:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  405496:	4770      	bx	lr

00405498 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  405498:	6301      	str	r1, [r0, #48]	; 0x30
  40549a:	4770      	bx	lr

0040549c <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40549c:	6341      	str	r1, [r0, #52]	; 0x34
  40549e:	4770      	bx	lr

004054a0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4054a0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4054a2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4054a6:	d03a      	beq.n	40551e <pio_set_peripheral+0x7e>
  4054a8:	d813      	bhi.n	4054d2 <pio_set_peripheral+0x32>
  4054aa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4054ae:	d025      	beq.n	4054fc <pio_set_peripheral+0x5c>
  4054b0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4054b4:	d10a      	bne.n	4054cc <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4054b6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4054b8:	4313      	orrs	r3, r2
  4054ba:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4054bc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4054be:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4054c0:	400b      	ands	r3, r1
  4054c2:	ea23 0302 	bic.w	r3, r3, r2
  4054c6:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4054c8:	6042      	str	r2, [r0, #4]
  4054ca:	4770      	bx	lr
	switch (ul_type) {
  4054cc:	2900      	cmp	r1, #0
  4054ce:	d1fb      	bne.n	4054c8 <pio_set_peripheral+0x28>
  4054d0:	4770      	bx	lr
  4054d2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4054d6:	d021      	beq.n	40551c <pio_set_peripheral+0x7c>
  4054d8:	d809      	bhi.n	4054ee <pio_set_peripheral+0x4e>
  4054da:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4054de:	d1f3      	bne.n	4054c8 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4054e0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4054e2:	4313      	orrs	r3, r2
  4054e4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4054e6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4054e8:	4313      	orrs	r3, r2
  4054ea:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4054ec:	e7ec      	b.n	4054c8 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4054ee:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4054f2:	d013      	beq.n	40551c <pio_set_peripheral+0x7c>
  4054f4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4054f8:	d010      	beq.n	40551c <pio_set_peripheral+0x7c>
  4054fa:	e7e5      	b.n	4054c8 <pio_set_peripheral+0x28>
{
  4054fc:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4054fe:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  405500:	6f04      	ldr	r4, [r0, #112]	; 0x70
  405502:	43d3      	mvns	r3, r2
  405504:	4021      	ands	r1, r4
  405506:	461c      	mov	r4, r3
  405508:	4019      	ands	r1, r3
  40550a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40550c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40550e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  405510:	400b      	ands	r3, r1
  405512:	4023      	ands	r3, r4
  405514:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  405516:	6042      	str	r2, [r0, #4]
}
  405518:	f85d 4b04 	ldr.w	r4, [sp], #4
  40551c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40551e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  405520:	6f01      	ldr	r1, [r0, #112]	; 0x70
  405522:	400b      	ands	r3, r1
  405524:	ea23 0302 	bic.w	r3, r3, r2
  405528:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40552a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40552c:	4313      	orrs	r3, r2
  40552e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  405530:	e7ca      	b.n	4054c8 <pio_set_peripheral+0x28>

00405532 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  405532:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  405534:	f012 0f01 	tst.w	r2, #1
  405538:	d10d      	bne.n	405556 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  40553a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40553c:	f012 0f0a 	tst.w	r2, #10
  405540:	d00b      	beq.n	40555a <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  405542:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  405544:	f012 0f02 	tst.w	r2, #2
  405548:	d109      	bne.n	40555e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40554a:	f012 0f08 	tst.w	r2, #8
  40554e:	d008      	beq.n	405562 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  405550:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  405554:	e005      	b.n	405562 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  405556:	6641      	str	r1, [r0, #100]	; 0x64
  405558:	e7f0      	b.n	40553c <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40555a:	6241      	str	r1, [r0, #36]	; 0x24
  40555c:	e7f2      	b.n	405544 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40555e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  405562:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  405564:	6001      	str	r1, [r0, #0]
  405566:	4770      	bx	lr

00405568 <pio_set_output>:
{
  405568:	b410      	push	{r4}
  40556a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40556c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40556e:	b94c      	cbnz	r4, 405584 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  405570:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  405572:	b14b      	cbz	r3, 405588 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  405574:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  405576:	b94a      	cbnz	r2, 40558c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  405578:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40557a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40557c:	6001      	str	r1, [r0, #0]
}
  40557e:	f85d 4b04 	ldr.w	r4, [sp], #4
  405582:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  405584:	6641      	str	r1, [r0, #100]	; 0x64
  405586:	e7f4      	b.n	405572 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  405588:	6541      	str	r1, [r0, #84]	; 0x54
  40558a:	e7f4      	b.n	405576 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40558c:	6301      	str	r1, [r0, #48]	; 0x30
  40558e:	e7f4      	b.n	40557a <pio_set_output+0x12>

00405590 <pio_configure>:
{
  405590:	b570      	push	{r4, r5, r6, lr}
  405592:	b082      	sub	sp, #8
  405594:	4605      	mov	r5, r0
  405596:	4616      	mov	r6, r2
  405598:	461c      	mov	r4, r3
	switch (ul_type) {
  40559a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40559e:	d014      	beq.n	4055ca <pio_configure+0x3a>
  4055a0:	d90a      	bls.n	4055b8 <pio_configure+0x28>
  4055a2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4055a6:	d024      	beq.n	4055f2 <pio_configure+0x62>
  4055a8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4055ac:	d021      	beq.n	4055f2 <pio_configure+0x62>
  4055ae:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4055b2:	d017      	beq.n	4055e4 <pio_configure+0x54>
		return 0;
  4055b4:	2000      	movs	r0, #0
  4055b6:	e01a      	b.n	4055ee <pio_configure+0x5e>
	switch (ul_type) {
  4055b8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4055bc:	d005      	beq.n	4055ca <pio_configure+0x3a>
  4055be:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4055c2:	d002      	beq.n	4055ca <pio_configure+0x3a>
  4055c4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4055c8:	d1f4      	bne.n	4055b4 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4055ca:	4632      	mov	r2, r6
  4055cc:	4628      	mov	r0, r5
  4055ce:	4b11      	ldr	r3, [pc, #68]	; (405614 <pio_configure+0x84>)
  4055d0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4055d2:	f014 0f01 	tst.w	r4, #1
  4055d6:	d102      	bne.n	4055de <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4055d8:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4055da:	2001      	movs	r0, #1
  4055dc:	e007      	b.n	4055ee <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4055de:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4055e0:	2001      	movs	r0, #1
  4055e2:	e004      	b.n	4055ee <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4055e4:	461a      	mov	r2, r3
  4055e6:	4631      	mov	r1, r6
  4055e8:	4b0b      	ldr	r3, [pc, #44]	; (405618 <pio_configure+0x88>)
  4055ea:	4798      	blx	r3
	return 1;
  4055ec:	2001      	movs	r0, #1
}
  4055ee:	b002      	add	sp, #8
  4055f0:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4055f2:	f004 0301 	and.w	r3, r4, #1
  4055f6:	9300      	str	r3, [sp, #0]
  4055f8:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4055fc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  405600:	bf14      	ite	ne
  405602:	2200      	movne	r2, #0
  405604:	2201      	moveq	r2, #1
  405606:	4631      	mov	r1, r6
  405608:	4628      	mov	r0, r5
  40560a:	4c04      	ldr	r4, [pc, #16]	; (40561c <pio_configure+0x8c>)
  40560c:	47a0      	blx	r4
	return 1;
  40560e:	2001      	movs	r0, #1
		break;
  405610:	e7ed      	b.n	4055ee <pio_configure+0x5e>
  405612:	bf00      	nop
  405614:	004054a1 	.word	0x004054a1
  405618:	00405533 	.word	0x00405533
  40561c:	00405569 	.word	0x00405569

00405620 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  405620:	f012 0f10 	tst.w	r2, #16
  405624:	d012      	beq.n	40564c <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  405626:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40562a:	f012 0f20 	tst.w	r2, #32
  40562e:	d007      	beq.n	405640 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  405630:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  405634:	f012 0f40 	tst.w	r2, #64	; 0x40
  405638:	d005      	beq.n	405646 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  40563a:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  40563e:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  405640:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  405644:	e7f6      	b.n	405634 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  405646:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  40564a:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  40564c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  405650:	4770      	bx	lr

00405652 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  405652:	6401      	str	r1, [r0, #64]	; 0x40
  405654:	4770      	bx	lr

00405656 <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  405656:	6441      	str	r1, [r0, #68]	; 0x44
  405658:	4770      	bx	lr

0040565a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40565a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40565c:	4770      	bx	lr

0040565e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40565e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  405660:	4770      	bx	lr
	...

00405664 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  405664:	b570      	push	{r4, r5, r6, lr}
  405666:	b082      	sub	sp, #8
  405668:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40566a:	4c46      	ldr	r4, [pc, #280]	; (405784 <pio_configure_pin+0x120>)
  40566c:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  405670:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  405672:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  405676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40567a:	d059      	beq.n	405730 <pio_configure_pin+0xcc>
  40567c:	d80a      	bhi.n	405694 <pio_configure_pin+0x30>
  40567e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  405682:	d02f      	beq.n	4056e4 <pio_configure_pin+0x80>
  405684:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  405688:	d03f      	beq.n	40570a <pio_configure_pin+0xa6>
  40568a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40568e:	d016      	beq.n	4056be <pio_configure_pin+0x5a>
		return 0;
  405690:	2000      	movs	r0, #0
  405692:	e012      	b.n	4056ba <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  405694:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  405698:	d05d      	beq.n	405756 <pio_configure_pin+0xf2>
  40569a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40569e:	d05a      	beq.n	405756 <pio_configure_pin+0xf2>
  4056a0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4056a4:	d1f4      	bne.n	405690 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4056a6:	f000 011f 	and.w	r1, r0, #31
  4056aa:	2601      	movs	r6, #1
  4056ac:	462a      	mov	r2, r5
  4056ae:	fa06 f101 	lsl.w	r1, r6, r1
  4056b2:	4620      	mov	r0, r4
  4056b4:	4b34      	ldr	r3, [pc, #208]	; (405788 <pio_configure_pin+0x124>)
  4056b6:	4798      	blx	r3
	return 1;
  4056b8:	4630      	mov	r0, r6
}
  4056ba:	b002      	add	sp, #8
  4056bc:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4056be:	f000 001f 	and.w	r0, r0, #31
  4056c2:	2601      	movs	r6, #1
  4056c4:	4086      	lsls	r6, r0
  4056c6:	4632      	mov	r2, r6
  4056c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4056cc:	4620      	mov	r0, r4
  4056ce:	4b2f      	ldr	r3, [pc, #188]	; (40578c <pio_configure_pin+0x128>)
  4056d0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4056d2:	f015 0f01 	tst.w	r5, #1
  4056d6:	d102      	bne.n	4056de <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  4056d8:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4056da:	2001      	movs	r0, #1
  4056dc:	e7ed      	b.n	4056ba <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4056de:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4056e0:	2001      	movs	r0, #1
  4056e2:	e7ea      	b.n	4056ba <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4056e4:	f000 001f 	and.w	r0, r0, #31
  4056e8:	2601      	movs	r6, #1
  4056ea:	4086      	lsls	r6, r0
  4056ec:	4632      	mov	r2, r6
  4056ee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4056f2:	4620      	mov	r0, r4
  4056f4:	4b25      	ldr	r3, [pc, #148]	; (40578c <pio_configure_pin+0x128>)
  4056f6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4056f8:	f015 0f01 	tst.w	r5, #1
  4056fc:	d102      	bne.n	405704 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4056fe:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  405700:	2001      	movs	r0, #1
  405702:	e7da      	b.n	4056ba <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  405704:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  405706:	2001      	movs	r0, #1
  405708:	e7d7      	b.n	4056ba <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40570a:	f000 001f 	and.w	r0, r0, #31
  40570e:	2601      	movs	r6, #1
  405710:	4086      	lsls	r6, r0
  405712:	4632      	mov	r2, r6
  405714:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  405718:	4620      	mov	r0, r4
  40571a:	4b1c      	ldr	r3, [pc, #112]	; (40578c <pio_configure_pin+0x128>)
  40571c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40571e:	f015 0f01 	tst.w	r5, #1
  405722:	d102      	bne.n	40572a <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  405724:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  405726:	2001      	movs	r0, #1
  405728:	e7c7      	b.n	4056ba <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40572a:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40572c:	2001      	movs	r0, #1
  40572e:	e7c4      	b.n	4056ba <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  405730:	f000 001f 	and.w	r0, r0, #31
  405734:	2601      	movs	r6, #1
  405736:	4086      	lsls	r6, r0
  405738:	4632      	mov	r2, r6
  40573a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40573e:	4620      	mov	r0, r4
  405740:	4b12      	ldr	r3, [pc, #72]	; (40578c <pio_configure_pin+0x128>)
  405742:	4798      	blx	r3
	if (ul_pull_up_enable) {
  405744:	f015 0f01 	tst.w	r5, #1
  405748:	d102      	bne.n	405750 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  40574a:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40574c:	2001      	movs	r0, #1
  40574e:	e7b4      	b.n	4056ba <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  405750:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  405752:	2001      	movs	r0, #1
  405754:	e7b1      	b.n	4056ba <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  405756:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40575a:	f000 011f 	and.w	r1, r0, #31
  40575e:	2601      	movs	r6, #1
  405760:	ea05 0306 	and.w	r3, r5, r6
  405764:	9300      	str	r3, [sp, #0]
  405766:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40576a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40576e:	bf14      	ite	ne
  405770:	2200      	movne	r2, #0
  405772:	2201      	moveq	r2, #1
  405774:	fa06 f101 	lsl.w	r1, r6, r1
  405778:	4620      	mov	r0, r4
  40577a:	4c05      	ldr	r4, [pc, #20]	; (405790 <pio_configure_pin+0x12c>)
  40577c:	47a0      	blx	r4
	return 1;
  40577e:	4630      	mov	r0, r6
		break;
  405780:	e79b      	b.n	4056ba <pio_configure_pin+0x56>
  405782:	bf00      	nop
  405784:	00200707 	.word	0x00200707
  405788:	00405533 	.word	0x00405533
  40578c:	004054a1 	.word	0x004054a1
  405790:	00405569 	.word	0x00405569

00405794 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  405794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405798:	4604      	mov	r4, r0
  40579a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40579c:	4b0e      	ldr	r3, [pc, #56]	; (4057d8 <pio_handler_process+0x44>)
  40579e:	4798      	blx	r3
  4057a0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4057a2:	4620      	mov	r0, r4
  4057a4:	4b0d      	ldr	r3, [pc, #52]	; (4057dc <pio_handler_process+0x48>)
  4057a6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4057a8:	4005      	ands	r5, r0
  4057aa:	d013      	beq.n	4057d4 <pio_handler_process+0x40>
  4057ac:	4c0c      	ldr	r4, [pc, #48]	; (4057e0 <pio_handler_process+0x4c>)
  4057ae:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4057b2:	e003      	b.n	4057bc <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4057b4:	42b4      	cmp	r4, r6
  4057b6:	d00d      	beq.n	4057d4 <pio_handler_process+0x40>
  4057b8:	3410      	adds	r4, #16
		while (status != 0) {
  4057ba:	b15d      	cbz	r5, 4057d4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4057bc:	6820      	ldr	r0, [r4, #0]
  4057be:	4540      	cmp	r0, r8
  4057c0:	d1f8      	bne.n	4057b4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4057c2:	6861      	ldr	r1, [r4, #4]
  4057c4:	4229      	tst	r1, r5
  4057c6:	d0f5      	beq.n	4057b4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4057c8:	68e3      	ldr	r3, [r4, #12]
  4057ca:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4057cc:	6863      	ldr	r3, [r4, #4]
  4057ce:	ea25 0503 	bic.w	r5, r5, r3
  4057d2:	e7ef      	b.n	4057b4 <pio_handler_process+0x20>
  4057d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4057d8:	0040565b 	.word	0x0040565b
  4057dc:	0040565f 	.word	0x0040565f
  4057e0:	2040c37c 	.word	0x2040c37c

004057e4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4057e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4057e6:	4c18      	ldr	r4, [pc, #96]	; (405848 <pio_handler_set+0x64>)
  4057e8:	6826      	ldr	r6, [r4, #0]
  4057ea:	2e06      	cmp	r6, #6
  4057ec:	d82a      	bhi.n	405844 <pio_handler_set+0x60>
  4057ee:	f04f 0c00 	mov.w	ip, #0
  4057f2:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4057f4:	4f15      	ldr	r7, [pc, #84]	; (40584c <pio_handler_set+0x68>)
  4057f6:	e004      	b.n	405802 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4057f8:	3401      	adds	r4, #1
  4057fa:	b2e4      	uxtb	r4, r4
  4057fc:	46a4      	mov	ip, r4
  4057fe:	42a6      	cmp	r6, r4
  405800:	d309      	bcc.n	405816 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  405802:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  405804:	0125      	lsls	r5, r4, #4
  405806:	597d      	ldr	r5, [r7, r5]
  405808:	428d      	cmp	r5, r1
  40580a:	d1f5      	bne.n	4057f8 <pio_handler_set+0x14>
  40580c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  405810:	686d      	ldr	r5, [r5, #4]
  405812:	4295      	cmp	r5, r2
  405814:	d1f0      	bne.n	4057f8 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  405816:	4d0d      	ldr	r5, [pc, #52]	; (40584c <pio_handler_set+0x68>)
  405818:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  40581c:	eb05 040e 	add.w	r4, r5, lr
  405820:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  405824:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  405826:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  405828:	9906      	ldr	r1, [sp, #24]
  40582a:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  40582c:	3601      	adds	r6, #1
  40582e:	4566      	cmp	r6, ip
  405830:	d005      	beq.n	40583e <pio_handler_set+0x5a>
  405832:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  405834:	461a      	mov	r2, r3
  405836:	4b06      	ldr	r3, [pc, #24]	; (405850 <pio_handler_set+0x6c>)
  405838:	4798      	blx	r3

	return 0;
  40583a:	2000      	movs	r0, #0
  40583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  40583e:	4902      	ldr	r1, [pc, #8]	; (405848 <pio_handler_set+0x64>)
  405840:	600e      	str	r6, [r1, #0]
  405842:	e7f6      	b.n	405832 <pio_handler_set+0x4e>
		return 1;
  405844:	2001      	movs	r0, #1
}
  405846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405848:	2040c3ec 	.word	0x2040c3ec
  40584c:	2040c37c 	.word	0x2040c37c
  405850:	00405621 	.word	0x00405621

00405854 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  405854:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  405856:	210a      	movs	r1, #10
  405858:	4801      	ldr	r0, [pc, #4]	; (405860 <PIOA_Handler+0xc>)
  40585a:	4b02      	ldr	r3, [pc, #8]	; (405864 <PIOA_Handler+0x10>)
  40585c:	4798      	blx	r3
  40585e:	bd08      	pop	{r3, pc}
  405860:	400e0e00 	.word	0x400e0e00
  405864:	00405795 	.word	0x00405795

00405868 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  405868:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40586a:	210b      	movs	r1, #11
  40586c:	4801      	ldr	r0, [pc, #4]	; (405874 <PIOB_Handler+0xc>)
  40586e:	4b02      	ldr	r3, [pc, #8]	; (405878 <PIOB_Handler+0x10>)
  405870:	4798      	blx	r3
  405872:	bd08      	pop	{r3, pc}
  405874:	400e1000 	.word	0x400e1000
  405878:	00405795 	.word	0x00405795

0040587c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40587c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40587e:	210c      	movs	r1, #12
  405880:	4801      	ldr	r0, [pc, #4]	; (405888 <PIOC_Handler+0xc>)
  405882:	4b02      	ldr	r3, [pc, #8]	; (40588c <PIOC_Handler+0x10>)
  405884:	4798      	blx	r3
  405886:	bd08      	pop	{r3, pc}
  405888:	400e1200 	.word	0x400e1200
  40588c:	00405795 	.word	0x00405795

00405890 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  405890:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  405892:	2110      	movs	r1, #16
  405894:	4801      	ldr	r0, [pc, #4]	; (40589c <PIOD_Handler+0xc>)
  405896:	4b02      	ldr	r3, [pc, #8]	; (4058a0 <PIOD_Handler+0x10>)
  405898:	4798      	blx	r3
  40589a:	bd08      	pop	{r3, pc}
  40589c:	400e1400 	.word	0x400e1400
  4058a0:	00405795 	.word	0x00405795

004058a4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4058a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4058a6:	2111      	movs	r1, #17
  4058a8:	4801      	ldr	r0, [pc, #4]	; (4058b0 <PIOE_Handler+0xc>)
  4058aa:	4b02      	ldr	r3, [pc, #8]	; (4058b4 <PIOE_Handler+0x10>)
  4058ac:	4798      	blx	r3
  4058ae:	bd08      	pop	{r3, pc}
  4058b0:	400e1600 	.word	0x400e1600
  4058b4:	00405795 	.word	0x00405795

004058b8 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4058ba:	4606      	mov	r6, r0
  4058bc:	460d      	mov	r5, r1
  4058be:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  4058c0:	4b17      	ldr	r3, [pc, #92]	; (405920 <pio_handler_set_priority+0x68>)
  4058c2:	4798      	blx	r3
  4058c4:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  4058c6:	f04f 31ff 	mov.w	r1, #4294967295
  4058ca:	4630      	mov	r0, r6
  4058cc:	4b15      	ldr	r3, [pc, #84]	; (405924 <pio_handler_set_priority+0x6c>)
  4058ce:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4058d0:	4630      	mov	r0, r6
  4058d2:	4b15      	ldr	r3, [pc, #84]	; (405928 <pio_handler_set_priority+0x70>)
  4058d4:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4058d6:	fa5f fe85 	uxtb.w	lr, r5
  4058da:	f00e 031f 	and.w	r3, lr, #31
  4058de:	2201      	movs	r2, #1
  4058e0:	fa02 f303 	lsl.w	r3, r2, r3
  4058e4:	0968      	lsrs	r0, r5, #5
  4058e6:	4911      	ldr	r1, [pc, #68]	; (40592c <pio_handler_set_priority+0x74>)
  4058e8:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  4058ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4058f0:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  4058f4:	2d00      	cmp	r5, #0
  4058f6:	db0a      	blt.n	40590e <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4058f8:	0164      	lsls	r4, r4, #5
  4058fa:	b2e4      	uxtb	r4, r4
  4058fc:	4a0c      	ldr	r2, [pc, #48]	; (405930 <pio_handler_set_priority+0x78>)
  4058fe:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405900:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  405904:	4639      	mov	r1, r7
  405906:	4630      	mov	r0, r6
  405908:	4b0a      	ldr	r3, [pc, #40]	; (405934 <pio_handler_set_priority+0x7c>)
  40590a:	4798      	blx	r3
  40590c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40590e:	f00e 0e0f 	and.w	lr, lr, #15
  405912:	0164      	lsls	r4, r4, #5
  405914:	b2e4      	uxtb	r4, r4
  405916:	4a08      	ldr	r2, [pc, #32]	; (405938 <pio_handler_set_priority+0x80>)
  405918:	f802 400e 	strb.w	r4, [r2, lr]
  40591c:	e7f0      	b.n	405900 <pio_handler_set_priority+0x48>
  40591e:	bf00      	nop
  405920:	0040565f 	.word	0x0040565f
  405924:	00405657 	.word	0x00405657
  405928:	0040565b 	.word	0x0040565b
  40592c:	e000e100 	.word	0xe000e100
  405930:	e000e400 	.word	0xe000e400
  405934:	00405653 	.word	0x00405653
  405938:	e000ed14 	.word	0xe000ed14

0040593c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40593c:	2803      	cmp	r0, #3
  40593e:	d011      	beq.n	405964 <pmc_mck_set_division+0x28>
  405940:	2804      	cmp	r0, #4
  405942:	d012      	beq.n	40596a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  405944:	2802      	cmp	r0, #2
  405946:	bf0c      	ite	eq
  405948:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40594c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40594e:	4a08      	ldr	r2, [pc, #32]	; (405970 <pmc_mck_set_division+0x34>)
  405950:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  405956:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  405958:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40595a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40595c:	f013 0f08 	tst.w	r3, #8
  405960:	d0fb      	beq.n	40595a <pmc_mck_set_division+0x1e>
}
  405962:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  405964:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  405968:	e7f1      	b.n	40594e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40596a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40596e:	e7ee      	b.n	40594e <pmc_mck_set_division+0x12>
  405970:	400e0600 	.word	0x400e0600

00405974 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  405974:	4a17      	ldr	r2, [pc, #92]	; (4059d4 <pmc_switch_mck_to_pllack+0x60>)
  405976:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40597c:	4318      	orrs	r0, r3
  40597e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405980:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405982:	f013 0f08 	tst.w	r3, #8
  405986:	d10a      	bne.n	40599e <pmc_switch_mck_to_pllack+0x2a>
  405988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40598c:	4911      	ldr	r1, [pc, #68]	; (4059d4 <pmc_switch_mck_to_pllack+0x60>)
  40598e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405990:	f012 0f08 	tst.w	r2, #8
  405994:	d103      	bne.n	40599e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405996:	3b01      	subs	r3, #1
  405998:	d1f9      	bne.n	40598e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40599a:	2001      	movs	r0, #1
  40599c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40599e:	4a0d      	ldr	r2, [pc, #52]	; (4059d4 <pmc_switch_mck_to_pllack+0x60>)
  4059a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4059a2:	f023 0303 	bic.w	r3, r3, #3
  4059a6:	f043 0302 	orr.w	r3, r3, #2
  4059aa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4059ac:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4059ae:	f013 0f08 	tst.w	r3, #8
  4059b2:	d10a      	bne.n	4059ca <pmc_switch_mck_to_pllack+0x56>
  4059b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4059b8:	4906      	ldr	r1, [pc, #24]	; (4059d4 <pmc_switch_mck_to_pllack+0x60>)
  4059ba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4059bc:	f012 0f08 	tst.w	r2, #8
  4059c0:	d105      	bne.n	4059ce <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4059c2:	3b01      	subs	r3, #1
  4059c4:	d1f9      	bne.n	4059ba <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4059c6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4059c8:	4770      	bx	lr
	return 0;
  4059ca:	2000      	movs	r0, #0
  4059cc:	4770      	bx	lr
  4059ce:	2000      	movs	r0, #0
  4059d0:	4770      	bx	lr
  4059d2:	bf00      	nop
  4059d4:	400e0600 	.word	0x400e0600

004059d8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4059d8:	b9a0      	cbnz	r0, 405a04 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4059da:	480e      	ldr	r0, [pc, #56]	; (405a14 <pmc_switch_mainck_to_xtal+0x3c>)
  4059dc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4059de:	0209      	lsls	r1, r1, #8
  4059e0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4059e2:	4a0d      	ldr	r2, [pc, #52]	; (405a18 <pmc_switch_mainck_to_xtal+0x40>)
  4059e4:	401a      	ands	r2, r3
  4059e6:	4b0d      	ldr	r3, [pc, #52]	; (405a1c <pmc_switch_mainck_to_xtal+0x44>)
  4059e8:	4313      	orrs	r3, r2
  4059ea:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4059ec:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4059ee:	4602      	mov	r2, r0
  4059f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4059f2:	f013 0f01 	tst.w	r3, #1
  4059f6:	d0fb      	beq.n	4059f0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4059f8:	4a06      	ldr	r2, [pc, #24]	; (405a14 <pmc_switch_mainck_to_xtal+0x3c>)
  4059fa:	6a11      	ldr	r1, [r2, #32]
  4059fc:	4b08      	ldr	r3, [pc, #32]	; (405a20 <pmc_switch_mainck_to_xtal+0x48>)
  4059fe:	430b      	orrs	r3, r1
  405a00:	6213      	str	r3, [r2, #32]
  405a02:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405a04:	4903      	ldr	r1, [pc, #12]	; (405a14 <pmc_switch_mainck_to_xtal+0x3c>)
  405a06:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  405a08:	4a06      	ldr	r2, [pc, #24]	; (405a24 <pmc_switch_mainck_to_xtal+0x4c>)
  405a0a:	401a      	ands	r2, r3
  405a0c:	4b06      	ldr	r3, [pc, #24]	; (405a28 <pmc_switch_mainck_to_xtal+0x50>)
  405a0e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405a10:	620b      	str	r3, [r1, #32]
  405a12:	4770      	bx	lr
  405a14:	400e0600 	.word	0x400e0600
  405a18:	ffc8fffc 	.word	0xffc8fffc
  405a1c:	00370001 	.word	0x00370001
  405a20:	01370000 	.word	0x01370000
  405a24:	fec8fffc 	.word	0xfec8fffc
  405a28:	01370002 	.word	0x01370002

00405a2c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  405a2c:	4b02      	ldr	r3, [pc, #8]	; (405a38 <pmc_osc_is_ready_mainck+0xc>)
  405a2e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  405a30:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  405a34:	4770      	bx	lr
  405a36:	bf00      	nop
  405a38:	400e0600 	.word	0x400e0600

00405a3c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  405a3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  405a40:	4b01      	ldr	r3, [pc, #4]	; (405a48 <pmc_disable_pllack+0xc>)
  405a42:	629a      	str	r2, [r3, #40]	; 0x28
  405a44:	4770      	bx	lr
  405a46:	bf00      	nop
  405a48:	400e0600 	.word	0x400e0600

00405a4c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  405a4c:	4b02      	ldr	r3, [pc, #8]	; (405a58 <pmc_is_locked_pllack+0xc>)
  405a4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  405a50:	f000 0002 	and.w	r0, r0, #2
  405a54:	4770      	bx	lr
  405a56:	bf00      	nop
  405a58:	400e0600 	.word	0x400e0600

00405a5c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  405a5c:	283f      	cmp	r0, #63	; 0x3f
  405a5e:	d81e      	bhi.n	405a9e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  405a60:	281f      	cmp	r0, #31
  405a62:	d80c      	bhi.n	405a7e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  405a64:	4b11      	ldr	r3, [pc, #68]	; (405aac <pmc_enable_periph_clk+0x50>)
  405a66:	699a      	ldr	r2, [r3, #24]
  405a68:	2301      	movs	r3, #1
  405a6a:	4083      	lsls	r3, r0
  405a6c:	4393      	bics	r3, r2
  405a6e:	d018      	beq.n	405aa2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  405a70:	2301      	movs	r3, #1
  405a72:	fa03 f000 	lsl.w	r0, r3, r0
  405a76:	4b0d      	ldr	r3, [pc, #52]	; (405aac <pmc_enable_periph_clk+0x50>)
  405a78:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  405a7a:	2000      	movs	r0, #0
  405a7c:	4770      	bx	lr
		ul_id -= 32;
  405a7e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  405a80:	4b0a      	ldr	r3, [pc, #40]	; (405aac <pmc_enable_periph_clk+0x50>)
  405a82:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  405a86:	2301      	movs	r3, #1
  405a88:	4083      	lsls	r3, r0
  405a8a:	4393      	bics	r3, r2
  405a8c:	d00b      	beq.n	405aa6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  405a8e:	2301      	movs	r3, #1
  405a90:	fa03 f000 	lsl.w	r0, r3, r0
  405a94:	4b05      	ldr	r3, [pc, #20]	; (405aac <pmc_enable_periph_clk+0x50>)
  405a96:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  405a9a:	2000      	movs	r0, #0
  405a9c:	4770      	bx	lr
		return 1;
  405a9e:	2001      	movs	r0, #1
  405aa0:	4770      	bx	lr
	return 0;
  405aa2:	2000      	movs	r0, #0
  405aa4:	4770      	bx	lr
  405aa6:	2000      	movs	r0, #0
}
  405aa8:	4770      	bx	lr
  405aaa:	bf00      	nop
  405aac:	400e0600 	.word	0x400e0600

00405ab0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  405ab0:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  405ab2:	4b07      	ldr	r3, [pc, #28]	; (405ad0 <spi_enable_clock+0x20>)
  405ab4:	4298      	cmp	r0, r3
  405ab6:	d003      	beq.n	405ac0 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  405ab8:	4b06      	ldr	r3, [pc, #24]	; (405ad4 <spi_enable_clock+0x24>)
  405aba:	4298      	cmp	r0, r3
  405abc:	d004      	beq.n	405ac8 <spi_enable_clock+0x18>
  405abe:	bd08      	pop	{r3, pc}
  405ac0:	2015      	movs	r0, #21
  405ac2:	4b05      	ldr	r3, [pc, #20]	; (405ad8 <spi_enable_clock+0x28>)
  405ac4:	4798      	blx	r3
  405ac6:	bd08      	pop	{r3, pc}
  405ac8:	202a      	movs	r0, #42	; 0x2a
  405aca:	4b03      	ldr	r3, [pc, #12]	; (405ad8 <spi_enable_clock+0x28>)
  405acc:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  405ace:	e7f6      	b.n	405abe <spi_enable_clock+0xe>
  405ad0:	40008000 	.word	0x40008000
  405ad4:	40058000 	.word	0x40058000
  405ad8:	00405a5d 	.word	0x00405a5d

00405adc <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  405adc:	6843      	ldr	r3, [r0, #4]
  405ade:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  405ae2:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  405ae4:	6843      	ldr	r3, [r0, #4]
  405ae6:	0409      	lsls	r1, r1, #16
  405ae8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  405aec:	4319      	orrs	r1, r3
  405aee:	6041      	str	r1, [r0, #4]
  405af0:	4770      	bx	lr

00405af2 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  405af2:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  405af4:	f643 2399 	movw	r3, #15001	; 0x3a99
  405af8:	6904      	ldr	r4, [r0, #16]
  405afa:	f014 0f01 	tst.w	r4, #1
  405afe:	d103      	bne.n	405b08 <spi_read+0x16>
		if (!timeout--) {
  405b00:	3b01      	subs	r3, #1
  405b02:	d1f9      	bne.n	405af8 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  405b04:	2001      	movs	r0, #1
  405b06:	e009      	b.n	405b1c <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  405b08:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  405b0a:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  405b0c:	f010 0f02 	tst.w	r0, #2
  405b10:	d002      	beq.n	405b18 <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  405b12:	f3c3 4003 	ubfx	r0, r3, #16, #4
  405b16:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  405b18:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  405b1a:	2000      	movs	r0, #0
}
  405b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  405b20:	4770      	bx	lr

00405b22 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  405b22:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  405b24:	f643 2499 	movw	r4, #15001	; 0x3a99
  405b28:	6905      	ldr	r5, [r0, #16]
  405b2a:	f015 0f02 	tst.w	r5, #2
  405b2e:	d103      	bne.n	405b38 <spi_write+0x16>
		if (!timeout--) {
  405b30:	3c01      	subs	r4, #1
  405b32:	d1f9      	bne.n	405b28 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  405b34:	2001      	movs	r0, #1
  405b36:	e00c      	b.n	405b52 <spi_write+0x30>
  405b38:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  405b3a:	f014 0f02 	tst.w	r4, #2
  405b3e:	d006      	beq.n	405b4e <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  405b40:	0412      	lsls	r2, r2, #16
  405b42:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  405b46:	4311      	orrs	r1, r2
		if (uc_last) {
  405b48:	b10b      	cbz	r3, 405b4e <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  405b4a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  405b4e:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  405b50:	2000      	movs	r0, #0
}
  405b52:	bc30      	pop	{r4, r5}
  405b54:	4770      	bx	lr

00405b56 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  405b56:	b932      	cbnz	r2, 405b66 <spi_set_clock_polarity+0x10>
  405b58:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  405b5c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405b5e:	f023 0301 	bic.w	r3, r3, #1
  405b62:	6303      	str	r3, [r0, #48]	; 0x30
  405b64:	4770      	bx	lr
  405b66:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  405b6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405b6c:	f043 0301 	orr.w	r3, r3, #1
  405b70:	6303      	str	r3, [r0, #48]	; 0x30
  405b72:	4770      	bx	lr

00405b74 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  405b74:	b932      	cbnz	r2, 405b84 <spi_set_clock_phase+0x10>
  405b76:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  405b7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405b7c:	f023 0302 	bic.w	r3, r3, #2
  405b80:	6303      	str	r3, [r0, #48]	; 0x30
  405b82:	4770      	bx	lr
  405b84:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  405b88:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405b8a:	f043 0302 	orr.w	r3, r3, #2
  405b8e:	6303      	str	r3, [r0, #48]	; 0x30
  405b90:	4770      	bx	lr

00405b92 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  405b92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  405b96:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  405b98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  405b9c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  405b9e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  405ba0:	431a      	orrs	r2, r3
  405ba2:	630a      	str	r2, [r1, #48]	; 0x30
  405ba4:	4770      	bx	lr

00405ba6 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  405ba6:	1e43      	subs	r3, r0, #1
  405ba8:	4419      	add	r1, r3
  405baa:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  405bae:	1e43      	subs	r3, r0, #1
  405bb0:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  405bb2:	bf94      	ite	ls
  405bb4:	b200      	sxthls	r0, r0
		return -1;
  405bb6:	f04f 30ff 	movhi.w	r0, #4294967295
}
  405bba:	4770      	bx	lr

00405bbc <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  405bbc:	b17a      	cbz	r2, 405bde <spi_set_baudrate_div+0x22>
{
  405bbe:	b410      	push	{r4}
  405bc0:	4614      	mov	r4, r2
  405bc2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  405bc6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  405bc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  405bcc:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  405bce:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  405bd0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  405bd4:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  405bd6:	2000      	movs	r0, #0
}
  405bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
  405bdc:	4770      	bx	lr
        return -1;
  405bde:	f04f 30ff 	mov.w	r0, #4294967295
  405be2:	4770      	bx	lr

00405be4 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  405be4:	b410      	push	{r4}
  405be6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  405bea:	6b08      	ldr	r0, [r1, #48]	; 0x30
  405bec:	b280      	uxth	r0, r0
  405bee:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  405bf0:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  405bf2:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  405bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405bfa:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  405bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
  405c00:	4770      	bx	lr

00405c02 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  405c02:	6943      	ldr	r3, [r0, #20]
  405c04:	f013 0f02 	tst.w	r3, #2
  405c08:	d002      	beq.n	405c10 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  405c0a:	61c1      	str	r1, [r0, #28]
	return 0;
  405c0c:	2000      	movs	r0, #0
  405c0e:	4770      	bx	lr
		return 1;
  405c10:	2001      	movs	r0, #1
}
  405c12:	4770      	bx	lr

00405c14 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  405c14:	6943      	ldr	r3, [r0, #20]
  405c16:	f013 0f01 	tst.w	r3, #1
  405c1a:	d003      	beq.n	405c24 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  405c1c:	6983      	ldr	r3, [r0, #24]
  405c1e:	700b      	strb	r3, [r1, #0]
	return 0;
  405c20:	2000      	movs	r0, #0
  405c22:	4770      	bx	lr
		return 1;
  405c24:	2001      	movs	r0, #1
}
  405c26:	4770      	bx	lr

00405c28 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  405c28:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  405c2a:	010b      	lsls	r3, r1, #4
  405c2c:	4293      	cmp	r3, r2
  405c2e:	d914      	bls.n	405c5a <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  405c30:	00c9      	lsls	r1, r1, #3
  405c32:	084b      	lsrs	r3, r1, #1
  405c34:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  405c38:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  405c3c:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  405c3e:	1e5c      	subs	r4, r3, #1
  405c40:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  405c44:	428c      	cmp	r4, r1
  405c46:	d901      	bls.n	405c4c <usart_set_async_baudrate+0x24>
		return 1;
  405c48:	2001      	movs	r0, #1
  405c4a:	e017      	b.n	405c7c <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  405c4c:	6841      	ldr	r1, [r0, #4]
  405c4e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  405c52:	6041      	str	r1, [r0, #4]
  405c54:	e00c      	b.n	405c70 <usart_set_async_baudrate+0x48>
		return 1;
  405c56:	2001      	movs	r0, #1
  405c58:	e010      	b.n	405c7c <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  405c5a:	0859      	lsrs	r1, r3, #1
  405c5c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  405c60:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  405c64:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  405c66:	1e5c      	subs	r4, r3, #1
  405c68:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  405c6c:	428c      	cmp	r4, r1
  405c6e:	d8f2      	bhi.n	405c56 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  405c70:	0412      	lsls	r2, r2, #16
  405c72:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  405c76:	431a      	orrs	r2, r3
  405c78:	6202      	str	r2, [r0, #32]

	return 0;
  405c7a:	2000      	movs	r0, #0
}
  405c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  405c80:	4770      	bx	lr
	...

00405c84 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  405c84:	4b08      	ldr	r3, [pc, #32]	; (405ca8 <usart_reset+0x24>)
  405c86:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  405c8a:	2300      	movs	r3, #0
  405c8c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  405c8e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  405c90:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  405c92:	2388      	movs	r3, #136	; 0x88
  405c94:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  405c96:	2324      	movs	r3, #36	; 0x24
  405c98:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  405c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
  405c9e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  405ca0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  405ca4:	6003      	str	r3, [r0, #0]
  405ca6:	4770      	bx	lr
  405ca8:	55534100 	.word	0x55534100

00405cac <usart_init_rs232>:
{
  405cac:	b570      	push	{r4, r5, r6, lr}
  405cae:	4605      	mov	r5, r0
  405cb0:	460c      	mov	r4, r1
  405cb2:	4616      	mov	r6, r2
	usart_reset(p_usart);
  405cb4:	4b0f      	ldr	r3, [pc, #60]	; (405cf4 <usart_init_rs232+0x48>)
  405cb6:	4798      	blx	r3
	ul_reg_val = 0;
  405cb8:	2200      	movs	r2, #0
  405cba:	4b0f      	ldr	r3, [pc, #60]	; (405cf8 <usart_init_rs232+0x4c>)
  405cbc:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  405cbe:	b1a4      	cbz	r4, 405cea <usart_init_rs232+0x3e>
  405cc0:	4632      	mov	r2, r6
  405cc2:	6821      	ldr	r1, [r4, #0]
  405cc4:	4628      	mov	r0, r5
  405cc6:	4b0d      	ldr	r3, [pc, #52]	; (405cfc <usart_init_rs232+0x50>)
  405cc8:	4798      	blx	r3
  405cca:	4602      	mov	r2, r0
  405ccc:	b978      	cbnz	r0, 405cee <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405cce:	6863      	ldr	r3, [r4, #4]
  405cd0:	68a1      	ldr	r1, [r4, #8]
  405cd2:	430b      	orrs	r3, r1
  405cd4:	6921      	ldr	r1, [r4, #16]
  405cd6:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  405cd8:	68e1      	ldr	r1, [r4, #12]
  405cda:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405cdc:	4906      	ldr	r1, [pc, #24]	; (405cf8 <usart_init_rs232+0x4c>)
  405cde:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  405ce0:	6869      	ldr	r1, [r5, #4]
  405ce2:	430b      	orrs	r3, r1
  405ce4:	606b      	str	r3, [r5, #4]
}
  405ce6:	4610      	mov	r0, r2
  405ce8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  405cea:	2201      	movs	r2, #1
  405cec:	e7fb      	b.n	405ce6 <usart_init_rs232+0x3a>
  405cee:	2201      	movs	r2, #1
  405cf0:	e7f9      	b.n	405ce6 <usart_init_rs232+0x3a>
  405cf2:	bf00      	nop
  405cf4:	00405c85 	.word	0x00405c85
  405cf8:	2040c3f0 	.word	0x2040c3f0
  405cfc:	00405c29 	.word	0x00405c29

00405d00 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  405d00:	2340      	movs	r3, #64	; 0x40
  405d02:	6003      	str	r3, [r0, #0]
  405d04:	4770      	bx	lr

00405d06 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  405d06:	2310      	movs	r3, #16
  405d08:	6003      	str	r3, [r0, #0]
  405d0a:	4770      	bx	lr

00405d0c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  405d0c:	6943      	ldr	r3, [r0, #20]
  405d0e:	f013 0f02 	tst.w	r3, #2
  405d12:	d004      	beq.n	405d1e <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  405d14:	f3c1 0108 	ubfx	r1, r1, #0, #9
  405d18:	61c1      	str	r1, [r0, #28]
	return 0;
  405d1a:	2000      	movs	r0, #0
  405d1c:	4770      	bx	lr
		return 1;
  405d1e:	2001      	movs	r0, #1
}
  405d20:	4770      	bx	lr

00405d22 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  405d22:	6943      	ldr	r3, [r0, #20]
  405d24:	f013 0f01 	tst.w	r3, #1
  405d28:	d005      	beq.n	405d36 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  405d2a:	6983      	ldr	r3, [r0, #24]
  405d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  405d30:	600b      	str	r3, [r1, #0]
	return 0;
  405d32:	2000      	movs	r0, #0
  405d34:	4770      	bx	lr
		return 1;
  405d36:	2001      	movs	r0, #1
}
  405d38:	4770      	bx	lr

00405d3a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  405d3a:	e7fe      	b.n	405d3a <Dummy_Handler>

00405d3c <Reset_Handler>:
{
  405d3c:	b500      	push	{lr}
  405d3e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  405d40:	4b25      	ldr	r3, [pc, #148]	; (405dd8 <Reset_Handler+0x9c>)
  405d42:	4a26      	ldr	r2, [pc, #152]	; (405ddc <Reset_Handler+0xa0>)
  405d44:	429a      	cmp	r2, r3
  405d46:	d010      	beq.n	405d6a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  405d48:	4b25      	ldr	r3, [pc, #148]	; (405de0 <Reset_Handler+0xa4>)
  405d4a:	4a23      	ldr	r2, [pc, #140]	; (405dd8 <Reset_Handler+0x9c>)
  405d4c:	429a      	cmp	r2, r3
  405d4e:	d20c      	bcs.n	405d6a <Reset_Handler+0x2e>
  405d50:	3b01      	subs	r3, #1
  405d52:	1a9b      	subs	r3, r3, r2
  405d54:	f023 0303 	bic.w	r3, r3, #3
  405d58:	3304      	adds	r3, #4
  405d5a:	4413      	add	r3, r2
  405d5c:	491f      	ldr	r1, [pc, #124]	; (405ddc <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  405d5e:	f851 0b04 	ldr.w	r0, [r1], #4
  405d62:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  405d66:	429a      	cmp	r2, r3
  405d68:	d1f9      	bne.n	405d5e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  405d6a:	4b1e      	ldr	r3, [pc, #120]	; (405de4 <Reset_Handler+0xa8>)
  405d6c:	4a1e      	ldr	r2, [pc, #120]	; (405de8 <Reset_Handler+0xac>)
  405d6e:	429a      	cmp	r2, r3
  405d70:	d20a      	bcs.n	405d88 <Reset_Handler+0x4c>
  405d72:	3b01      	subs	r3, #1
  405d74:	1a9b      	subs	r3, r3, r2
  405d76:	f023 0303 	bic.w	r3, r3, #3
  405d7a:	3304      	adds	r3, #4
  405d7c:	4413      	add	r3, r2
                *pDest++ = 0;
  405d7e:	2100      	movs	r1, #0
  405d80:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  405d84:	4293      	cmp	r3, r2
  405d86:	d1fb      	bne.n	405d80 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  405d88:	4a18      	ldr	r2, [pc, #96]	; (405dec <Reset_Handler+0xb0>)
  405d8a:	4b19      	ldr	r3, [pc, #100]	; (405df0 <Reset_Handler+0xb4>)
  405d8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405d90:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405d92:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  405d96:	fab3 f383 	clz	r3, r3
  405d9a:	095b      	lsrs	r3, r3, #5
  405d9c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  405d9e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  405da0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405da4:	2200      	movs	r2, #0
  405da6:	4b13      	ldr	r3, [pc, #76]	; (405df4 <Reset_Handler+0xb8>)
  405da8:	701a      	strb	r2, [r3, #0]
	return flags;
  405daa:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  405dac:	4a12      	ldr	r2, [pc, #72]	; (405df8 <Reset_Handler+0xbc>)
  405dae:	6813      	ldr	r3, [r2, #0]
  405db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  405db4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  405db6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405dba:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  405dbe:	b129      	cbz	r1, 405dcc <Reset_Handler+0x90>
		cpu_irq_enable();
  405dc0:	2201      	movs	r2, #1
  405dc2:	4b0c      	ldr	r3, [pc, #48]	; (405df4 <Reset_Handler+0xb8>)
  405dc4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  405dc6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405dca:	b662      	cpsie	i
        __libc_init_array();
  405dcc:	4b0b      	ldr	r3, [pc, #44]	; (405dfc <Reset_Handler+0xc0>)
  405dce:	4798      	blx	r3
        main();
  405dd0:	4b0b      	ldr	r3, [pc, #44]	; (405e00 <Reset_Handler+0xc4>)
  405dd2:	4798      	blx	r3
  405dd4:	e7fe      	b.n	405dd4 <Reset_Handler+0x98>
  405dd6:	bf00      	nop
  405dd8:	20400000 	.word	0x20400000
  405ddc:	0040ea4c 	.word	0x0040ea4c
  405de0:	204009e8 	.word	0x204009e8
  405de4:	2040d1cc 	.word	0x2040d1cc
  405de8:	204009e8 	.word	0x204009e8
  405dec:	e000ed00 	.word	0xe000ed00
  405df0:	00400000 	.word	0x00400000
  405df4:	20400018 	.word	0x20400018
  405df8:	e000ed88 	.word	0xe000ed88
  405dfc:	00406c4d 	.word	0x00406c4d
  405e00:	00406bd1 	.word	0x00406bd1

00405e04 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  405e04:	4b3b      	ldr	r3, [pc, #236]	; (405ef4 <SystemCoreClockUpdate+0xf0>)
  405e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405e08:	f003 0303 	and.w	r3, r3, #3
  405e0c:	2b01      	cmp	r3, #1
  405e0e:	d01d      	beq.n	405e4c <SystemCoreClockUpdate+0x48>
  405e10:	b183      	cbz	r3, 405e34 <SystemCoreClockUpdate+0x30>
  405e12:	2b02      	cmp	r3, #2
  405e14:	d036      	beq.n	405e84 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  405e16:	4b37      	ldr	r3, [pc, #220]	; (405ef4 <SystemCoreClockUpdate+0xf0>)
  405e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405e1e:	2b70      	cmp	r3, #112	; 0x70
  405e20:	d05f      	beq.n	405ee2 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  405e22:	4b34      	ldr	r3, [pc, #208]	; (405ef4 <SystemCoreClockUpdate+0xf0>)
  405e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405e26:	4934      	ldr	r1, [pc, #208]	; (405ef8 <SystemCoreClockUpdate+0xf4>)
  405e28:	f3c2 1202 	ubfx	r2, r2, #4, #3
  405e2c:	680b      	ldr	r3, [r1, #0]
  405e2e:	40d3      	lsrs	r3, r2
  405e30:	600b      	str	r3, [r1, #0]
  405e32:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  405e34:	4b31      	ldr	r3, [pc, #196]	; (405efc <SystemCoreClockUpdate+0xf8>)
  405e36:	695b      	ldr	r3, [r3, #20]
  405e38:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  405e3c:	bf14      	ite	ne
  405e3e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  405e42:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  405e46:	4b2c      	ldr	r3, [pc, #176]	; (405ef8 <SystemCoreClockUpdate+0xf4>)
  405e48:	601a      	str	r2, [r3, #0]
  405e4a:	e7e4      	b.n	405e16 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405e4c:	4b29      	ldr	r3, [pc, #164]	; (405ef4 <SystemCoreClockUpdate+0xf0>)
  405e4e:	6a1b      	ldr	r3, [r3, #32]
  405e50:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405e54:	d003      	beq.n	405e5e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  405e56:	4a2a      	ldr	r2, [pc, #168]	; (405f00 <SystemCoreClockUpdate+0xfc>)
  405e58:	4b27      	ldr	r3, [pc, #156]	; (405ef8 <SystemCoreClockUpdate+0xf4>)
  405e5a:	601a      	str	r2, [r3, #0]
  405e5c:	e7db      	b.n	405e16 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405e5e:	4a29      	ldr	r2, [pc, #164]	; (405f04 <SystemCoreClockUpdate+0x100>)
  405e60:	4b25      	ldr	r3, [pc, #148]	; (405ef8 <SystemCoreClockUpdate+0xf4>)
  405e62:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405e64:	4b23      	ldr	r3, [pc, #140]	; (405ef4 <SystemCoreClockUpdate+0xf0>)
  405e66:	6a1b      	ldr	r3, [r3, #32]
  405e68:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405e6c:	2b10      	cmp	r3, #16
  405e6e:	d005      	beq.n	405e7c <SystemCoreClockUpdate+0x78>
  405e70:	2b20      	cmp	r3, #32
  405e72:	d1d0      	bne.n	405e16 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  405e74:	4a22      	ldr	r2, [pc, #136]	; (405f00 <SystemCoreClockUpdate+0xfc>)
  405e76:	4b20      	ldr	r3, [pc, #128]	; (405ef8 <SystemCoreClockUpdate+0xf4>)
  405e78:	601a      	str	r2, [r3, #0]
          break;
  405e7a:	e7cc      	b.n	405e16 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  405e7c:	4a22      	ldr	r2, [pc, #136]	; (405f08 <SystemCoreClockUpdate+0x104>)
  405e7e:	4b1e      	ldr	r3, [pc, #120]	; (405ef8 <SystemCoreClockUpdate+0xf4>)
  405e80:	601a      	str	r2, [r3, #0]
          break;
  405e82:	e7c8      	b.n	405e16 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405e84:	4b1b      	ldr	r3, [pc, #108]	; (405ef4 <SystemCoreClockUpdate+0xf0>)
  405e86:	6a1b      	ldr	r3, [r3, #32]
  405e88:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405e8c:	d016      	beq.n	405ebc <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  405e8e:	4a1c      	ldr	r2, [pc, #112]	; (405f00 <SystemCoreClockUpdate+0xfc>)
  405e90:	4b19      	ldr	r3, [pc, #100]	; (405ef8 <SystemCoreClockUpdate+0xf4>)
  405e92:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  405e94:	4b17      	ldr	r3, [pc, #92]	; (405ef4 <SystemCoreClockUpdate+0xf0>)
  405e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405e98:	f003 0303 	and.w	r3, r3, #3
  405e9c:	2b02      	cmp	r3, #2
  405e9e:	d1ba      	bne.n	405e16 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405ea0:	4a14      	ldr	r2, [pc, #80]	; (405ef4 <SystemCoreClockUpdate+0xf0>)
  405ea2:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405ea4:	6a92      	ldr	r2, [r2, #40]	; 0x28
  405ea6:	4814      	ldr	r0, [pc, #80]	; (405ef8 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405ea8:	f3c1 410a 	ubfx	r1, r1, #16, #11
  405eac:	6803      	ldr	r3, [r0, #0]
  405eae:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405eb2:	b2d2      	uxtb	r2, r2
  405eb4:	fbb3 f3f2 	udiv	r3, r3, r2
  405eb8:	6003      	str	r3, [r0, #0]
  405eba:	e7ac      	b.n	405e16 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405ebc:	4a11      	ldr	r2, [pc, #68]	; (405f04 <SystemCoreClockUpdate+0x100>)
  405ebe:	4b0e      	ldr	r3, [pc, #56]	; (405ef8 <SystemCoreClockUpdate+0xf4>)
  405ec0:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405ec2:	4b0c      	ldr	r3, [pc, #48]	; (405ef4 <SystemCoreClockUpdate+0xf0>)
  405ec4:	6a1b      	ldr	r3, [r3, #32]
  405ec6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405eca:	2b10      	cmp	r3, #16
  405ecc:	d005      	beq.n	405eda <SystemCoreClockUpdate+0xd6>
  405ece:	2b20      	cmp	r3, #32
  405ed0:	d1e0      	bne.n	405e94 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  405ed2:	4a0b      	ldr	r2, [pc, #44]	; (405f00 <SystemCoreClockUpdate+0xfc>)
  405ed4:	4b08      	ldr	r3, [pc, #32]	; (405ef8 <SystemCoreClockUpdate+0xf4>)
  405ed6:	601a      	str	r2, [r3, #0]
          break;
  405ed8:	e7dc      	b.n	405e94 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  405eda:	4a0b      	ldr	r2, [pc, #44]	; (405f08 <SystemCoreClockUpdate+0x104>)
  405edc:	4b06      	ldr	r3, [pc, #24]	; (405ef8 <SystemCoreClockUpdate+0xf4>)
  405ede:	601a      	str	r2, [r3, #0]
          break;
  405ee0:	e7d8      	b.n	405e94 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  405ee2:	4a05      	ldr	r2, [pc, #20]	; (405ef8 <SystemCoreClockUpdate+0xf4>)
  405ee4:	6813      	ldr	r3, [r2, #0]
  405ee6:	4909      	ldr	r1, [pc, #36]	; (405f0c <SystemCoreClockUpdate+0x108>)
  405ee8:	fba1 1303 	umull	r1, r3, r1, r3
  405eec:	085b      	lsrs	r3, r3, #1
  405eee:	6013      	str	r3, [r2, #0]
  405ef0:	4770      	bx	lr
  405ef2:	bf00      	nop
  405ef4:	400e0600 	.word	0x400e0600
  405ef8:	2040001c 	.word	0x2040001c
  405efc:	400e1810 	.word	0x400e1810
  405f00:	00b71b00 	.word	0x00b71b00
  405f04:	003d0900 	.word	0x003d0900
  405f08:	007a1200 	.word	0x007a1200
  405f0c:	aaaaaaab 	.word	0xaaaaaaab

00405f10 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  405f10:	4b12      	ldr	r3, [pc, #72]	; (405f5c <system_init_flash+0x4c>)
  405f12:	4298      	cmp	r0, r3
  405f14:	d911      	bls.n	405f3a <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  405f16:	4b12      	ldr	r3, [pc, #72]	; (405f60 <system_init_flash+0x50>)
  405f18:	4298      	cmp	r0, r3
  405f1a:	d913      	bls.n	405f44 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  405f1c:	4b11      	ldr	r3, [pc, #68]	; (405f64 <system_init_flash+0x54>)
  405f1e:	4298      	cmp	r0, r3
  405f20:	d914      	bls.n	405f4c <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  405f22:	4b11      	ldr	r3, [pc, #68]	; (405f68 <system_init_flash+0x58>)
  405f24:	4298      	cmp	r0, r3
  405f26:	d915      	bls.n	405f54 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  405f28:	4b10      	ldr	r3, [pc, #64]	; (405f6c <system_init_flash+0x5c>)
  405f2a:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  405f2c:	bf94      	ite	ls
  405f2e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  405f32:	4a0f      	ldrhi	r2, [pc, #60]	; (405f70 <system_init_flash+0x60>)
  405f34:	4b0f      	ldr	r3, [pc, #60]	; (405f74 <system_init_flash+0x64>)
  405f36:	601a      	str	r2, [r3, #0]
  405f38:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  405f3a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  405f3e:	4b0d      	ldr	r3, [pc, #52]	; (405f74 <system_init_flash+0x64>)
  405f40:	601a      	str	r2, [r3, #0]
  405f42:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  405f44:	4a0c      	ldr	r2, [pc, #48]	; (405f78 <system_init_flash+0x68>)
  405f46:	4b0b      	ldr	r3, [pc, #44]	; (405f74 <system_init_flash+0x64>)
  405f48:	601a      	str	r2, [r3, #0]
  405f4a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  405f4c:	4a0b      	ldr	r2, [pc, #44]	; (405f7c <system_init_flash+0x6c>)
  405f4e:	4b09      	ldr	r3, [pc, #36]	; (405f74 <system_init_flash+0x64>)
  405f50:	601a      	str	r2, [r3, #0]
  405f52:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  405f54:	4a0a      	ldr	r2, [pc, #40]	; (405f80 <system_init_flash+0x70>)
  405f56:	4b07      	ldr	r3, [pc, #28]	; (405f74 <system_init_flash+0x64>)
  405f58:	601a      	str	r2, [r3, #0]
  405f5a:	4770      	bx	lr
  405f5c:	01312cff 	.word	0x01312cff
  405f60:	026259ff 	.word	0x026259ff
  405f64:	039386ff 	.word	0x039386ff
  405f68:	04c4b3ff 	.word	0x04c4b3ff
  405f6c:	05f5e0ff 	.word	0x05f5e0ff
  405f70:	04000500 	.word	0x04000500
  405f74:	400e0c00 	.word	0x400e0c00
  405f78:	04000100 	.word	0x04000100
  405f7c:	04000200 	.word	0x04000200
  405f80:	04000300 	.word	0x04000300

00405f84 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  405f84:	4b0a      	ldr	r3, [pc, #40]	; (405fb0 <_sbrk+0x2c>)
  405f86:	681b      	ldr	r3, [r3, #0]
  405f88:	b153      	cbz	r3, 405fa0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  405f8a:	4b09      	ldr	r3, [pc, #36]	; (405fb0 <_sbrk+0x2c>)
  405f8c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  405f8e:	181a      	adds	r2, r3, r0
  405f90:	4908      	ldr	r1, [pc, #32]	; (405fb4 <_sbrk+0x30>)
  405f92:	4291      	cmp	r1, r2
  405f94:	db08      	blt.n	405fa8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  405f96:	4610      	mov	r0, r2
  405f98:	4a05      	ldr	r2, [pc, #20]	; (405fb0 <_sbrk+0x2c>)
  405f9a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  405f9c:	4618      	mov	r0, r3
  405f9e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  405fa0:	4a05      	ldr	r2, [pc, #20]	; (405fb8 <_sbrk+0x34>)
  405fa2:	4b03      	ldr	r3, [pc, #12]	; (405fb0 <_sbrk+0x2c>)
  405fa4:	601a      	str	r2, [r3, #0]
  405fa6:	e7f0      	b.n	405f8a <_sbrk+0x6>
		return (caddr_t) -1;	
  405fa8:	f04f 30ff 	mov.w	r0, #4294967295
}
  405fac:	4770      	bx	lr
  405fae:	bf00      	nop
  405fb0:	2040c3f4 	.word	0x2040c3f4
  405fb4:	2045fffc 	.word	0x2045fffc
  405fb8:	2040f3d0 	.word	0x2040f3d0

00405fbc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  405fbc:	f04f 30ff 	mov.w	r0, #4294967295
  405fc0:	4770      	bx	lr

00405fc2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  405fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  405fc6:	604b      	str	r3, [r1, #4]

	return 0;
}
  405fc8:	2000      	movs	r0, #0
  405fca:	4770      	bx	lr

00405fcc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  405fcc:	2001      	movs	r0, #1
  405fce:	4770      	bx	lr

00405fd0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  405fd0:	2000      	movs	r0, #0
  405fd2:	4770      	bx	lr

00405fd4 <AFEC_pot_Callback>:
	afec->AFEC_CSELR = afec_ch;
  405fd4:	4a04      	ldr	r2, [pc, #16]	; (405fe8 <AFEC_pot_Callback+0x14>)
  405fd6:	2301      	movs	r3, #1
  405fd8:	6653      	str	r3, [r2, #100]	; 0x64
	return afec->AFEC_CDR;
  405fda:	6e91      	ldr	r1, [r2, #104]	; 0x68
/************************************************************************/



static void AFEC_pot_Callback(void){
  g_ul_value = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  405fdc:	4a03      	ldr	r2, [pc, #12]	; (405fec <AFEC_pot_Callback+0x18>)
  405fde:	6011      	str	r1, [r2, #0]
  g_is_conversion_done = true;
  405fe0:	4a03      	ldr	r2, [pc, #12]	; (405ff0 <AFEC_pot_Callback+0x1c>)
  405fe2:	7013      	strb	r3, [r2, #0]
  405fe4:	4770      	bx	lr
  405fe6:	bf00      	nop
  405fe8:	40064000 	.word	0x40064000
  405fec:	2040cef0 	.word	0x2040cef0
  405ff0:	2040c3fc 	.word	0x2040c3fc

00405ff4 <resolve_cb>:
* \param[in] hostIp Server IP.
*
* \return None.
*/
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
  405ff4:	b510      	push	{r4, lr}
  405ff6:	b082      	sub	sp, #8
	gu32HostIp = hostIp;
  405ff8:	4b07      	ldr	r3, [pc, #28]	; (406018 <resolve_cb+0x24>)
  405ffa:	6019      	str	r1, [r3, #0]
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
	(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
	(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  405ffc:	0e0b      	lsrs	r3, r1, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  405ffe:	9301      	str	r3, [sp, #4]
  406000:	f3c1 4307 	ubfx	r3, r1, #16, #8
  406004:	9300      	str	r3, [sp, #0]
  406006:	f3c1 2307 	ubfx	r3, r1, #8, #8
  40600a:	b2ca      	uxtb	r2, r1
  40600c:	4601      	mov	r1, r0
  40600e:	4803      	ldr	r0, [pc, #12]	; (40601c <resolve_cb+0x28>)
  406010:	4c03      	ldr	r4, [pc, #12]	; (406020 <resolve_cb+0x2c>)
  406012:	47a0      	blx	r4
}
  406014:	b002      	add	sp, #8
  406016:	bd10      	pop	{r4, pc}
  406018:	2040cef8 	.word	0x2040cef8
  40601c:	0040e35c 	.word	0x0040e35c
  406020:	00406c9d 	.word	0x00406c9d

00406024 <but_callback>:
			default: state = WAIT;
		}
	}
}

void but_callback(void){
  406024:	b500      	push	{lr}
  406026:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  406028:	a902      	add	r1, sp, #8
  40602a:	2300      	movs	r3, #0
  40602c:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(ySemaphore,&xHigherPriorityTaskWoken);
  406030:	4b06      	ldr	r3, [pc, #24]	; (40604c <but_callback+0x28>)
  406032:	6818      	ldr	r0, [r3, #0]
  406034:	4b06      	ldr	r3, [pc, #24]	; (406050 <but_callback+0x2c>)
  406036:	4798      	blx	r3
	but_value = !but_value;
  406038:	4a06      	ldr	r2, [pc, #24]	; (406054 <but_callback+0x30>)
  40603a:	6813      	ldr	r3, [r2, #0]
  40603c:	fab3 f383 	clz	r3, r3
  406040:	095b      	lsrs	r3, r3, #5
  406042:	6013      	str	r3, [r2, #0]
}
  406044:	b003      	add	sp, #12
  406046:	f85d fb04 	ldr.w	pc, [sp], #4
  40604a:	bf00      	nop
  40604c:	2040d198 	.word	0x2040d198
  406050:	00401399 	.word	0x00401399
  406054:	2040c3f8 	.word	0x2040c3f8

00406058 <usart_serial_getchar>:
{
  406058:	b5f0      	push	{r4, r5, r6, r7, lr}
  40605a:	b083      	sub	sp, #12
  40605c:	4605      	mov	r5, r0
  40605e:	460c      	mov	r4, r1
	uint32_t val = 0;
  406060:	2300      	movs	r3, #0
  406062:	9301      	str	r3, [sp, #4]
	if (UART0 == (Uart*)p_usart) {
  406064:	4b2a      	ldr	r3, [pc, #168]	; (406110 <usart_serial_getchar+0xb8>)
  406066:	4298      	cmp	r0, r3
  406068:	d013      	beq.n	406092 <usart_serial_getchar+0x3a>
	if (UART1 == (Uart*)p_usart) {
  40606a:	4b2a      	ldr	r3, [pc, #168]	; (406114 <usart_serial_getchar+0xbc>)
  40606c:	4298      	cmp	r0, r3
  40606e:	d018      	beq.n	4060a2 <usart_serial_getchar+0x4a>
	if (UART2 == (Uart*)p_usart) {
  406070:	4b29      	ldr	r3, [pc, #164]	; (406118 <usart_serial_getchar+0xc0>)
  406072:	4298      	cmp	r0, r3
  406074:	d01d      	beq.n	4060b2 <usart_serial_getchar+0x5a>
	if (UART3 == (Uart*)p_usart) {
  406076:	4b29      	ldr	r3, [pc, #164]	; (40611c <usart_serial_getchar+0xc4>)
  406078:	429d      	cmp	r5, r3
  40607a:	d022      	beq.n	4060c2 <usart_serial_getchar+0x6a>
	if (USART0 == p_usart) {
  40607c:	4b28      	ldr	r3, [pc, #160]	; (406120 <usart_serial_getchar+0xc8>)
  40607e:	429d      	cmp	r5, r3
  406080:	d027      	beq.n	4060d2 <usart_serial_getchar+0x7a>
	if (USART1 == p_usart) {
  406082:	4b28      	ldr	r3, [pc, #160]	; (406124 <usart_serial_getchar+0xcc>)
  406084:	429d      	cmp	r5, r3
  406086:	d02e      	beq.n	4060e6 <usart_serial_getchar+0x8e>
	if (USART2 == p_usart) {
  406088:	4b27      	ldr	r3, [pc, #156]	; (406128 <usart_serial_getchar+0xd0>)
  40608a:	429d      	cmp	r5, r3
  40608c:	d035      	beq.n	4060fa <usart_serial_getchar+0xa2>
}
  40608e:	b003      	add	sp, #12
  406090:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  406092:	461f      	mov	r7, r3
  406094:	4e25      	ldr	r6, [pc, #148]	; (40612c <usart_serial_getchar+0xd4>)
  406096:	4621      	mov	r1, r4
  406098:	4638      	mov	r0, r7
  40609a:	47b0      	blx	r6
  40609c:	2800      	cmp	r0, #0
  40609e:	d1fa      	bne.n	406096 <usart_serial_getchar+0x3e>
  4060a0:	e7e9      	b.n	406076 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4060a2:	461f      	mov	r7, r3
  4060a4:	4e21      	ldr	r6, [pc, #132]	; (40612c <usart_serial_getchar+0xd4>)
  4060a6:	4621      	mov	r1, r4
  4060a8:	4638      	mov	r0, r7
  4060aa:	47b0      	blx	r6
  4060ac:	2800      	cmp	r0, #0
  4060ae:	d1fa      	bne.n	4060a6 <usart_serial_getchar+0x4e>
  4060b0:	e7e4      	b.n	40607c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4060b2:	461f      	mov	r7, r3
  4060b4:	4e1d      	ldr	r6, [pc, #116]	; (40612c <usart_serial_getchar+0xd4>)
  4060b6:	4621      	mov	r1, r4
  4060b8:	4638      	mov	r0, r7
  4060ba:	47b0      	blx	r6
  4060bc:	2800      	cmp	r0, #0
  4060be:	d1fa      	bne.n	4060b6 <usart_serial_getchar+0x5e>
  4060c0:	e7df      	b.n	406082 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4060c2:	461f      	mov	r7, r3
  4060c4:	4e19      	ldr	r6, [pc, #100]	; (40612c <usart_serial_getchar+0xd4>)
  4060c6:	4621      	mov	r1, r4
  4060c8:	4638      	mov	r0, r7
  4060ca:	47b0      	blx	r6
  4060cc:	2800      	cmp	r0, #0
  4060ce:	d1fa      	bne.n	4060c6 <usart_serial_getchar+0x6e>
  4060d0:	e7da      	b.n	406088 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4060d2:	461e      	mov	r6, r3
  4060d4:	4d16      	ldr	r5, [pc, #88]	; (406130 <usart_serial_getchar+0xd8>)
  4060d6:	a901      	add	r1, sp, #4
  4060d8:	4630      	mov	r0, r6
  4060da:	47a8      	blx	r5
  4060dc:	2800      	cmp	r0, #0
  4060de:	d1fa      	bne.n	4060d6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4060e0:	9b01      	ldr	r3, [sp, #4]
  4060e2:	7023      	strb	r3, [r4, #0]
  4060e4:	e7d3      	b.n	40608e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4060e6:	461e      	mov	r6, r3
  4060e8:	4d11      	ldr	r5, [pc, #68]	; (406130 <usart_serial_getchar+0xd8>)
  4060ea:	a901      	add	r1, sp, #4
  4060ec:	4630      	mov	r0, r6
  4060ee:	47a8      	blx	r5
  4060f0:	2800      	cmp	r0, #0
  4060f2:	d1fa      	bne.n	4060ea <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4060f4:	9b01      	ldr	r3, [sp, #4]
  4060f6:	7023      	strb	r3, [r4, #0]
  4060f8:	e7c9      	b.n	40608e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4060fa:	461e      	mov	r6, r3
  4060fc:	4d0c      	ldr	r5, [pc, #48]	; (406130 <usart_serial_getchar+0xd8>)
  4060fe:	a901      	add	r1, sp, #4
  406100:	4630      	mov	r0, r6
  406102:	47a8      	blx	r5
  406104:	2800      	cmp	r0, #0
  406106:	d1fa      	bne.n	4060fe <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  406108:	9b01      	ldr	r3, [sp, #4]
  40610a:	7023      	strb	r3, [r4, #0]
}
  40610c:	e7bf      	b.n	40608e <usart_serial_getchar+0x36>
  40610e:	bf00      	nop
  406110:	400e0800 	.word	0x400e0800
  406114:	400e0a00 	.word	0x400e0a00
  406118:	400e1a00 	.word	0x400e1a00
  40611c:	400e1c00 	.word	0x400e1c00
  406120:	40024000 	.word	0x40024000
  406124:	40028000 	.word	0x40028000
  406128:	4002c000 	.word	0x4002c000
  40612c:	00405c15 	.word	0x00405c15
  406130:	00405d23 	.word	0x00405d23

00406134 <usart_serial_putchar>:
{
  406134:	b570      	push	{r4, r5, r6, lr}
  406136:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  406138:	4b2a      	ldr	r3, [pc, #168]	; (4061e4 <usart_serial_putchar+0xb0>)
  40613a:	4298      	cmp	r0, r3
  40613c:	d013      	beq.n	406166 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40613e:	4b2a      	ldr	r3, [pc, #168]	; (4061e8 <usart_serial_putchar+0xb4>)
  406140:	4298      	cmp	r0, r3
  406142:	d019      	beq.n	406178 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  406144:	4b29      	ldr	r3, [pc, #164]	; (4061ec <usart_serial_putchar+0xb8>)
  406146:	4298      	cmp	r0, r3
  406148:	d01f      	beq.n	40618a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40614a:	4b29      	ldr	r3, [pc, #164]	; (4061f0 <usart_serial_putchar+0xbc>)
  40614c:	4298      	cmp	r0, r3
  40614e:	d025      	beq.n	40619c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  406150:	4b28      	ldr	r3, [pc, #160]	; (4061f4 <usart_serial_putchar+0xc0>)
  406152:	4298      	cmp	r0, r3
  406154:	d02b      	beq.n	4061ae <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  406156:	4b28      	ldr	r3, [pc, #160]	; (4061f8 <usart_serial_putchar+0xc4>)
  406158:	4298      	cmp	r0, r3
  40615a:	d031      	beq.n	4061c0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  40615c:	4b27      	ldr	r3, [pc, #156]	; (4061fc <usart_serial_putchar+0xc8>)
  40615e:	4298      	cmp	r0, r3
  406160:	d037      	beq.n	4061d2 <usart_serial_putchar+0x9e>
	return 0;
  406162:	2000      	movs	r0, #0
}
  406164:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406166:	461e      	mov	r6, r3
  406168:	4d25      	ldr	r5, [pc, #148]	; (406200 <usart_serial_putchar+0xcc>)
  40616a:	4621      	mov	r1, r4
  40616c:	4630      	mov	r0, r6
  40616e:	47a8      	blx	r5
  406170:	2800      	cmp	r0, #0
  406172:	d1fa      	bne.n	40616a <usart_serial_putchar+0x36>
		return 1;
  406174:	2001      	movs	r0, #1
  406176:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406178:	461e      	mov	r6, r3
  40617a:	4d21      	ldr	r5, [pc, #132]	; (406200 <usart_serial_putchar+0xcc>)
  40617c:	4621      	mov	r1, r4
  40617e:	4630      	mov	r0, r6
  406180:	47a8      	blx	r5
  406182:	2800      	cmp	r0, #0
  406184:	d1fa      	bne.n	40617c <usart_serial_putchar+0x48>
		return 1;
  406186:	2001      	movs	r0, #1
  406188:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40618a:	461e      	mov	r6, r3
  40618c:	4d1c      	ldr	r5, [pc, #112]	; (406200 <usart_serial_putchar+0xcc>)
  40618e:	4621      	mov	r1, r4
  406190:	4630      	mov	r0, r6
  406192:	47a8      	blx	r5
  406194:	2800      	cmp	r0, #0
  406196:	d1fa      	bne.n	40618e <usart_serial_putchar+0x5a>
		return 1;
  406198:	2001      	movs	r0, #1
  40619a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40619c:	461e      	mov	r6, r3
  40619e:	4d18      	ldr	r5, [pc, #96]	; (406200 <usart_serial_putchar+0xcc>)
  4061a0:	4621      	mov	r1, r4
  4061a2:	4630      	mov	r0, r6
  4061a4:	47a8      	blx	r5
  4061a6:	2800      	cmp	r0, #0
  4061a8:	d1fa      	bne.n	4061a0 <usart_serial_putchar+0x6c>
		return 1;
  4061aa:	2001      	movs	r0, #1
  4061ac:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4061ae:	461e      	mov	r6, r3
  4061b0:	4d14      	ldr	r5, [pc, #80]	; (406204 <usart_serial_putchar+0xd0>)
  4061b2:	4621      	mov	r1, r4
  4061b4:	4630      	mov	r0, r6
  4061b6:	47a8      	blx	r5
  4061b8:	2800      	cmp	r0, #0
  4061ba:	d1fa      	bne.n	4061b2 <usart_serial_putchar+0x7e>
		return 1;
  4061bc:	2001      	movs	r0, #1
  4061be:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4061c0:	461e      	mov	r6, r3
  4061c2:	4d10      	ldr	r5, [pc, #64]	; (406204 <usart_serial_putchar+0xd0>)
  4061c4:	4621      	mov	r1, r4
  4061c6:	4630      	mov	r0, r6
  4061c8:	47a8      	blx	r5
  4061ca:	2800      	cmp	r0, #0
  4061cc:	d1fa      	bne.n	4061c4 <usart_serial_putchar+0x90>
		return 1;
  4061ce:	2001      	movs	r0, #1
  4061d0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4061d2:	461e      	mov	r6, r3
  4061d4:	4d0b      	ldr	r5, [pc, #44]	; (406204 <usart_serial_putchar+0xd0>)
  4061d6:	4621      	mov	r1, r4
  4061d8:	4630      	mov	r0, r6
  4061da:	47a8      	blx	r5
  4061dc:	2800      	cmp	r0, #0
  4061de:	d1fa      	bne.n	4061d6 <usart_serial_putchar+0xa2>
		return 1;
  4061e0:	2001      	movs	r0, #1
  4061e2:	bd70      	pop	{r4, r5, r6, pc}
  4061e4:	400e0800 	.word	0x400e0800
  4061e8:	400e0a00 	.word	0x400e0a00
  4061ec:	400e1a00 	.word	0x400e1a00
  4061f0:	400e1c00 	.word	0x400e1c00
  4061f4:	40024000 	.word	0x40024000
  4061f8:	40028000 	.word	0x40028000
  4061fc:	4002c000 	.word	0x4002c000
  406200:	00405c03 	.word	0x00405c03
  406204:	00405d0d 	.word	0x00405d0d

00406208 <socket_cb>:
	if (sock == tcp_client_socket) {
  406208:	4b23      	ldr	r3, [pc, #140]	; (406298 <socket_cb+0x90>)
  40620a:	f993 3000 	ldrsb.w	r3, [r3]
  40620e:	4283      	cmp	r3, r0
  406210:	d000      	beq.n	406214 <socket_cb+0xc>
  406212:	4770      	bx	lr
{
  406214:	b510      	push	{r4, lr}
  406216:	b082      	sub	sp, #8
  406218:	4614      	mov	r4, r2
		switch (u8Msg) {
  40621a:	2905      	cmp	r1, #5
  40621c:	d003      	beq.n	406226 <socket_cb+0x1e>
  40621e:	2906      	cmp	r1, #6
  406220:	d01f      	beq.n	406262 <socket_cb+0x5a>
}
  406222:	b002      	add	sp, #8
  406224:	bd10      	pop	{r4, pc}
				printf("socket_msg_connect\n");
  406226:	481d      	ldr	r0, [pc, #116]	; (40629c <socket_cb+0x94>)
  406228:	4b1d      	ldr	r3, [pc, #116]	; (4062a0 <socket_cb+0x98>)
  40622a:	4798      	blx	r3
				if (gbTcpConnection) {
  40622c:	4b1d      	ldr	r3, [pc, #116]	; (4062a4 <socket_cb+0x9c>)
  40622e:	781b      	ldrb	r3, [r3, #0]
  406230:	2b00      	cmp	r3, #0
  406232:	d0f6      	beq.n	406222 <socket_cb+0x1a>
					if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  406234:	b13c      	cbz	r4, 406246 <socket_cb+0x3e>
  406236:	f994 3001 	ldrsb.w	r3, [r4, #1]
  40623a:	2b00      	cmp	r3, #0
  40623c:	db03      	blt.n	406246 <socket_cb+0x3e>
						printf("socket_cb: connect ok \n");
  40623e:	481a      	ldr	r0, [pc, #104]	; (4062a8 <socket_cb+0xa0>)
  406240:	4b17      	ldr	r3, [pc, #92]	; (4062a0 <socket_cb+0x98>)
  406242:	4798      	blx	r3
						gbTcpConnected = true;
  406244:	e7ed      	b.n	406222 <socket_cb+0x1a>
						printf("socket_cb: connect error!\r\n");
  406246:	4819      	ldr	r0, [pc, #100]	; (4062ac <socket_cb+0xa4>)
  406248:	4b15      	ldr	r3, [pc, #84]	; (4062a0 <socket_cb+0x98>)
  40624a:	4798      	blx	r3
						gbTcpConnection = false;
  40624c:	2200      	movs	r2, #0
  40624e:	4b15      	ldr	r3, [pc, #84]	; (4062a4 <socket_cb+0x9c>)
  406250:	701a      	strb	r2, [r3, #0]
						close(tcp_client_socket);
  406252:	4c11      	ldr	r4, [pc, #68]	; (406298 <socket_cb+0x90>)
  406254:	f994 0000 	ldrsb.w	r0, [r4]
  406258:	4b15      	ldr	r3, [pc, #84]	; (4062b0 <socket_cb+0xa8>)
  40625a:	4798      	blx	r3
						tcp_client_socket = -1;
  40625c:	23ff      	movs	r3, #255	; 0xff
  40625e:	7023      	strb	r3, [r4, #0]
  406260:	e7df      	b.n	406222 <socket_cb+0x1a>
				tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
  406262:	9201      	str	r2, [sp, #4]
				if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  406264:	b18a      	cbz	r2, 40628a <socket_cb+0x82>
  406266:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
  40626a:	2a00      	cmp	r2, #0
  40626c:	dd0d      	ble.n	40628a <socket_cb+0x82>
					xQueueSend(xQueueMsg, &pstrRecv, 10);
  40626e:	2300      	movs	r3, #0
  406270:	220a      	movs	r2, #10
  406272:	a901      	add	r1, sp, #4
  406274:	480f      	ldr	r0, [pc, #60]	; (4062b4 <socket_cb+0xac>)
  406276:	6800      	ldr	r0, [r0, #0]
  406278:	4c0f      	ldr	r4, [pc, #60]	; (4062b8 <socket_cb+0xb0>)
  40627a:	47a0      	blx	r4
					xSemaphoreGive( xSemaphore );
  40627c:	2300      	movs	r3, #0
  40627e:	461a      	mov	r2, r3
  406280:	4619      	mov	r1, r3
  406282:	480e      	ldr	r0, [pc, #56]	; (4062bc <socket_cb+0xb4>)
  406284:	6800      	ldr	r0, [r0, #0]
  406286:	47a0      	blx	r4
  406288:	e7cb      	b.n	406222 <socket_cb+0x1a>
					close(tcp_client_socket);
  40628a:	4618      	mov	r0, r3
  40628c:	4b08      	ldr	r3, [pc, #32]	; (4062b0 <socket_cb+0xa8>)
  40628e:	4798      	blx	r3
					tcp_client_socket = -1;
  406290:	22ff      	movs	r2, #255	; 0xff
  406292:	4b01      	ldr	r3, [pc, #4]	; (406298 <socket_cb+0x90>)
  406294:	701a      	strb	r2, [r3, #0]
}
  406296:	e7c4      	b.n	406222 <socket_cb+0x1a>
  406298:	20400038 	.word	0x20400038
  40629c:	0040e38c 	.word	0x0040e38c
  4062a0:	00406c9d 	.word	0x00406c9d
  4062a4:	2040cef4 	.word	0x2040cef4
  4062a8:	0040e3a0 	.word	0x0040e3a0
  4062ac:	0040e3b8 	.word	0x0040e3b8
  4062b0:	0040507d 	.word	0x0040507d
  4062b4:	2040d110 	.word	0x2040d110
  4062b8:	004010b5 	.word	0x004010b5
  4062bc:	2040d114 	.word	0x2040d114

004062c0 <task_process>:
static void task_process(void *pvParameters) {
  4062c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062c4:	b08f      	sub	sp, #60	; 0x3c
	printf("task process created \n");
  4062c6:	4895      	ldr	r0, [pc, #596]	; (40651c <task_process+0x25c>)
  4062c8:	4b95      	ldr	r3, [pc, #596]	; (406520 <task_process+0x260>)
  4062ca:	4798      	blx	r3
	vTaskDelay(1000);
  4062cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4062d0:	4b94      	ldr	r3, [pc, #592]	; (406524 <task_process+0x264>)
  4062d2:	4798      	blx	r3
	stdio_base = (void *)usart;
  4062d4:	4c94      	ldr	r4, [pc, #592]	; (406528 <task_process+0x268>)
  4062d6:	4b95      	ldr	r3, [pc, #596]	; (40652c <task_process+0x26c>)
  4062d8:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4062da:	4a95      	ldr	r2, [pc, #596]	; (406530 <task_process+0x270>)
  4062dc:	4b95      	ldr	r3, [pc, #596]	; (406534 <task_process+0x274>)
  4062de:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4062e0:	4a95      	ldr	r2, [pc, #596]	; (406538 <task_process+0x278>)
  4062e2:	4b96      	ldr	r3, [pc, #600]	; (40653c <task_process+0x27c>)
  4062e4:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4062e6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4062ea:	9307      	str	r3, [sp, #28]
	usart_settings.char_length = opt->charlength;
  4062ec:	23c0      	movs	r3, #192	; 0xc0
  4062ee:	9308      	str	r3, [sp, #32]
	usart_settings.parity_type = opt->paritytype;
  4062f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4062f4:	9309      	str	r3, [sp, #36]	; 0x24
	usart_settings.stop_bits= opt->stopbits;
  4062f6:	2500      	movs	r5, #0
  4062f8:	950a      	str	r5, [sp, #40]	; 0x28
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4062fa:	950b      	str	r5, [sp, #44]	; 0x2c
  4062fc:	200e      	movs	r0, #14
  4062fe:	4b90      	ldr	r3, [pc, #576]	; (406540 <task_process+0x280>)
  406300:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  406302:	4a90      	ldr	r2, [pc, #576]	; (406544 <task_process+0x284>)
  406304:	a907      	add	r1, sp, #28
  406306:	4620      	mov	r0, r4
  406308:	4b8f      	ldr	r3, [pc, #572]	; (406548 <task_process+0x288>)
  40630a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40630c:	4620      	mov	r0, r4
  40630e:	4b8f      	ldr	r3, [pc, #572]	; (40654c <task_process+0x28c>)
  406310:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406312:	4620      	mov	r0, r4
  406314:	4b8e      	ldr	r3, [pc, #568]	; (406550 <task_process+0x290>)
  406316:	4798      	blx	r3
	setbuf(stdout, NULL);
  406318:	4e8e      	ldr	r6, [pc, #568]	; (406554 <task_process+0x294>)
  40631a:	6833      	ldr	r3, [r6, #0]
  40631c:	4629      	mov	r1, r5
  40631e:	6898      	ldr	r0, [r3, #8]
  406320:	4c8d      	ldr	r4, [pc, #564]	; (406558 <task_process+0x298>)
  406322:	47a0      	blx	r4
	setbuf(stdin, NULL);
  406324:	6833      	ldr	r3, [r6, #0]
  406326:	4629      	mov	r1, r5
  406328:	6858      	ldr	r0, [r3, #4]
  40632a:	47a0      	blx	r4
  afec_enable(afec);
  40632c:	4c8b      	ldr	r4, [pc, #556]	; (40655c <task_process+0x29c>)
  40632e:	4620      	mov	r0, r4
  406330:	4b8b      	ldr	r3, [pc, #556]	; (406560 <task_process+0x2a0>)
  406332:	4798      	blx	r3
  afec_get_config_defaults(&afec_cfg);
  406334:	a807      	add	r0, sp, #28
  406336:	4b8b      	ldr	r3, [pc, #556]	; (406564 <task_process+0x2a4>)
  406338:	4798      	blx	r3
  afec_init(afec, &afec_cfg);
  40633a:	a907      	add	r1, sp, #28
  40633c:	4620      	mov	r0, r4
  40633e:	4b8a      	ldr	r3, [pc, #552]	; (406568 <task_process+0x2a8>)
  406340:	4798      	blx	r3
	reg = afec->AFEC_MR;
  406342:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  406344:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  406348:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  40634a:	a804      	add	r0, sp, #16
  40634c:	4b87      	ldr	r3, [pc, #540]	; (40656c <task_process+0x2ac>)
  40634e:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  406350:	f88d 5011 	strb.w	r5, [sp, #17]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  406354:	aa04      	add	r2, sp, #16
  406356:	2101      	movs	r1, #1
  406358:	4620      	mov	r0, r4
  40635a:	4b85      	ldr	r3, [pc, #532]	; (406570 <task_process+0x2b0>)
  40635c:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  40635e:	2501      	movs	r5, #1
  406360:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  406362:	f44f 7300 	mov.w	r3, #512	; 0x200
  406366:	66e3      	str	r3, [r4, #108]	; 0x6c
  afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  406368:	a805      	add	r0, sp, #20
  40636a:	4b82      	ldr	r3, [pc, #520]	; (406574 <task_process+0x2b4>)
  40636c:	4798      	blx	r3
  afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  40636e:	a905      	add	r1, sp, #20
  406370:	4620      	mov	r0, r4
  406372:	4b81      	ldr	r3, [pc, #516]	; (406578 <task_process+0x2b8>)
  406374:	4798      	blx	r3
  afec_set_callback(afec, afec_channel,	callback, 1);
  406376:	462b      	mov	r3, r5
  406378:	4a80      	ldr	r2, [pc, #512]	; (40657c <task_process+0x2bc>)
  40637a:	4629      	mov	r1, r5
  40637c:	4620      	mov	r0, r4
  40637e:	4d80      	ldr	r5, [pc, #512]	; (406580 <task_process+0x2c0>)
  406380:	47a8      	blx	r5
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  406382:	4b80      	ldr	r3, [pc, #512]	; (406584 <task_process+0x2c4>)
  406384:	2280      	movs	r2, #128	; 0x80
  406386:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40638a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40638e:	605a      	str	r2, [r3, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  406390:	2302      	movs	r3, #2
  406392:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  406394:	6023      	str	r3, [r4, #0]
	if (ySemaphore == NULL){
  406396:	4b7c      	ldr	r3, [pc, #496]	; (406588 <task_process+0x2c8>)
  406398:	681b      	ldr	r3, [r3, #0]
  40639a:	b143      	cbz	r3, 4063ae <task_process+0xee>
			default: state = WAIT;
  40639c:	f04f 0900 	mov.w	r9, #0
  4063a0:	464b      	mov	r3, r9
  4063a2:	2201      	movs	r2, #1
  4063a4:	9203      	str	r2, [sp, #12]
		if(g_is_conversion_done){
  4063a6:	4d79      	ldr	r5, [pc, #484]	; (40658c <task_process+0x2cc>)
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4063a8:	4e6c      	ldr	r6, [pc, #432]	; (40655c <task_process+0x29c>)
			recv(tcp_client_socket, &g_receivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  4063aa:	4c79      	ldr	r4, [pc, #484]	; (406590 <task_process+0x2d0>)
  4063ac:	e1ae      	b.n	40670c <task_process+0x44c>
		printf("falha em criar o semaforo \n");
  4063ae:	4879      	ldr	r0, [pc, #484]	; (406594 <task_process+0x2d4>)
  4063b0:	4b5b      	ldr	r3, [pc, #364]	; (406520 <task_process+0x260>)
  4063b2:	4798      	blx	r3
  4063b4:	e7f2      	b.n	40639c <task_process+0xdc>
			printf("STATE: WAIT \n");
  4063b6:	4878      	ldr	r0, [pc, #480]	; (406598 <task_process+0x2d8>)
  4063b8:	4f59      	ldr	r7, [pc, #356]	; (406520 <task_process+0x260>)
  4063ba:	47b8      	blx	r7
			rtc_get_time(RTC, &hh, &mm, &ss);
  4063bc:	ab07      	add	r3, sp, #28
  4063be:	aa05      	add	r2, sp, #20
  4063c0:	a904      	add	r1, sp, #16
  4063c2:	4876      	ldr	r0, [pc, #472]	; (40659c <task_process+0x2dc>)
  4063c4:	f8df 8224 	ldr.w	r8, [pc, #548]	; 4065ec <task_process+0x32c>
  4063c8:	47c0      	blx	r8
			sprintf(horario, "%2d:%2d:%2d", hh, mm, ss);
  4063ca:	f8df 8214 	ldr.w	r8, [pc, #532]	; 4065e0 <task_process+0x320>
  4063ce:	9b07      	ldr	r3, [sp, #28]
  4063d0:	9300      	str	r3, [sp, #0]
  4063d2:	9b05      	ldr	r3, [sp, #20]
  4063d4:	9a04      	ldr	r2, [sp, #16]
  4063d6:	4972      	ldr	r1, [pc, #456]	; (4065a0 <task_process+0x2e0>)
  4063d8:	4640      	mov	r0, r8
  4063da:	f8df a214 	ldr.w	sl, [pc, #532]	; 4065f0 <task_process+0x330>
  4063de:	47d0      	blx	sl
			printf("horario rtc = %s \n",horario);
  4063e0:	4641      	mov	r1, r8
  4063e2:	4870      	ldr	r0, [pc, #448]	; (4065a4 <task_process+0x2e4>)
  4063e4:	47b8      	blx	r7
			if(old_min != mm){
  4063e6:	f8dd a014 	ldr.w	sl, [sp, #20]
  4063ea:	9b02      	ldr	r3, [sp, #8]
  4063ec:	4553      	cmp	r3, sl
				contador_min+=1;
  4063ee:	bf18      	it	ne
  4063f0:	f109 0901 	addne.w	r9, r9, #1
			while(gbTcpConnection == false && tcp_client_socket >= 0){
  4063f4:	4b6c      	ldr	r3, [pc, #432]	; (4065a8 <task_process+0x2e8>)
  4063f6:	781b      	ldrb	r3, [r3, #0]
  4063f8:	b973      	cbnz	r3, 406418 <task_process+0x158>
  4063fa:	f994 3000 	ldrsb.w	r3, [r4]
  4063fe:	2b00      	cmp	r3, #0
  406400:	db0a      	blt.n	406418 <task_process+0x158>
				vTaskDelay(10);
  406402:	f8df 8120 	ldr.w	r8, [pc, #288]	; 406524 <task_process+0x264>
			while(gbTcpConnection == false && tcp_client_socket >= 0){
  406406:	4f68      	ldr	r7, [pc, #416]	; (4065a8 <task_process+0x2e8>)
				vTaskDelay(10);
  406408:	200a      	movs	r0, #10
  40640a:	47c0      	blx	r8
			while(gbTcpConnection == false && tcp_client_socket >= 0){
  40640c:	783b      	ldrb	r3, [r7, #0]
  40640e:	b91b      	cbnz	r3, 406418 <task_process+0x158>
  406410:	f994 3000 	ldrsb.w	r3, [r4]
  406414:	2b00      	cmp	r3, #0
  406416:	daf7      	bge.n	406408 <task_process+0x148>
			if(post_inicial==1){
  406418:	9b03      	ldr	r3, [sp, #12]
  40641a:	2b00      	cmp	r3, #0
  40641c:	f040 8190 	bne.w	406740 <task_process+0x480>
			if( xSemaphoreTake(ySemaphore, ( TickType_t ) 500) == pdTRUE ){
  406420:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  406424:	4619      	mov	r1, r3
  406426:	4858      	ldr	r0, [pc, #352]	; (406588 <task_process+0x2c8>)
  406428:	6800      	ldr	r0, [r0, #0]
  40642a:	4f60      	ldr	r7, [pc, #384]	; (4065ac <task_process+0x2ec>)
  40642c:	47b8      	blx	r7
  40642e:	2801      	cmp	r0, #1
  406430:	f000 818c 	beq.w	40674c <task_process+0x48c>
				if (contador_min == 5){
  406434:	f1b9 0f05 	cmp.w	r9, #5
  406438:	f000 818c 	beq.w	406754 <task_process+0x494>
  40643c:	f8cd a008 	str.w	sl, [sp, #8]
						state = GET;
  406440:	2301      	movs	r3, #1
  406442:	e163      	b.n	40670c <task_process+0x44c>
			printf("STATE: GET \n");
  406444:	485a      	ldr	r0, [pc, #360]	; (4065b0 <task_process+0x2f0>)
  406446:	4b36      	ldr	r3, [pc, #216]	; (406520 <task_process+0x260>)
  406448:	4798      	blx	r3
			sprintf((char *)g_sendBuffer, MAIN_PREFIX_BUFFER);
  40644a:	f8df 8180 	ldr.w	r8, [pc, #384]	; 4065cc <task_process+0x30c>
  40644e:	4647      	mov	r7, r8
  406450:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 4065f4 <task_process+0x334>
  406454:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  406458:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  40645a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40645e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  406460:	e89e 0003 	ldmia.w	lr, {r0, r1}
  406464:	f847 0b04 	str.w	r0, [r7], #4
  406468:	f827 1b02 	strh.w	r1, [r7], #2
  40646c:	0c09      	lsrs	r1, r1, #16
  40646e:	7039      	strb	r1, [r7, #0]
			send(tcp_client_socket, g_sendBuffer, strlen((char *)g_sendBuffer), 0);
  406470:	4640      	mov	r0, r8
  406472:	4b50      	ldr	r3, [pc, #320]	; (4065b4 <task_process+0x2f4>)
  406474:	4798      	blx	r3
  406476:	2300      	movs	r3, #0
  406478:	b282      	uxth	r2, r0
  40647a:	4641      	mov	r1, r8
  40647c:	f994 0000 	ldrsb.w	r0, [r4]
  406480:	4f4d      	ldr	r7, [pc, #308]	; (4065b8 <task_process+0x2f8>)
  406482:	47b8      	blx	r7
			state = ACK;
  406484:	2304      	movs	r3, #4
			break;
  406486:	e141      	b.n	40670c <task_process+0x44c>
			printf("STATE: POST \n");
  406488:	484c      	ldr	r0, [pc, #304]	; (4065bc <task_process+0x2fc>)
  40648a:	4b25      	ldr	r3, [pc, #148]	; (406520 <task_process+0x260>)
  40648c:	4798      	blx	r3
			sprintf(post_but, "BUT=%d", but_value);
  40648e:	4b4c      	ldr	r3, [pc, #304]	; (4065c0 <task_process+0x300>)
  406490:	681a      	ldr	r2, [r3, #0]
  406492:	f8df 8164 	ldr.w	r8, [pc, #356]	; 4065f8 <task_process+0x338>
  406496:	494b      	ldr	r1, [pc, #300]	; (4065c4 <task_process+0x304>)
  406498:	4640      	mov	r0, r8
  40649a:	f8df b154 	ldr.w	fp, [pc, #340]	; 4065f0 <task_process+0x330>
  40649e:	47d8      	blx	fp
			contentLength =strlen(post_but);
  4064a0:	4640      	mov	r0, r8
  4064a2:	f8df a110 	ldr.w	sl, [pc, #272]	; 4065b4 <task_process+0x2f4>
  4064a6:	47d0      	blx	sl
  4064a8:	4602      	mov	r2, r0
  4064aa:	4b47      	ldr	r3, [pc, #284]	; (4065c8 <task_process+0x308>)
  4064ac:	6018      	str	r0, [r3, #0]
			sprintf((char *)g_sendBuffer, "POST2 /status HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: %d\n\n%s",
  4064ae:	4f47      	ldr	r7, [pc, #284]	; (4065cc <task_process+0x30c>)
  4064b0:	4643      	mov	r3, r8
  4064b2:	4947      	ldr	r1, [pc, #284]	; (4065d0 <task_process+0x310>)
  4064b4:	4638      	mov	r0, r7
  4064b6:	47d8      	blx	fp
			send(tcp_client_socket, g_sendBuffer, strlen((char *)g_sendBuffer), 0);
  4064b8:	4638      	mov	r0, r7
  4064ba:	47d0      	blx	sl
  4064bc:	2300      	movs	r3, #0
  4064be:	b282      	uxth	r2, r0
  4064c0:	4639      	mov	r1, r7
  4064c2:	f994 0000 	ldrsb.w	r0, [r4]
  4064c6:	4f3c      	ldr	r7, [pc, #240]	; (4065b8 <task_process+0x2f8>)
  4064c8:	47b8      	blx	r7
			state = ACK;
  4064ca:	2304      	movs	r3, #4
			break;
  4064cc:	e11e      	b.n	40670c <task_process+0x44c>
			printf("STATE: POST sem botão \n");
  4064ce:	4841      	ldr	r0, [pc, #260]	; (4065d4 <task_process+0x314>)
  4064d0:	4b13      	ldr	r3, [pc, #76]	; (406520 <task_process+0x260>)
  4064d2:	4798      	blx	r3
			sprintf(post_char, "AFEC=%2d&ID=%d&TIME=%s",g_ul_value,id,horario);
  4064d4:	4b40      	ldr	r3, [pc, #256]	; (4065d8 <task_process+0x318>)
  4064d6:	681a      	ldr	r2, [r3, #0]
  4064d8:	4b40      	ldr	r3, [pc, #256]	; (4065dc <task_process+0x31c>)
  4064da:	681b      	ldr	r3, [r3, #0]
  4064dc:	f8df 811c 	ldr.w	r8, [pc, #284]	; 4065fc <task_process+0x33c>
  4064e0:	493f      	ldr	r1, [pc, #252]	; (4065e0 <task_process+0x320>)
  4064e2:	9100      	str	r1, [sp, #0]
  4064e4:	493f      	ldr	r1, [pc, #252]	; (4065e4 <task_process+0x324>)
  4064e6:	4640      	mov	r0, r8
  4064e8:	f8df b104 	ldr.w	fp, [pc, #260]	; 4065f0 <task_process+0x330>
  4064ec:	47d8      	blx	fp
			contentLength =strlen(post_char);
  4064ee:	4640      	mov	r0, r8
  4064f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 4065b4 <task_process+0x2f4>
  4064f4:	47d0      	blx	sl
  4064f6:	4602      	mov	r2, r0
  4064f8:	4b33      	ldr	r3, [pc, #204]	; (4065c8 <task_process+0x308>)
  4064fa:	6018      	str	r0, [r3, #0]
			sprintf((char *)g_sendBuffer, "POST /status HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: %d\n\n%s",
  4064fc:	4f33      	ldr	r7, [pc, #204]	; (4065cc <task_process+0x30c>)
  4064fe:	4643      	mov	r3, r8
  406500:	4939      	ldr	r1, [pc, #228]	; (4065e8 <task_process+0x328>)
  406502:	4638      	mov	r0, r7
  406504:	47d8      	blx	fp
			send(tcp_client_socket, g_sendBuffer, strlen((char *)g_sendBuffer), 0);
  406506:	4638      	mov	r0, r7
  406508:	47d0      	blx	sl
  40650a:	2300      	movs	r3, #0
  40650c:	b282      	uxth	r2, r0
  40650e:	4639      	mov	r1, r7
  406510:	f994 0000 	ldrsb.w	r0, [r4]
  406514:	4f28      	ldr	r7, [pc, #160]	; (4065b8 <task_process+0x2f8>)
  406516:	47b8      	blx	r7
			state = ACK;
  406518:	2304      	movs	r3, #4
			break;
  40651a:	e0f7      	b.n	40670c <task_process+0x44c>
  40651c:	0040e3d4 	.word	0x0040e3d4
  406520:	00406c9d 	.word	0x00406c9d
  406524:	00401ca1 	.word	0x00401ca1
  406528:	40028000 	.word	0x40028000
  40652c:	2040d0c8 	.word	0x2040d0c8
  406530:	00406135 	.word	0x00406135
  406534:	2040d0c4 	.word	0x2040d0c4
  406538:	00406059 	.word	0x00406059
  40653c:	2040d0c0 	.word	0x2040d0c0
  406540:	00405a5d 	.word	0x00405a5d
  406544:	08f0d180 	.word	0x08f0d180
  406548:	00405cad 	.word	0x00405cad
  40654c:	00405d01 	.word	0x00405d01
  406550:	00405d07 	.word	0x00405d07
  406554:	2040003c 	.word	0x2040003c
  406558:	00406e95 	.word	0x00406e95
  40655c:	40064000 	.word	0x40064000
  406560:	00400449 	.word	0x00400449
  406564:	00400279 	.word	0x00400279
  406568:	004002c9 	.word	0x004002c9
  40656c:	004002a9 	.word	0x004002a9
  406570:	00400235 	.word	0x00400235
  406574:	004002b3 	.word	0x004002b3
  406578:	00400265 	.word	0x00400265
  40657c:	00405fd5 	.word	0x00405fd5
  406580:	004003c9 	.word	0x004003c9
  406584:	e000e100 	.word	0xe000e100
  406588:	2040d198 	.word	0x2040d198
  40658c:	2040c3fc 	.word	0x2040c3fc
  406590:	20400038 	.word	0x20400038
  406594:	0040e3ec 	.word	0x0040e3ec
  406598:	0040e408 	.word	0x0040e408
  40659c:	400e1860 	.word	0x400e1860
  4065a0:	0040e418 	.word	0x0040e418
  4065a4:	0040e424 	.word	0x0040e424
  4065a8:	2040cef4 	.word	0x2040cef4
  4065ac:	00401479 	.word	0x00401479
  4065b0:	0040e438 	.word	0x0040e438
  4065b4:	00407081 	.word	0x00407081
  4065b8:	00404f41 	.word	0x00404f41
  4065bc:	0040e470 	.word	0x0040e470
  4065c0:	2040c3f8 	.word	0x2040c3f8
  4065c4:	0040e480 	.word	0x0040e480
  4065c8:	2040d19c 	.word	0x2040d19c
  4065cc:	2040c978 	.word	0x2040c978
  4065d0:	0040e488 	.word	0x0040e488
  4065d4:	0040e4e8 	.word	0x0040e4e8
  4065d8:	2040cef0 	.word	0x2040cef0
  4065dc:	20400034 	.word	0x20400034
  4065e0:	20400020 	.word	0x20400020
  4065e4:	0040e504 	.word	0x0040e504
  4065e8:	0040e51c 	.word	0x0040e51c
  4065ec:	004004c7 	.word	0x004004c7
  4065f0:	00407035 	.word	0x00407035
  4065f4:	0040e448 	.word	0x0040e448
  4065f8:	2040d0d8 	.word	0x2040d0d8
  4065fc:	2040d118 	.word	0x2040d118
			printf("STATE: ACK \n");
  406600:	4857      	ldr	r0, [pc, #348]	; (406760 <task_process+0x4a0>)
  406602:	4b58      	ldr	r3, [pc, #352]	; (406764 <task_process+0x4a4>)
  406604:	4798      	blx	r3
			memset(g_receivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  406606:	4f58      	ldr	r7, [pc, #352]	; (406768 <task_process+0x4a8>)
  406608:	f44f 68af 	mov.w	r8, #1400	; 0x578
  40660c:	4642      	mov	r2, r8
  40660e:	2100      	movs	r1, #0
  406610:	4638      	mov	r0, r7
  406612:	4b56      	ldr	r3, [pc, #344]	; (40676c <task_process+0x4ac>)
  406614:	4798      	blx	r3
			recv(tcp_client_socket, &g_receivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  406616:	2300      	movs	r3, #0
  406618:	4642      	mov	r2, r8
  40661a:	4639      	mov	r1, r7
  40661c:	f994 0000 	ldrsb.w	r0, [r4]
  406620:	4f53      	ldr	r7, [pc, #332]	; (406770 <task_process+0x4b0>)
  406622:	47b8      	blx	r7
			if(xQueueReceive(xQueueMsg, &p_recvMsg, 5000) == pdTRUE){
  406624:	2300      	movs	r3, #0
  406626:	f241 3288 	movw	r2, #5000	; 0x1388
  40662a:	a90d      	add	r1, sp, #52	; 0x34
  40662c:	4851      	ldr	r0, [pc, #324]	; (406774 <task_process+0x4b4>)
  40662e:	6800      	ldr	r0, [r0, #0]
  406630:	4f51      	ldr	r7, [pc, #324]	; (406778 <task_process+0x4b8>)
  406632:	47b8      	blx	r7
  406634:	2801      	cmp	r0, #1
  406636:	d001      	beq.n	40663c <task_process+0x37c>
				state = TIMEOUT;
  406638:	2306      	movs	r3, #6
  40663a:	e067      	b.n	40670c <task_process+0x44c>
				printf(STRING_LINE);
  40663c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 406784 <task_process+0x4c4>
  406640:	4640      	mov	r0, r8
  406642:	4f48      	ldr	r7, [pc, #288]	; (406764 <task_process+0x4a4>)
  406644:	47b8      	blx	r7
				printf(p_recvMsg->pu8Buffer);
  406646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406648:	6818      	ldr	r0, [r3, #0]
  40664a:	47b8      	blx	r7
				printf(STRING_EOL);  printf(STRING_LINE);
  40664c:	484b      	ldr	r0, [pc, #300]	; (40677c <task_process+0x4bc>)
  40664e:	47b8      	blx	r7
  406650:	4640      	mov	r0, r8
  406652:	47b8      	blx	r7
				state = MSG;
  406654:	2305      	movs	r3, #5
  406656:	e059      	b.n	40670c <task_process+0x44c>
			printf("STATE: MSG \n");
  406658:	4849      	ldr	r0, [pc, #292]	; (406780 <task_process+0x4c0>)
  40665a:	4b42      	ldr	r3, [pc, #264]	; (406764 <task_process+0x4a4>)
  40665c:	4798      	blx	r3
			memset(g_receivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  40665e:	4f42      	ldr	r7, [pc, #264]	; (406768 <task_process+0x4a8>)
  406660:	f44f 68af 	mov.w	r8, #1400	; 0x578
  406664:	4642      	mov	r2, r8
  406666:	2100      	movs	r1, #0
  406668:	4638      	mov	r0, r7
  40666a:	4b40      	ldr	r3, [pc, #256]	; (40676c <task_process+0x4ac>)
  40666c:	4798      	blx	r3
			recv(tcp_client_socket, &g_receivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  40666e:	2300      	movs	r3, #0
  406670:	4642      	mov	r2, r8
  406672:	4639      	mov	r1, r7
  406674:	f994 0000 	ldrsb.w	r0, [r4]
  406678:	4f3d      	ldr	r7, [pc, #244]	; (406770 <task_process+0x4b0>)
  40667a:	47b8      	blx	r7
			if(xQueueReceive(xQueueMsg, &p_recvMsg, 5000) == pdTRUE){
  40667c:	2300      	movs	r3, #0
  40667e:	f241 3288 	movw	r2, #5000	; 0x1388
  406682:	a90d      	add	r1, sp, #52	; 0x34
  406684:	483b      	ldr	r0, [pc, #236]	; (406774 <task_process+0x4b4>)
  406686:	6800      	ldr	r0, [r0, #0]
  406688:	4f3b      	ldr	r7, [pc, #236]	; (406778 <task_process+0x4b8>)
  40668a:	47b8      	blx	r7
  40668c:	2801      	cmp	r0, #1
  40668e:	d001      	beq.n	406694 <task_process+0x3d4>
				state = TIMEOUT;
  406690:	2306      	movs	r3, #6
  406692:	e03b      	b.n	40670c <task_process+0x44c>
				printf(STRING_LINE);
  406694:	483b      	ldr	r0, [pc, #236]	; (406784 <task_process+0x4c4>)
  406696:	4b33      	ldr	r3, [pc, #204]	; (406764 <task_process+0x4a4>)
  406698:	4798      	blx	r3
				butstate = strstr(p_recvMsg->pu8Buffer, "but");
  40669a:	493b      	ldr	r1, [pc, #236]	; (406788 <task_process+0x4c8>)
  40669c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40669e:	6818      	ldr	r0, [r3, #0]
  4066a0:	4b3a      	ldr	r3, [pc, #232]	; (40678c <task_process+0x4cc>)
  4066a2:	4798      	blx	r3
  4066a4:	4b3a      	ldr	r3, [pc, #232]	; (406790 <task_process+0x4d0>)
  4066a6:	6018      	str	r0, [r3, #0]
				if (butstate[7] == '1')
  4066a8:	79c3      	ldrb	r3, [r0, #7]
  4066aa:	2b31      	cmp	r3, #49	; 0x31
  4066ac:	d00e      	beq.n	4066cc <task_process+0x40c>
				if (butstate[7] == '0')
  4066ae:	4b38      	ldr	r3, [pc, #224]	; (406790 <task_process+0x4d0>)
  4066b0:	681b      	ldr	r3, [r3, #0]
  4066b2:	79db      	ldrb	r3, [r3, #7]
  4066b4:	2b30      	cmp	r3, #48	; 0x30
  4066b6:	d015      	beq.n	4066e4 <task_process+0x424>
				printf(p_recvMsg->pu8Buffer);
  4066b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4066ba:	6818      	ldr	r0, [r3, #0]
  4066bc:	4f29      	ldr	r7, [pc, #164]	; (406764 <task_process+0x4a4>)
  4066be:	47b8      	blx	r7
				printf(STRING_EOL);  printf(STRING_LINE);
  4066c0:	482e      	ldr	r0, [pc, #184]	; (40677c <task_process+0x4bc>)
  4066c2:	47b8      	blx	r7
  4066c4:	482f      	ldr	r0, [pc, #188]	; (406784 <task_process+0x4c4>)
  4066c6:	47b8      	blx	r7
				state = DONE;
  4066c8:	2307      	movs	r3, #7
  4066ca:	e01f      	b.n	40670c <task_process+0x44c>
					but_value=1;
  4066cc:	2201      	movs	r2, #1
  4066ce:	4b31      	ldr	r3, [pc, #196]	; (406794 <task_process+0x4d4>)
  4066d0:	601a      	str	r2, [r3, #0]
					printf("BUT STATE = 1");
  4066d2:	4831      	ldr	r0, [pc, #196]	; (406798 <task_process+0x4d8>)
  4066d4:	4b23      	ldr	r3, [pc, #140]	; (406764 <task_process+0x4a4>)
  4066d6:	4798      	blx	r3
					pio_clear(LED_PIO,LED_PIO_IDX_MASK);
  4066d8:	f44f 7180 	mov.w	r1, #256	; 0x100
  4066dc:	482f      	ldr	r0, [pc, #188]	; (40679c <task_process+0x4dc>)
  4066de:	4b30      	ldr	r3, [pc, #192]	; (4067a0 <task_process+0x4e0>)
  4066e0:	4798      	blx	r3
  4066e2:	e7e4      	b.n	4066ae <task_process+0x3ee>
					but_value=0;
  4066e4:	2200      	movs	r2, #0
  4066e6:	4b2b      	ldr	r3, [pc, #172]	; (406794 <task_process+0x4d4>)
  4066e8:	601a      	str	r2, [r3, #0]
					printf("BUT STATE = 0");
  4066ea:	482e      	ldr	r0, [pc, #184]	; (4067a4 <task_process+0x4e4>)
  4066ec:	4b1d      	ldr	r3, [pc, #116]	; (406764 <task_process+0x4a4>)
  4066ee:	4798      	blx	r3
					pio_set(LED_PIO,LED_PIO_IDX_MASK);
  4066f0:	f44f 7180 	mov.w	r1, #256	; 0x100
  4066f4:	4829      	ldr	r0, [pc, #164]	; (40679c <task_process+0x4dc>)
  4066f6:	4b2c      	ldr	r3, [pc, #176]	; (4067a8 <task_process+0x4e8>)
  4066f8:	4798      	blx	r3
  4066fa:	e7dd      	b.n	4066b8 <task_process+0x3f8>
			printf("STATE: DONE \n");
  4066fc:	482b      	ldr	r0, [pc, #172]	; (4067ac <task_process+0x4ec>)
  4066fe:	4b19      	ldr	r3, [pc, #100]	; (406764 <task_process+0x4a4>)
  406700:	4798      	blx	r3
			state = WAIT;
  406702:	2300      	movs	r3, #0
			break;
  406704:	e002      	b.n	40670c <task_process+0x44c>
			default: state = WAIT;
  406706:	2300      	movs	r3, #0
  406708:	e000      	b.n	40670c <task_process+0x44c>
			state = WAIT;
  40670a:	2300      	movs	r3, #0
		if(g_is_conversion_done){
  40670c:	782a      	ldrb	r2, [r5, #0]
  40670e:	b112      	cbz	r2, 406716 <task_process+0x456>
  406710:	2202      	movs	r2, #2
  406712:	6172      	str	r2, [r6, #20]
	afec->AFEC_CR = AFEC_CR_START;
  406714:	6032      	str	r2, [r6, #0]
		switch(state){
  406716:	2b07      	cmp	r3, #7
  406718:	d8f5      	bhi.n	406706 <task_process+0x446>
  40671a:	a201      	add	r2, pc, #4	; (adr r2, 406720 <task_process+0x460>)
  40671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406720:	004063b7 	.word	0x004063b7
  406724:	00406445 	.word	0x00406445
  406728:	004064cf 	.word	0x004064cf
  40672c:	00406489 	.word	0x00406489
  406730:	00406601 	.word	0x00406601
  406734:	00406659 	.word	0x00406659
  406738:	0040670b 	.word	0x0040670b
  40673c:	004066fd 	.word	0x004066fd
  406740:	f8cd a008 	str.w	sl, [sp, #8]
				state = POST;
  406744:	2302      	movs	r3, #2
				post_inicial=0;
  406746:	2200      	movs	r2, #0
  406748:	9203      	str	r2, [sp, #12]
  40674a:	e7df      	b.n	40670c <task_process+0x44c>
  40674c:	f8cd a008 	str.w	sl, [sp, #8]
				state = POST_BUT;
  406750:	2303      	movs	r3, #3
  406752:	e7db      	b.n	40670c <task_process+0x44c>
					contador_min =0;
  406754:	f8dd 900c 	ldr.w	r9, [sp, #12]
  406758:	f8cd a008 	str.w	sl, [sp, #8]
					state = POST;
  40675c:	2302      	movs	r3, #2
  40675e:	e7d5      	b.n	40670c <task_process+0x44c>
  406760:	0040e57c 	.word	0x0040e57c
  406764:	00406c9d 	.word	0x00406c9d
  406768:	2040c400 	.word	0x2040c400
  40676c:	00406df9 	.word	0x00406df9
  406770:	00404fdd 	.word	0x00404fdd
  406774:	2040d110 	.word	0x2040d110
  406778:	00401479 	.word	0x00401479
  40677c:	0040e46c 	.word	0x0040e46c
  406780:	0040e58c 	.word	0x0040e58c
  406784:	0040e31c 	.word	0x0040e31c
  406788:	0040e59c 	.word	0x0040e59c
  40678c:	0040740d 	.word	0x0040740d
  406790:	2040d150 	.word	0x2040d150
  406794:	2040c3f8 	.word	0x2040c3f8
  406798:	0040e5a0 	.word	0x0040e5a0
  40679c:	400e1200 	.word	0x400e1200
  4067a0:	0040549d 	.word	0x0040549d
  4067a4:	0040e5b0 	.word	0x0040e5b0
  4067a8:	00405499 	.word	0x00405499
  4067ac:	0040e5c0 	.word	0x0040e5c0

004067b0 <vApplicationStackOverflowHook>:
signed char *pcTaskName){
  4067b0:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4067b2:	460a      	mov	r2, r1
  4067b4:	4601      	mov	r1, r0
  4067b6:	4802      	ldr	r0, [pc, #8]	; (4067c0 <vApplicationStackOverflowHook+0x10>)
  4067b8:	4b02      	ldr	r3, [pc, #8]	; (4067c4 <vApplicationStackOverflowHook+0x14>)
  4067ba:	4798      	blx	r3
  4067bc:	e7fe      	b.n	4067bc <vApplicationStackOverflowHook+0xc>
  4067be:	bf00      	nop
  4067c0:	0040e6b8 	.word	0x0040e6b8
  4067c4:	00406c9d 	.word	0x00406c9d

004067c8 <vApplicationTickHook>:
extern void vApplicationTickHook(void){}
  4067c8:	4770      	bx	lr

004067ca <vApplicationMallocFailedHook>:
  4067ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4067ce:	b672      	cpsid	i
  4067d0:	f383 8811 	msr	BASEPRI, r3
  4067d4:	f3bf 8f6f 	isb	sy
  4067d8:	f3bf 8f4f 	dsb	sy
  4067dc:	b662      	cpsie	i
  4067de:	e7fe      	b.n	4067de <vApplicationMallocFailedHook+0x14>

004067e0 <RTC_Handler>:
{
  4067e0:	b530      	push	{r4, r5, lr}
  4067e2:	b083      	sub	sp, #12
	uint32_t ul_status = rtc_get_status(RTC);
  4067e4:	4815      	ldr	r0, [pc, #84]	; (40683c <RTC_Handler+0x5c>)
  4067e6:	4b16      	ldr	r3, [pc, #88]	; (406840 <RTC_Handler+0x60>)
  4067e8:	4798      	blx	r3
  4067ea:	4604      	mov	r4, r0
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC)
  4067ec:	f010 0f04 	tst.w	r0, #4
  4067f0:	d112      	bne.n	406818 <RTC_Handler+0x38>
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM)
  4067f2:	f014 0f02 	tst.w	r4, #2
  4067f6:	d11c      	bne.n	406832 <RTC_Handler+0x52>
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  4067f8:	4d10      	ldr	r5, [pc, #64]	; (40683c <RTC_Handler+0x5c>)
  4067fa:	2101      	movs	r1, #1
  4067fc:	4628      	mov	r0, r5
  4067fe:	4c11      	ldr	r4, [pc, #68]	; (406844 <RTC_Handler+0x64>)
  406800:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  406802:	2108      	movs	r1, #8
  406804:	4628      	mov	r0, r5
  406806:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  406808:	2110      	movs	r1, #16
  40680a:	4628      	mov	r0, r5
  40680c:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  40680e:	2120      	movs	r1, #32
  406810:	4628      	mov	r0, r5
  406812:	47a0      	blx	r4
}
  406814:	b003      	add	sp, #12
  406816:	bd30      	pop	{r4, r5, pc}
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  406818:	a902      	add	r1, sp, #8
  40681a:	2300      	movs	r3, #0
  40681c:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(RtcSemaphore, &xHigherPriorityTaskWoken);
  406820:	4b09      	ldr	r3, [pc, #36]	; (406848 <RTC_Handler+0x68>)
  406822:	6818      	ldr	r0, [r3, #0]
  406824:	4b09      	ldr	r3, [pc, #36]	; (40684c <RTC_Handler+0x6c>)
  406826:	4798      	blx	r3
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  406828:	2104      	movs	r1, #4
  40682a:	4804      	ldr	r0, [pc, #16]	; (40683c <RTC_Handler+0x5c>)
  40682c:	4b05      	ldr	r3, [pc, #20]	; (406844 <RTC_Handler+0x64>)
  40682e:	4798      	blx	r3
  406830:	e7df      	b.n	4067f2 <RTC_Handler+0x12>
		rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  406832:	2102      	movs	r1, #2
  406834:	4801      	ldr	r0, [pc, #4]	; (40683c <RTC_Handler+0x5c>)
  406836:	4b03      	ldr	r3, [pc, #12]	; (406844 <RTC_Handler+0x64>)
  406838:	4798      	blx	r3
  40683a:	e7dd      	b.n	4067f8 <RTC_Handler+0x18>
  40683c:	400e1860 	.word	0x400e1860
  406840:	00400669 	.word	0x00400669
  406844:	0040066d 	.word	0x0040066d
  406848:	2040d10c 	.word	0x2040d10c
  40684c:	00401399 	.word	0x00401399

00406850 <RTC_init>:
{
  406850:	b082      	sub	sp, #8
  406852:	b570      	push	{r4, r5, r6, lr}
  406854:	b082      	sub	sp, #8
  406856:	4605      	mov	r5, r0
  406858:	460c      	mov	r4, r1
  40685a:	a906      	add	r1, sp, #24
  40685c:	e881 000c 	stmia.w	r1, {r2, r3}
	pmc_enable_periph_clk(ID_RTC);
  406860:	2002      	movs	r0, #2
  406862:	4b1d      	ldr	r3, [pc, #116]	; (4068d8 <RTC_init+0x88>)
  406864:	4798      	blx	r3
	rtc_set_hour_mode(rtc, 0);
  406866:	2100      	movs	r1, #0
  406868:	4628      	mov	r0, r5
  40686a:	4b1c      	ldr	r3, [pc, #112]	; (4068dc <RTC_init+0x8c>)
  40686c:	4798      	blx	r3
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  40686e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406870:	9300      	str	r3, [sp, #0]
  406872:	9b08      	ldr	r3, [sp, #32]
  406874:	9a07      	ldr	r2, [sp, #28]
  406876:	9906      	ldr	r1, [sp, #24]
  406878:	4628      	mov	r0, r5
  40687a:	4e19      	ldr	r6, [pc, #100]	; (4068e0 <RTC_init+0x90>)
  40687c:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.seccond);
  40687e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406882:	990a      	ldr	r1, [sp, #40]	; 0x28
  406884:	4628      	mov	r0, r5
  406886:	4e17      	ldr	r6, [pc, #92]	; (4068e4 <RTC_init+0x94>)
  406888:	47b0      	blx	r6
	NVIC_DisableIRQ(id_rtc);
  40688a:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40688c:	b2e4      	uxtb	r4, r4
  40688e:	f004 011f 	and.w	r1, r4, #31
  406892:	2301      	movs	r3, #1
  406894:	408b      	lsls	r3, r1
  406896:	0956      	lsrs	r6, r2, #5
  406898:	4813      	ldr	r0, [pc, #76]	; (4068e8 <RTC_init+0x98>)
  40689a:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  40689e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4068a2:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  4068a6:	2a00      	cmp	r2, #0
  4068a8:	db0f      	blt.n	4068ca <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4068aa:	490f      	ldr	r1, [pc, #60]	; (4068e8 <RTC_init+0x98>)
  4068ac:	4411      	add	r1, r2
  4068ae:	2280      	movs	r2, #128	; 0x80
  4068b0:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4068b4:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	rtc_enable_interrupt(rtc, irq_type);
  4068b8:	990d      	ldr	r1, [sp, #52]	; 0x34
  4068ba:	4628      	mov	r0, r5
  4068bc:	4b0b      	ldr	r3, [pc, #44]	; (4068ec <RTC_init+0x9c>)
  4068be:	4798      	blx	r3
}
  4068c0:	b002      	add	sp, #8
  4068c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  4068c6:	b002      	add	sp, #8
  4068c8:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4068ca:	f004 040f 	and.w	r4, r4, #15
  4068ce:	4a08      	ldr	r2, [pc, #32]	; (4068f0 <RTC_init+0xa0>)
  4068d0:	2180      	movs	r1, #128	; 0x80
  4068d2:	5511      	strb	r1, [r2, r4]
  4068d4:	e7ee      	b.n	4068b4 <RTC_init+0x64>
  4068d6:	bf00      	nop
  4068d8:	00405a5d 	.word	0x00405a5d
  4068dc:	004004ad 	.word	0x004004ad
  4068e0:	004005b1 	.word	0x004005b1
  4068e4:	00400521 	.word	0x00400521
  4068e8:	e000e100 	.word	0xe000e100
  4068ec:	004004c3 	.word	0x004004c3
  4068f0:	e000ed14 	.word	0xe000ed14

004068f4 <wifi_cb>:
{
  4068f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4068f6:	b08f      	sub	sp, #60	; 0x3c
  4068f8:	460c      	mov	r4, r1
	switch (u8MsgType) {
  4068fa:	282c      	cmp	r0, #44	; 0x2c
  4068fc:	d005      	beq.n	40690a <wifi_cb+0x16>
  4068fe:	2832      	cmp	r0, #50	; 0x32
  406900:	d015      	beq.n	40692e <wifi_cb+0x3a>
  406902:	281b      	cmp	r0, #27
  406904:	d01f      	beq.n	406946 <wifi_cb+0x52>
}
  406906:	b00f      	add	sp, #60	; 0x3c
  406908:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  40690a:	780b      	ldrb	r3, [r1, #0]
  40690c:	2b01      	cmp	r3, #1
  40690e:	d008      	beq.n	406922 <wifi_cb+0x2e>
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  406910:	2b00      	cmp	r3, #0
  406912:	d1f8      	bne.n	406906 <wifi_cb+0x12>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  406914:	481e      	ldr	r0, [pc, #120]	; (406990 <wifi_cb+0x9c>)
  406916:	4b1f      	ldr	r3, [pc, #124]	; (406994 <wifi_cb+0xa0>)
  406918:	4798      	blx	r3
				wifi_connected = 0;
  40691a:	2200      	movs	r2, #0
  40691c:	4b1e      	ldr	r3, [pc, #120]	; (406998 <wifi_cb+0xa4>)
  40691e:	701a      	strb	r2, [r3, #0]
  406920:	e7f1      	b.n	406906 <wifi_cb+0x12>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  406922:	481e      	ldr	r0, [pc, #120]	; (40699c <wifi_cb+0xa8>)
  406924:	4b1b      	ldr	r3, [pc, #108]	; (406994 <wifi_cb+0xa0>)
  406926:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
  406928:	4b1d      	ldr	r3, [pc, #116]	; (4069a0 <wifi_cb+0xac>)
  40692a:	4798      	blx	r3
  40692c:	e7eb      	b.n	406906 <wifi_cb+0x12>
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  40692e:	788b      	ldrb	r3, [r1, #2]
  406930:	784a      	ldrb	r2, [r1, #1]
  406932:	7809      	ldrb	r1, [r1, #0]
  406934:	78e0      	ldrb	r0, [r4, #3]
  406936:	9000      	str	r0, [sp, #0]
  406938:	481a      	ldr	r0, [pc, #104]	; (4069a4 <wifi_cb+0xb0>)
  40693a:	4c16      	ldr	r4, [pc, #88]	; (406994 <wifi_cb+0xa0>)
  40693c:	47a0      	blx	r4
			wifi_connected = M2M_WIFI_CONNECTED;
  40693e:	2201      	movs	r2, #1
  406940:	4b15      	ldr	r3, [pc, #84]	; (406998 <wifi_cb+0xa4>)
  406942:	701a      	strb	r2, [r3, #0]
			break;
  406944:	e7df      	b.n	406906 <wifi_cb+0x12>
			calendar rtc_initial = {strSysTime_now->u16Year,strSysTime_now->u8Month,0,strSysTime_now->u8Day,strSysTime_now->u8Hour,strSysTime_now->u8Minute,strSysTime_now->u8Second};
  406946:	880b      	ldrh	r3, [r1, #0]
  406948:	9307      	str	r3, [sp, #28]
  40694a:	788b      	ldrb	r3, [r1, #2]
  40694c:	9308      	str	r3, [sp, #32]
  40694e:	2300      	movs	r3, #0
  406950:	9309      	str	r3, [sp, #36]	; 0x24
  406952:	78ca      	ldrb	r2, [r1, #3]
  406954:	920a      	str	r2, [sp, #40]	; 0x28
  406956:	790a      	ldrb	r2, [r1, #4]
  406958:	920b      	str	r2, [sp, #44]	; 0x2c
  40695a:	794a      	ldrb	r2, [r1, #5]
  40695c:	920c      	str	r2, [sp, #48]	; 0x30
  40695e:	798f      	ldrb	r7, [r1, #6]
		 	RTC_init(RTC, ID_RTC, rtc_initial, 0);
  406960:	9305      	str	r3, [sp, #20]
  406962:	466d      	mov	r5, sp
  406964:	ae09      	add	r6, sp, #36	; 0x24
  406966:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  406968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40696a:	602f      	str	r7, [r5, #0]
  40696c:	ab07      	add	r3, sp, #28
  40696e:	cb0c      	ldmia	r3, {r2, r3}
  406970:	2102      	movs	r1, #2
  406972:	480d      	ldr	r0, [pc, #52]	; (4069a8 <wifi_cb+0xb4>)
  406974:	4d0d      	ldr	r5, [pc, #52]	; (4069ac <wifi_cb+0xb8>)
  406976:	47a8      	blx	r5
			       printf("socket_cb: Year: %d, Month: %d, The GMT time is %u:%02u:%02u\r\n",
  406978:	7923      	ldrb	r3, [r4, #4]
  40697a:	78a2      	ldrb	r2, [r4, #2]
  40697c:	8821      	ldrh	r1, [r4, #0]
  40697e:	79a0      	ldrb	r0, [r4, #6]
  406980:	9001      	str	r0, [sp, #4]
  406982:	7960      	ldrb	r0, [r4, #5]
  406984:	9000      	str	r0, [sp, #0]
  406986:	480a      	ldr	r0, [pc, #40]	; (4069b0 <wifi_cb+0xbc>)
  406988:	4c02      	ldr	r4, [pc, #8]	; (406994 <wifi_cb+0xa0>)
  40698a:	47a0      	blx	r4
}
  40698c:	e7bb      	b.n	406906 <wifi_cb+0x12>
  40698e:	bf00      	nop
  406990:	0040e6f0 	.word	0x0040e6f0
  406994:	00406c9d 	.word	0x00406c9d
  406998:	2040cefc 	.word	0x2040cefc
  40699c:	0040e6d0 	.word	0x0040e6d0
  4069a0:	0040393d 	.word	0x0040393d
  4069a4:	0040e714 	.word	0x0040e714
  4069a8:	400e1860 	.word	0x400e1860
  4069ac:	00406851 	.word	0x00406851
  4069b0:	0040e73c 	.word	0x0040e73c

004069b4 <init>:

void init(void)
{
  4069b4:	b530      	push	{r4, r5, lr}
  4069b6:	b083      	sub	sp, #12
	sysclk_init();
  4069b8:	4b17      	ldr	r3, [pc, #92]	; (406a18 <init+0x64>)
  4069ba:	4798      	blx	r3
	
	WDT -> WDT_MR = WDT_MR_WDDIS;
  4069bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4069c0:	4b16      	ldr	r3, [pc, #88]	; (406a1c <init+0x68>)
  4069c2:	605a      	str	r2, [r3, #4]
	
	pmc_enable_periph_clk(BUT_PIO_ID);
  4069c4:	200a      	movs	r0, #10
  4069c6:	4b16      	ldr	r3, [pc, #88]	; (406a20 <init+0x6c>)
  4069c8:	4798      	blx	r3
	pio_configure(BUT_PIO,PIO_INPUT,BUT_PIO_IDX_MASK,PIO_PULLUP|PIO_DEBOUNCE);
  4069ca:	4c16      	ldr	r4, [pc, #88]	; (406a24 <init+0x70>)
  4069cc:	2309      	movs	r3, #9
  4069ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4069d2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4069d6:	4620      	mov	r0, r4
  4069d8:	4d13      	ldr	r5, [pc, #76]	; (406a28 <init+0x74>)
  4069da:	47a8      	blx	r5
	pio_set_debounce_filter(BUT_PIO,BUT_PIO_IDX_MASK,100);
  4069dc:	2264      	movs	r2, #100	; 0x64
  4069de:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4069e2:	4620      	mov	r0, r4
  4069e4:	4b11      	ldr	r3, [pc, #68]	; (406a2c <init+0x78>)
  4069e6:	4798      	blx	r3
	pio_handler_set(BUT_PIO,BUT_PIO_ID,BUT_PIO_IDX_MASK,PIO_IT_RISE_EDGE,but_callback);
  4069e8:	4b11      	ldr	r3, [pc, #68]	; (406a30 <init+0x7c>)
  4069ea:	9300      	str	r3, [sp, #0]
  4069ec:	2370      	movs	r3, #112	; 0x70
  4069ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4069f2:	210a      	movs	r1, #10
  4069f4:	4620      	mov	r0, r4
  4069f6:	4d0f      	ldr	r5, [pc, #60]	; (406a34 <init+0x80>)
  4069f8:	47a8      	blx	r5
	pio_enable_interrupt(BUT_PIO,BUT_PIO_IDX_MASK);
  4069fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4069fe:	4620      	mov	r0, r4
  406a00:	4b0d      	ldr	r3, [pc, #52]	; (406a38 <init+0x84>)
  406a02:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  406a04:	4b0d      	ldr	r3, [pc, #52]	; (406a3c <init+0x88>)
  406a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
  406a0a:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  406a0c:	2280      	movs	r2, #128	; 0x80
  406a0e:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	NVIC_EnableIRQ(BUT_PIO_ID);
	NVIC_SetPriority(BUT_PIO_ID,4);
}
  406a12:	b003      	add	sp, #12
  406a14:	bd30      	pop	{r4, r5, pc}
  406a16:	bf00      	nop
  406a18:	004051e1 	.word	0x004051e1
  406a1c:	400e1850 	.word	0x400e1850
  406a20:	00405a5d 	.word	0x00405a5d
  406a24:	400e0e00 	.word	0x400e0e00
  406a28:	00405591 	.word	0x00405591
  406a2c:	0040547f 	.word	0x0040547f
  406a30:	00406025 	.word	0x00406025
  406a34:	004057e5 	.word	0x004057e5
  406a38:	00405653 	.word	0x00405653
  406a3c:	e000e100 	.word	0xe000e100

00406a40 <task_wifi>:

static void task_wifi(void *pvParameters) {
  406a40:	b5f0      	push	{r4, r5, r6, r7, lr}
  406a42:	b08d      	sub	sp, #52	; 0x34
	tstrWifiInitParam param;
	struct sockaddr_in addr_in;
	
	xSemaphore = xSemaphoreCreateCounting(20,0);
  406a44:	2100      	movs	r1, #0
  406a46:	2014      	movs	r0, #20
  406a48:	4b3f      	ldr	r3, [pc, #252]	; (406b48 <task_wifi+0x108>)
  406a4a:	4798      	blx	r3
  406a4c:	4b3f      	ldr	r3, [pc, #252]	; (406b4c <task_wifi+0x10c>)
  406a4e:	6018      	str	r0, [r3, #0]
	ySemaphore = xSemaphoreCreateBinary();
  406a50:	2203      	movs	r2, #3
  406a52:	2100      	movs	r1, #0
  406a54:	2001      	movs	r0, #1
  406a56:	4c3e      	ldr	r4, [pc, #248]	; (406b50 <task_wifi+0x110>)
  406a58:	47a0      	blx	r4
  406a5a:	4b3e      	ldr	r3, [pc, #248]	; (406b54 <task_wifi+0x114>)
  406a5c:	6018      	str	r0, [r3, #0]
	
	init();
  406a5e:	4b3e      	ldr	r3, [pc, #248]	; (406b58 <task_wifi+0x118>)
  406a60:	4798      	blx	r3
	
	xQueueMsg = xQueueCreate(10, sizeof(tstrSocketRecvMsg));
  406a62:	2200      	movs	r2, #0
  406a64:	2118      	movs	r1, #24
  406a66:	200a      	movs	r0, #10
  406a68:	47a0      	blx	r4
  406a6a:	4b3c      	ldr	r3, [pc, #240]	; (406b5c <task_wifi+0x11c>)
  406a6c:	6018      	str	r0, [r3, #0]

	/* Initialize the BSP. */
	nm_bsp_init();
  406a6e:	4b3c      	ldr	r3, [pc, #240]	; (406b60 <task_wifi+0x120>)
  406a70:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  406a72:	2300      	movs	r3, #0
  406a74:	9307      	str	r3, [sp, #28]
  406a76:	9308      	str	r3, [sp, #32]
  406a78:	9309      	str	r3, [sp, #36]	; 0x24
  406a7a:	930a      	str	r3, [sp, #40]	; 0x28
  406a7c:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  406a7e:	4b39      	ldr	r3, [pc, #228]	; (406b64 <task_wifi+0x124>)
  406a80:	9306      	str	r3, [sp, #24]
	int8_t ret = m2m_wifi_init(&param);
  406a82:	a806      	add	r0, sp, #24
  406a84:	4b38      	ldr	r3, [pc, #224]	; (406b68 <task_wifi+0x128>)
  406a86:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  406a88:	b120      	cbz	r0, 406a94 <task_wifi+0x54>
  406a8a:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  406a8c:	4837      	ldr	r0, [pc, #220]	; (406b6c <task_wifi+0x12c>)
  406a8e:	4b38      	ldr	r3, [pc, #224]	; (406b70 <task_wifi+0x130>)
  406a90:	4798      	blx	r3
  406a92:	e7fe      	b.n	406a92 <task_wifi+0x52>
		while (1) { }
	}

	/* Initialize socket module. */
	socketInit();
  406a94:	4b37      	ldr	r3, [pc, #220]	; (406b74 <task_wifi+0x134>)
  406a96:	4798      	blx	r3

	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
  406a98:	4937      	ldr	r1, [pc, #220]	; (406b78 <task_wifi+0x138>)
  406a9a:	4838      	ldr	r0, [pc, #224]	; (406b7c <task_wifi+0x13c>)
  406a9c:	4b38      	ldr	r3, [pc, #224]	; (406b80 <task_wifi+0x140>)
  406a9e:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
  406aa0:	4d38      	ldr	r5, [pc, #224]	; (406b84 <task_wifi+0x144>)
  406aa2:	4629      	mov	r1, r5
  406aa4:	4838      	ldr	r0, [pc, #224]	; (406b88 <task_wifi+0x148>)
  406aa6:	4c32      	ldr	r4, [pc, #200]	; (406b70 <task_wifi+0x130>)
  406aa8:	47a0      	blx	r4
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  406aaa:	23ff      	movs	r3, #255	; 0xff
  406aac:	9300      	str	r3, [sp, #0]
  406aae:	4b37      	ldr	r3, [pc, #220]	; (406b8c <task_wifi+0x14c>)
  406ab0:	2202      	movs	r2, #2
  406ab2:	210a      	movs	r1, #10
  406ab4:	4628      	mov	r0, r5
  406ab6:	4d36      	ldr	r5, [pc, #216]	; (406b90 <task_wifi+0x150>)
  406ab8:	47a8      	blx	r5

	/* formata ip */
	addr_in.sin_family = AF_INET;
  406aba:	2302      	movs	r3, #2
  406abc:	f8ad 3008 	strh.w	r3, [sp, #8]
	addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  406ac0:	f648 0313 	movw	r3, #34835	; 0x8813
  406ac4:	f8ad 300a 	strh.w	r3, [sp, #10]
	inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  406ac8:	a903      	add	r1, sp, #12
  406aca:	4832      	ldr	r0, [pc, #200]	; (406b94 <task_wifi+0x154>)
  406acc:	4b32      	ldr	r3, [pc, #200]	; (406b98 <task_wifi+0x158>)
  406ace:	4798      	blx	r3

	printf(STRING_LINE);
  406ad0:	4832      	ldr	r0, [pc, #200]	; (406b9c <task_wifi+0x15c>)
  406ad2:	47a0      	blx	r4

	while(1){
		vTaskDelay(50);
  406ad4:	4e32      	ldr	r6, [pc, #200]	; (406ba0 <task_wifi+0x160>)
		m2m_wifi_handle_events(NULL);
  406ad6:	4d33      	ldr	r5, [pc, #204]	; (406ba4 <task_wifi+0x164>)
		
		if (wifi_connected == M2M_WIFI_CONNECTED) {
  406ad8:	4c33      	ldr	r4, [pc, #204]	; (406ba8 <task_wifi+0x168>)
  406ada:	e001      	b.n	406ae0 <task_wifi+0xa0>
			/* Open client socket. */
			if (tcp_client_socket < 0) {
				printf(STRING_LINE);
				printf("socket init \n");
				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
					printf("main: failed to create TCP client socket error!\r\n");
  406adc:	4833      	ldr	r0, [pc, #204]	; (406bac <task_wifi+0x16c>)
  406ade:	47b8      	blx	r7
		vTaskDelay(50);
  406ae0:	2032      	movs	r0, #50	; 0x32
  406ae2:	47b0      	blx	r6
		m2m_wifi_handle_events(NULL);
  406ae4:	2000      	movs	r0, #0
  406ae6:	47a8      	blx	r5
		if (wifi_connected == M2M_WIFI_CONNECTED) {
  406ae8:	7823      	ldrb	r3, [r4, #0]
  406aea:	2b01      	cmp	r3, #1
  406aec:	d1f8      	bne.n	406ae0 <task_wifi+0xa0>
			if (tcp_client_socket < 0) {
  406aee:	4b30      	ldr	r3, [pc, #192]	; (406bb0 <task_wifi+0x170>)
  406af0:	f993 3000 	ldrsb.w	r3, [r3]
  406af4:	2b00      	cmp	r3, #0
  406af6:	daf3      	bge.n	406ae0 <task_wifi+0xa0>
				printf(STRING_LINE);
  406af8:	4828      	ldr	r0, [pc, #160]	; (406b9c <task_wifi+0x15c>)
  406afa:	4f1d      	ldr	r7, [pc, #116]	; (406b70 <task_wifi+0x130>)
  406afc:	47b8      	blx	r7
				printf("socket init \n");
  406afe:	482d      	ldr	r0, [pc, #180]	; (406bb4 <task_wifi+0x174>)
  406b00:	47b8      	blx	r7
				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  406b02:	2200      	movs	r2, #0
  406b04:	2101      	movs	r1, #1
  406b06:	2002      	movs	r0, #2
  406b08:	4b2b      	ldr	r3, [pc, #172]	; (406bb8 <task_wifi+0x178>)
  406b0a:	4798      	blx	r3
  406b0c:	4b28      	ldr	r3, [pc, #160]	; (406bb0 <task_wifi+0x170>)
  406b0e:	7018      	strb	r0, [r3, #0]
  406b10:	2800      	cmp	r0, #0
  406b12:	dbe3      	blt.n	406adc <task_wifi+0x9c>
					continue;
				}

				/* Connect server */
				printf("socket connecting\n");
  406b14:	4829      	ldr	r0, [pc, #164]	; (406bbc <task_wifi+0x17c>)
  406b16:	4b16      	ldr	r3, [pc, #88]	; (406b70 <task_wifi+0x130>)
  406b18:	4798      	blx	r3
				if (connect(tcp_client_socket, (struct sockaddr *)&addr_in,
  406b1a:	2210      	movs	r2, #16
  406b1c:	a902      	add	r1, sp, #8
  406b1e:	4b24      	ldr	r3, [pc, #144]	; (406bb0 <task_wifi+0x170>)
  406b20:	f993 0000 	ldrsb.w	r0, [r3]
  406b24:	4b26      	ldr	r3, [pc, #152]	; (406bc0 <task_wifi+0x180>)
  406b26:	4798      	blx	r3
  406b28:	b918      	cbnz	r0, 406b32 <task_wifi+0xf2>
				sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
					close(tcp_client_socket);
					tcp_client_socket = -1;
					printf("main: error connect to socket\n");
					}else{
					gbTcpConnection = true;
  406b2a:	2201      	movs	r2, #1
  406b2c:	4b25      	ldr	r3, [pc, #148]	; (406bc4 <task_wifi+0x184>)
  406b2e:	701a      	strb	r2, [r3, #0]
  406b30:	e7d6      	b.n	406ae0 <task_wifi+0xa0>
					close(tcp_client_socket);
  406b32:	4f1f      	ldr	r7, [pc, #124]	; (406bb0 <task_wifi+0x170>)
  406b34:	f997 0000 	ldrsb.w	r0, [r7]
  406b38:	4b23      	ldr	r3, [pc, #140]	; (406bc8 <task_wifi+0x188>)
  406b3a:	4798      	blx	r3
					tcp_client_socket = -1;
  406b3c:	23ff      	movs	r3, #255	; 0xff
  406b3e:	703b      	strb	r3, [r7, #0]
					printf("main: error connect to socket\n");
  406b40:	4822      	ldr	r0, [pc, #136]	; (406bcc <task_wifi+0x18c>)
  406b42:	4b0b      	ldr	r3, [pc, #44]	; (406b70 <task_wifi+0x130>)
  406b44:	4798      	blx	r3
  406b46:	e7cb      	b.n	406ae0 <task_wifi+0xa0>
  406b48:	00401055 	.word	0x00401055
  406b4c:	2040d114 	.word	0x2040d114
  406b50:	00400fd9 	.word	0x00400fd9
  406b54:	2040d198 	.word	0x2040d198
  406b58:	004069b5 	.word	0x004069b5
  406b5c:	2040d110 	.word	0x2040d110
  406b60:	00402779 	.word	0x00402779
  406b64:	004068f5 	.word	0x004068f5
  406b68:	004035c9 	.word	0x004035c9
  406b6c:	0040e5d0 	.word	0x0040e5d0
  406b70:	00406c9d 	.word	0x00406c9d
  406b74:	00404d79 	.word	0x00404d79
  406b78:	00405ff5 	.word	0x00405ff5
  406b7c:	00406209 	.word	0x00406209
  406b80:	00404dbd 	.word	0x00404dbd
  406b84:	0040e5f8 	.word	0x0040e5f8
  406b88:	0040e604 	.word	0x0040e604
  406b8c:	0040e628 	.word	0x0040e628
  406b90:	00403921 	.word	0x00403921
  406b94:	0040e634 	.word	0x0040e634
  406b98:	004008b9 	.word	0x004008b9
  406b9c:	0040e31c 	.word	0x0040e31c
  406ba0:	00401ca1 	.word	0x00401ca1
  406ba4:	004036c5 	.word	0x004036c5
  406ba8:	2040cefc 	.word	0x2040cefc
  406bac:	0040e650 	.word	0x0040e650
  406bb0:	20400038 	.word	0x20400038
  406bb4:	0040e640 	.word	0x0040e640
  406bb8:	00404dd1 	.word	0x00404dd1
  406bbc:	0040e684 	.word	0x0040e684
  406bc0:	00404eb1 	.word	0x00404eb1
  406bc4:	2040cef4 	.word	0x2040cef4
  406bc8:	0040507d 	.word	0x0040507d
  406bcc:	0040e698 	.word	0x0040e698

00406bd0 <main>:
		}
	}
}

int main(void)
{
  406bd0:	b500      	push	{lr}
  406bd2:	b085      	sub	sp, #20
	/* Initialize the board. */
	sysclk_init();
  406bd4:	4b11      	ldr	r3, [pc, #68]	; (406c1c <main+0x4c>)
  406bd6:	4798      	blx	r3
	board_init();
  406bd8:	4b11      	ldr	r3, [pc, #68]	; (406c20 <main+0x50>)
  406bda:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
  406bdc:	4b11      	ldr	r3, [pc, #68]	; (406c24 <main+0x54>)
  406bde:	4798      	blx	r3
	printf(STRING_HEADER);
  406be0:	4811      	ldr	r0, [pc, #68]	; (406c28 <main+0x58>)
  406be2:	4b12      	ldr	r3, [pc, #72]	; (406c2c <main+0x5c>)
  406be4:	4798      	blx	r3

	xTaskCreate(task_wifi, "Wifi", TASK_WIFI_STACK_SIZE, NULL, TASK_WIFI_PRIORITY, &xHandleWifi);
  406be6:	2400      	movs	r4, #0
  406be8:	9403      	str	r4, [sp, #12]
  406bea:	9402      	str	r4, [sp, #8]
  406bec:	4b10      	ldr	r3, [pc, #64]	; (406c30 <main+0x60>)
  406bee:	9301      	str	r3, [sp, #4]
  406bf0:	2301      	movs	r3, #1
  406bf2:	9300      	str	r3, [sp, #0]
  406bf4:	4623      	mov	r3, r4
  406bf6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
  406bfa:	490e      	ldr	r1, [pc, #56]	; (406c34 <main+0x64>)
  406bfc:	480e      	ldr	r0, [pc, #56]	; (406c38 <main+0x68>)
  406bfe:	4d0f      	ldr	r5, [pc, #60]	; (406c3c <main+0x6c>)
  406c00:	47a8      	blx	r5
	xTaskCreate(task_process, "process", TASK_PROCESS_STACK_SIZE, NULL, TASK_PROCESS_PRIORITY,  NULL );
  406c02:	9403      	str	r4, [sp, #12]
  406c04:	9402      	str	r4, [sp, #8]
  406c06:	9401      	str	r4, [sp, #4]
  406c08:	9400      	str	r4, [sp, #0]
  406c0a:	4623      	mov	r3, r4
  406c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  406c10:	490b      	ldr	r1, [pc, #44]	; (406c40 <main+0x70>)
  406c12:	480c      	ldr	r0, [pc, #48]	; (406c44 <main+0x74>)
  406c14:	47a8      	blx	r5

	vTaskStartScheduler();
  406c16:	4b0c      	ldr	r3, [pc, #48]	; (406c48 <main+0x78>)
  406c18:	4798      	blx	r3
  406c1a:	e7fe      	b.n	406c1a <main+0x4a>
  406c1c:	004051e1 	.word	0x004051e1
  406c20:	004052dd 	.word	0x004052dd
  406c24:	00400821 	.word	0x00400821
  406c28:	0040e2c4 	.word	0x0040e2c4
  406c2c:	00406c9d 	.word	0x00406c9d
  406c30:	2040cf00 	.word	0x2040cf00
  406c34:	0040e34c 	.word	0x0040e34c
  406c38:	00406a41 	.word	0x00406a41
  406c3c:	00401759 	.word	0x00401759
  406c40:	0040e354 	.word	0x0040e354
  406c44:	004062c1 	.word	0x004062c1
  406c48:	0040198d 	.word	0x0040198d

00406c4c <__libc_init_array>:
  406c4c:	b570      	push	{r4, r5, r6, lr}
  406c4e:	4e0f      	ldr	r6, [pc, #60]	; (406c8c <__libc_init_array+0x40>)
  406c50:	4d0f      	ldr	r5, [pc, #60]	; (406c90 <__libc_init_array+0x44>)
  406c52:	1b76      	subs	r6, r6, r5
  406c54:	10b6      	asrs	r6, r6, #2
  406c56:	bf18      	it	ne
  406c58:	2400      	movne	r4, #0
  406c5a:	d005      	beq.n	406c68 <__libc_init_array+0x1c>
  406c5c:	3401      	adds	r4, #1
  406c5e:	f855 3b04 	ldr.w	r3, [r5], #4
  406c62:	4798      	blx	r3
  406c64:	42a6      	cmp	r6, r4
  406c66:	d1f9      	bne.n	406c5c <__libc_init_array+0x10>
  406c68:	4e0a      	ldr	r6, [pc, #40]	; (406c94 <__libc_init_array+0x48>)
  406c6a:	4d0b      	ldr	r5, [pc, #44]	; (406c98 <__libc_init_array+0x4c>)
  406c6c:	1b76      	subs	r6, r6, r5
  406c6e:	f007 fed7 	bl	40ea20 <_init>
  406c72:	10b6      	asrs	r6, r6, #2
  406c74:	bf18      	it	ne
  406c76:	2400      	movne	r4, #0
  406c78:	d006      	beq.n	406c88 <__libc_init_array+0x3c>
  406c7a:	3401      	adds	r4, #1
  406c7c:	f855 3b04 	ldr.w	r3, [r5], #4
  406c80:	4798      	blx	r3
  406c82:	42a6      	cmp	r6, r4
  406c84:	d1f9      	bne.n	406c7a <__libc_init_array+0x2e>
  406c86:	bd70      	pop	{r4, r5, r6, pc}
  406c88:	bd70      	pop	{r4, r5, r6, pc}
  406c8a:	bf00      	nop
  406c8c:	0040ea2c 	.word	0x0040ea2c
  406c90:	0040ea2c 	.word	0x0040ea2c
  406c94:	0040ea34 	.word	0x0040ea34
  406c98:	0040ea2c 	.word	0x0040ea2c

00406c9c <iprintf>:
  406c9c:	b40f      	push	{r0, r1, r2, r3}
  406c9e:	b500      	push	{lr}
  406ca0:	4907      	ldr	r1, [pc, #28]	; (406cc0 <iprintf+0x24>)
  406ca2:	b083      	sub	sp, #12
  406ca4:	ab04      	add	r3, sp, #16
  406ca6:	6808      	ldr	r0, [r1, #0]
  406ca8:	f853 2b04 	ldr.w	r2, [r3], #4
  406cac:	6881      	ldr	r1, [r0, #8]
  406cae:	9301      	str	r3, [sp, #4]
  406cb0:	f001 ff26 	bl	408b00 <_vfiprintf_r>
  406cb4:	b003      	add	sp, #12
  406cb6:	f85d eb04 	ldr.w	lr, [sp], #4
  406cba:	b004      	add	sp, #16
  406cbc:	4770      	bx	lr
  406cbe:	bf00      	nop
  406cc0:	2040003c 	.word	0x2040003c

00406cc4 <memcpy>:
  406cc4:	4684      	mov	ip, r0
  406cc6:	ea41 0300 	orr.w	r3, r1, r0
  406cca:	f013 0303 	ands.w	r3, r3, #3
  406cce:	d16d      	bne.n	406dac <memcpy+0xe8>
  406cd0:	3a40      	subs	r2, #64	; 0x40
  406cd2:	d341      	bcc.n	406d58 <memcpy+0x94>
  406cd4:	f851 3b04 	ldr.w	r3, [r1], #4
  406cd8:	f840 3b04 	str.w	r3, [r0], #4
  406cdc:	f851 3b04 	ldr.w	r3, [r1], #4
  406ce0:	f840 3b04 	str.w	r3, [r0], #4
  406ce4:	f851 3b04 	ldr.w	r3, [r1], #4
  406ce8:	f840 3b04 	str.w	r3, [r0], #4
  406cec:	f851 3b04 	ldr.w	r3, [r1], #4
  406cf0:	f840 3b04 	str.w	r3, [r0], #4
  406cf4:	f851 3b04 	ldr.w	r3, [r1], #4
  406cf8:	f840 3b04 	str.w	r3, [r0], #4
  406cfc:	f851 3b04 	ldr.w	r3, [r1], #4
  406d00:	f840 3b04 	str.w	r3, [r0], #4
  406d04:	f851 3b04 	ldr.w	r3, [r1], #4
  406d08:	f840 3b04 	str.w	r3, [r0], #4
  406d0c:	f851 3b04 	ldr.w	r3, [r1], #4
  406d10:	f840 3b04 	str.w	r3, [r0], #4
  406d14:	f851 3b04 	ldr.w	r3, [r1], #4
  406d18:	f840 3b04 	str.w	r3, [r0], #4
  406d1c:	f851 3b04 	ldr.w	r3, [r1], #4
  406d20:	f840 3b04 	str.w	r3, [r0], #4
  406d24:	f851 3b04 	ldr.w	r3, [r1], #4
  406d28:	f840 3b04 	str.w	r3, [r0], #4
  406d2c:	f851 3b04 	ldr.w	r3, [r1], #4
  406d30:	f840 3b04 	str.w	r3, [r0], #4
  406d34:	f851 3b04 	ldr.w	r3, [r1], #4
  406d38:	f840 3b04 	str.w	r3, [r0], #4
  406d3c:	f851 3b04 	ldr.w	r3, [r1], #4
  406d40:	f840 3b04 	str.w	r3, [r0], #4
  406d44:	f851 3b04 	ldr.w	r3, [r1], #4
  406d48:	f840 3b04 	str.w	r3, [r0], #4
  406d4c:	f851 3b04 	ldr.w	r3, [r1], #4
  406d50:	f840 3b04 	str.w	r3, [r0], #4
  406d54:	3a40      	subs	r2, #64	; 0x40
  406d56:	d2bd      	bcs.n	406cd4 <memcpy+0x10>
  406d58:	3230      	adds	r2, #48	; 0x30
  406d5a:	d311      	bcc.n	406d80 <memcpy+0xbc>
  406d5c:	f851 3b04 	ldr.w	r3, [r1], #4
  406d60:	f840 3b04 	str.w	r3, [r0], #4
  406d64:	f851 3b04 	ldr.w	r3, [r1], #4
  406d68:	f840 3b04 	str.w	r3, [r0], #4
  406d6c:	f851 3b04 	ldr.w	r3, [r1], #4
  406d70:	f840 3b04 	str.w	r3, [r0], #4
  406d74:	f851 3b04 	ldr.w	r3, [r1], #4
  406d78:	f840 3b04 	str.w	r3, [r0], #4
  406d7c:	3a10      	subs	r2, #16
  406d7e:	d2ed      	bcs.n	406d5c <memcpy+0x98>
  406d80:	320c      	adds	r2, #12
  406d82:	d305      	bcc.n	406d90 <memcpy+0xcc>
  406d84:	f851 3b04 	ldr.w	r3, [r1], #4
  406d88:	f840 3b04 	str.w	r3, [r0], #4
  406d8c:	3a04      	subs	r2, #4
  406d8e:	d2f9      	bcs.n	406d84 <memcpy+0xc0>
  406d90:	3204      	adds	r2, #4
  406d92:	d008      	beq.n	406da6 <memcpy+0xe2>
  406d94:	07d2      	lsls	r2, r2, #31
  406d96:	bf1c      	itt	ne
  406d98:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406d9c:	f800 3b01 	strbne.w	r3, [r0], #1
  406da0:	d301      	bcc.n	406da6 <memcpy+0xe2>
  406da2:	880b      	ldrh	r3, [r1, #0]
  406da4:	8003      	strh	r3, [r0, #0]
  406da6:	4660      	mov	r0, ip
  406da8:	4770      	bx	lr
  406daa:	bf00      	nop
  406dac:	2a08      	cmp	r2, #8
  406dae:	d313      	bcc.n	406dd8 <memcpy+0x114>
  406db0:	078b      	lsls	r3, r1, #30
  406db2:	d08d      	beq.n	406cd0 <memcpy+0xc>
  406db4:	f010 0303 	ands.w	r3, r0, #3
  406db8:	d08a      	beq.n	406cd0 <memcpy+0xc>
  406dba:	f1c3 0304 	rsb	r3, r3, #4
  406dbe:	1ad2      	subs	r2, r2, r3
  406dc0:	07db      	lsls	r3, r3, #31
  406dc2:	bf1c      	itt	ne
  406dc4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406dc8:	f800 3b01 	strbne.w	r3, [r0], #1
  406dcc:	d380      	bcc.n	406cd0 <memcpy+0xc>
  406dce:	f831 3b02 	ldrh.w	r3, [r1], #2
  406dd2:	f820 3b02 	strh.w	r3, [r0], #2
  406dd6:	e77b      	b.n	406cd0 <memcpy+0xc>
  406dd8:	3a04      	subs	r2, #4
  406dda:	d3d9      	bcc.n	406d90 <memcpy+0xcc>
  406ddc:	3a01      	subs	r2, #1
  406dde:	f811 3b01 	ldrb.w	r3, [r1], #1
  406de2:	f800 3b01 	strb.w	r3, [r0], #1
  406de6:	d2f9      	bcs.n	406ddc <memcpy+0x118>
  406de8:	780b      	ldrb	r3, [r1, #0]
  406dea:	7003      	strb	r3, [r0, #0]
  406dec:	784b      	ldrb	r3, [r1, #1]
  406dee:	7043      	strb	r3, [r0, #1]
  406df0:	788b      	ldrb	r3, [r1, #2]
  406df2:	7083      	strb	r3, [r0, #2]
  406df4:	4660      	mov	r0, ip
  406df6:	4770      	bx	lr

00406df8 <memset>:
  406df8:	b470      	push	{r4, r5, r6}
  406dfa:	0786      	lsls	r6, r0, #30
  406dfc:	d046      	beq.n	406e8c <memset+0x94>
  406dfe:	1e54      	subs	r4, r2, #1
  406e00:	2a00      	cmp	r2, #0
  406e02:	d041      	beq.n	406e88 <memset+0x90>
  406e04:	b2ca      	uxtb	r2, r1
  406e06:	4603      	mov	r3, r0
  406e08:	e002      	b.n	406e10 <memset+0x18>
  406e0a:	f114 34ff 	adds.w	r4, r4, #4294967295
  406e0e:	d33b      	bcc.n	406e88 <memset+0x90>
  406e10:	f803 2b01 	strb.w	r2, [r3], #1
  406e14:	079d      	lsls	r5, r3, #30
  406e16:	d1f8      	bne.n	406e0a <memset+0x12>
  406e18:	2c03      	cmp	r4, #3
  406e1a:	d92e      	bls.n	406e7a <memset+0x82>
  406e1c:	b2cd      	uxtb	r5, r1
  406e1e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406e22:	2c0f      	cmp	r4, #15
  406e24:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406e28:	d919      	bls.n	406e5e <memset+0x66>
  406e2a:	f103 0210 	add.w	r2, r3, #16
  406e2e:	4626      	mov	r6, r4
  406e30:	3e10      	subs	r6, #16
  406e32:	2e0f      	cmp	r6, #15
  406e34:	f842 5c10 	str.w	r5, [r2, #-16]
  406e38:	f842 5c0c 	str.w	r5, [r2, #-12]
  406e3c:	f842 5c08 	str.w	r5, [r2, #-8]
  406e40:	f842 5c04 	str.w	r5, [r2, #-4]
  406e44:	f102 0210 	add.w	r2, r2, #16
  406e48:	d8f2      	bhi.n	406e30 <memset+0x38>
  406e4a:	f1a4 0210 	sub.w	r2, r4, #16
  406e4e:	f022 020f 	bic.w	r2, r2, #15
  406e52:	f004 040f 	and.w	r4, r4, #15
  406e56:	3210      	adds	r2, #16
  406e58:	2c03      	cmp	r4, #3
  406e5a:	4413      	add	r3, r2
  406e5c:	d90d      	bls.n	406e7a <memset+0x82>
  406e5e:	461e      	mov	r6, r3
  406e60:	4622      	mov	r2, r4
  406e62:	3a04      	subs	r2, #4
  406e64:	2a03      	cmp	r2, #3
  406e66:	f846 5b04 	str.w	r5, [r6], #4
  406e6a:	d8fa      	bhi.n	406e62 <memset+0x6a>
  406e6c:	1f22      	subs	r2, r4, #4
  406e6e:	f022 0203 	bic.w	r2, r2, #3
  406e72:	3204      	adds	r2, #4
  406e74:	4413      	add	r3, r2
  406e76:	f004 0403 	and.w	r4, r4, #3
  406e7a:	b12c      	cbz	r4, 406e88 <memset+0x90>
  406e7c:	b2c9      	uxtb	r1, r1
  406e7e:	441c      	add	r4, r3
  406e80:	f803 1b01 	strb.w	r1, [r3], #1
  406e84:	429c      	cmp	r4, r3
  406e86:	d1fb      	bne.n	406e80 <memset+0x88>
  406e88:	bc70      	pop	{r4, r5, r6}
  406e8a:	4770      	bx	lr
  406e8c:	4614      	mov	r4, r2
  406e8e:	4603      	mov	r3, r0
  406e90:	e7c2      	b.n	406e18 <memset+0x20>
  406e92:	bf00      	nop

00406e94 <setbuf>:
  406e94:	2900      	cmp	r1, #0
  406e96:	bf0c      	ite	eq
  406e98:	2202      	moveq	r2, #2
  406e9a:	2200      	movne	r2, #0
  406e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406ea0:	f000 b800 	b.w	406ea4 <setvbuf>

00406ea4 <setvbuf>:
  406ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406ea8:	4c61      	ldr	r4, [pc, #388]	; (407030 <setvbuf+0x18c>)
  406eaa:	6825      	ldr	r5, [r4, #0]
  406eac:	b083      	sub	sp, #12
  406eae:	4604      	mov	r4, r0
  406eb0:	460f      	mov	r7, r1
  406eb2:	4690      	mov	r8, r2
  406eb4:	461e      	mov	r6, r3
  406eb6:	b115      	cbz	r5, 406ebe <setvbuf+0x1a>
  406eb8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406eba:	2b00      	cmp	r3, #0
  406ebc:	d064      	beq.n	406f88 <setvbuf+0xe4>
  406ebe:	f1b8 0f02 	cmp.w	r8, #2
  406ec2:	d006      	beq.n	406ed2 <setvbuf+0x2e>
  406ec4:	f1b8 0f01 	cmp.w	r8, #1
  406ec8:	f200 809f 	bhi.w	40700a <setvbuf+0x166>
  406ecc:	2e00      	cmp	r6, #0
  406ece:	f2c0 809c 	blt.w	40700a <setvbuf+0x166>
  406ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406ed4:	07d8      	lsls	r0, r3, #31
  406ed6:	d534      	bpl.n	406f42 <setvbuf+0x9e>
  406ed8:	4621      	mov	r1, r4
  406eda:	4628      	mov	r0, r5
  406edc:	f003 fd6e 	bl	40a9bc <_fflush_r>
  406ee0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406ee2:	b141      	cbz	r1, 406ef6 <setvbuf+0x52>
  406ee4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406ee8:	4299      	cmp	r1, r3
  406eea:	d002      	beq.n	406ef2 <setvbuf+0x4e>
  406eec:	4628      	mov	r0, r5
  406eee:	f003 fee3 	bl	40acb8 <_free_r>
  406ef2:	2300      	movs	r3, #0
  406ef4:	6323      	str	r3, [r4, #48]	; 0x30
  406ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406efa:	2200      	movs	r2, #0
  406efc:	61a2      	str	r2, [r4, #24]
  406efe:	6062      	str	r2, [r4, #4]
  406f00:	061a      	lsls	r2, r3, #24
  406f02:	d43a      	bmi.n	406f7a <setvbuf+0xd6>
  406f04:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  406f08:	f023 0303 	bic.w	r3, r3, #3
  406f0c:	f1b8 0f02 	cmp.w	r8, #2
  406f10:	81a3      	strh	r3, [r4, #12]
  406f12:	d01d      	beq.n	406f50 <setvbuf+0xac>
  406f14:	ab01      	add	r3, sp, #4
  406f16:	466a      	mov	r2, sp
  406f18:	4621      	mov	r1, r4
  406f1a:	4628      	mov	r0, r5
  406f1c:	f004 f978 	bl	40b210 <__swhatbuf_r>
  406f20:	89a3      	ldrh	r3, [r4, #12]
  406f22:	4318      	orrs	r0, r3
  406f24:	81a0      	strh	r0, [r4, #12]
  406f26:	2e00      	cmp	r6, #0
  406f28:	d132      	bne.n	406f90 <setvbuf+0xec>
  406f2a:	9e00      	ldr	r6, [sp, #0]
  406f2c:	4630      	mov	r0, r6
  406f2e:	f004 f9e7 	bl	40b300 <malloc>
  406f32:	4607      	mov	r7, r0
  406f34:	2800      	cmp	r0, #0
  406f36:	d06b      	beq.n	407010 <setvbuf+0x16c>
  406f38:	89a3      	ldrh	r3, [r4, #12]
  406f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406f3e:	81a3      	strh	r3, [r4, #12]
  406f40:	e028      	b.n	406f94 <setvbuf+0xf0>
  406f42:	89a3      	ldrh	r3, [r4, #12]
  406f44:	0599      	lsls	r1, r3, #22
  406f46:	d4c7      	bmi.n	406ed8 <setvbuf+0x34>
  406f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406f4a:	f004 f95d 	bl	40b208 <__retarget_lock_acquire_recursive>
  406f4e:	e7c3      	b.n	406ed8 <setvbuf+0x34>
  406f50:	2500      	movs	r5, #0
  406f52:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406f54:	2600      	movs	r6, #0
  406f56:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406f5a:	f043 0302 	orr.w	r3, r3, #2
  406f5e:	2001      	movs	r0, #1
  406f60:	60a6      	str	r6, [r4, #8]
  406f62:	07ce      	lsls	r6, r1, #31
  406f64:	81a3      	strh	r3, [r4, #12]
  406f66:	6022      	str	r2, [r4, #0]
  406f68:	6122      	str	r2, [r4, #16]
  406f6a:	6160      	str	r0, [r4, #20]
  406f6c:	d401      	bmi.n	406f72 <setvbuf+0xce>
  406f6e:	0598      	lsls	r0, r3, #22
  406f70:	d53e      	bpl.n	406ff0 <setvbuf+0x14c>
  406f72:	4628      	mov	r0, r5
  406f74:	b003      	add	sp, #12
  406f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406f7a:	6921      	ldr	r1, [r4, #16]
  406f7c:	4628      	mov	r0, r5
  406f7e:	f003 fe9b 	bl	40acb8 <_free_r>
  406f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406f86:	e7bd      	b.n	406f04 <setvbuf+0x60>
  406f88:	4628      	mov	r0, r5
  406f8a:	f003 fd6f 	bl	40aa6c <__sinit>
  406f8e:	e796      	b.n	406ebe <setvbuf+0x1a>
  406f90:	2f00      	cmp	r7, #0
  406f92:	d0cb      	beq.n	406f2c <setvbuf+0x88>
  406f94:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406f96:	2b00      	cmp	r3, #0
  406f98:	d033      	beq.n	407002 <setvbuf+0x15e>
  406f9a:	9b00      	ldr	r3, [sp, #0]
  406f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406fa0:	6027      	str	r7, [r4, #0]
  406fa2:	429e      	cmp	r6, r3
  406fa4:	bf1c      	itt	ne
  406fa6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  406faa:	81a2      	strhne	r2, [r4, #12]
  406fac:	f1b8 0f01 	cmp.w	r8, #1
  406fb0:	bf04      	itt	eq
  406fb2:	f042 0201 	orreq.w	r2, r2, #1
  406fb6:	81a2      	strheq	r2, [r4, #12]
  406fb8:	b292      	uxth	r2, r2
  406fba:	f012 0308 	ands.w	r3, r2, #8
  406fbe:	6127      	str	r7, [r4, #16]
  406fc0:	6166      	str	r6, [r4, #20]
  406fc2:	d00e      	beq.n	406fe2 <setvbuf+0x13e>
  406fc4:	07d1      	lsls	r1, r2, #31
  406fc6:	d51a      	bpl.n	406ffe <setvbuf+0x15a>
  406fc8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406fca:	4276      	negs	r6, r6
  406fcc:	2300      	movs	r3, #0
  406fce:	f015 0501 	ands.w	r5, r5, #1
  406fd2:	61a6      	str	r6, [r4, #24]
  406fd4:	60a3      	str	r3, [r4, #8]
  406fd6:	d009      	beq.n	406fec <setvbuf+0x148>
  406fd8:	2500      	movs	r5, #0
  406fda:	4628      	mov	r0, r5
  406fdc:	b003      	add	sp, #12
  406fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406fe2:	60a3      	str	r3, [r4, #8]
  406fe4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406fe6:	f015 0501 	ands.w	r5, r5, #1
  406fea:	d1f5      	bne.n	406fd8 <setvbuf+0x134>
  406fec:	0593      	lsls	r3, r2, #22
  406fee:	d4c0      	bmi.n	406f72 <setvbuf+0xce>
  406ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406ff2:	f004 f90b 	bl	40b20c <__retarget_lock_release_recursive>
  406ff6:	4628      	mov	r0, r5
  406ff8:	b003      	add	sp, #12
  406ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406ffe:	60a6      	str	r6, [r4, #8]
  407000:	e7f0      	b.n	406fe4 <setvbuf+0x140>
  407002:	4628      	mov	r0, r5
  407004:	f003 fd32 	bl	40aa6c <__sinit>
  407008:	e7c7      	b.n	406f9a <setvbuf+0xf6>
  40700a:	f04f 35ff 	mov.w	r5, #4294967295
  40700e:	e7b0      	b.n	406f72 <setvbuf+0xce>
  407010:	f8dd 9000 	ldr.w	r9, [sp]
  407014:	45b1      	cmp	r9, r6
  407016:	d004      	beq.n	407022 <setvbuf+0x17e>
  407018:	4648      	mov	r0, r9
  40701a:	f004 f971 	bl	40b300 <malloc>
  40701e:	4607      	mov	r7, r0
  407020:	b920      	cbnz	r0, 40702c <setvbuf+0x188>
  407022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407026:	f04f 35ff 	mov.w	r5, #4294967295
  40702a:	e792      	b.n	406f52 <setvbuf+0xae>
  40702c:	464e      	mov	r6, r9
  40702e:	e783      	b.n	406f38 <setvbuf+0x94>
  407030:	2040003c 	.word	0x2040003c

00407034 <sprintf>:
  407034:	b40e      	push	{r1, r2, r3}
  407036:	b5f0      	push	{r4, r5, r6, r7, lr}
  407038:	b09c      	sub	sp, #112	; 0x70
  40703a:	ab21      	add	r3, sp, #132	; 0x84
  40703c:	490f      	ldr	r1, [pc, #60]	; (40707c <sprintf+0x48>)
  40703e:	f853 2b04 	ldr.w	r2, [r3], #4
  407042:	9301      	str	r3, [sp, #4]
  407044:	4605      	mov	r5, r0
  407046:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40704a:	6808      	ldr	r0, [r1, #0]
  40704c:	9502      	str	r5, [sp, #8]
  40704e:	f44f 7702 	mov.w	r7, #520	; 0x208
  407052:	f64f 76ff 	movw	r6, #65535	; 0xffff
  407056:	a902      	add	r1, sp, #8
  407058:	9506      	str	r5, [sp, #24]
  40705a:	f8ad 7014 	strh.w	r7, [sp, #20]
  40705e:	9404      	str	r4, [sp, #16]
  407060:	9407      	str	r4, [sp, #28]
  407062:	f8ad 6016 	strh.w	r6, [sp, #22]
  407066:	f000 fadd 	bl	407624 <_svfprintf_r>
  40706a:	9b02      	ldr	r3, [sp, #8]
  40706c:	2200      	movs	r2, #0
  40706e:	701a      	strb	r2, [r3, #0]
  407070:	b01c      	add	sp, #112	; 0x70
  407072:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407076:	b003      	add	sp, #12
  407078:	4770      	bx	lr
  40707a:	bf00      	nop
  40707c:	2040003c 	.word	0x2040003c

00407080 <strlen>:
  407080:	f890 f000 	pld	[r0]
  407084:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407088:	f020 0107 	bic.w	r1, r0, #7
  40708c:	f06f 0c00 	mvn.w	ip, #0
  407090:	f010 0407 	ands.w	r4, r0, #7
  407094:	f891 f020 	pld	[r1, #32]
  407098:	f040 8049 	bne.w	40712e <strlen+0xae>
  40709c:	f04f 0400 	mov.w	r4, #0
  4070a0:	f06f 0007 	mvn.w	r0, #7
  4070a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4070a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4070ac:	f100 0008 	add.w	r0, r0, #8
  4070b0:	fa82 f24c 	uadd8	r2, r2, ip
  4070b4:	faa4 f28c 	sel	r2, r4, ip
  4070b8:	fa83 f34c 	uadd8	r3, r3, ip
  4070bc:	faa2 f38c 	sel	r3, r2, ip
  4070c0:	bb4b      	cbnz	r3, 407116 <strlen+0x96>
  4070c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4070c6:	fa82 f24c 	uadd8	r2, r2, ip
  4070ca:	f100 0008 	add.w	r0, r0, #8
  4070ce:	faa4 f28c 	sel	r2, r4, ip
  4070d2:	fa83 f34c 	uadd8	r3, r3, ip
  4070d6:	faa2 f38c 	sel	r3, r2, ip
  4070da:	b9e3      	cbnz	r3, 407116 <strlen+0x96>
  4070dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4070e0:	fa82 f24c 	uadd8	r2, r2, ip
  4070e4:	f100 0008 	add.w	r0, r0, #8
  4070e8:	faa4 f28c 	sel	r2, r4, ip
  4070ec:	fa83 f34c 	uadd8	r3, r3, ip
  4070f0:	faa2 f38c 	sel	r3, r2, ip
  4070f4:	b97b      	cbnz	r3, 407116 <strlen+0x96>
  4070f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4070fa:	f101 0120 	add.w	r1, r1, #32
  4070fe:	fa82 f24c 	uadd8	r2, r2, ip
  407102:	f100 0008 	add.w	r0, r0, #8
  407106:	faa4 f28c 	sel	r2, r4, ip
  40710a:	fa83 f34c 	uadd8	r3, r3, ip
  40710e:	faa2 f38c 	sel	r3, r2, ip
  407112:	2b00      	cmp	r3, #0
  407114:	d0c6      	beq.n	4070a4 <strlen+0x24>
  407116:	2a00      	cmp	r2, #0
  407118:	bf04      	itt	eq
  40711a:	3004      	addeq	r0, #4
  40711c:	461a      	moveq	r2, r3
  40711e:	ba12      	rev	r2, r2
  407120:	fab2 f282 	clz	r2, r2
  407124:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407128:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40712c:	4770      	bx	lr
  40712e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407132:	f004 0503 	and.w	r5, r4, #3
  407136:	f1c4 0000 	rsb	r0, r4, #0
  40713a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40713e:	f014 0f04 	tst.w	r4, #4
  407142:	f891 f040 	pld	[r1, #64]	; 0x40
  407146:	fa0c f505 	lsl.w	r5, ip, r5
  40714a:	ea62 0205 	orn	r2, r2, r5
  40714e:	bf1c      	itt	ne
  407150:	ea63 0305 	ornne	r3, r3, r5
  407154:	4662      	movne	r2, ip
  407156:	f04f 0400 	mov.w	r4, #0
  40715a:	e7a9      	b.n	4070b0 <strlen+0x30>

0040715c <critical_factorization>:
  40715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407160:	f04f 0e01 	mov.w	lr, #1
  407164:	4674      	mov	r4, lr
  407166:	2500      	movs	r5, #0
  407168:	f04f 36ff 	mov.w	r6, #4294967295
  40716c:	192b      	adds	r3, r5, r4
  40716e:	428b      	cmp	r3, r1
  407170:	eb00 0706 	add.w	r7, r0, r6
  407174:	d20d      	bcs.n	407192 <critical_factorization+0x36>
  407176:	5d3f      	ldrb	r7, [r7, r4]
  407178:	f810 c003 	ldrb.w	ip, [r0, r3]
  40717c:	45bc      	cmp	ip, r7
  40717e:	d22d      	bcs.n	4071dc <critical_factorization+0x80>
  407180:	461d      	mov	r5, r3
  407182:	2401      	movs	r4, #1
  407184:	eba3 0e06 	sub.w	lr, r3, r6
  407188:	192b      	adds	r3, r5, r4
  40718a:	428b      	cmp	r3, r1
  40718c:	eb00 0706 	add.w	r7, r0, r6
  407190:	d3f1      	bcc.n	407176 <critical_factorization+0x1a>
  407192:	f04f 0801 	mov.w	r8, #1
  407196:	f8c2 e000 	str.w	lr, [r2]
  40719a:	4644      	mov	r4, r8
  40719c:	2500      	movs	r5, #0
  40719e:	f04f 37ff 	mov.w	r7, #4294967295
  4071a2:	192b      	adds	r3, r5, r4
  4071a4:	4299      	cmp	r1, r3
  4071a6:	eb00 0e07 	add.w	lr, r0, r7
  4071aa:	d90e      	bls.n	4071ca <critical_factorization+0x6e>
  4071ac:	f81e e004 	ldrb.w	lr, [lr, r4]
  4071b0:	f810 c003 	ldrb.w	ip, [r0, r3]
  4071b4:	45f4      	cmp	ip, lr
  4071b6:	d918      	bls.n	4071ea <critical_factorization+0x8e>
  4071b8:	461d      	mov	r5, r3
  4071ba:	2401      	movs	r4, #1
  4071bc:	eba3 0807 	sub.w	r8, r3, r7
  4071c0:	192b      	adds	r3, r5, r4
  4071c2:	4299      	cmp	r1, r3
  4071c4:	eb00 0e07 	add.w	lr, r0, r7
  4071c8:	d8f0      	bhi.n	4071ac <critical_factorization+0x50>
  4071ca:	3701      	adds	r7, #1
  4071cc:	1c70      	adds	r0, r6, #1
  4071ce:	4287      	cmp	r7, r0
  4071d0:	bf24      	itt	cs
  4071d2:	f8c2 8000 	strcs.w	r8, [r2]
  4071d6:	4638      	movcs	r0, r7
  4071d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4071dc:	d00c      	beq.n	4071f8 <critical_factorization+0x9c>
  4071de:	f04f 0e01 	mov.w	lr, #1
  4071e2:	462e      	mov	r6, r5
  4071e4:	4674      	mov	r4, lr
  4071e6:	4475      	add	r5, lr
  4071e8:	e7c0      	b.n	40716c <critical_factorization+0x10>
  4071ea:	d00b      	beq.n	407204 <critical_factorization+0xa8>
  4071ec:	f04f 0801 	mov.w	r8, #1
  4071f0:	462f      	mov	r7, r5
  4071f2:	4644      	mov	r4, r8
  4071f4:	4445      	add	r5, r8
  4071f6:	e7d4      	b.n	4071a2 <critical_factorization+0x46>
  4071f8:	4574      	cmp	r4, lr
  4071fa:	bf12      	itee	ne
  4071fc:	3401      	addne	r4, #1
  4071fe:	461d      	moveq	r5, r3
  407200:	2401      	moveq	r4, #1
  407202:	e7b3      	b.n	40716c <critical_factorization+0x10>
  407204:	4544      	cmp	r4, r8
  407206:	bf12      	itee	ne
  407208:	3401      	addne	r4, #1
  40720a:	461d      	moveq	r5, r3
  40720c:	2401      	moveq	r4, #1
  40720e:	e7c8      	b.n	4071a2 <critical_factorization+0x46>

00407210 <two_way_long_needle>:
  407210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407214:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  407218:	4616      	mov	r6, r2
  40721a:	4605      	mov	r5, r0
  40721c:	468b      	mov	fp, r1
  40721e:	4610      	mov	r0, r2
  407220:	4619      	mov	r1, r3
  407222:	aa03      	add	r2, sp, #12
  407224:	461c      	mov	r4, r3
  407226:	f7ff ff99 	bl	40715c <critical_factorization>
  40722a:	ab03      	add	r3, sp, #12
  40722c:	4681      	mov	r9, r0
  40722e:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  407232:	f843 4f04 	str.w	r4, [r3, #4]!
  407236:	4293      	cmp	r3, r2
  407238:	d1fb      	bne.n	407232 <two_way_long_needle+0x22>
  40723a:	b14c      	cbz	r4, 407250 <two_way_long_needle+0x40>
  40723c:	1e63      	subs	r3, r4, #1
  40723e:	1e72      	subs	r2, r6, #1
  407240:	a804      	add	r0, sp, #16
  407242:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  407246:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40724a:	f113 33ff 	adds.w	r3, r3, #4294967295
  40724e:	d2f8      	bcs.n	407242 <two_way_long_needle+0x32>
  407250:	9903      	ldr	r1, [sp, #12]
  407252:	464a      	mov	r2, r9
  407254:	4431      	add	r1, r6
  407256:	4630      	mov	r0, r6
  407258:	f004 fb72 	bl	40b940 <memcmp>
  40725c:	2800      	cmp	r0, #0
  40725e:	d16f      	bne.n	407340 <two_way_long_needle+0x130>
  407260:	f109 33ff 	add.w	r3, r9, #4294967295
  407264:	9300      	str	r3, [sp, #0]
  407266:	18f3      	adds	r3, r6, r3
  407268:	4682      	mov	sl, r0
  40726a:	9301      	str	r3, [sp, #4]
  40726c:	4623      	mov	r3, r4
  40726e:	4680      	mov	r8, r0
  407270:	4654      	mov	r4, sl
  407272:	4658      	mov	r0, fp
  407274:	469a      	mov	sl, r3
  407276:	eb08 070a 	add.w	r7, r8, sl
  40727a:	1a3a      	subs	r2, r7, r0
  40727c:	2100      	movs	r1, #0
  40727e:	4428      	add	r0, r5
  407280:	f004 fb0e 	bl	40b8a0 <memchr>
  407284:	2800      	cmp	r0, #0
  407286:	d156      	bne.n	407336 <two_way_long_needle+0x126>
  407288:	2f00      	cmp	r7, #0
  40728a:	d054      	beq.n	407336 <two_way_long_needle+0x126>
  40728c:	19eb      	adds	r3, r5, r7
  40728e:	aa04      	add	r2, sp, #16
  407290:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  407294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407298:	b14b      	cbz	r3, 4072ae <two_way_long_needle+0x9e>
  40729a:	b124      	cbz	r4, 4072a6 <two_way_long_needle+0x96>
  40729c:	9a03      	ldr	r2, [sp, #12]
  40729e:	4293      	cmp	r3, r2
  4072a0:	d201      	bcs.n	4072a6 <two_way_long_needle+0x96>
  4072a2:	ebaa 0302 	sub.w	r3, sl, r2
  4072a6:	4498      	add	r8, r3
  4072a8:	2400      	movs	r4, #0
  4072aa:	4638      	mov	r0, r7
  4072ac:	e7e3      	b.n	407276 <two_way_long_needle+0x66>
  4072ae:	454c      	cmp	r4, r9
  4072b0:	4623      	mov	r3, r4
  4072b2:	f10a 3eff 	add.w	lr, sl, #4294967295
  4072b6:	bf38      	it	cc
  4072b8:	464b      	movcc	r3, r9
  4072ba:	4573      	cmp	r3, lr
  4072bc:	d213      	bcs.n	4072e6 <two_way_long_needle+0xd6>
  4072be:	eb08 0203 	add.w	r2, r8, r3
  4072c2:	f816 c003 	ldrb.w	ip, [r6, r3]
  4072c6:	5ca8      	ldrb	r0, [r5, r2]
  4072c8:	4584      	cmp	ip, r0
  4072ca:	442a      	add	r2, r5
  4072cc:	eb06 0103 	add.w	r1, r6, r3
  4072d0:	d006      	beq.n	4072e0 <two_way_long_needle+0xd0>
  4072d2:	e02c      	b.n	40732e <two_way_long_needle+0x11e>
  4072d4:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  4072d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  4072dc:	4584      	cmp	ip, r0
  4072de:	d126      	bne.n	40732e <two_way_long_needle+0x11e>
  4072e0:	3301      	adds	r3, #1
  4072e2:	4573      	cmp	r3, lr
  4072e4:	d3f6      	bcc.n	4072d4 <two_way_long_needle+0xc4>
  4072e6:	454c      	cmp	r4, r9
  4072e8:	9900      	ldr	r1, [sp, #0]
  4072ea:	f080 8089 	bcs.w	407400 <two_way_long_needle+0x1f0>
  4072ee:	9b00      	ldr	r3, [sp, #0]
  4072f0:	eb08 0203 	add.w	r2, r8, r3
  4072f4:	9b01      	ldr	r3, [sp, #4]
  4072f6:	5ca8      	ldrb	r0, [r5, r2]
  4072f8:	781b      	ldrb	r3, [r3, #0]
  4072fa:	4298      	cmp	r0, r3
  4072fc:	442a      	add	r2, r5
  4072fe:	d17f      	bne.n	407400 <two_way_long_needle+0x1f0>
  407300:	9801      	ldr	r0, [sp, #4]
  407302:	f104 3bff 	add.w	fp, r4, #4294967295
  407306:	e006      	b.n	407316 <two_way_long_needle+0x106>
  407308:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40730c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  407310:	45f4      	cmp	ip, lr
  407312:	d103      	bne.n	40731c <two_way_long_needle+0x10c>
  407314:	4619      	mov	r1, r3
  407316:	1e4b      	subs	r3, r1, #1
  407318:	459b      	cmp	fp, r3
  40731a:	d1f5      	bne.n	407308 <two_way_long_needle+0xf8>
  40731c:	3401      	adds	r4, #1
  40731e:	428c      	cmp	r4, r1
  407320:	d870      	bhi.n	407404 <two_way_long_needle+0x1f4>
  407322:	9c03      	ldr	r4, [sp, #12]
  407324:	4638      	mov	r0, r7
  407326:	44a0      	add	r8, r4
  407328:	ebaa 0404 	sub.w	r4, sl, r4
  40732c:	e7a3      	b.n	407276 <two_way_long_needle+0x66>
  40732e:	f1c9 0201 	rsb	r2, r9, #1
  407332:	4490      	add	r8, r2
  407334:	e7b7      	b.n	4072a6 <two_way_long_needle+0x96>
  407336:	2000      	movs	r0, #0
  407338:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  40733c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407340:	eba4 0309 	sub.w	r3, r4, r9
  407344:	454b      	cmp	r3, r9
  407346:	bf38      	it	cc
  407348:	464b      	movcc	r3, r9
  40734a:	3301      	adds	r3, #1
  40734c:	f109 38ff 	add.w	r8, r9, #4294967295
  407350:	9303      	str	r3, [sp, #12]
  407352:	eb06 0308 	add.w	r3, r6, r8
  407356:	4658      	mov	r0, fp
  407358:	f04f 0a00 	mov.w	sl, #0
  40735c:	46cb      	mov	fp, r9
  40735e:	4699      	mov	r9, r3
  407360:	eb0a 0704 	add.w	r7, sl, r4
  407364:	1a3a      	subs	r2, r7, r0
  407366:	2100      	movs	r1, #0
  407368:	4428      	add	r0, r5
  40736a:	f004 fa99 	bl	40b8a0 <memchr>
  40736e:	2800      	cmp	r0, #0
  407370:	d1e1      	bne.n	407336 <two_way_long_needle+0x126>
  407372:	2f00      	cmp	r7, #0
  407374:	d0df      	beq.n	407336 <two_way_long_needle+0x126>
  407376:	19eb      	adds	r3, r5, r7
  407378:	aa04      	add	r2, sp, #16
  40737a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40737e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407382:	bba3      	cbnz	r3, 4073ee <two_way_long_needle+0x1de>
  407384:	1e61      	subs	r1, r4, #1
  407386:	458b      	cmp	fp, r1
  407388:	d215      	bcs.n	4073b6 <two_way_long_needle+0x1a6>
  40738a:	eb0a 020b 	add.w	r2, sl, fp
  40738e:	f816 300b 	ldrb.w	r3, [r6, fp]
  407392:	f815 e002 	ldrb.w	lr, [r5, r2]
  407396:	459e      	cmp	lr, r3
  407398:	442a      	add	r2, r5
  40739a:	eb06 000b 	add.w	r0, r6, fp
  40739e:	465b      	mov	r3, fp
  4073a0:	d006      	beq.n	4073b0 <two_way_long_needle+0x1a0>
  4073a2:	e027      	b.n	4073f4 <two_way_long_needle+0x1e4>
  4073a4:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  4073a8:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  4073ac:	45f4      	cmp	ip, lr
  4073ae:	d121      	bne.n	4073f4 <two_way_long_needle+0x1e4>
  4073b0:	3301      	adds	r3, #1
  4073b2:	428b      	cmp	r3, r1
  4073b4:	d3f6      	bcc.n	4073a4 <two_way_long_needle+0x194>
  4073b6:	f1b8 3fff 	cmp.w	r8, #4294967295
  4073ba:	d011      	beq.n	4073e0 <two_way_long_needle+0x1d0>
  4073bc:	eb0a 0208 	add.w	r2, sl, r8
  4073c0:	f899 1000 	ldrb.w	r1, [r9]
  4073c4:	5cab      	ldrb	r3, [r5, r2]
  4073c6:	4299      	cmp	r1, r3
  4073c8:	442a      	add	r2, r5
  4073ca:	d10f      	bne.n	4073ec <two_way_long_needle+0x1dc>
  4073cc:	464b      	mov	r3, r9
  4073ce:	e005      	b.n	4073dc <two_way_long_needle+0x1cc>
  4073d0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  4073d4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4073d8:	4288      	cmp	r0, r1
  4073da:	d107      	bne.n	4073ec <two_way_long_needle+0x1dc>
  4073dc:	42b3      	cmp	r3, r6
  4073de:	d1f7      	bne.n	4073d0 <two_way_long_needle+0x1c0>
  4073e0:	eb05 000a 	add.w	r0, r5, sl
  4073e4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4073e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4073ec:	9b03      	ldr	r3, [sp, #12]
  4073ee:	449a      	add	sl, r3
  4073f0:	4638      	mov	r0, r7
  4073f2:	e7b5      	b.n	407360 <two_way_long_needle+0x150>
  4073f4:	f1cb 0201 	rsb	r2, fp, #1
  4073f8:	4492      	add	sl, r2
  4073fa:	449a      	add	sl, r3
  4073fc:	4638      	mov	r0, r7
  4073fe:	e7af      	b.n	407360 <two_way_long_needle+0x150>
  407400:	4649      	mov	r1, r9
  407402:	e78b      	b.n	40731c <two_way_long_needle+0x10c>
  407404:	eb05 0008 	add.w	r0, r5, r8
  407408:	e796      	b.n	407338 <two_way_long_needle+0x128>
  40740a:	bf00      	nop

0040740c <strstr>:
  40740c:	7802      	ldrb	r2, [r0, #0]
  40740e:	2a00      	cmp	r2, #0
  407410:	f000 8101 	beq.w	407616 <strstr+0x20a>
  407414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407418:	f891 8000 	ldrb.w	r8, [r1]
  40741c:	b085      	sub	sp, #20
  40741e:	4644      	mov	r4, r8
  407420:	f1b8 0f00 	cmp.w	r8, #0
  407424:	d016      	beq.n	407454 <strstr+0x48>
  407426:	4686      	mov	lr, r0
  407428:	f101 0c01 	add.w	ip, r1, #1
  40742c:	2701      	movs	r7, #1
  40742e:	e003      	b.n	407438 <strstr+0x2c>
  407430:	f813 4b01 	ldrb.w	r4, [r3], #1
  407434:	b16c      	cbz	r4, 407452 <strstr+0x46>
  407436:	469c      	mov	ip, r3
  407438:	42a2      	cmp	r2, r4
  40743a:	bf14      	ite	ne
  40743c:	2700      	movne	r7, #0
  40743e:	f007 0701 	andeq.w	r7, r7, #1
  407442:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  407446:	4663      	mov	r3, ip
  407448:	2a00      	cmp	r2, #0
  40744a:	d1f1      	bne.n	407430 <strstr+0x24>
  40744c:	f89c 3000 	ldrb.w	r3, [ip]
  407450:	b9fb      	cbnz	r3, 407492 <strstr+0x86>
  407452:	b117      	cbz	r7, 40745a <strstr+0x4e>
  407454:	b005      	add	sp, #20
  407456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40745a:	460e      	mov	r6, r1
  40745c:	4605      	mov	r5, r0
  40745e:	4641      	mov	r1, r8
  407460:	3001      	adds	r0, #1
  407462:	ebac 0406 	sub.w	r4, ip, r6
  407466:	f005 f801 	bl	40c46c <strchr>
  40746a:	4607      	mov	r7, r0
  40746c:	b188      	cbz	r0, 407492 <strstr+0x86>
  40746e:	2c01      	cmp	r4, #1
  407470:	d0f0      	beq.n	407454 <strstr+0x48>
  407472:	1928      	adds	r0, r5, r4
  407474:	4287      	cmp	r7, r0
  407476:	bf94      	ite	ls
  407478:	1bc1      	subls	r1, r0, r7
  40747a:	2101      	movhi	r1, #1
  40747c:	2c1f      	cmp	r4, #31
  40747e:	468b      	mov	fp, r1
  407480:	d90b      	bls.n	40749a <strstr+0x8e>
  407482:	4623      	mov	r3, r4
  407484:	4632      	mov	r2, r6
  407486:	4638      	mov	r0, r7
  407488:	f7ff fec2 	bl	407210 <two_way_long_needle>
  40748c:	b005      	add	sp, #20
  40748e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407492:	2000      	movs	r0, #0
  407494:	b005      	add	sp, #20
  407496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40749a:	aa03      	add	r2, sp, #12
  40749c:	4621      	mov	r1, r4
  40749e:	4630      	mov	r0, r6
  4074a0:	f7ff fe5c 	bl	40715c <critical_factorization>
  4074a4:	9903      	ldr	r1, [sp, #12]
  4074a6:	4680      	mov	r8, r0
  4074a8:	4602      	mov	r2, r0
  4074aa:	4431      	add	r1, r6
  4074ac:	4630      	mov	r0, r6
  4074ae:	f004 fa47 	bl	40b940 <memcmp>
  4074b2:	2800      	cmp	r0, #0
  4074b4:	d157      	bne.n	407566 <strstr+0x15a>
  4074b6:	f108 33ff 	add.w	r3, r8, #4294967295
  4074ba:	9300      	str	r3, [sp, #0]
  4074bc:	18f3      	adds	r3, r6, r3
  4074be:	4681      	mov	r9, r0
  4074c0:	4605      	mov	r5, r0
  4074c2:	9301      	str	r3, [sp, #4]
  4074c4:	4658      	mov	r0, fp
  4074c6:	46b2      	mov	sl, r6
  4074c8:	1966      	adds	r6, r4, r5
  4074ca:	1a32      	subs	r2, r6, r0
  4074cc:	2100      	movs	r1, #0
  4074ce:	4438      	add	r0, r7
  4074d0:	f004 f9e6 	bl	40b8a0 <memchr>
  4074d4:	2800      	cmp	r0, #0
  4074d6:	d1dc      	bne.n	407492 <strstr+0x86>
  4074d8:	2e00      	cmp	r6, #0
  4074da:	d0da      	beq.n	407492 <strstr+0x86>
  4074dc:	45c8      	cmp	r8, r9
  4074de:	4643      	mov	r3, r8
  4074e0:	bf38      	it	cc
  4074e2:	464b      	movcc	r3, r9
  4074e4:	429c      	cmp	r4, r3
  4074e6:	d912      	bls.n	40750e <strstr+0x102>
  4074e8:	195a      	adds	r2, r3, r5
  4074ea:	f81a 1003 	ldrb.w	r1, [sl, r3]
  4074ee:	5cb8      	ldrb	r0, [r7, r2]
  4074f0:	4281      	cmp	r1, r0
  4074f2:	443a      	add	r2, r7
  4074f4:	eb0a 0e03 	add.w	lr, sl, r3
  4074f8:	d006      	beq.n	407508 <strstr+0xfc>
  4074fa:	e02c      	b.n	407556 <strstr+0x14a>
  4074fc:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  407500:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  407504:	4288      	cmp	r0, r1
  407506:	d126      	bne.n	407556 <strstr+0x14a>
  407508:	3301      	adds	r3, #1
  40750a:	429c      	cmp	r4, r3
  40750c:	d1f6      	bne.n	4074fc <strstr+0xf0>
  40750e:	45c8      	cmp	r8, r9
  407510:	9900      	ldr	r1, [sp, #0]
  407512:	f240 8083 	bls.w	40761c <strstr+0x210>
  407516:	9b00      	ldr	r3, [sp, #0]
  407518:	18ea      	adds	r2, r5, r3
  40751a:	9b01      	ldr	r3, [sp, #4]
  40751c:	5cb8      	ldrb	r0, [r7, r2]
  40751e:	781b      	ldrb	r3, [r3, #0]
  407520:	4298      	cmp	r0, r3
  407522:	443a      	add	r2, r7
  407524:	d17a      	bne.n	40761c <strstr+0x210>
  407526:	9801      	ldr	r0, [sp, #4]
  407528:	f109 3bff 	add.w	fp, r9, #4294967295
  40752c:	e006      	b.n	40753c <strstr+0x130>
  40752e:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  407532:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  407536:	45f4      	cmp	ip, lr
  407538:	d103      	bne.n	407542 <strstr+0x136>
  40753a:	4619      	mov	r1, r3
  40753c:	1e4b      	subs	r3, r1, #1
  40753e:	455b      	cmp	r3, fp
  407540:	d1f5      	bne.n	40752e <strstr+0x122>
  407542:	f109 0901 	add.w	r9, r9, #1
  407546:	4589      	cmp	r9, r1
  407548:	d857      	bhi.n	4075fa <strstr+0x1ee>
  40754a:	9b03      	ldr	r3, [sp, #12]
  40754c:	4630      	mov	r0, r6
  40754e:	441d      	add	r5, r3
  407550:	eba4 0903 	sub.w	r9, r4, r3
  407554:	e7b8      	b.n	4074c8 <strstr+0xbc>
  407556:	f1c8 0201 	rsb	r2, r8, #1
  40755a:	4415      	add	r5, r2
  40755c:	441d      	add	r5, r3
  40755e:	f04f 0900 	mov.w	r9, #0
  407562:	4630      	mov	r0, r6
  407564:	e7b0      	b.n	4074c8 <strstr+0xbc>
  407566:	eba4 0308 	sub.w	r3, r4, r8
  40756a:	4543      	cmp	r3, r8
  40756c:	bf38      	it	cc
  40756e:	4643      	movcc	r3, r8
  407570:	3301      	adds	r3, #1
  407572:	f108 39ff 	add.w	r9, r8, #4294967295
  407576:	9303      	str	r3, [sp, #12]
  407578:	eb06 0309 	add.w	r3, r6, r9
  40757c:	4658      	mov	r0, fp
  40757e:	2500      	movs	r5, #0
  407580:	46bb      	mov	fp, r7
  407582:	469a      	mov	sl, r3
  407584:	1967      	adds	r7, r4, r5
  407586:	1a3a      	subs	r2, r7, r0
  407588:	2100      	movs	r1, #0
  40758a:	4458      	add	r0, fp
  40758c:	f004 f988 	bl	40b8a0 <memchr>
  407590:	2800      	cmp	r0, #0
  407592:	f47f af7e 	bne.w	407492 <strstr+0x86>
  407596:	2f00      	cmp	r7, #0
  407598:	f43f af7b 	beq.w	407492 <strstr+0x86>
  40759c:	4544      	cmp	r4, r8
  40759e:	d915      	bls.n	4075cc <strstr+0x1c0>
  4075a0:	eb08 0205 	add.w	r2, r8, r5
  4075a4:	f816 3008 	ldrb.w	r3, [r6, r8]
  4075a8:	f81b 0002 	ldrb.w	r0, [fp, r2]
  4075ac:	4298      	cmp	r0, r3
  4075ae:	445a      	add	r2, fp
  4075b0:	eb06 0108 	add.w	r1, r6, r8
  4075b4:	4643      	mov	r3, r8
  4075b6:	d006      	beq.n	4075c6 <strstr+0x1ba>
  4075b8:	e023      	b.n	407602 <strstr+0x1f6>
  4075ba:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  4075be:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  4075c2:	4586      	cmp	lr, r0
  4075c4:	d11d      	bne.n	407602 <strstr+0x1f6>
  4075c6:	3301      	adds	r3, #1
  4075c8:	429c      	cmp	r4, r3
  4075ca:	d1f6      	bne.n	4075ba <strstr+0x1ae>
  4075cc:	f1b9 3fff 	cmp.w	r9, #4294967295
  4075d0:	d012      	beq.n	4075f8 <strstr+0x1ec>
  4075d2:	eb05 0209 	add.w	r2, r5, r9
  4075d6:	f89a 3000 	ldrb.w	r3, [sl]
  4075da:	f81b 1002 	ldrb.w	r1, [fp, r2]
  4075de:	4299      	cmp	r1, r3
  4075e0:	445a      	add	r2, fp
  4075e2:	d114      	bne.n	40760e <strstr+0x202>
  4075e4:	4653      	mov	r3, sl
  4075e6:	e005      	b.n	4075f4 <strstr+0x1e8>
  4075e8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  4075ec:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4075f0:	4288      	cmp	r0, r1
  4075f2:	d10c      	bne.n	40760e <strstr+0x202>
  4075f4:	42b3      	cmp	r3, r6
  4075f6:	d1f7      	bne.n	4075e8 <strstr+0x1dc>
  4075f8:	465f      	mov	r7, fp
  4075fa:	1978      	adds	r0, r7, r5
  4075fc:	b005      	add	sp, #20
  4075fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407602:	f1c8 0201 	rsb	r2, r8, #1
  407606:	4415      	add	r5, r2
  407608:	441d      	add	r5, r3
  40760a:	4638      	mov	r0, r7
  40760c:	e7ba      	b.n	407584 <strstr+0x178>
  40760e:	9b03      	ldr	r3, [sp, #12]
  407610:	4638      	mov	r0, r7
  407612:	441d      	add	r5, r3
  407614:	e7b6      	b.n	407584 <strstr+0x178>
  407616:	780b      	ldrb	r3, [r1, #0]
  407618:	b913      	cbnz	r3, 407620 <strstr+0x214>
  40761a:	4770      	bx	lr
  40761c:	4641      	mov	r1, r8
  40761e:	e790      	b.n	407542 <strstr+0x136>
  407620:	2000      	movs	r0, #0
  407622:	4770      	bx	lr

00407624 <_svfprintf_r>:
  407624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407628:	b0c3      	sub	sp, #268	; 0x10c
  40762a:	460c      	mov	r4, r1
  40762c:	910b      	str	r1, [sp, #44]	; 0x2c
  40762e:	4692      	mov	sl, r2
  407630:	930f      	str	r3, [sp, #60]	; 0x3c
  407632:	900c      	str	r0, [sp, #48]	; 0x30
  407634:	f003 fdd6 	bl	40b1e4 <_localeconv_r>
  407638:	6803      	ldr	r3, [r0, #0]
  40763a:	931a      	str	r3, [sp, #104]	; 0x68
  40763c:	4618      	mov	r0, r3
  40763e:	f7ff fd1f 	bl	407080 <strlen>
  407642:	89a3      	ldrh	r3, [r4, #12]
  407644:	9019      	str	r0, [sp, #100]	; 0x64
  407646:	0619      	lsls	r1, r3, #24
  407648:	d503      	bpl.n	407652 <_svfprintf_r+0x2e>
  40764a:	6923      	ldr	r3, [r4, #16]
  40764c:	2b00      	cmp	r3, #0
  40764e:	f001 8003 	beq.w	408658 <_svfprintf_r+0x1034>
  407652:	2300      	movs	r3, #0
  407654:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  407658:	9313      	str	r3, [sp, #76]	; 0x4c
  40765a:	9315      	str	r3, [sp, #84]	; 0x54
  40765c:	9314      	str	r3, [sp, #80]	; 0x50
  40765e:	9327      	str	r3, [sp, #156]	; 0x9c
  407660:	9326      	str	r3, [sp, #152]	; 0x98
  407662:	9318      	str	r3, [sp, #96]	; 0x60
  407664:	931b      	str	r3, [sp, #108]	; 0x6c
  407666:	9309      	str	r3, [sp, #36]	; 0x24
  407668:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  40766c:	46c8      	mov	r8, r9
  40766e:	9316      	str	r3, [sp, #88]	; 0x58
  407670:	9317      	str	r3, [sp, #92]	; 0x5c
  407672:	f89a 3000 	ldrb.w	r3, [sl]
  407676:	4654      	mov	r4, sl
  407678:	b1e3      	cbz	r3, 4076b4 <_svfprintf_r+0x90>
  40767a:	2b25      	cmp	r3, #37	; 0x25
  40767c:	d102      	bne.n	407684 <_svfprintf_r+0x60>
  40767e:	e019      	b.n	4076b4 <_svfprintf_r+0x90>
  407680:	2b25      	cmp	r3, #37	; 0x25
  407682:	d003      	beq.n	40768c <_svfprintf_r+0x68>
  407684:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  407688:	2b00      	cmp	r3, #0
  40768a:	d1f9      	bne.n	407680 <_svfprintf_r+0x5c>
  40768c:	eba4 050a 	sub.w	r5, r4, sl
  407690:	b185      	cbz	r5, 4076b4 <_svfprintf_r+0x90>
  407692:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407694:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407696:	f8c8 a000 	str.w	sl, [r8]
  40769a:	3301      	adds	r3, #1
  40769c:	442a      	add	r2, r5
  40769e:	2b07      	cmp	r3, #7
  4076a0:	f8c8 5004 	str.w	r5, [r8, #4]
  4076a4:	9227      	str	r2, [sp, #156]	; 0x9c
  4076a6:	9326      	str	r3, [sp, #152]	; 0x98
  4076a8:	dc7f      	bgt.n	4077aa <_svfprintf_r+0x186>
  4076aa:	f108 0808 	add.w	r8, r8, #8
  4076ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4076b0:	442b      	add	r3, r5
  4076b2:	9309      	str	r3, [sp, #36]	; 0x24
  4076b4:	7823      	ldrb	r3, [r4, #0]
  4076b6:	2b00      	cmp	r3, #0
  4076b8:	d07f      	beq.n	4077ba <_svfprintf_r+0x196>
  4076ba:	2300      	movs	r3, #0
  4076bc:	461a      	mov	r2, r3
  4076be:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4076c2:	4619      	mov	r1, r3
  4076c4:	930d      	str	r3, [sp, #52]	; 0x34
  4076c6:	469b      	mov	fp, r3
  4076c8:	f04f 30ff 	mov.w	r0, #4294967295
  4076cc:	7863      	ldrb	r3, [r4, #1]
  4076ce:	900a      	str	r0, [sp, #40]	; 0x28
  4076d0:	f104 0a01 	add.w	sl, r4, #1
  4076d4:	f10a 0a01 	add.w	sl, sl, #1
  4076d8:	f1a3 0020 	sub.w	r0, r3, #32
  4076dc:	2858      	cmp	r0, #88	; 0x58
  4076de:	f200 83c1 	bhi.w	407e64 <_svfprintf_r+0x840>
  4076e2:	e8df f010 	tbh	[pc, r0, lsl #1]
  4076e6:	0238      	.short	0x0238
  4076e8:	03bf03bf 	.word	0x03bf03bf
  4076ec:	03bf0240 	.word	0x03bf0240
  4076f0:	03bf03bf 	.word	0x03bf03bf
  4076f4:	03bf03bf 	.word	0x03bf03bf
  4076f8:	024503bf 	.word	0x024503bf
  4076fc:	03bf0203 	.word	0x03bf0203
  407700:	026b005d 	.word	0x026b005d
  407704:	028603bf 	.word	0x028603bf
  407708:	039d039d 	.word	0x039d039d
  40770c:	039d039d 	.word	0x039d039d
  407710:	039d039d 	.word	0x039d039d
  407714:	039d039d 	.word	0x039d039d
  407718:	03bf039d 	.word	0x03bf039d
  40771c:	03bf03bf 	.word	0x03bf03bf
  407720:	03bf03bf 	.word	0x03bf03bf
  407724:	03bf03bf 	.word	0x03bf03bf
  407728:	03bf03bf 	.word	0x03bf03bf
  40772c:	033703bf 	.word	0x033703bf
  407730:	03bf0357 	.word	0x03bf0357
  407734:	03bf0357 	.word	0x03bf0357
  407738:	03bf03bf 	.word	0x03bf03bf
  40773c:	039803bf 	.word	0x039803bf
  407740:	03bf03bf 	.word	0x03bf03bf
  407744:	03bf03ad 	.word	0x03bf03ad
  407748:	03bf03bf 	.word	0x03bf03bf
  40774c:	03bf03bf 	.word	0x03bf03bf
  407750:	03bf0259 	.word	0x03bf0259
  407754:	031e03bf 	.word	0x031e03bf
  407758:	03bf03bf 	.word	0x03bf03bf
  40775c:	03bf03bf 	.word	0x03bf03bf
  407760:	03bf03bf 	.word	0x03bf03bf
  407764:	03bf03bf 	.word	0x03bf03bf
  407768:	03bf03bf 	.word	0x03bf03bf
  40776c:	02db02c6 	.word	0x02db02c6
  407770:	03570357 	.word	0x03570357
  407774:	028b0357 	.word	0x028b0357
  407778:	03bf02db 	.word	0x03bf02db
  40777c:	029003bf 	.word	0x029003bf
  407780:	029d03bf 	.word	0x029d03bf
  407784:	02b401cc 	.word	0x02b401cc
  407788:	03bf0208 	.word	0x03bf0208
  40778c:	03bf01e1 	.word	0x03bf01e1
  407790:	03bf007e 	.word	0x03bf007e
  407794:	020d03bf 	.word	0x020d03bf
  407798:	980d      	ldr	r0, [sp, #52]	; 0x34
  40779a:	930f      	str	r3, [sp, #60]	; 0x3c
  40779c:	4240      	negs	r0, r0
  40779e:	900d      	str	r0, [sp, #52]	; 0x34
  4077a0:	f04b 0b04 	orr.w	fp, fp, #4
  4077a4:	f89a 3000 	ldrb.w	r3, [sl]
  4077a8:	e794      	b.n	4076d4 <_svfprintf_r+0xb0>
  4077aa:	aa25      	add	r2, sp, #148	; 0x94
  4077ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4077ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4077b0:	f004 fed0 	bl	40c554 <__ssprint_r>
  4077b4:	b940      	cbnz	r0, 4077c8 <_svfprintf_r+0x1a4>
  4077b6:	46c8      	mov	r8, r9
  4077b8:	e779      	b.n	4076ae <_svfprintf_r+0x8a>
  4077ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4077bc:	b123      	cbz	r3, 4077c8 <_svfprintf_r+0x1a4>
  4077be:	980c      	ldr	r0, [sp, #48]	; 0x30
  4077c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4077c2:	aa25      	add	r2, sp, #148	; 0x94
  4077c4:	f004 fec6 	bl	40c554 <__ssprint_r>
  4077c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4077ca:	899b      	ldrh	r3, [r3, #12]
  4077cc:	f013 0f40 	tst.w	r3, #64	; 0x40
  4077d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4077d2:	bf18      	it	ne
  4077d4:	f04f 33ff 	movne.w	r3, #4294967295
  4077d8:	9309      	str	r3, [sp, #36]	; 0x24
  4077da:	9809      	ldr	r0, [sp, #36]	; 0x24
  4077dc:	b043      	add	sp, #268	; 0x10c
  4077de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4077e2:	f01b 0f20 	tst.w	fp, #32
  4077e6:	9311      	str	r3, [sp, #68]	; 0x44
  4077e8:	f040 81dd 	bne.w	407ba6 <_svfprintf_r+0x582>
  4077ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4077ee:	f01b 0f10 	tst.w	fp, #16
  4077f2:	4613      	mov	r3, r2
  4077f4:	f040 856e 	bne.w	4082d4 <_svfprintf_r+0xcb0>
  4077f8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4077fc:	f000 856a 	beq.w	4082d4 <_svfprintf_r+0xcb0>
  407800:	8814      	ldrh	r4, [r2, #0]
  407802:	3204      	adds	r2, #4
  407804:	2500      	movs	r5, #0
  407806:	2301      	movs	r3, #1
  407808:	920f      	str	r2, [sp, #60]	; 0x3c
  40780a:	2700      	movs	r7, #0
  40780c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407810:	990a      	ldr	r1, [sp, #40]	; 0x28
  407812:	1c4a      	adds	r2, r1, #1
  407814:	f000 8265 	beq.w	407ce2 <_svfprintf_r+0x6be>
  407818:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40781c:	9207      	str	r2, [sp, #28]
  40781e:	ea54 0205 	orrs.w	r2, r4, r5
  407822:	f040 8264 	bne.w	407cee <_svfprintf_r+0x6ca>
  407826:	2900      	cmp	r1, #0
  407828:	f040 843c 	bne.w	4080a4 <_svfprintf_r+0xa80>
  40782c:	2b00      	cmp	r3, #0
  40782e:	f040 84d7 	bne.w	4081e0 <_svfprintf_r+0xbbc>
  407832:	f01b 0301 	ands.w	r3, fp, #1
  407836:	930e      	str	r3, [sp, #56]	; 0x38
  407838:	f000 8604 	beq.w	408444 <_svfprintf_r+0xe20>
  40783c:	ae42      	add	r6, sp, #264	; 0x108
  40783e:	2330      	movs	r3, #48	; 0x30
  407840:	f806 3d41 	strb.w	r3, [r6, #-65]!
  407844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407846:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407848:	4293      	cmp	r3, r2
  40784a:	bfb8      	it	lt
  40784c:	4613      	movlt	r3, r2
  40784e:	9308      	str	r3, [sp, #32]
  407850:	2300      	movs	r3, #0
  407852:	9312      	str	r3, [sp, #72]	; 0x48
  407854:	b117      	cbz	r7, 40785c <_svfprintf_r+0x238>
  407856:	9b08      	ldr	r3, [sp, #32]
  407858:	3301      	adds	r3, #1
  40785a:	9308      	str	r3, [sp, #32]
  40785c:	9b07      	ldr	r3, [sp, #28]
  40785e:	f013 0302 	ands.w	r3, r3, #2
  407862:	9310      	str	r3, [sp, #64]	; 0x40
  407864:	d002      	beq.n	40786c <_svfprintf_r+0x248>
  407866:	9b08      	ldr	r3, [sp, #32]
  407868:	3302      	adds	r3, #2
  40786a:	9308      	str	r3, [sp, #32]
  40786c:	9b07      	ldr	r3, [sp, #28]
  40786e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  407872:	f040 830e 	bne.w	407e92 <_svfprintf_r+0x86e>
  407876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407878:	9a08      	ldr	r2, [sp, #32]
  40787a:	eba3 0b02 	sub.w	fp, r3, r2
  40787e:	f1bb 0f00 	cmp.w	fp, #0
  407882:	f340 8306 	ble.w	407e92 <_svfprintf_r+0x86e>
  407886:	f1bb 0f10 	cmp.w	fp, #16
  40788a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40788c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40788e:	dd29      	ble.n	4078e4 <_svfprintf_r+0x2c0>
  407890:	4643      	mov	r3, r8
  407892:	4621      	mov	r1, r4
  407894:	46a8      	mov	r8, r5
  407896:	2710      	movs	r7, #16
  407898:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40789a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40789c:	e006      	b.n	4078ac <_svfprintf_r+0x288>
  40789e:	f1ab 0b10 	sub.w	fp, fp, #16
  4078a2:	f1bb 0f10 	cmp.w	fp, #16
  4078a6:	f103 0308 	add.w	r3, r3, #8
  4078aa:	dd18      	ble.n	4078de <_svfprintf_r+0x2ba>
  4078ac:	3201      	adds	r2, #1
  4078ae:	48b7      	ldr	r0, [pc, #732]	; (407b8c <_svfprintf_r+0x568>)
  4078b0:	9226      	str	r2, [sp, #152]	; 0x98
  4078b2:	3110      	adds	r1, #16
  4078b4:	2a07      	cmp	r2, #7
  4078b6:	9127      	str	r1, [sp, #156]	; 0x9c
  4078b8:	e883 0081 	stmia.w	r3, {r0, r7}
  4078bc:	ddef      	ble.n	40789e <_svfprintf_r+0x27a>
  4078be:	aa25      	add	r2, sp, #148	; 0x94
  4078c0:	4629      	mov	r1, r5
  4078c2:	4620      	mov	r0, r4
  4078c4:	f004 fe46 	bl	40c554 <__ssprint_r>
  4078c8:	2800      	cmp	r0, #0
  4078ca:	f47f af7d 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  4078ce:	f1ab 0b10 	sub.w	fp, fp, #16
  4078d2:	f1bb 0f10 	cmp.w	fp, #16
  4078d6:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4078d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4078da:	464b      	mov	r3, r9
  4078dc:	dce6      	bgt.n	4078ac <_svfprintf_r+0x288>
  4078de:	4645      	mov	r5, r8
  4078e0:	460c      	mov	r4, r1
  4078e2:	4698      	mov	r8, r3
  4078e4:	3201      	adds	r2, #1
  4078e6:	4ba9      	ldr	r3, [pc, #676]	; (407b8c <_svfprintf_r+0x568>)
  4078e8:	9226      	str	r2, [sp, #152]	; 0x98
  4078ea:	445c      	add	r4, fp
  4078ec:	2a07      	cmp	r2, #7
  4078ee:	9427      	str	r4, [sp, #156]	; 0x9c
  4078f0:	e888 0808 	stmia.w	r8, {r3, fp}
  4078f4:	f300 8498 	bgt.w	408228 <_svfprintf_r+0xc04>
  4078f8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4078fc:	f108 0808 	add.w	r8, r8, #8
  407900:	b177      	cbz	r7, 407920 <_svfprintf_r+0x2fc>
  407902:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407904:	3301      	adds	r3, #1
  407906:	3401      	adds	r4, #1
  407908:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  40790c:	2201      	movs	r2, #1
  40790e:	2b07      	cmp	r3, #7
  407910:	9427      	str	r4, [sp, #156]	; 0x9c
  407912:	9326      	str	r3, [sp, #152]	; 0x98
  407914:	e888 0006 	stmia.w	r8, {r1, r2}
  407918:	f300 83db 	bgt.w	4080d2 <_svfprintf_r+0xaae>
  40791c:	f108 0808 	add.w	r8, r8, #8
  407920:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407922:	b16b      	cbz	r3, 407940 <_svfprintf_r+0x31c>
  407924:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407926:	3301      	adds	r3, #1
  407928:	3402      	adds	r4, #2
  40792a:	a91e      	add	r1, sp, #120	; 0x78
  40792c:	2202      	movs	r2, #2
  40792e:	2b07      	cmp	r3, #7
  407930:	9427      	str	r4, [sp, #156]	; 0x9c
  407932:	9326      	str	r3, [sp, #152]	; 0x98
  407934:	e888 0006 	stmia.w	r8, {r1, r2}
  407938:	f300 83d6 	bgt.w	4080e8 <_svfprintf_r+0xac4>
  40793c:	f108 0808 	add.w	r8, r8, #8
  407940:	2d80      	cmp	r5, #128	; 0x80
  407942:	f000 8315 	beq.w	407f70 <_svfprintf_r+0x94c>
  407946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40794a:	1a9f      	subs	r7, r3, r2
  40794c:	2f00      	cmp	r7, #0
  40794e:	dd36      	ble.n	4079be <_svfprintf_r+0x39a>
  407950:	2f10      	cmp	r7, #16
  407952:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407954:	4d8e      	ldr	r5, [pc, #568]	; (407b90 <_svfprintf_r+0x56c>)
  407956:	dd27      	ble.n	4079a8 <_svfprintf_r+0x384>
  407958:	4642      	mov	r2, r8
  40795a:	4621      	mov	r1, r4
  40795c:	46b0      	mov	r8, r6
  40795e:	f04f 0b10 	mov.w	fp, #16
  407962:	462e      	mov	r6, r5
  407964:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407966:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407968:	e004      	b.n	407974 <_svfprintf_r+0x350>
  40796a:	3f10      	subs	r7, #16
  40796c:	2f10      	cmp	r7, #16
  40796e:	f102 0208 	add.w	r2, r2, #8
  407972:	dd15      	ble.n	4079a0 <_svfprintf_r+0x37c>
  407974:	3301      	adds	r3, #1
  407976:	3110      	adds	r1, #16
  407978:	2b07      	cmp	r3, #7
  40797a:	9127      	str	r1, [sp, #156]	; 0x9c
  40797c:	9326      	str	r3, [sp, #152]	; 0x98
  40797e:	e882 0840 	stmia.w	r2, {r6, fp}
  407982:	ddf2      	ble.n	40796a <_svfprintf_r+0x346>
  407984:	aa25      	add	r2, sp, #148	; 0x94
  407986:	4629      	mov	r1, r5
  407988:	4620      	mov	r0, r4
  40798a:	f004 fde3 	bl	40c554 <__ssprint_r>
  40798e:	2800      	cmp	r0, #0
  407990:	f47f af1a 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  407994:	3f10      	subs	r7, #16
  407996:	2f10      	cmp	r7, #16
  407998:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40799a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40799c:	464a      	mov	r2, r9
  40799e:	dce9      	bgt.n	407974 <_svfprintf_r+0x350>
  4079a0:	4635      	mov	r5, r6
  4079a2:	460c      	mov	r4, r1
  4079a4:	4646      	mov	r6, r8
  4079a6:	4690      	mov	r8, r2
  4079a8:	3301      	adds	r3, #1
  4079aa:	443c      	add	r4, r7
  4079ac:	2b07      	cmp	r3, #7
  4079ae:	9427      	str	r4, [sp, #156]	; 0x9c
  4079b0:	9326      	str	r3, [sp, #152]	; 0x98
  4079b2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4079b6:	f300 8381 	bgt.w	4080bc <_svfprintf_r+0xa98>
  4079ba:	f108 0808 	add.w	r8, r8, #8
  4079be:	9b07      	ldr	r3, [sp, #28]
  4079c0:	05df      	lsls	r7, r3, #23
  4079c2:	f100 8268 	bmi.w	407e96 <_svfprintf_r+0x872>
  4079c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4079c8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4079ca:	f8c8 6000 	str.w	r6, [r8]
  4079ce:	3301      	adds	r3, #1
  4079d0:	440c      	add	r4, r1
  4079d2:	2b07      	cmp	r3, #7
  4079d4:	9427      	str	r4, [sp, #156]	; 0x9c
  4079d6:	f8c8 1004 	str.w	r1, [r8, #4]
  4079da:	9326      	str	r3, [sp, #152]	; 0x98
  4079dc:	f300 834d 	bgt.w	40807a <_svfprintf_r+0xa56>
  4079e0:	f108 0808 	add.w	r8, r8, #8
  4079e4:	9b07      	ldr	r3, [sp, #28]
  4079e6:	075b      	lsls	r3, r3, #29
  4079e8:	d53a      	bpl.n	407a60 <_svfprintf_r+0x43c>
  4079ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4079ec:	9a08      	ldr	r2, [sp, #32]
  4079ee:	1a9d      	subs	r5, r3, r2
  4079f0:	2d00      	cmp	r5, #0
  4079f2:	dd35      	ble.n	407a60 <_svfprintf_r+0x43c>
  4079f4:	2d10      	cmp	r5, #16
  4079f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4079f8:	dd20      	ble.n	407a3c <_svfprintf_r+0x418>
  4079fa:	2610      	movs	r6, #16
  4079fc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4079fe:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  407a02:	e004      	b.n	407a0e <_svfprintf_r+0x3ea>
  407a04:	3d10      	subs	r5, #16
  407a06:	2d10      	cmp	r5, #16
  407a08:	f108 0808 	add.w	r8, r8, #8
  407a0c:	dd16      	ble.n	407a3c <_svfprintf_r+0x418>
  407a0e:	3301      	adds	r3, #1
  407a10:	4a5e      	ldr	r2, [pc, #376]	; (407b8c <_svfprintf_r+0x568>)
  407a12:	9326      	str	r3, [sp, #152]	; 0x98
  407a14:	3410      	adds	r4, #16
  407a16:	2b07      	cmp	r3, #7
  407a18:	9427      	str	r4, [sp, #156]	; 0x9c
  407a1a:	e888 0044 	stmia.w	r8, {r2, r6}
  407a1e:	ddf1      	ble.n	407a04 <_svfprintf_r+0x3e0>
  407a20:	aa25      	add	r2, sp, #148	; 0x94
  407a22:	4659      	mov	r1, fp
  407a24:	4638      	mov	r0, r7
  407a26:	f004 fd95 	bl	40c554 <__ssprint_r>
  407a2a:	2800      	cmp	r0, #0
  407a2c:	f47f aecc 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  407a30:	3d10      	subs	r5, #16
  407a32:	2d10      	cmp	r5, #16
  407a34:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407a36:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407a38:	46c8      	mov	r8, r9
  407a3a:	dce8      	bgt.n	407a0e <_svfprintf_r+0x3ea>
  407a3c:	3301      	adds	r3, #1
  407a3e:	4a53      	ldr	r2, [pc, #332]	; (407b8c <_svfprintf_r+0x568>)
  407a40:	9326      	str	r3, [sp, #152]	; 0x98
  407a42:	442c      	add	r4, r5
  407a44:	2b07      	cmp	r3, #7
  407a46:	9427      	str	r4, [sp, #156]	; 0x9c
  407a48:	e888 0024 	stmia.w	r8, {r2, r5}
  407a4c:	dd08      	ble.n	407a60 <_svfprintf_r+0x43c>
  407a4e:	aa25      	add	r2, sp, #148	; 0x94
  407a50:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407a52:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a54:	f004 fd7e 	bl	40c554 <__ssprint_r>
  407a58:	2800      	cmp	r0, #0
  407a5a:	f47f aeb5 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  407a5e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407a62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407a64:	9908      	ldr	r1, [sp, #32]
  407a66:	428a      	cmp	r2, r1
  407a68:	bfac      	ite	ge
  407a6a:	189b      	addge	r3, r3, r2
  407a6c:	185b      	addlt	r3, r3, r1
  407a6e:	9309      	str	r3, [sp, #36]	; 0x24
  407a70:	2c00      	cmp	r4, #0
  407a72:	f040 830d 	bne.w	408090 <_svfprintf_r+0xa6c>
  407a76:	2300      	movs	r3, #0
  407a78:	9326      	str	r3, [sp, #152]	; 0x98
  407a7a:	46c8      	mov	r8, r9
  407a7c:	e5f9      	b.n	407672 <_svfprintf_r+0x4e>
  407a7e:	9311      	str	r3, [sp, #68]	; 0x44
  407a80:	f01b 0320 	ands.w	r3, fp, #32
  407a84:	f040 81e3 	bne.w	407e4e <_svfprintf_r+0x82a>
  407a88:	f01b 0210 	ands.w	r2, fp, #16
  407a8c:	f040 842e 	bne.w	4082ec <_svfprintf_r+0xcc8>
  407a90:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  407a94:	f000 842a 	beq.w	4082ec <_svfprintf_r+0xcc8>
  407a98:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407a9a:	4613      	mov	r3, r2
  407a9c:	460a      	mov	r2, r1
  407a9e:	3204      	adds	r2, #4
  407aa0:	880c      	ldrh	r4, [r1, #0]
  407aa2:	920f      	str	r2, [sp, #60]	; 0x3c
  407aa4:	2500      	movs	r5, #0
  407aa6:	e6b0      	b.n	40780a <_svfprintf_r+0x1e6>
  407aa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407aaa:	9311      	str	r3, [sp, #68]	; 0x44
  407aac:	6816      	ldr	r6, [r2, #0]
  407aae:	2400      	movs	r4, #0
  407ab0:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  407ab4:	1d15      	adds	r5, r2, #4
  407ab6:	2e00      	cmp	r6, #0
  407ab8:	f000 86a7 	beq.w	40880a <_svfprintf_r+0x11e6>
  407abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407abe:	1c53      	adds	r3, r2, #1
  407ac0:	f000 8609 	beq.w	4086d6 <_svfprintf_r+0x10b2>
  407ac4:	4621      	mov	r1, r4
  407ac6:	4630      	mov	r0, r6
  407ac8:	f003 feea 	bl	40b8a0 <memchr>
  407acc:	2800      	cmp	r0, #0
  407ace:	f000 86e1 	beq.w	408894 <_svfprintf_r+0x1270>
  407ad2:	1b83      	subs	r3, r0, r6
  407ad4:	930e      	str	r3, [sp, #56]	; 0x38
  407ad6:	940a      	str	r4, [sp, #40]	; 0x28
  407ad8:	950f      	str	r5, [sp, #60]	; 0x3c
  407ada:	f8cd b01c 	str.w	fp, [sp, #28]
  407ade:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407ae2:	9308      	str	r3, [sp, #32]
  407ae4:	9412      	str	r4, [sp, #72]	; 0x48
  407ae6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407aea:	e6b3      	b.n	407854 <_svfprintf_r+0x230>
  407aec:	f89a 3000 	ldrb.w	r3, [sl]
  407af0:	2201      	movs	r2, #1
  407af2:	212b      	movs	r1, #43	; 0x2b
  407af4:	e5ee      	b.n	4076d4 <_svfprintf_r+0xb0>
  407af6:	f04b 0b20 	orr.w	fp, fp, #32
  407afa:	f89a 3000 	ldrb.w	r3, [sl]
  407afe:	e5e9      	b.n	4076d4 <_svfprintf_r+0xb0>
  407b00:	9311      	str	r3, [sp, #68]	; 0x44
  407b02:	2a00      	cmp	r2, #0
  407b04:	f040 8795 	bne.w	408a32 <_svfprintf_r+0x140e>
  407b08:	4b22      	ldr	r3, [pc, #136]	; (407b94 <_svfprintf_r+0x570>)
  407b0a:	9318      	str	r3, [sp, #96]	; 0x60
  407b0c:	f01b 0f20 	tst.w	fp, #32
  407b10:	f040 8111 	bne.w	407d36 <_svfprintf_r+0x712>
  407b14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407b16:	f01b 0f10 	tst.w	fp, #16
  407b1a:	4613      	mov	r3, r2
  407b1c:	f040 83e1 	bne.w	4082e2 <_svfprintf_r+0xcbe>
  407b20:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407b24:	f000 83dd 	beq.w	4082e2 <_svfprintf_r+0xcbe>
  407b28:	3304      	adds	r3, #4
  407b2a:	8814      	ldrh	r4, [r2, #0]
  407b2c:	930f      	str	r3, [sp, #60]	; 0x3c
  407b2e:	2500      	movs	r5, #0
  407b30:	f01b 0f01 	tst.w	fp, #1
  407b34:	f000 810c 	beq.w	407d50 <_svfprintf_r+0x72c>
  407b38:	ea54 0305 	orrs.w	r3, r4, r5
  407b3c:	f000 8108 	beq.w	407d50 <_svfprintf_r+0x72c>
  407b40:	2330      	movs	r3, #48	; 0x30
  407b42:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  407b46:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  407b4a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  407b4e:	f04b 0b02 	orr.w	fp, fp, #2
  407b52:	2302      	movs	r3, #2
  407b54:	e659      	b.n	40780a <_svfprintf_r+0x1e6>
  407b56:	f89a 3000 	ldrb.w	r3, [sl]
  407b5a:	2900      	cmp	r1, #0
  407b5c:	f47f adba 	bne.w	4076d4 <_svfprintf_r+0xb0>
  407b60:	2201      	movs	r2, #1
  407b62:	2120      	movs	r1, #32
  407b64:	e5b6      	b.n	4076d4 <_svfprintf_r+0xb0>
  407b66:	f04b 0b01 	orr.w	fp, fp, #1
  407b6a:	f89a 3000 	ldrb.w	r3, [sl]
  407b6e:	e5b1      	b.n	4076d4 <_svfprintf_r+0xb0>
  407b70:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  407b72:	6823      	ldr	r3, [r4, #0]
  407b74:	930d      	str	r3, [sp, #52]	; 0x34
  407b76:	4618      	mov	r0, r3
  407b78:	2800      	cmp	r0, #0
  407b7a:	4623      	mov	r3, r4
  407b7c:	f103 0304 	add.w	r3, r3, #4
  407b80:	f6ff ae0a 	blt.w	407798 <_svfprintf_r+0x174>
  407b84:	930f      	str	r3, [sp, #60]	; 0x3c
  407b86:	f89a 3000 	ldrb.w	r3, [sl]
  407b8a:	e5a3      	b.n	4076d4 <_svfprintf_r+0xb0>
  407b8c:	0040e7c0 	.word	0x0040e7c0
  407b90:	0040e7d0 	.word	0x0040e7d0
  407b94:	0040e7a4 	.word	0x0040e7a4
  407b98:	f04b 0b10 	orr.w	fp, fp, #16
  407b9c:	f01b 0f20 	tst.w	fp, #32
  407ba0:	9311      	str	r3, [sp, #68]	; 0x44
  407ba2:	f43f ae23 	beq.w	4077ec <_svfprintf_r+0x1c8>
  407ba6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407ba8:	3507      	adds	r5, #7
  407baa:	f025 0307 	bic.w	r3, r5, #7
  407bae:	f103 0208 	add.w	r2, r3, #8
  407bb2:	e9d3 4500 	ldrd	r4, r5, [r3]
  407bb6:	920f      	str	r2, [sp, #60]	; 0x3c
  407bb8:	2301      	movs	r3, #1
  407bba:	e626      	b.n	40780a <_svfprintf_r+0x1e6>
  407bbc:	f89a 3000 	ldrb.w	r3, [sl]
  407bc0:	2b2a      	cmp	r3, #42	; 0x2a
  407bc2:	f10a 0401 	add.w	r4, sl, #1
  407bc6:	f000 8727 	beq.w	408a18 <_svfprintf_r+0x13f4>
  407bca:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407bce:	2809      	cmp	r0, #9
  407bd0:	46a2      	mov	sl, r4
  407bd2:	f200 86ad 	bhi.w	408930 <_svfprintf_r+0x130c>
  407bd6:	2300      	movs	r3, #0
  407bd8:	461c      	mov	r4, r3
  407bda:	f81a 3b01 	ldrb.w	r3, [sl], #1
  407bde:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407be2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  407be6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407bea:	2809      	cmp	r0, #9
  407bec:	d9f5      	bls.n	407bda <_svfprintf_r+0x5b6>
  407bee:	940a      	str	r4, [sp, #40]	; 0x28
  407bf0:	e572      	b.n	4076d8 <_svfprintf_r+0xb4>
  407bf2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  407bf6:	f89a 3000 	ldrb.w	r3, [sl]
  407bfa:	e56b      	b.n	4076d4 <_svfprintf_r+0xb0>
  407bfc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  407c00:	f89a 3000 	ldrb.w	r3, [sl]
  407c04:	e566      	b.n	4076d4 <_svfprintf_r+0xb0>
  407c06:	f89a 3000 	ldrb.w	r3, [sl]
  407c0a:	2b6c      	cmp	r3, #108	; 0x6c
  407c0c:	bf03      	ittte	eq
  407c0e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  407c12:	f04b 0b20 	orreq.w	fp, fp, #32
  407c16:	f10a 0a01 	addeq.w	sl, sl, #1
  407c1a:	f04b 0b10 	orrne.w	fp, fp, #16
  407c1e:	e559      	b.n	4076d4 <_svfprintf_r+0xb0>
  407c20:	2a00      	cmp	r2, #0
  407c22:	f040 8711 	bne.w	408a48 <_svfprintf_r+0x1424>
  407c26:	f01b 0f20 	tst.w	fp, #32
  407c2a:	f040 84f9 	bne.w	408620 <_svfprintf_r+0xffc>
  407c2e:	f01b 0f10 	tst.w	fp, #16
  407c32:	f040 84ac 	bne.w	40858e <_svfprintf_r+0xf6a>
  407c36:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407c3a:	f000 84a8 	beq.w	40858e <_svfprintf_r+0xf6a>
  407c3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407c40:	6813      	ldr	r3, [r2, #0]
  407c42:	3204      	adds	r2, #4
  407c44:	920f      	str	r2, [sp, #60]	; 0x3c
  407c46:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  407c4a:	801a      	strh	r2, [r3, #0]
  407c4c:	e511      	b.n	407672 <_svfprintf_r+0x4e>
  407c4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407c50:	4bb3      	ldr	r3, [pc, #716]	; (407f20 <_svfprintf_r+0x8fc>)
  407c52:	680c      	ldr	r4, [r1, #0]
  407c54:	9318      	str	r3, [sp, #96]	; 0x60
  407c56:	2230      	movs	r2, #48	; 0x30
  407c58:	2378      	movs	r3, #120	; 0x78
  407c5a:	3104      	adds	r1, #4
  407c5c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  407c60:	9311      	str	r3, [sp, #68]	; 0x44
  407c62:	f04b 0b02 	orr.w	fp, fp, #2
  407c66:	910f      	str	r1, [sp, #60]	; 0x3c
  407c68:	2500      	movs	r5, #0
  407c6a:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  407c6e:	2302      	movs	r3, #2
  407c70:	e5cb      	b.n	40780a <_svfprintf_r+0x1e6>
  407c72:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407c74:	9311      	str	r3, [sp, #68]	; 0x44
  407c76:	680a      	ldr	r2, [r1, #0]
  407c78:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  407c7c:	2300      	movs	r3, #0
  407c7e:	460a      	mov	r2, r1
  407c80:	461f      	mov	r7, r3
  407c82:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  407c86:	3204      	adds	r2, #4
  407c88:	2301      	movs	r3, #1
  407c8a:	9308      	str	r3, [sp, #32]
  407c8c:	f8cd b01c 	str.w	fp, [sp, #28]
  407c90:	970a      	str	r7, [sp, #40]	; 0x28
  407c92:	9712      	str	r7, [sp, #72]	; 0x48
  407c94:	920f      	str	r2, [sp, #60]	; 0x3c
  407c96:	930e      	str	r3, [sp, #56]	; 0x38
  407c98:	ae28      	add	r6, sp, #160	; 0xa0
  407c9a:	e5df      	b.n	40785c <_svfprintf_r+0x238>
  407c9c:	9311      	str	r3, [sp, #68]	; 0x44
  407c9e:	2a00      	cmp	r2, #0
  407ca0:	f040 86ea 	bne.w	408a78 <_svfprintf_r+0x1454>
  407ca4:	f01b 0f20 	tst.w	fp, #32
  407ca8:	d15d      	bne.n	407d66 <_svfprintf_r+0x742>
  407caa:	f01b 0f10 	tst.w	fp, #16
  407cae:	f040 8308 	bne.w	4082c2 <_svfprintf_r+0xc9e>
  407cb2:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407cb6:	f000 8304 	beq.w	4082c2 <_svfprintf_r+0xc9e>
  407cba:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407cbc:	f9b1 4000 	ldrsh.w	r4, [r1]
  407cc0:	3104      	adds	r1, #4
  407cc2:	17e5      	asrs	r5, r4, #31
  407cc4:	4622      	mov	r2, r4
  407cc6:	462b      	mov	r3, r5
  407cc8:	910f      	str	r1, [sp, #60]	; 0x3c
  407cca:	2a00      	cmp	r2, #0
  407ccc:	f173 0300 	sbcs.w	r3, r3, #0
  407cd0:	db58      	blt.n	407d84 <_svfprintf_r+0x760>
  407cd2:	990a      	ldr	r1, [sp, #40]	; 0x28
  407cd4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407cd8:	1c4a      	adds	r2, r1, #1
  407cda:	f04f 0301 	mov.w	r3, #1
  407cde:	f47f ad9b 	bne.w	407818 <_svfprintf_r+0x1f4>
  407ce2:	ea54 0205 	orrs.w	r2, r4, r5
  407ce6:	f000 81df 	beq.w	4080a8 <_svfprintf_r+0xa84>
  407cea:	f8cd b01c 	str.w	fp, [sp, #28]
  407cee:	2b01      	cmp	r3, #1
  407cf0:	f000 827b 	beq.w	4081ea <_svfprintf_r+0xbc6>
  407cf4:	2b02      	cmp	r3, #2
  407cf6:	f040 8206 	bne.w	408106 <_svfprintf_r+0xae2>
  407cfa:	9818      	ldr	r0, [sp, #96]	; 0x60
  407cfc:	464e      	mov	r6, r9
  407cfe:	0923      	lsrs	r3, r4, #4
  407d00:	f004 010f 	and.w	r1, r4, #15
  407d04:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407d08:	092a      	lsrs	r2, r5, #4
  407d0a:	461c      	mov	r4, r3
  407d0c:	4615      	mov	r5, r2
  407d0e:	5c43      	ldrb	r3, [r0, r1]
  407d10:	f806 3d01 	strb.w	r3, [r6, #-1]!
  407d14:	ea54 0305 	orrs.w	r3, r4, r5
  407d18:	d1f1      	bne.n	407cfe <_svfprintf_r+0x6da>
  407d1a:	eba9 0306 	sub.w	r3, r9, r6
  407d1e:	930e      	str	r3, [sp, #56]	; 0x38
  407d20:	e590      	b.n	407844 <_svfprintf_r+0x220>
  407d22:	9311      	str	r3, [sp, #68]	; 0x44
  407d24:	2a00      	cmp	r2, #0
  407d26:	f040 86a3 	bne.w	408a70 <_svfprintf_r+0x144c>
  407d2a:	4b7e      	ldr	r3, [pc, #504]	; (407f24 <_svfprintf_r+0x900>)
  407d2c:	9318      	str	r3, [sp, #96]	; 0x60
  407d2e:	f01b 0f20 	tst.w	fp, #32
  407d32:	f43f aeef 	beq.w	407b14 <_svfprintf_r+0x4f0>
  407d36:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407d38:	3507      	adds	r5, #7
  407d3a:	f025 0307 	bic.w	r3, r5, #7
  407d3e:	f103 0208 	add.w	r2, r3, #8
  407d42:	f01b 0f01 	tst.w	fp, #1
  407d46:	920f      	str	r2, [sp, #60]	; 0x3c
  407d48:	e9d3 4500 	ldrd	r4, r5, [r3]
  407d4c:	f47f aef4 	bne.w	407b38 <_svfprintf_r+0x514>
  407d50:	2302      	movs	r3, #2
  407d52:	e55a      	b.n	40780a <_svfprintf_r+0x1e6>
  407d54:	9311      	str	r3, [sp, #68]	; 0x44
  407d56:	2a00      	cmp	r2, #0
  407d58:	f040 8686 	bne.w	408a68 <_svfprintf_r+0x1444>
  407d5c:	f04b 0b10 	orr.w	fp, fp, #16
  407d60:	f01b 0f20 	tst.w	fp, #32
  407d64:	d0a1      	beq.n	407caa <_svfprintf_r+0x686>
  407d66:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407d68:	3507      	adds	r5, #7
  407d6a:	f025 0507 	bic.w	r5, r5, #7
  407d6e:	e9d5 2300 	ldrd	r2, r3, [r5]
  407d72:	2a00      	cmp	r2, #0
  407d74:	f105 0108 	add.w	r1, r5, #8
  407d78:	461d      	mov	r5, r3
  407d7a:	f173 0300 	sbcs.w	r3, r3, #0
  407d7e:	910f      	str	r1, [sp, #60]	; 0x3c
  407d80:	4614      	mov	r4, r2
  407d82:	daa6      	bge.n	407cd2 <_svfprintf_r+0x6ae>
  407d84:	272d      	movs	r7, #45	; 0x2d
  407d86:	4264      	negs	r4, r4
  407d88:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  407d8c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407d90:	2301      	movs	r3, #1
  407d92:	e53d      	b.n	407810 <_svfprintf_r+0x1ec>
  407d94:	9311      	str	r3, [sp, #68]	; 0x44
  407d96:	2a00      	cmp	r2, #0
  407d98:	f040 8662 	bne.w	408a60 <_svfprintf_r+0x143c>
  407d9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407d9e:	3507      	adds	r5, #7
  407da0:	f025 0307 	bic.w	r3, r5, #7
  407da4:	f103 0208 	add.w	r2, r3, #8
  407da8:	920f      	str	r2, [sp, #60]	; 0x3c
  407daa:	681a      	ldr	r2, [r3, #0]
  407dac:	9215      	str	r2, [sp, #84]	; 0x54
  407dae:	685b      	ldr	r3, [r3, #4]
  407db0:	9314      	str	r3, [sp, #80]	; 0x50
  407db2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407db4:	9d15      	ldr	r5, [sp, #84]	; 0x54
  407db6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  407dba:	4628      	mov	r0, r5
  407dbc:	4621      	mov	r1, r4
  407dbe:	f04f 32ff 	mov.w	r2, #4294967295
  407dc2:	4b59      	ldr	r3, [pc, #356]	; (407f28 <_svfprintf_r+0x904>)
  407dc4:	f005 fa94 	bl	40d2f0 <__aeabi_dcmpun>
  407dc8:	2800      	cmp	r0, #0
  407dca:	f040 834a 	bne.w	408462 <_svfprintf_r+0xe3e>
  407dce:	4628      	mov	r0, r5
  407dd0:	4621      	mov	r1, r4
  407dd2:	f04f 32ff 	mov.w	r2, #4294967295
  407dd6:	4b54      	ldr	r3, [pc, #336]	; (407f28 <_svfprintf_r+0x904>)
  407dd8:	f005 fa6c 	bl	40d2b4 <__aeabi_dcmple>
  407ddc:	2800      	cmp	r0, #0
  407dde:	f040 8340 	bne.w	408462 <_svfprintf_r+0xe3e>
  407de2:	a815      	add	r0, sp, #84	; 0x54
  407de4:	c80d      	ldmia	r0, {r0, r2, r3}
  407de6:	9914      	ldr	r1, [sp, #80]	; 0x50
  407de8:	f005 fa5a 	bl	40d2a0 <__aeabi_dcmplt>
  407dec:	2800      	cmp	r0, #0
  407dee:	f040 8530 	bne.w	408852 <_svfprintf_r+0x122e>
  407df2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407df6:	4e4d      	ldr	r6, [pc, #308]	; (407f2c <_svfprintf_r+0x908>)
  407df8:	4b4d      	ldr	r3, [pc, #308]	; (407f30 <_svfprintf_r+0x90c>)
  407dfa:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  407dfe:	9007      	str	r0, [sp, #28]
  407e00:	9811      	ldr	r0, [sp, #68]	; 0x44
  407e02:	2203      	movs	r2, #3
  407e04:	2100      	movs	r1, #0
  407e06:	9208      	str	r2, [sp, #32]
  407e08:	910a      	str	r1, [sp, #40]	; 0x28
  407e0a:	2847      	cmp	r0, #71	; 0x47
  407e0c:	bfd8      	it	le
  407e0e:	461e      	movle	r6, r3
  407e10:	920e      	str	r2, [sp, #56]	; 0x38
  407e12:	9112      	str	r1, [sp, #72]	; 0x48
  407e14:	e51e      	b.n	407854 <_svfprintf_r+0x230>
  407e16:	f04b 0b08 	orr.w	fp, fp, #8
  407e1a:	f89a 3000 	ldrb.w	r3, [sl]
  407e1e:	e459      	b.n	4076d4 <_svfprintf_r+0xb0>
  407e20:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407e24:	2300      	movs	r3, #0
  407e26:	461c      	mov	r4, r3
  407e28:	f81a 3b01 	ldrb.w	r3, [sl], #1
  407e2c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407e30:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  407e34:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407e38:	2809      	cmp	r0, #9
  407e3a:	d9f5      	bls.n	407e28 <_svfprintf_r+0x804>
  407e3c:	940d      	str	r4, [sp, #52]	; 0x34
  407e3e:	e44b      	b.n	4076d8 <_svfprintf_r+0xb4>
  407e40:	f04b 0b10 	orr.w	fp, fp, #16
  407e44:	9311      	str	r3, [sp, #68]	; 0x44
  407e46:	f01b 0320 	ands.w	r3, fp, #32
  407e4a:	f43f ae1d 	beq.w	407a88 <_svfprintf_r+0x464>
  407e4e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407e50:	3507      	adds	r5, #7
  407e52:	f025 0307 	bic.w	r3, r5, #7
  407e56:	f103 0208 	add.w	r2, r3, #8
  407e5a:	e9d3 4500 	ldrd	r4, r5, [r3]
  407e5e:	920f      	str	r2, [sp, #60]	; 0x3c
  407e60:	2300      	movs	r3, #0
  407e62:	e4d2      	b.n	40780a <_svfprintf_r+0x1e6>
  407e64:	9311      	str	r3, [sp, #68]	; 0x44
  407e66:	2a00      	cmp	r2, #0
  407e68:	f040 85e7 	bne.w	408a3a <_svfprintf_r+0x1416>
  407e6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407e6e:	2a00      	cmp	r2, #0
  407e70:	f43f aca3 	beq.w	4077ba <_svfprintf_r+0x196>
  407e74:	2300      	movs	r3, #0
  407e76:	2101      	movs	r1, #1
  407e78:	461f      	mov	r7, r3
  407e7a:	9108      	str	r1, [sp, #32]
  407e7c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  407e80:	f8cd b01c 	str.w	fp, [sp, #28]
  407e84:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  407e88:	930a      	str	r3, [sp, #40]	; 0x28
  407e8a:	9312      	str	r3, [sp, #72]	; 0x48
  407e8c:	910e      	str	r1, [sp, #56]	; 0x38
  407e8e:	ae28      	add	r6, sp, #160	; 0xa0
  407e90:	e4e4      	b.n	40785c <_svfprintf_r+0x238>
  407e92:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407e94:	e534      	b.n	407900 <_svfprintf_r+0x2dc>
  407e96:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407e98:	2b65      	cmp	r3, #101	; 0x65
  407e9a:	f340 80a7 	ble.w	407fec <_svfprintf_r+0x9c8>
  407e9e:	a815      	add	r0, sp, #84	; 0x54
  407ea0:	c80d      	ldmia	r0, {r0, r2, r3}
  407ea2:	9914      	ldr	r1, [sp, #80]	; 0x50
  407ea4:	f005 f9f2 	bl	40d28c <__aeabi_dcmpeq>
  407ea8:	2800      	cmp	r0, #0
  407eaa:	f000 8150 	beq.w	40814e <_svfprintf_r+0xb2a>
  407eae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407eb0:	4a20      	ldr	r2, [pc, #128]	; (407f34 <_svfprintf_r+0x910>)
  407eb2:	f8c8 2000 	str.w	r2, [r8]
  407eb6:	3301      	adds	r3, #1
  407eb8:	3401      	adds	r4, #1
  407eba:	2201      	movs	r2, #1
  407ebc:	2b07      	cmp	r3, #7
  407ebe:	9427      	str	r4, [sp, #156]	; 0x9c
  407ec0:	9326      	str	r3, [sp, #152]	; 0x98
  407ec2:	f8c8 2004 	str.w	r2, [r8, #4]
  407ec6:	f300 836a 	bgt.w	40859e <_svfprintf_r+0xf7a>
  407eca:	f108 0808 	add.w	r8, r8, #8
  407ece:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407ed0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407ed2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407ed4:	4293      	cmp	r3, r2
  407ed6:	db03      	blt.n	407ee0 <_svfprintf_r+0x8bc>
  407ed8:	9b07      	ldr	r3, [sp, #28]
  407eda:	07dd      	lsls	r5, r3, #31
  407edc:	f57f ad82 	bpl.w	4079e4 <_svfprintf_r+0x3c0>
  407ee0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407ee2:	9919      	ldr	r1, [sp, #100]	; 0x64
  407ee4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407ee6:	f8c8 2000 	str.w	r2, [r8]
  407eea:	3301      	adds	r3, #1
  407eec:	440c      	add	r4, r1
  407eee:	2b07      	cmp	r3, #7
  407ef0:	f8c8 1004 	str.w	r1, [r8, #4]
  407ef4:	9427      	str	r4, [sp, #156]	; 0x9c
  407ef6:	9326      	str	r3, [sp, #152]	; 0x98
  407ef8:	f300 839e 	bgt.w	408638 <_svfprintf_r+0x1014>
  407efc:	f108 0808 	add.w	r8, r8, #8
  407f00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407f02:	1e5e      	subs	r6, r3, #1
  407f04:	2e00      	cmp	r6, #0
  407f06:	f77f ad6d 	ble.w	4079e4 <_svfprintf_r+0x3c0>
  407f0a:	2e10      	cmp	r6, #16
  407f0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407f0e:	4d0a      	ldr	r5, [pc, #40]	; (407f38 <_svfprintf_r+0x914>)
  407f10:	f340 81f5 	ble.w	4082fe <_svfprintf_r+0xcda>
  407f14:	4622      	mov	r2, r4
  407f16:	2710      	movs	r7, #16
  407f18:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407f1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407f1e:	e013      	b.n	407f48 <_svfprintf_r+0x924>
  407f20:	0040e7a4 	.word	0x0040e7a4
  407f24:	0040e790 	.word	0x0040e790
  407f28:	7fefffff 	.word	0x7fefffff
  407f2c:	0040e784 	.word	0x0040e784
  407f30:	0040e780 	.word	0x0040e780
  407f34:	0040e5bc 	.word	0x0040e5bc
  407f38:	0040e7d0 	.word	0x0040e7d0
  407f3c:	f108 0808 	add.w	r8, r8, #8
  407f40:	3e10      	subs	r6, #16
  407f42:	2e10      	cmp	r6, #16
  407f44:	f340 81da 	ble.w	4082fc <_svfprintf_r+0xcd8>
  407f48:	3301      	adds	r3, #1
  407f4a:	3210      	adds	r2, #16
  407f4c:	2b07      	cmp	r3, #7
  407f4e:	9227      	str	r2, [sp, #156]	; 0x9c
  407f50:	9326      	str	r3, [sp, #152]	; 0x98
  407f52:	e888 00a0 	stmia.w	r8, {r5, r7}
  407f56:	ddf1      	ble.n	407f3c <_svfprintf_r+0x918>
  407f58:	aa25      	add	r2, sp, #148	; 0x94
  407f5a:	4621      	mov	r1, r4
  407f5c:	4658      	mov	r0, fp
  407f5e:	f004 faf9 	bl	40c554 <__ssprint_r>
  407f62:	2800      	cmp	r0, #0
  407f64:	f47f ac30 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  407f68:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407f6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407f6c:	46c8      	mov	r8, r9
  407f6e:	e7e7      	b.n	407f40 <_svfprintf_r+0x91c>
  407f70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407f72:	9a08      	ldr	r2, [sp, #32]
  407f74:	1a9f      	subs	r7, r3, r2
  407f76:	2f00      	cmp	r7, #0
  407f78:	f77f ace5 	ble.w	407946 <_svfprintf_r+0x322>
  407f7c:	2f10      	cmp	r7, #16
  407f7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407f80:	4db6      	ldr	r5, [pc, #728]	; (40825c <_svfprintf_r+0xc38>)
  407f82:	dd27      	ble.n	407fd4 <_svfprintf_r+0x9b0>
  407f84:	4642      	mov	r2, r8
  407f86:	4621      	mov	r1, r4
  407f88:	46b0      	mov	r8, r6
  407f8a:	f04f 0b10 	mov.w	fp, #16
  407f8e:	462e      	mov	r6, r5
  407f90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407f92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407f94:	e004      	b.n	407fa0 <_svfprintf_r+0x97c>
  407f96:	3f10      	subs	r7, #16
  407f98:	2f10      	cmp	r7, #16
  407f9a:	f102 0208 	add.w	r2, r2, #8
  407f9e:	dd15      	ble.n	407fcc <_svfprintf_r+0x9a8>
  407fa0:	3301      	adds	r3, #1
  407fa2:	3110      	adds	r1, #16
  407fa4:	2b07      	cmp	r3, #7
  407fa6:	9127      	str	r1, [sp, #156]	; 0x9c
  407fa8:	9326      	str	r3, [sp, #152]	; 0x98
  407faa:	e882 0840 	stmia.w	r2, {r6, fp}
  407fae:	ddf2      	ble.n	407f96 <_svfprintf_r+0x972>
  407fb0:	aa25      	add	r2, sp, #148	; 0x94
  407fb2:	4629      	mov	r1, r5
  407fb4:	4620      	mov	r0, r4
  407fb6:	f004 facd 	bl	40c554 <__ssprint_r>
  407fba:	2800      	cmp	r0, #0
  407fbc:	f47f ac04 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  407fc0:	3f10      	subs	r7, #16
  407fc2:	2f10      	cmp	r7, #16
  407fc4:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407fc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407fc8:	464a      	mov	r2, r9
  407fca:	dce9      	bgt.n	407fa0 <_svfprintf_r+0x97c>
  407fcc:	4635      	mov	r5, r6
  407fce:	460c      	mov	r4, r1
  407fd0:	4646      	mov	r6, r8
  407fd2:	4690      	mov	r8, r2
  407fd4:	3301      	adds	r3, #1
  407fd6:	443c      	add	r4, r7
  407fd8:	2b07      	cmp	r3, #7
  407fda:	9427      	str	r4, [sp, #156]	; 0x9c
  407fdc:	9326      	str	r3, [sp, #152]	; 0x98
  407fde:	e888 00a0 	stmia.w	r8, {r5, r7}
  407fe2:	f300 8232 	bgt.w	40844a <_svfprintf_r+0xe26>
  407fe6:	f108 0808 	add.w	r8, r8, #8
  407fea:	e4ac      	b.n	407946 <_svfprintf_r+0x322>
  407fec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407fee:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407ff0:	2b01      	cmp	r3, #1
  407ff2:	f340 81fe 	ble.w	4083f2 <_svfprintf_r+0xdce>
  407ff6:	3701      	adds	r7, #1
  407ff8:	3401      	adds	r4, #1
  407ffa:	2301      	movs	r3, #1
  407ffc:	2f07      	cmp	r7, #7
  407ffe:	9427      	str	r4, [sp, #156]	; 0x9c
  408000:	9726      	str	r7, [sp, #152]	; 0x98
  408002:	f8c8 6000 	str.w	r6, [r8]
  408006:	f8c8 3004 	str.w	r3, [r8, #4]
  40800a:	f300 8203 	bgt.w	408414 <_svfprintf_r+0xdf0>
  40800e:	f108 0808 	add.w	r8, r8, #8
  408012:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408014:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  408016:	f8c8 3000 	str.w	r3, [r8]
  40801a:	3701      	adds	r7, #1
  40801c:	4414      	add	r4, r2
  40801e:	2f07      	cmp	r7, #7
  408020:	9427      	str	r4, [sp, #156]	; 0x9c
  408022:	9726      	str	r7, [sp, #152]	; 0x98
  408024:	f8c8 2004 	str.w	r2, [r8, #4]
  408028:	f300 8200 	bgt.w	40842c <_svfprintf_r+0xe08>
  40802c:	f108 0808 	add.w	r8, r8, #8
  408030:	a815      	add	r0, sp, #84	; 0x54
  408032:	c80d      	ldmia	r0, {r0, r2, r3}
  408034:	9914      	ldr	r1, [sp, #80]	; 0x50
  408036:	f005 f929 	bl	40d28c <__aeabi_dcmpeq>
  40803a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40803c:	2800      	cmp	r0, #0
  40803e:	f040 8101 	bne.w	408244 <_svfprintf_r+0xc20>
  408042:	3b01      	subs	r3, #1
  408044:	3701      	adds	r7, #1
  408046:	3601      	adds	r6, #1
  408048:	441c      	add	r4, r3
  40804a:	2f07      	cmp	r7, #7
  40804c:	9726      	str	r7, [sp, #152]	; 0x98
  40804e:	9427      	str	r4, [sp, #156]	; 0x9c
  408050:	f8c8 6000 	str.w	r6, [r8]
  408054:	f8c8 3004 	str.w	r3, [r8, #4]
  408058:	f300 8127 	bgt.w	4082aa <_svfprintf_r+0xc86>
  40805c:	f108 0808 	add.w	r8, r8, #8
  408060:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  408062:	f8c8 2004 	str.w	r2, [r8, #4]
  408066:	3701      	adds	r7, #1
  408068:	4414      	add	r4, r2
  40806a:	ab21      	add	r3, sp, #132	; 0x84
  40806c:	2f07      	cmp	r7, #7
  40806e:	9427      	str	r4, [sp, #156]	; 0x9c
  408070:	9726      	str	r7, [sp, #152]	; 0x98
  408072:	f8c8 3000 	str.w	r3, [r8]
  408076:	f77f acb3 	ble.w	4079e0 <_svfprintf_r+0x3bc>
  40807a:	aa25      	add	r2, sp, #148	; 0x94
  40807c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40807e:	980c      	ldr	r0, [sp, #48]	; 0x30
  408080:	f004 fa68 	bl	40c554 <__ssprint_r>
  408084:	2800      	cmp	r0, #0
  408086:	f47f ab9f 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  40808a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40808c:	46c8      	mov	r8, r9
  40808e:	e4a9      	b.n	4079e4 <_svfprintf_r+0x3c0>
  408090:	aa25      	add	r2, sp, #148	; 0x94
  408092:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408094:	980c      	ldr	r0, [sp, #48]	; 0x30
  408096:	f004 fa5d 	bl	40c554 <__ssprint_r>
  40809a:	2800      	cmp	r0, #0
  40809c:	f43f aceb 	beq.w	407a76 <_svfprintf_r+0x452>
  4080a0:	f7ff bb92 	b.w	4077c8 <_svfprintf_r+0x1a4>
  4080a4:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4080a8:	2b01      	cmp	r3, #1
  4080aa:	f000 8134 	beq.w	408316 <_svfprintf_r+0xcf2>
  4080ae:	2b02      	cmp	r3, #2
  4080b0:	d125      	bne.n	4080fe <_svfprintf_r+0xada>
  4080b2:	f8cd b01c 	str.w	fp, [sp, #28]
  4080b6:	2400      	movs	r4, #0
  4080b8:	2500      	movs	r5, #0
  4080ba:	e61e      	b.n	407cfa <_svfprintf_r+0x6d6>
  4080bc:	aa25      	add	r2, sp, #148	; 0x94
  4080be:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4080c0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4080c2:	f004 fa47 	bl	40c554 <__ssprint_r>
  4080c6:	2800      	cmp	r0, #0
  4080c8:	f47f ab7e 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  4080cc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4080ce:	46c8      	mov	r8, r9
  4080d0:	e475      	b.n	4079be <_svfprintf_r+0x39a>
  4080d2:	aa25      	add	r2, sp, #148	; 0x94
  4080d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4080d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4080d8:	f004 fa3c 	bl	40c554 <__ssprint_r>
  4080dc:	2800      	cmp	r0, #0
  4080de:	f47f ab73 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  4080e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4080e4:	46c8      	mov	r8, r9
  4080e6:	e41b      	b.n	407920 <_svfprintf_r+0x2fc>
  4080e8:	aa25      	add	r2, sp, #148	; 0x94
  4080ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4080ec:	980c      	ldr	r0, [sp, #48]	; 0x30
  4080ee:	f004 fa31 	bl	40c554 <__ssprint_r>
  4080f2:	2800      	cmp	r0, #0
  4080f4:	f47f ab68 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  4080f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4080fa:	46c8      	mov	r8, r9
  4080fc:	e420      	b.n	407940 <_svfprintf_r+0x31c>
  4080fe:	f8cd b01c 	str.w	fp, [sp, #28]
  408102:	2400      	movs	r4, #0
  408104:	2500      	movs	r5, #0
  408106:	4649      	mov	r1, r9
  408108:	e000      	b.n	40810c <_svfprintf_r+0xae8>
  40810a:	4631      	mov	r1, r6
  40810c:	08e2      	lsrs	r2, r4, #3
  40810e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  408112:	08e8      	lsrs	r0, r5, #3
  408114:	f004 0307 	and.w	r3, r4, #7
  408118:	4605      	mov	r5, r0
  40811a:	4614      	mov	r4, r2
  40811c:	3330      	adds	r3, #48	; 0x30
  40811e:	ea54 0205 	orrs.w	r2, r4, r5
  408122:	f801 3c01 	strb.w	r3, [r1, #-1]
  408126:	f101 36ff 	add.w	r6, r1, #4294967295
  40812a:	d1ee      	bne.n	40810a <_svfprintf_r+0xae6>
  40812c:	9a07      	ldr	r2, [sp, #28]
  40812e:	07d2      	lsls	r2, r2, #31
  408130:	f57f adf3 	bpl.w	407d1a <_svfprintf_r+0x6f6>
  408134:	2b30      	cmp	r3, #48	; 0x30
  408136:	f43f adf0 	beq.w	407d1a <_svfprintf_r+0x6f6>
  40813a:	3902      	subs	r1, #2
  40813c:	2330      	movs	r3, #48	; 0x30
  40813e:	f806 3c01 	strb.w	r3, [r6, #-1]
  408142:	eba9 0301 	sub.w	r3, r9, r1
  408146:	930e      	str	r3, [sp, #56]	; 0x38
  408148:	460e      	mov	r6, r1
  40814a:	f7ff bb7b 	b.w	407844 <_svfprintf_r+0x220>
  40814e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  408150:	2900      	cmp	r1, #0
  408152:	f340 822e 	ble.w	4085b2 <_svfprintf_r+0xf8e>
  408156:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408158:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40815a:	4293      	cmp	r3, r2
  40815c:	bfa8      	it	ge
  40815e:	4613      	movge	r3, r2
  408160:	2b00      	cmp	r3, #0
  408162:	461f      	mov	r7, r3
  408164:	dd0d      	ble.n	408182 <_svfprintf_r+0xb5e>
  408166:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408168:	f8c8 6000 	str.w	r6, [r8]
  40816c:	3301      	adds	r3, #1
  40816e:	443c      	add	r4, r7
  408170:	2b07      	cmp	r3, #7
  408172:	9427      	str	r4, [sp, #156]	; 0x9c
  408174:	f8c8 7004 	str.w	r7, [r8, #4]
  408178:	9326      	str	r3, [sp, #152]	; 0x98
  40817a:	f300 831f 	bgt.w	4087bc <_svfprintf_r+0x1198>
  40817e:	f108 0808 	add.w	r8, r8, #8
  408182:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408184:	2f00      	cmp	r7, #0
  408186:	bfa8      	it	ge
  408188:	1bdb      	subge	r3, r3, r7
  40818a:	2b00      	cmp	r3, #0
  40818c:	461f      	mov	r7, r3
  40818e:	f340 80d6 	ble.w	40833e <_svfprintf_r+0xd1a>
  408192:	2f10      	cmp	r7, #16
  408194:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408196:	4d31      	ldr	r5, [pc, #196]	; (40825c <_svfprintf_r+0xc38>)
  408198:	f340 81ed 	ble.w	408576 <_svfprintf_r+0xf52>
  40819c:	4642      	mov	r2, r8
  40819e:	4621      	mov	r1, r4
  4081a0:	46b0      	mov	r8, r6
  4081a2:	f04f 0b10 	mov.w	fp, #16
  4081a6:	462e      	mov	r6, r5
  4081a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4081aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4081ac:	e004      	b.n	4081b8 <_svfprintf_r+0xb94>
  4081ae:	3208      	adds	r2, #8
  4081b0:	3f10      	subs	r7, #16
  4081b2:	2f10      	cmp	r7, #16
  4081b4:	f340 81db 	ble.w	40856e <_svfprintf_r+0xf4a>
  4081b8:	3301      	adds	r3, #1
  4081ba:	3110      	adds	r1, #16
  4081bc:	2b07      	cmp	r3, #7
  4081be:	9127      	str	r1, [sp, #156]	; 0x9c
  4081c0:	9326      	str	r3, [sp, #152]	; 0x98
  4081c2:	e882 0840 	stmia.w	r2, {r6, fp}
  4081c6:	ddf2      	ble.n	4081ae <_svfprintf_r+0xb8a>
  4081c8:	aa25      	add	r2, sp, #148	; 0x94
  4081ca:	4629      	mov	r1, r5
  4081cc:	4620      	mov	r0, r4
  4081ce:	f004 f9c1 	bl	40c554 <__ssprint_r>
  4081d2:	2800      	cmp	r0, #0
  4081d4:	f47f aaf8 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  4081d8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4081da:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4081dc:	464a      	mov	r2, r9
  4081de:	e7e7      	b.n	4081b0 <_svfprintf_r+0xb8c>
  4081e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4081e2:	930e      	str	r3, [sp, #56]	; 0x38
  4081e4:	464e      	mov	r6, r9
  4081e6:	f7ff bb2d 	b.w	407844 <_svfprintf_r+0x220>
  4081ea:	2d00      	cmp	r5, #0
  4081ec:	bf08      	it	eq
  4081ee:	2c0a      	cmpeq	r4, #10
  4081f0:	f0c0 808f 	bcc.w	408312 <_svfprintf_r+0xcee>
  4081f4:	464e      	mov	r6, r9
  4081f6:	4620      	mov	r0, r4
  4081f8:	4629      	mov	r1, r5
  4081fa:	220a      	movs	r2, #10
  4081fc:	2300      	movs	r3, #0
  4081fe:	f005 f8b5 	bl	40d36c <__aeabi_uldivmod>
  408202:	3230      	adds	r2, #48	; 0x30
  408204:	f806 2d01 	strb.w	r2, [r6, #-1]!
  408208:	4620      	mov	r0, r4
  40820a:	4629      	mov	r1, r5
  40820c:	2300      	movs	r3, #0
  40820e:	220a      	movs	r2, #10
  408210:	f005 f8ac 	bl	40d36c <__aeabi_uldivmod>
  408214:	4604      	mov	r4, r0
  408216:	460d      	mov	r5, r1
  408218:	ea54 0305 	orrs.w	r3, r4, r5
  40821c:	d1eb      	bne.n	4081f6 <_svfprintf_r+0xbd2>
  40821e:	eba9 0306 	sub.w	r3, r9, r6
  408222:	930e      	str	r3, [sp, #56]	; 0x38
  408224:	f7ff bb0e 	b.w	407844 <_svfprintf_r+0x220>
  408228:	aa25      	add	r2, sp, #148	; 0x94
  40822a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40822c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40822e:	f004 f991 	bl	40c554 <__ssprint_r>
  408232:	2800      	cmp	r0, #0
  408234:	f47f aac8 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  408238:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40823c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40823e:	46c8      	mov	r8, r9
  408240:	f7ff bb5e 	b.w	407900 <_svfprintf_r+0x2dc>
  408244:	1e5e      	subs	r6, r3, #1
  408246:	2e00      	cmp	r6, #0
  408248:	f77f af0a 	ble.w	408060 <_svfprintf_r+0xa3c>
  40824c:	2e10      	cmp	r6, #16
  40824e:	4d03      	ldr	r5, [pc, #12]	; (40825c <_svfprintf_r+0xc38>)
  408250:	dd22      	ble.n	408298 <_svfprintf_r+0xc74>
  408252:	4622      	mov	r2, r4
  408254:	f04f 0b10 	mov.w	fp, #16
  408258:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40825a:	e006      	b.n	40826a <_svfprintf_r+0xc46>
  40825c:	0040e7d0 	.word	0x0040e7d0
  408260:	3e10      	subs	r6, #16
  408262:	2e10      	cmp	r6, #16
  408264:	f108 0808 	add.w	r8, r8, #8
  408268:	dd15      	ble.n	408296 <_svfprintf_r+0xc72>
  40826a:	3701      	adds	r7, #1
  40826c:	3210      	adds	r2, #16
  40826e:	2f07      	cmp	r7, #7
  408270:	9227      	str	r2, [sp, #156]	; 0x9c
  408272:	9726      	str	r7, [sp, #152]	; 0x98
  408274:	e888 0820 	stmia.w	r8, {r5, fp}
  408278:	ddf2      	ble.n	408260 <_svfprintf_r+0xc3c>
  40827a:	aa25      	add	r2, sp, #148	; 0x94
  40827c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40827e:	4620      	mov	r0, r4
  408280:	f004 f968 	bl	40c554 <__ssprint_r>
  408284:	2800      	cmp	r0, #0
  408286:	f47f aa9f 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  40828a:	3e10      	subs	r6, #16
  40828c:	2e10      	cmp	r6, #16
  40828e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408290:	9f26      	ldr	r7, [sp, #152]	; 0x98
  408292:	46c8      	mov	r8, r9
  408294:	dce9      	bgt.n	40826a <_svfprintf_r+0xc46>
  408296:	4614      	mov	r4, r2
  408298:	3701      	adds	r7, #1
  40829a:	4434      	add	r4, r6
  40829c:	2f07      	cmp	r7, #7
  40829e:	9427      	str	r4, [sp, #156]	; 0x9c
  4082a0:	9726      	str	r7, [sp, #152]	; 0x98
  4082a2:	e888 0060 	stmia.w	r8, {r5, r6}
  4082a6:	f77f aed9 	ble.w	40805c <_svfprintf_r+0xa38>
  4082aa:	aa25      	add	r2, sp, #148	; 0x94
  4082ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4082ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4082b0:	f004 f950 	bl	40c554 <__ssprint_r>
  4082b4:	2800      	cmp	r0, #0
  4082b6:	f47f aa87 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  4082ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4082bc:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4082be:	46c8      	mov	r8, r9
  4082c0:	e6ce      	b.n	408060 <_svfprintf_r+0xa3c>
  4082c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4082c4:	6814      	ldr	r4, [r2, #0]
  4082c6:	4613      	mov	r3, r2
  4082c8:	3304      	adds	r3, #4
  4082ca:	17e5      	asrs	r5, r4, #31
  4082cc:	930f      	str	r3, [sp, #60]	; 0x3c
  4082ce:	4622      	mov	r2, r4
  4082d0:	462b      	mov	r3, r5
  4082d2:	e4fa      	b.n	407cca <_svfprintf_r+0x6a6>
  4082d4:	3204      	adds	r2, #4
  4082d6:	681c      	ldr	r4, [r3, #0]
  4082d8:	920f      	str	r2, [sp, #60]	; 0x3c
  4082da:	2301      	movs	r3, #1
  4082dc:	2500      	movs	r5, #0
  4082de:	f7ff ba94 	b.w	40780a <_svfprintf_r+0x1e6>
  4082e2:	681c      	ldr	r4, [r3, #0]
  4082e4:	3304      	adds	r3, #4
  4082e6:	930f      	str	r3, [sp, #60]	; 0x3c
  4082e8:	2500      	movs	r5, #0
  4082ea:	e421      	b.n	407b30 <_svfprintf_r+0x50c>
  4082ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4082ee:	460a      	mov	r2, r1
  4082f0:	3204      	adds	r2, #4
  4082f2:	680c      	ldr	r4, [r1, #0]
  4082f4:	920f      	str	r2, [sp, #60]	; 0x3c
  4082f6:	2500      	movs	r5, #0
  4082f8:	f7ff ba87 	b.w	40780a <_svfprintf_r+0x1e6>
  4082fc:	4614      	mov	r4, r2
  4082fe:	3301      	adds	r3, #1
  408300:	4434      	add	r4, r6
  408302:	2b07      	cmp	r3, #7
  408304:	9427      	str	r4, [sp, #156]	; 0x9c
  408306:	9326      	str	r3, [sp, #152]	; 0x98
  408308:	e888 0060 	stmia.w	r8, {r5, r6}
  40830c:	f77f ab68 	ble.w	4079e0 <_svfprintf_r+0x3bc>
  408310:	e6b3      	b.n	40807a <_svfprintf_r+0xa56>
  408312:	f8dd b01c 	ldr.w	fp, [sp, #28]
  408316:	f8cd b01c 	str.w	fp, [sp, #28]
  40831a:	ae42      	add	r6, sp, #264	; 0x108
  40831c:	3430      	adds	r4, #48	; 0x30
  40831e:	2301      	movs	r3, #1
  408320:	f806 4d41 	strb.w	r4, [r6, #-65]!
  408324:	930e      	str	r3, [sp, #56]	; 0x38
  408326:	f7ff ba8d 	b.w	407844 <_svfprintf_r+0x220>
  40832a:	aa25      	add	r2, sp, #148	; 0x94
  40832c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40832e:	980c      	ldr	r0, [sp, #48]	; 0x30
  408330:	f004 f910 	bl	40c554 <__ssprint_r>
  408334:	2800      	cmp	r0, #0
  408336:	f47f aa47 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  40833a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40833c:	46c8      	mov	r8, r9
  40833e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  408340:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408342:	429a      	cmp	r2, r3
  408344:	db44      	blt.n	4083d0 <_svfprintf_r+0xdac>
  408346:	9b07      	ldr	r3, [sp, #28]
  408348:	07d9      	lsls	r1, r3, #31
  40834a:	d441      	bmi.n	4083d0 <_svfprintf_r+0xdac>
  40834c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40834e:	9812      	ldr	r0, [sp, #72]	; 0x48
  408350:	1a9a      	subs	r2, r3, r2
  408352:	1a1d      	subs	r5, r3, r0
  408354:	4295      	cmp	r5, r2
  408356:	bfa8      	it	ge
  408358:	4615      	movge	r5, r2
  40835a:	2d00      	cmp	r5, #0
  40835c:	dd0e      	ble.n	40837c <_svfprintf_r+0xd58>
  40835e:	9926      	ldr	r1, [sp, #152]	; 0x98
  408360:	f8c8 5004 	str.w	r5, [r8, #4]
  408364:	3101      	adds	r1, #1
  408366:	4406      	add	r6, r0
  408368:	442c      	add	r4, r5
  40836a:	2907      	cmp	r1, #7
  40836c:	f8c8 6000 	str.w	r6, [r8]
  408370:	9427      	str	r4, [sp, #156]	; 0x9c
  408372:	9126      	str	r1, [sp, #152]	; 0x98
  408374:	f300 823b 	bgt.w	4087ee <_svfprintf_r+0x11ca>
  408378:	f108 0808 	add.w	r8, r8, #8
  40837c:	2d00      	cmp	r5, #0
  40837e:	bfac      	ite	ge
  408380:	1b56      	subge	r6, r2, r5
  408382:	4616      	movlt	r6, r2
  408384:	2e00      	cmp	r6, #0
  408386:	f77f ab2d 	ble.w	4079e4 <_svfprintf_r+0x3c0>
  40838a:	2e10      	cmp	r6, #16
  40838c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40838e:	4db0      	ldr	r5, [pc, #704]	; (408650 <_svfprintf_r+0x102c>)
  408390:	ddb5      	ble.n	4082fe <_svfprintf_r+0xcda>
  408392:	4622      	mov	r2, r4
  408394:	2710      	movs	r7, #16
  408396:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40839a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40839c:	e004      	b.n	4083a8 <_svfprintf_r+0xd84>
  40839e:	f108 0808 	add.w	r8, r8, #8
  4083a2:	3e10      	subs	r6, #16
  4083a4:	2e10      	cmp	r6, #16
  4083a6:	dda9      	ble.n	4082fc <_svfprintf_r+0xcd8>
  4083a8:	3301      	adds	r3, #1
  4083aa:	3210      	adds	r2, #16
  4083ac:	2b07      	cmp	r3, #7
  4083ae:	9227      	str	r2, [sp, #156]	; 0x9c
  4083b0:	9326      	str	r3, [sp, #152]	; 0x98
  4083b2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4083b6:	ddf2      	ble.n	40839e <_svfprintf_r+0xd7a>
  4083b8:	aa25      	add	r2, sp, #148	; 0x94
  4083ba:	4621      	mov	r1, r4
  4083bc:	4658      	mov	r0, fp
  4083be:	f004 f8c9 	bl	40c554 <__ssprint_r>
  4083c2:	2800      	cmp	r0, #0
  4083c4:	f47f aa00 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  4083c8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4083ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4083cc:	46c8      	mov	r8, r9
  4083ce:	e7e8      	b.n	4083a2 <_svfprintf_r+0xd7e>
  4083d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4083d2:	9819      	ldr	r0, [sp, #100]	; 0x64
  4083d4:	991a      	ldr	r1, [sp, #104]	; 0x68
  4083d6:	f8c8 1000 	str.w	r1, [r8]
  4083da:	3301      	adds	r3, #1
  4083dc:	4404      	add	r4, r0
  4083de:	2b07      	cmp	r3, #7
  4083e0:	9427      	str	r4, [sp, #156]	; 0x9c
  4083e2:	f8c8 0004 	str.w	r0, [r8, #4]
  4083e6:	9326      	str	r3, [sp, #152]	; 0x98
  4083e8:	f300 81f5 	bgt.w	4087d6 <_svfprintf_r+0x11b2>
  4083ec:	f108 0808 	add.w	r8, r8, #8
  4083f0:	e7ac      	b.n	40834c <_svfprintf_r+0xd28>
  4083f2:	9b07      	ldr	r3, [sp, #28]
  4083f4:	07da      	lsls	r2, r3, #31
  4083f6:	f53f adfe 	bmi.w	407ff6 <_svfprintf_r+0x9d2>
  4083fa:	3701      	adds	r7, #1
  4083fc:	3401      	adds	r4, #1
  4083fe:	2301      	movs	r3, #1
  408400:	2f07      	cmp	r7, #7
  408402:	9427      	str	r4, [sp, #156]	; 0x9c
  408404:	9726      	str	r7, [sp, #152]	; 0x98
  408406:	f8c8 6000 	str.w	r6, [r8]
  40840a:	f8c8 3004 	str.w	r3, [r8, #4]
  40840e:	f77f ae25 	ble.w	40805c <_svfprintf_r+0xa38>
  408412:	e74a      	b.n	4082aa <_svfprintf_r+0xc86>
  408414:	aa25      	add	r2, sp, #148	; 0x94
  408416:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408418:	980c      	ldr	r0, [sp, #48]	; 0x30
  40841a:	f004 f89b 	bl	40c554 <__ssprint_r>
  40841e:	2800      	cmp	r0, #0
  408420:	f47f a9d2 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  408424:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408426:	9f26      	ldr	r7, [sp, #152]	; 0x98
  408428:	46c8      	mov	r8, r9
  40842a:	e5f2      	b.n	408012 <_svfprintf_r+0x9ee>
  40842c:	aa25      	add	r2, sp, #148	; 0x94
  40842e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408430:	980c      	ldr	r0, [sp, #48]	; 0x30
  408432:	f004 f88f 	bl	40c554 <__ssprint_r>
  408436:	2800      	cmp	r0, #0
  408438:	f47f a9c6 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  40843c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40843e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  408440:	46c8      	mov	r8, r9
  408442:	e5f5      	b.n	408030 <_svfprintf_r+0xa0c>
  408444:	464e      	mov	r6, r9
  408446:	f7ff b9fd 	b.w	407844 <_svfprintf_r+0x220>
  40844a:	aa25      	add	r2, sp, #148	; 0x94
  40844c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40844e:	980c      	ldr	r0, [sp, #48]	; 0x30
  408450:	f004 f880 	bl	40c554 <__ssprint_r>
  408454:	2800      	cmp	r0, #0
  408456:	f47f a9b7 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  40845a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40845c:	46c8      	mov	r8, r9
  40845e:	f7ff ba72 	b.w	407946 <_svfprintf_r+0x322>
  408462:	9c15      	ldr	r4, [sp, #84]	; 0x54
  408464:	4622      	mov	r2, r4
  408466:	4620      	mov	r0, r4
  408468:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40846a:	4623      	mov	r3, r4
  40846c:	4621      	mov	r1, r4
  40846e:	f004 ff3f 	bl	40d2f0 <__aeabi_dcmpun>
  408472:	2800      	cmp	r0, #0
  408474:	f040 8286 	bne.w	408984 <_svfprintf_r+0x1360>
  408478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40847a:	3301      	adds	r3, #1
  40847c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40847e:	f023 0320 	bic.w	r3, r3, #32
  408482:	930e      	str	r3, [sp, #56]	; 0x38
  408484:	f000 81e2 	beq.w	40884c <_svfprintf_r+0x1228>
  408488:	2b47      	cmp	r3, #71	; 0x47
  40848a:	f000 811e 	beq.w	4086ca <_svfprintf_r+0x10a6>
  40848e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  408492:	9307      	str	r3, [sp, #28]
  408494:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408496:	1e1f      	subs	r7, r3, #0
  408498:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40849a:	9308      	str	r3, [sp, #32]
  40849c:	bfbb      	ittet	lt
  40849e:	463b      	movlt	r3, r7
  4084a0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4084a4:	2300      	movge	r3, #0
  4084a6:	232d      	movlt	r3, #45	; 0x2d
  4084a8:	9310      	str	r3, [sp, #64]	; 0x40
  4084aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4084ac:	2b66      	cmp	r3, #102	; 0x66
  4084ae:	f000 81bb 	beq.w	408828 <_svfprintf_r+0x1204>
  4084b2:	2b46      	cmp	r3, #70	; 0x46
  4084b4:	f000 80df 	beq.w	408676 <_svfprintf_r+0x1052>
  4084b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4084ba:	9a08      	ldr	r2, [sp, #32]
  4084bc:	2b45      	cmp	r3, #69	; 0x45
  4084be:	bf0c      	ite	eq
  4084c0:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4084c2:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4084c4:	a823      	add	r0, sp, #140	; 0x8c
  4084c6:	a920      	add	r1, sp, #128	; 0x80
  4084c8:	bf08      	it	eq
  4084ca:	1c5d      	addeq	r5, r3, #1
  4084cc:	9004      	str	r0, [sp, #16]
  4084ce:	9103      	str	r1, [sp, #12]
  4084d0:	a81f      	add	r0, sp, #124	; 0x7c
  4084d2:	2102      	movs	r1, #2
  4084d4:	463b      	mov	r3, r7
  4084d6:	9002      	str	r0, [sp, #8]
  4084d8:	9501      	str	r5, [sp, #4]
  4084da:	9100      	str	r1, [sp, #0]
  4084dc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4084de:	f001 faa3 	bl	409a28 <_dtoa_r>
  4084e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4084e4:	2b67      	cmp	r3, #103	; 0x67
  4084e6:	4606      	mov	r6, r0
  4084e8:	f040 81e0 	bne.w	4088ac <_svfprintf_r+0x1288>
  4084ec:	f01b 0f01 	tst.w	fp, #1
  4084f0:	f000 8246 	beq.w	408980 <_svfprintf_r+0x135c>
  4084f4:	1974      	adds	r4, r6, r5
  4084f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4084f8:	9808      	ldr	r0, [sp, #32]
  4084fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4084fc:	4639      	mov	r1, r7
  4084fe:	f004 fec5 	bl	40d28c <__aeabi_dcmpeq>
  408502:	2800      	cmp	r0, #0
  408504:	f040 8165 	bne.w	4087d2 <_svfprintf_r+0x11ae>
  408508:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40850a:	42a3      	cmp	r3, r4
  40850c:	d206      	bcs.n	40851c <_svfprintf_r+0xef8>
  40850e:	2130      	movs	r1, #48	; 0x30
  408510:	1c5a      	adds	r2, r3, #1
  408512:	9223      	str	r2, [sp, #140]	; 0x8c
  408514:	7019      	strb	r1, [r3, #0]
  408516:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408518:	429c      	cmp	r4, r3
  40851a:	d8f9      	bhi.n	408510 <_svfprintf_r+0xeec>
  40851c:	1b9b      	subs	r3, r3, r6
  40851e:	9313      	str	r3, [sp, #76]	; 0x4c
  408520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408522:	2b47      	cmp	r3, #71	; 0x47
  408524:	f000 80e9 	beq.w	4086fa <_svfprintf_r+0x10d6>
  408528:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40852a:	2b65      	cmp	r3, #101	; 0x65
  40852c:	f340 81cd 	ble.w	4088ca <_svfprintf_r+0x12a6>
  408530:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408532:	2b66      	cmp	r3, #102	; 0x66
  408534:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  408536:	9312      	str	r3, [sp, #72]	; 0x48
  408538:	f000 819e 	beq.w	408878 <_svfprintf_r+0x1254>
  40853c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40853e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408540:	4619      	mov	r1, r3
  408542:	4291      	cmp	r1, r2
  408544:	f300 818a 	bgt.w	40885c <_svfprintf_r+0x1238>
  408548:	f01b 0f01 	tst.w	fp, #1
  40854c:	f040 8213 	bne.w	408976 <_svfprintf_r+0x1352>
  408550:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  408554:	9308      	str	r3, [sp, #32]
  408556:	2367      	movs	r3, #103	; 0x67
  408558:	920e      	str	r2, [sp, #56]	; 0x38
  40855a:	9311      	str	r3, [sp, #68]	; 0x44
  40855c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40855e:	2b00      	cmp	r3, #0
  408560:	f040 80c4 	bne.w	4086ec <_svfprintf_r+0x10c8>
  408564:	930a      	str	r3, [sp, #40]	; 0x28
  408566:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40856a:	f7ff b973 	b.w	407854 <_svfprintf_r+0x230>
  40856e:	4635      	mov	r5, r6
  408570:	460c      	mov	r4, r1
  408572:	4646      	mov	r6, r8
  408574:	4690      	mov	r8, r2
  408576:	3301      	adds	r3, #1
  408578:	443c      	add	r4, r7
  40857a:	2b07      	cmp	r3, #7
  40857c:	9427      	str	r4, [sp, #156]	; 0x9c
  40857e:	9326      	str	r3, [sp, #152]	; 0x98
  408580:	e888 00a0 	stmia.w	r8, {r5, r7}
  408584:	f73f aed1 	bgt.w	40832a <_svfprintf_r+0xd06>
  408588:	f108 0808 	add.w	r8, r8, #8
  40858c:	e6d7      	b.n	40833e <_svfprintf_r+0xd1a>
  40858e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408590:	6813      	ldr	r3, [r2, #0]
  408592:	3204      	adds	r2, #4
  408594:	920f      	str	r2, [sp, #60]	; 0x3c
  408596:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408598:	601a      	str	r2, [r3, #0]
  40859a:	f7ff b86a 	b.w	407672 <_svfprintf_r+0x4e>
  40859e:	aa25      	add	r2, sp, #148	; 0x94
  4085a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4085a2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4085a4:	f003 ffd6 	bl	40c554 <__ssprint_r>
  4085a8:	2800      	cmp	r0, #0
  4085aa:	f47f a90d 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  4085ae:	46c8      	mov	r8, r9
  4085b0:	e48d      	b.n	407ece <_svfprintf_r+0x8aa>
  4085b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4085b4:	4a27      	ldr	r2, [pc, #156]	; (408654 <_svfprintf_r+0x1030>)
  4085b6:	f8c8 2000 	str.w	r2, [r8]
  4085ba:	3301      	adds	r3, #1
  4085bc:	3401      	adds	r4, #1
  4085be:	2201      	movs	r2, #1
  4085c0:	2b07      	cmp	r3, #7
  4085c2:	9427      	str	r4, [sp, #156]	; 0x9c
  4085c4:	9326      	str	r3, [sp, #152]	; 0x98
  4085c6:	f8c8 2004 	str.w	r2, [r8, #4]
  4085ca:	dc72      	bgt.n	4086b2 <_svfprintf_r+0x108e>
  4085cc:	f108 0808 	add.w	r8, r8, #8
  4085d0:	b929      	cbnz	r1, 4085de <_svfprintf_r+0xfba>
  4085d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4085d4:	b91b      	cbnz	r3, 4085de <_svfprintf_r+0xfba>
  4085d6:	9b07      	ldr	r3, [sp, #28]
  4085d8:	07d8      	lsls	r0, r3, #31
  4085da:	f57f aa03 	bpl.w	4079e4 <_svfprintf_r+0x3c0>
  4085de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4085e0:	9819      	ldr	r0, [sp, #100]	; 0x64
  4085e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4085e4:	f8c8 2000 	str.w	r2, [r8]
  4085e8:	3301      	adds	r3, #1
  4085ea:	4602      	mov	r2, r0
  4085ec:	4422      	add	r2, r4
  4085ee:	2b07      	cmp	r3, #7
  4085f0:	9227      	str	r2, [sp, #156]	; 0x9c
  4085f2:	f8c8 0004 	str.w	r0, [r8, #4]
  4085f6:	9326      	str	r3, [sp, #152]	; 0x98
  4085f8:	f300 818d 	bgt.w	408916 <_svfprintf_r+0x12f2>
  4085fc:	f108 0808 	add.w	r8, r8, #8
  408600:	2900      	cmp	r1, #0
  408602:	f2c0 8165 	blt.w	4088d0 <_svfprintf_r+0x12ac>
  408606:	9913      	ldr	r1, [sp, #76]	; 0x4c
  408608:	f8c8 6000 	str.w	r6, [r8]
  40860c:	3301      	adds	r3, #1
  40860e:	188c      	adds	r4, r1, r2
  408610:	2b07      	cmp	r3, #7
  408612:	9427      	str	r4, [sp, #156]	; 0x9c
  408614:	9326      	str	r3, [sp, #152]	; 0x98
  408616:	f8c8 1004 	str.w	r1, [r8, #4]
  40861a:	f77f a9e1 	ble.w	4079e0 <_svfprintf_r+0x3bc>
  40861e:	e52c      	b.n	40807a <_svfprintf_r+0xa56>
  408620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408622:	9909      	ldr	r1, [sp, #36]	; 0x24
  408624:	6813      	ldr	r3, [r2, #0]
  408626:	17cd      	asrs	r5, r1, #31
  408628:	4608      	mov	r0, r1
  40862a:	3204      	adds	r2, #4
  40862c:	4629      	mov	r1, r5
  40862e:	920f      	str	r2, [sp, #60]	; 0x3c
  408630:	e9c3 0100 	strd	r0, r1, [r3]
  408634:	f7ff b81d 	b.w	407672 <_svfprintf_r+0x4e>
  408638:	aa25      	add	r2, sp, #148	; 0x94
  40863a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40863c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40863e:	f003 ff89 	bl	40c554 <__ssprint_r>
  408642:	2800      	cmp	r0, #0
  408644:	f47f a8c0 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  408648:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40864a:	46c8      	mov	r8, r9
  40864c:	e458      	b.n	407f00 <_svfprintf_r+0x8dc>
  40864e:	bf00      	nop
  408650:	0040e7d0 	.word	0x0040e7d0
  408654:	0040e5bc 	.word	0x0040e5bc
  408658:	2140      	movs	r1, #64	; 0x40
  40865a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40865c:	f002 fe58 	bl	40b310 <_malloc_r>
  408660:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408662:	6010      	str	r0, [r2, #0]
  408664:	6110      	str	r0, [r2, #16]
  408666:	2800      	cmp	r0, #0
  408668:	f000 81f2 	beq.w	408a50 <_svfprintf_r+0x142c>
  40866c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40866e:	2340      	movs	r3, #64	; 0x40
  408670:	6153      	str	r3, [r2, #20]
  408672:	f7fe bfee 	b.w	407652 <_svfprintf_r+0x2e>
  408676:	a823      	add	r0, sp, #140	; 0x8c
  408678:	a920      	add	r1, sp, #128	; 0x80
  40867a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40867c:	9004      	str	r0, [sp, #16]
  40867e:	9103      	str	r1, [sp, #12]
  408680:	a81f      	add	r0, sp, #124	; 0x7c
  408682:	2103      	movs	r1, #3
  408684:	9002      	str	r0, [sp, #8]
  408686:	9a08      	ldr	r2, [sp, #32]
  408688:	9401      	str	r4, [sp, #4]
  40868a:	463b      	mov	r3, r7
  40868c:	9100      	str	r1, [sp, #0]
  40868e:	980c      	ldr	r0, [sp, #48]	; 0x30
  408690:	f001 f9ca 	bl	409a28 <_dtoa_r>
  408694:	4625      	mov	r5, r4
  408696:	4606      	mov	r6, r0
  408698:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40869a:	2b46      	cmp	r3, #70	; 0x46
  40869c:	eb06 0405 	add.w	r4, r6, r5
  4086a0:	f47f af29 	bne.w	4084f6 <_svfprintf_r+0xed2>
  4086a4:	7833      	ldrb	r3, [r6, #0]
  4086a6:	2b30      	cmp	r3, #48	; 0x30
  4086a8:	f000 8178 	beq.w	40899c <_svfprintf_r+0x1378>
  4086ac:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4086ae:	442c      	add	r4, r5
  4086b0:	e721      	b.n	4084f6 <_svfprintf_r+0xed2>
  4086b2:	aa25      	add	r2, sp, #148	; 0x94
  4086b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4086b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4086b8:	f003 ff4c 	bl	40c554 <__ssprint_r>
  4086bc:	2800      	cmp	r0, #0
  4086be:	f47f a883 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  4086c2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4086c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4086c6:	46c8      	mov	r8, r9
  4086c8:	e782      	b.n	4085d0 <_svfprintf_r+0xfac>
  4086ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4086cc:	2b00      	cmp	r3, #0
  4086ce:	bf08      	it	eq
  4086d0:	2301      	moveq	r3, #1
  4086d2:	930a      	str	r3, [sp, #40]	; 0x28
  4086d4:	e6db      	b.n	40848e <_svfprintf_r+0xe6a>
  4086d6:	4630      	mov	r0, r6
  4086d8:	940a      	str	r4, [sp, #40]	; 0x28
  4086da:	f7fe fcd1 	bl	407080 <strlen>
  4086de:	950f      	str	r5, [sp, #60]	; 0x3c
  4086e0:	900e      	str	r0, [sp, #56]	; 0x38
  4086e2:	f8cd b01c 	str.w	fp, [sp, #28]
  4086e6:	4603      	mov	r3, r0
  4086e8:	f7ff b9f9 	b.w	407ade <_svfprintf_r+0x4ba>
  4086ec:	272d      	movs	r7, #45	; 0x2d
  4086ee:	2300      	movs	r3, #0
  4086f0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4086f4:	930a      	str	r3, [sp, #40]	; 0x28
  4086f6:	f7ff b8ae 	b.w	407856 <_svfprintf_r+0x232>
  4086fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4086fc:	9312      	str	r3, [sp, #72]	; 0x48
  4086fe:	461a      	mov	r2, r3
  408700:	3303      	adds	r3, #3
  408702:	db04      	blt.n	40870e <_svfprintf_r+0x10ea>
  408704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408706:	4619      	mov	r1, r3
  408708:	4291      	cmp	r1, r2
  40870a:	f6bf af17 	bge.w	40853c <_svfprintf_r+0xf18>
  40870e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408710:	3b02      	subs	r3, #2
  408712:	9311      	str	r3, [sp, #68]	; 0x44
  408714:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  408718:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  40871c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40871e:	3b01      	subs	r3, #1
  408720:	2b00      	cmp	r3, #0
  408722:	931f      	str	r3, [sp, #124]	; 0x7c
  408724:	bfbd      	ittte	lt
  408726:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  408728:	f1c3 0301 	rsblt	r3, r3, #1
  40872c:	222d      	movlt	r2, #45	; 0x2d
  40872e:	222b      	movge	r2, #43	; 0x2b
  408730:	2b09      	cmp	r3, #9
  408732:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  408736:	f340 8116 	ble.w	408966 <_svfprintf_r+0x1342>
  40873a:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  40873e:	4620      	mov	r0, r4
  408740:	4dab      	ldr	r5, [pc, #684]	; (4089f0 <_svfprintf_r+0x13cc>)
  408742:	e000      	b.n	408746 <_svfprintf_r+0x1122>
  408744:	4610      	mov	r0, r2
  408746:	fb85 1203 	smull	r1, r2, r5, r3
  40874a:	17d9      	asrs	r1, r3, #31
  40874c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  408750:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  408754:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  408758:	3230      	adds	r2, #48	; 0x30
  40875a:	2909      	cmp	r1, #9
  40875c:	f800 2c01 	strb.w	r2, [r0, #-1]
  408760:	460b      	mov	r3, r1
  408762:	f100 32ff 	add.w	r2, r0, #4294967295
  408766:	dced      	bgt.n	408744 <_svfprintf_r+0x1120>
  408768:	3330      	adds	r3, #48	; 0x30
  40876a:	3802      	subs	r0, #2
  40876c:	b2d9      	uxtb	r1, r3
  40876e:	4284      	cmp	r4, r0
  408770:	f802 1c01 	strb.w	r1, [r2, #-1]
  408774:	f240 8165 	bls.w	408a42 <_svfprintf_r+0x141e>
  408778:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  40877c:	4613      	mov	r3, r2
  40877e:	e001      	b.n	408784 <_svfprintf_r+0x1160>
  408780:	f813 1b01 	ldrb.w	r1, [r3], #1
  408784:	f800 1b01 	strb.w	r1, [r0], #1
  408788:	42a3      	cmp	r3, r4
  40878a:	d1f9      	bne.n	408780 <_svfprintf_r+0x115c>
  40878c:	3301      	adds	r3, #1
  40878e:	1a9b      	subs	r3, r3, r2
  408790:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  408794:	4413      	add	r3, r2
  408796:	aa21      	add	r2, sp, #132	; 0x84
  408798:	1a9b      	subs	r3, r3, r2
  40879a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40879c:	931b      	str	r3, [sp, #108]	; 0x6c
  40879e:	2a01      	cmp	r2, #1
  4087a0:	4413      	add	r3, r2
  4087a2:	930e      	str	r3, [sp, #56]	; 0x38
  4087a4:	f340 8119 	ble.w	4089da <_svfprintf_r+0x13b6>
  4087a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4087aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4087ac:	4413      	add	r3, r2
  4087ae:	930e      	str	r3, [sp, #56]	; 0x38
  4087b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4087b4:	9308      	str	r3, [sp, #32]
  4087b6:	2300      	movs	r3, #0
  4087b8:	9312      	str	r3, [sp, #72]	; 0x48
  4087ba:	e6cf      	b.n	40855c <_svfprintf_r+0xf38>
  4087bc:	aa25      	add	r2, sp, #148	; 0x94
  4087be:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4087c0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4087c2:	f003 fec7 	bl	40c554 <__ssprint_r>
  4087c6:	2800      	cmp	r0, #0
  4087c8:	f47e affe 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  4087cc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4087ce:	46c8      	mov	r8, r9
  4087d0:	e4d7      	b.n	408182 <_svfprintf_r+0xb5e>
  4087d2:	4623      	mov	r3, r4
  4087d4:	e6a2      	b.n	40851c <_svfprintf_r+0xef8>
  4087d6:	aa25      	add	r2, sp, #148	; 0x94
  4087d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4087da:	980c      	ldr	r0, [sp, #48]	; 0x30
  4087dc:	f003 feba 	bl	40c554 <__ssprint_r>
  4087e0:	2800      	cmp	r0, #0
  4087e2:	f47e aff1 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  4087e6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4087e8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4087ea:	46c8      	mov	r8, r9
  4087ec:	e5ae      	b.n	40834c <_svfprintf_r+0xd28>
  4087ee:	aa25      	add	r2, sp, #148	; 0x94
  4087f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4087f2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4087f4:	f003 feae 	bl	40c554 <__ssprint_r>
  4087f8:	2800      	cmp	r0, #0
  4087fa:	f47e afe5 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  4087fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  408800:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408802:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408804:	1a9a      	subs	r2, r3, r2
  408806:	46c8      	mov	r8, r9
  408808:	e5b8      	b.n	40837c <_svfprintf_r+0xd58>
  40880a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40880c:	9612      	str	r6, [sp, #72]	; 0x48
  40880e:	2b06      	cmp	r3, #6
  408810:	bf28      	it	cs
  408812:	2306      	movcs	r3, #6
  408814:	960a      	str	r6, [sp, #40]	; 0x28
  408816:	4637      	mov	r7, r6
  408818:	9308      	str	r3, [sp, #32]
  40881a:	950f      	str	r5, [sp, #60]	; 0x3c
  40881c:	f8cd b01c 	str.w	fp, [sp, #28]
  408820:	930e      	str	r3, [sp, #56]	; 0x38
  408822:	4e74      	ldr	r6, [pc, #464]	; (4089f4 <_svfprintf_r+0x13d0>)
  408824:	f7ff b816 	b.w	407854 <_svfprintf_r+0x230>
  408828:	a823      	add	r0, sp, #140	; 0x8c
  40882a:	a920      	add	r1, sp, #128	; 0x80
  40882c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40882e:	9004      	str	r0, [sp, #16]
  408830:	9103      	str	r1, [sp, #12]
  408832:	a81f      	add	r0, sp, #124	; 0x7c
  408834:	2103      	movs	r1, #3
  408836:	9002      	str	r0, [sp, #8]
  408838:	9a08      	ldr	r2, [sp, #32]
  40883a:	9501      	str	r5, [sp, #4]
  40883c:	463b      	mov	r3, r7
  40883e:	9100      	str	r1, [sp, #0]
  408840:	980c      	ldr	r0, [sp, #48]	; 0x30
  408842:	f001 f8f1 	bl	409a28 <_dtoa_r>
  408846:	4606      	mov	r6, r0
  408848:	1944      	adds	r4, r0, r5
  40884a:	e72b      	b.n	4086a4 <_svfprintf_r+0x1080>
  40884c:	2306      	movs	r3, #6
  40884e:	930a      	str	r3, [sp, #40]	; 0x28
  408850:	e61d      	b.n	40848e <_svfprintf_r+0xe6a>
  408852:	272d      	movs	r7, #45	; 0x2d
  408854:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  408858:	f7ff bacd 	b.w	407df6 <_svfprintf_r+0x7d2>
  40885c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40885e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408860:	4413      	add	r3, r2
  408862:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408864:	930e      	str	r3, [sp, #56]	; 0x38
  408866:	2a00      	cmp	r2, #0
  408868:	f340 80b0 	ble.w	4089cc <_svfprintf_r+0x13a8>
  40886c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408870:	9308      	str	r3, [sp, #32]
  408872:	2367      	movs	r3, #103	; 0x67
  408874:	9311      	str	r3, [sp, #68]	; 0x44
  408876:	e671      	b.n	40855c <_svfprintf_r+0xf38>
  408878:	2b00      	cmp	r3, #0
  40887a:	f340 80c3 	ble.w	408a04 <_svfprintf_r+0x13e0>
  40887e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408880:	2a00      	cmp	r2, #0
  408882:	f040 8099 	bne.w	4089b8 <_svfprintf_r+0x1394>
  408886:	f01b 0f01 	tst.w	fp, #1
  40888a:	f040 8095 	bne.w	4089b8 <_svfprintf_r+0x1394>
  40888e:	9308      	str	r3, [sp, #32]
  408890:	930e      	str	r3, [sp, #56]	; 0x38
  408892:	e663      	b.n	40855c <_svfprintf_r+0xf38>
  408894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408896:	9308      	str	r3, [sp, #32]
  408898:	930e      	str	r3, [sp, #56]	; 0x38
  40889a:	900a      	str	r0, [sp, #40]	; 0x28
  40889c:	950f      	str	r5, [sp, #60]	; 0x3c
  40889e:	f8cd b01c 	str.w	fp, [sp, #28]
  4088a2:	9012      	str	r0, [sp, #72]	; 0x48
  4088a4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4088a8:	f7fe bfd4 	b.w	407854 <_svfprintf_r+0x230>
  4088ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4088ae:	2b47      	cmp	r3, #71	; 0x47
  4088b0:	f47f ae20 	bne.w	4084f4 <_svfprintf_r+0xed0>
  4088b4:	f01b 0f01 	tst.w	fp, #1
  4088b8:	f47f aeee 	bne.w	408698 <_svfprintf_r+0x1074>
  4088bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4088be:	1b9b      	subs	r3, r3, r6
  4088c0:	9313      	str	r3, [sp, #76]	; 0x4c
  4088c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4088c4:	2b47      	cmp	r3, #71	; 0x47
  4088c6:	f43f af18 	beq.w	4086fa <_svfprintf_r+0x10d6>
  4088ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4088cc:	9312      	str	r3, [sp, #72]	; 0x48
  4088ce:	e721      	b.n	408714 <_svfprintf_r+0x10f0>
  4088d0:	424f      	negs	r7, r1
  4088d2:	3110      	adds	r1, #16
  4088d4:	4d48      	ldr	r5, [pc, #288]	; (4089f8 <_svfprintf_r+0x13d4>)
  4088d6:	da2f      	bge.n	408938 <_svfprintf_r+0x1314>
  4088d8:	2410      	movs	r4, #16
  4088da:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4088de:	e004      	b.n	4088ea <_svfprintf_r+0x12c6>
  4088e0:	f108 0808 	add.w	r8, r8, #8
  4088e4:	3f10      	subs	r7, #16
  4088e6:	2f10      	cmp	r7, #16
  4088e8:	dd26      	ble.n	408938 <_svfprintf_r+0x1314>
  4088ea:	3301      	adds	r3, #1
  4088ec:	3210      	adds	r2, #16
  4088ee:	2b07      	cmp	r3, #7
  4088f0:	9227      	str	r2, [sp, #156]	; 0x9c
  4088f2:	9326      	str	r3, [sp, #152]	; 0x98
  4088f4:	f8c8 5000 	str.w	r5, [r8]
  4088f8:	f8c8 4004 	str.w	r4, [r8, #4]
  4088fc:	ddf0      	ble.n	4088e0 <_svfprintf_r+0x12bc>
  4088fe:	aa25      	add	r2, sp, #148	; 0x94
  408900:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408902:	4658      	mov	r0, fp
  408904:	f003 fe26 	bl	40c554 <__ssprint_r>
  408908:	2800      	cmp	r0, #0
  40890a:	f47e af5d 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  40890e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408910:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408912:	46c8      	mov	r8, r9
  408914:	e7e6      	b.n	4088e4 <_svfprintf_r+0x12c0>
  408916:	aa25      	add	r2, sp, #148	; 0x94
  408918:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40891a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40891c:	f003 fe1a 	bl	40c554 <__ssprint_r>
  408920:	2800      	cmp	r0, #0
  408922:	f47e af51 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  408926:	991f      	ldr	r1, [sp, #124]	; 0x7c
  408928:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40892a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40892c:	46c8      	mov	r8, r9
  40892e:	e667      	b.n	408600 <_svfprintf_r+0xfdc>
  408930:	2000      	movs	r0, #0
  408932:	900a      	str	r0, [sp, #40]	; 0x28
  408934:	f7fe bed0 	b.w	4076d8 <_svfprintf_r+0xb4>
  408938:	3301      	adds	r3, #1
  40893a:	443a      	add	r2, r7
  40893c:	2b07      	cmp	r3, #7
  40893e:	e888 00a0 	stmia.w	r8, {r5, r7}
  408942:	9227      	str	r2, [sp, #156]	; 0x9c
  408944:	9326      	str	r3, [sp, #152]	; 0x98
  408946:	f108 0808 	add.w	r8, r8, #8
  40894a:	f77f ae5c 	ble.w	408606 <_svfprintf_r+0xfe2>
  40894e:	aa25      	add	r2, sp, #148	; 0x94
  408950:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408952:	980c      	ldr	r0, [sp, #48]	; 0x30
  408954:	f003 fdfe 	bl	40c554 <__ssprint_r>
  408958:	2800      	cmp	r0, #0
  40895a:	f47e af35 	bne.w	4077c8 <_svfprintf_r+0x1a4>
  40895e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408960:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408962:	46c8      	mov	r8, r9
  408964:	e64f      	b.n	408606 <_svfprintf_r+0xfe2>
  408966:	3330      	adds	r3, #48	; 0x30
  408968:	2230      	movs	r2, #48	; 0x30
  40896a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40896e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  408972:	ab22      	add	r3, sp, #136	; 0x88
  408974:	e70f      	b.n	408796 <_svfprintf_r+0x1172>
  408976:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408978:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40897a:	4413      	add	r3, r2
  40897c:	930e      	str	r3, [sp, #56]	; 0x38
  40897e:	e775      	b.n	40886c <_svfprintf_r+0x1248>
  408980:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408982:	e5cb      	b.n	40851c <_svfprintf_r+0xef8>
  408984:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408986:	4e1d      	ldr	r6, [pc, #116]	; (4089fc <_svfprintf_r+0x13d8>)
  408988:	2b00      	cmp	r3, #0
  40898a:	bfb6      	itet	lt
  40898c:	272d      	movlt	r7, #45	; 0x2d
  40898e:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  408992:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  408996:	4b1a      	ldr	r3, [pc, #104]	; (408a00 <_svfprintf_r+0x13dc>)
  408998:	f7ff ba2f 	b.w	407dfa <_svfprintf_r+0x7d6>
  40899c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40899e:	9808      	ldr	r0, [sp, #32]
  4089a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4089a2:	4639      	mov	r1, r7
  4089a4:	f004 fc72 	bl	40d28c <__aeabi_dcmpeq>
  4089a8:	2800      	cmp	r0, #0
  4089aa:	f47f ae7f 	bne.w	4086ac <_svfprintf_r+0x1088>
  4089ae:	f1c5 0501 	rsb	r5, r5, #1
  4089b2:	951f      	str	r5, [sp, #124]	; 0x7c
  4089b4:	442c      	add	r4, r5
  4089b6:	e59e      	b.n	4084f6 <_svfprintf_r+0xed2>
  4089b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4089ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4089bc:	4413      	add	r3, r2
  4089be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4089c0:	441a      	add	r2, r3
  4089c2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4089c6:	920e      	str	r2, [sp, #56]	; 0x38
  4089c8:	9308      	str	r3, [sp, #32]
  4089ca:	e5c7      	b.n	40855c <_svfprintf_r+0xf38>
  4089cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4089ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4089d0:	f1c3 0301 	rsb	r3, r3, #1
  4089d4:	441a      	add	r2, r3
  4089d6:	4613      	mov	r3, r2
  4089d8:	e7d0      	b.n	40897c <_svfprintf_r+0x1358>
  4089da:	f01b 0301 	ands.w	r3, fp, #1
  4089de:	9312      	str	r3, [sp, #72]	; 0x48
  4089e0:	f47f aee2 	bne.w	4087a8 <_svfprintf_r+0x1184>
  4089e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4089e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4089ea:	9308      	str	r3, [sp, #32]
  4089ec:	e5b6      	b.n	40855c <_svfprintf_r+0xf38>
  4089ee:	bf00      	nop
  4089f0:	66666667 	.word	0x66666667
  4089f4:	0040e7b8 	.word	0x0040e7b8
  4089f8:	0040e7d0 	.word	0x0040e7d0
  4089fc:	0040e78c 	.word	0x0040e78c
  408a00:	0040e788 	.word	0x0040e788
  408a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408a06:	b913      	cbnz	r3, 408a0e <_svfprintf_r+0x13ea>
  408a08:	f01b 0f01 	tst.w	fp, #1
  408a0c:	d002      	beq.n	408a14 <_svfprintf_r+0x13f0>
  408a0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  408a10:	3301      	adds	r3, #1
  408a12:	e7d4      	b.n	4089be <_svfprintf_r+0x139a>
  408a14:	2301      	movs	r3, #1
  408a16:	e73a      	b.n	40888e <_svfprintf_r+0x126a>
  408a18:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408a1a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  408a1e:	6828      	ldr	r0, [r5, #0]
  408a20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  408a24:	900a      	str	r0, [sp, #40]	; 0x28
  408a26:	4628      	mov	r0, r5
  408a28:	3004      	adds	r0, #4
  408a2a:	46a2      	mov	sl, r4
  408a2c:	900f      	str	r0, [sp, #60]	; 0x3c
  408a2e:	f7fe be51 	b.w	4076d4 <_svfprintf_r+0xb0>
  408a32:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408a36:	f7ff b867 	b.w	407b08 <_svfprintf_r+0x4e4>
  408a3a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408a3e:	f7ff ba15 	b.w	407e6c <_svfprintf_r+0x848>
  408a42:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  408a46:	e6a6      	b.n	408796 <_svfprintf_r+0x1172>
  408a48:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408a4c:	f7ff b8eb 	b.w	407c26 <_svfprintf_r+0x602>
  408a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408a52:	230c      	movs	r3, #12
  408a54:	6013      	str	r3, [r2, #0]
  408a56:	f04f 33ff 	mov.w	r3, #4294967295
  408a5a:	9309      	str	r3, [sp, #36]	; 0x24
  408a5c:	f7fe bebd 	b.w	4077da <_svfprintf_r+0x1b6>
  408a60:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408a64:	f7ff b99a 	b.w	407d9c <_svfprintf_r+0x778>
  408a68:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408a6c:	f7ff b976 	b.w	407d5c <_svfprintf_r+0x738>
  408a70:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408a74:	f7ff b959 	b.w	407d2a <_svfprintf_r+0x706>
  408a78:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408a7c:	f7ff b912 	b.w	407ca4 <_svfprintf_r+0x680>

00408a80 <__sprint_r.part.0>:
  408a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408a84:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  408a86:	049c      	lsls	r4, r3, #18
  408a88:	4693      	mov	fp, r2
  408a8a:	d52f      	bpl.n	408aec <__sprint_r.part.0+0x6c>
  408a8c:	6893      	ldr	r3, [r2, #8]
  408a8e:	6812      	ldr	r2, [r2, #0]
  408a90:	b353      	cbz	r3, 408ae8 <__sprint_r.part.0+0x68>
  408a92:	460e      	mov	r6, r1
  408a94:	4607      	mov	r7, r0
  408a96:	f102 0908 	add.w	r9, r2, #8
  408a9a:	e919 0420 	ldmdb	r9, {r5, sl}
  408a9e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  408aa2:	d017      	beq.n	408ad4 <__sprint_r.part.0+0x54>
  408aa4:	3d04      	subs	r5, #4
  408aa6:	2400      	movs	r4, #0
  408aa8:	e001      	b.n	408aae <__sprint_r.part.0+0x2e>
  408aaa:	45a0      	cmp	r8, r4
  408aac:	d010      	beq.n	408ad0 <__sprint_r.part.0+0x50>
  408aae:	4632      	mov	r2, r6
  408ab0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  408ab4:	4638      	mov	r0, r7
  408ab6:	f002 f87b 	bl	40abb0 <_fputwc_r>
  408aba:	1c43      	adds	r3, r0, #1
  408abc:	f104 0401 	add.w	r4, r4, #1
  408ac0:	d1f3      	bne.n	408aaa <__sprint_r.part.0+0x2a>
  408ac2:	2300      	movs	r3, #0
  408ac4:	f8cb 3008 	str.w	r3, [fp, #8]
  408ac8:	f8cb 3004 	str.w	r3, [fp, #4]
  408acc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ad0:	f8db 3008 	ldr.w	r3, [fp, #8]
  408ad4:	f02a 0a03 	bic.w	sl, sl, #3
  408ad8:	eba3 030a 	sub.w	r3, r3, sl
  408adc:	f8cb 3008 	str.w	r3, [fp, #8]
  408ae0:	f109 0908 	add.w	r9, r9, #8
  408ae4:	2b00      	cmp	r3, #0
  408ae6:	d1d8      	bne.n	408a9a <__sprint_r.part.0+0x1a>
  408ae8:	2000      	movs	r0, #0
  408aea:	e7ea      	b.n	408ac2 <__sprint_r.part.0+0x42>
  408aec:	f002 f9ca 	bl	40ae84 <__sfvwrite_r>
  408af0:	2300      	movs	r3, #0
  408af2:	f8cb 3008 	str.w	r3, [fp, #8]
  408af6:	f8cb 3004 	str.w	r3, [fp, #4]
  408afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408afe:	bf00      	nop

00408b00 <_vfiprintf_r>:
  408b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408b04:	b0ad      	sub	sp, #180	; 0xb4
  408b06:	461d      	mov	r5, r3
  408b08:	468b      	mov	fp, r1
  408b0a:	4690      	mov	r8, r2
  408b0c:	9307      	str	r3, [sp, #28]
  408b0e:	9006      	str	r0, [sp, #24]
  408b10:	b118      	cbz	r0, 408b1a <_vfiprintf_r+0x1a>
  408b12:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408b14:	2b00      	cmp	r3, #0
  408b16:	f000 80f3 	beq.w	408d00 <_vfiprintf_r+0x200>
  408b1a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408b1e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  408b22:	07df      	lsls	r7, r3, #31
  408b24:	b281      	uxth	r1, r0
  408b26:	d402      	bmi.n	408b2e <_vfiprintf_r+0x2e>
  408b28:	058e      	lsls	r6, r1, #22
  408b2a:	f140 80fc 	bpl.w	408d26 <_vfiprintf_r+0x226>
  408b2e:	048c      	lsls	r4, r1, #18
  408b30:	d40a      	bmi.n	408b48 <_vfiprintf_r+0x48>
  408b32:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408b36:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  408b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  408b3e:	f8ab 100c 	strh.w	r1, [fp, #12]
  408b42:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  408b46:	b289      	uxth	r1, r1
  408b48:	0708      	lsls	r0, r1, #28
  408b4a:	f140 80b3 	bpl.w	408cb4 <_vfiprintf_r+0x1b4>
  408b4e:	f8db 3010 	ldr.w	r3, [fp, #16]
  408b52:	2b00      	cmp	r3, #0
  408b54:	f000 80ae 	beq.w	408cb4 <_vfiprintf_r+0x1b4>
  408b58:	f001 031a 	and.w	r3, r1, #26
  408b5c:	2b0a      	cmp	r3, #10
  408b5e:	f000 80b5 	beq.w	408ccc <_vfiprintf_r+0x1cc>
  408b62:	2300      	movs	r3, #0
  408b64:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  408b68:	930b      	str	r3, [sp, #44]	; 0x2c
  408b6a:	9311      	str	r3, [sp, #68]	; 0x44
  408b6c:	9310      	str	r3, [sp, #64]	; 0x40
  408b6e:	9303      	str	r3, [sp, #12]
  408b70:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  408b74:	46ca      	mov	sl, r9
  408b76:	f8cd b010 	str.w	fp, [sp, #16]
  408b7a:	f898 3000 	ldrb.w	r3, [r8]
  408b7e:	4644      	mov	r4, r8
  408b80:	b1fb      	cbz	r3, 408bc2 <_vfiprintf_r+0xc2>
  408b82:	2b25      	cmp	r3, #37	; 0x25
  408b84:	d102      	bne.n	408b8c <_vfiprintf_r+0x8c>
  408b86:	e01c      	b.n	408bc2 <_vfiprintf_r+0xc2>
  408b88:	2b25      	cmp	r3, #37	; 0x25
  408b8a:	d003      	beq.n	408b94 <_vfiprintf_r+0x94>
  408b8c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  408b90:	2b00      	cmp	r3, #0
  408b92:	d1f9      	bne.n	408b88 <_vfiprintf_r+0x88>
  408b94:	eba4 0508 	sub.w	r5, r4, r8
  408b98:	b19d      	cbz	r5, 408bc2 <_vfiprintf_r+0xc2>
  408b9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408b9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408b9e:	f8ca 8000 	str.w	r8, [sl]
  408ba2:	3301      	adds	r3, #1
  408ba4:	442a      	add	r2, r5
  408ba6:	2b07      	cmp	r3, #7
  408ba8:	f8ca 5004 	str.w	r5, [sl, #4]
  408bac:	9211      	str	r2, [sp, #68]	; 0x44
  408bae:	9310      	str	r3, [sp, #64]	; 0x40
  408bb0:	dd7a      	ble.n	408ca8 <_vfiprintf_r+0x1a8>
  408bb2:	2a00      	cmp	r2, #0
  408bb4:	f040 84b0 	bne.w	409518 <_vfiprintf_r+0xa18>
  408bb8:	9b03      	ldr	r3, [sp, #12]
  408bba:	9210      	str	r2, [sp, #64]	; 0x40
  408bbc:	442b      	add	r3, r5
  408bbe:	46ca      	mov	sl, r9
  408bc0:	9303      	str	r3, [sp, #12]
  408bc2:	7823      	ldrb	r3, [r4, #0]
  408bc4:	2b00      	cmp	r3, #0
  408bc6:	f000 83e0 	beq.w	40938a <_vfiprintf_r+0x88a>
  408bca:	2000      	movs	r0, #0
  408bcc:	f04f 0300 	mov.w	r3, #0
  408bd0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  408bd4:	f104 0801 	add.w	r8, r4, #1
  408bd8:	7862      	ldrb	r2, [r4, #1]
  408bda:	4605      	mov	r5, r0
  408bdc:	4606      	mov	r6, r0
  408bde:	4603      	mov	r3, r0
  408be0:	f04f 34ff 	mov.w	r4, #4294967295
  408be4:	f108 0801 	add.w	r8, r8, #1
  408be8:	f1a2 0120 	sub.w	r1, r2, #32
  408bec:	2958      	cmp	r1, #88	; 0x58
  408bee:	f200 82de 	bhi.w	4091ae <_vfiprintf_r+0x6ae>
  408bf2:	e8df f011 	tbh	[pc, r1, lsl #1]
  408bf6:	0221      	.short	0x0221
  408bf8:	02dc02dc 	.word	0x02dc02dc
  408bfc:	02dc0229 	.word	0x02dc0229
  408c00:	02dc02dc 	.word	0x02dc02dc
  408c04:	02dc02dc 	.word	0x02dc02dc
  408c08:	028902dc 	.word	0x028902dc
  408c0c:	02dc0295 	.word	0x02dc0295
  408c10:	02bd00a2 	.word	0x02bd00a2
  408c14:	019f02dc 	.word	0x019f02dc
  408c18:	01a401a4 	.word	0x01a401a4
  408c1c:	01a401a4 	.word	0x01a401a4
  408c20:	01a401a4 	.word	0x01a401a4
  408c24:	01a401a4 	.word	0x01a401a4
  408c28:	02dc01a4 	.word	0x02dc01a4
  408c2c:	02dc02dc 	.word	0x02dc02dc
  408c30:	02dc02dc 	.word	0x02dc02dc
  408c34:	02dc02dc 	.word	0x02dc02dc
  408c38:	02dc02dc 	.word	0x02dc02dc
  408c3c:	01b202dc 	.word	0x01b202dc
  408c40:	02dc02dc 	.word	0x02dc02dc
  408c44:	02dc02dc 	.word	0x02dc02dc
  408c48:	02dc02dc 	.word	0x02dc02dc
  408c4c:	02dc02dc 	.word	0x02dc02dc
  408c50:	02dc02dc 	.word	0x02dc02dc
  408c54:	02dc0197 	.word	0x02dc0197
  408c58:	02dc02dc 	.word	0x02dc02dc
  408c5c:	02dc02dc 	.word	0x02dc02dc
  408c60:	02dc019b 	.word	0x02dc019b
  408c64:	025302dc 	.word	0x025302dc
  408c68:	02dc02dc 	.word	0x02dc02dc
  408c6c:	02dc02dc 	.word	0x02dc02dc
  408c70:	02dc02dc 	.word	0x02dc02dc
  408c74:	02dc02dc 	.word	0x02dc02dc
  408c78:	02dc02dc 	.word	0x02dc02dc
  408c7c:	021b025a 	.word	0x021b025a
  408c80:	02dc02dc 	.word	0x02dc02dc
  408c84:	026e02dc 	.word	0x026e02dc
  408c88:	02dc021b 	.word	0x02dc021b
  408c8c:	027302dc 	.word	0x027302dc
  408c90:	01f502dc 	.word	0x01f502dc
  408c94:	02090182 	.word	0x02090182
  408c98:	02dc02d7 	.word	0x02dc02d7
  408c9c:	02dc029a 	.word	0x02dc029a
  408ca0:	02dc00a7 	.word	0x02dc00a7
  408ca4:	022e02dc 	.word	0x022e02dc
  408ca8:	f10a 0a08 	add.w	sl, sl, #8
  408cac:	9b03      	ldr	r3, [sp, #12]
  408cae:	442b      	add	r3, r5
  408cb0:	9303      	str	r3, [sp, #12]
  408cb2:	e786      	b.n	408bc2 <_vfiprintf_r+0xc2>
  408cb4:	4659      	mov	r1, fp
  408cb6:	9806      	ldr	r0, [sp, #24]
  408cb8:	f000 fdac 	bl	409814 <__swsetup_r>
  408cbc:	bb18      	cbnz	r0, 408d06 <_vfiprintf_r+0x206>
  408cbe:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  408cc2:	f001 031a 	and.w	r3, r1, #26
  408cc6:	2b0a      	cmp	r3, #10
  408cc8:	f47f af4b 	bne.w	408b62 <_vfiprintf_r+0x62>
  408ccc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  408cd0:	2b00      	cmp	r3, #0
  408cd2:	f6ff af46 	blt.w	408b62 <_vfiprintf_r+0x62>
  408cd6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408cda:	07db      	lsls	r3, r3, #31
  408cdc:	d405      	bmi.n	408cea <_vfiprintf_r+0x1ea>
  408cde:	058f      	lsls	r7, r1, #22
  408ce0:	d403      	bmi.n	408cea <_vfiprintf_r+0x1ea>
  408ce2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408ce6:	f002 fa91 	bl	40b20c <__retarget_lock_release_recursive>
  408cea:	462b      	mov	r3, r5
  408cec:	4642      	mov	r2, r8
  408cee:	4659      	mov	r1, fp
  408cf0:	9806      	ldr	r0, [sp, #24]
  408cf2:	f000 fd4d 	bl	409790 <__sbprintf>
  408cf6:	9003      	str	r0, [sp, #12]
  408cf8:	9803      	ldr	r0, [sp, #12]
  408cfa:	b02d      	add	sp, #180	; 0xb4
  408cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408d00:	f001 feb4 	bl	40aa6c <__sinit>
  408d04:	e709      	b.n	408b1a <_vfiprintf_r+0x1a>
  408d06:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408d0a:	07d9      	lsls	r1, r3, #31
  408d0c:	d404      	bmi.n	408d18 <_vfiprintf_r+0x218>
  408d0e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  408d12:	059a      	lsls	r2, r3, #22
  408d14:	f140 84aa 	bpl.w	40966c <_vfiprintf_r+0xb6c>
  408d18:	f04f 33ff 	mov.w	r3, #4294967295
  408d1c:	9303      	str	r3, [sp, #12]
  408d1e:	9803      	ldr	r0, [sp, #12]
  408d20:	b02d      	add	sp, #180	; 0xb4
  408d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408d26:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408d2a:	f002 fa6d 	bl	40b208 <__retarget_lock_acquire_recursive>
  408d2e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  408d32:	b281      	uxth	r1, r0
  408d34:	e6fb      	b.n	408b2e <_vfiprintf_r+0x2e>
  408d36:	4276      	negs	r6, r6
  408d38:	9207      	str	r2, [sp, #28]
  408d3a:	f043 0304 	orr.w	r3, r3, #4
  408d3e:	f898 2000 	ldrb.w	r2, [r8]
  408d42:	e74f      	b.n	408be4 <_vfiprintf_r+0xe4>
  408d44:	9608      	str	r6, [sp, #32]
  408d46:	069e      	lsls	r6, r3, #26
  408d48:	f100 8450 	bmi.w	4095ec <_vfiprintf_r+0xaec>
  408d4c:	9907      	ldr	r1, [sp, #28]
  408d4e:	06dd      	lsls	r5, r3, #27
  408d50:	460a      	mov	r2, r1
  408d52:	f100 83ef 	bmi.w	409534 <_vfiprintf_r+0xa34>
  408d56:	0658      	lsls	r0, r3, #25
  408d58:	f140 83ec 	bpl.w	409534 <_vfiprintf_r+0xa34>
  408d5c:	880e      	ldrh	r6, [r1, #0]
  408d5e:	3104      	adds	r1, #4
  408d60:	2700      	movs	r7, #0
  408d62:	2201      	movs	r2, #1
  408d64:	9107      	str	r1, [sp, #28]
  408d66:	f04f 0100 	mov.w	r1, #0
  408d6a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  408d6e:	2500      	movs	r5, #0
  408d70:	1c61      	adds	r1, r4, #1
  408d72:	f000 8116 	beq.w	408fa2 <_vfiprintf_r+0x4a2>
  408d76:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  408d7a:	9102      	str	r1, [sp, #8]
  408d7c:	ea56 0107 	orrs.w	r1, r6, r7
  408d80:	f040 8114 	bne.w	408fac <_vfiprintf_r+0x4ac>
  408d84:	2c00      	cmp	r4, #0
  408d86:	f040 835c 	bne.w	409442 <_vfiprintf_r+0x942>
  408d8a:	2a00      	cmp	r2, #0
  408d8c:	f040 83b7 	bne.w	4094fe <_vfiprintf_r+0x9fe>
  408d90:	f013 0301 	ands.w	r3, r3, #1
  408d94:	9305      	str	r3, [sp, #20]
  408d96:	f000 8457 	beq.w	409648 <_vfiprintf_r+0xb48>
  408d9a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  408d9e:	2330      	movs	r3, #48	; 0x30
  408da0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  408da4:	9b05      	ldr	r3, [sp, #20]
  408da6:	42a3      	cmp	r3, r4
  408da8:	bfb8      	it	lt
  408daa:	4623      	movlt	r3, r4
  408dac:	9301      	str	r3, [sp, #4]
  408dae:	b10d      	cbz	r5, 408db4 <_vfiprintf_r+0x2b4>
  408db0:	3301      	adds	r3, #1
  408db2:	9301      	str	r3, [sp, #4]
  408db4:	9b02      	ldr	r3, [sp, #8]
  408db6:	f013 0302 	ands.w	r3, r3, #2
  408dba:	9309      	str	r3, [sp, #36]	; 0x24
  408dbc:	d002      	beq.n	408dc4 <_vfiprintf_r+0x2c4>
  408dbe:	9b01      	ldr	r3, [sp, #4]
  408dc0:	3302      	adds	r3, #2
  408dc2:	9301      	str	r3, [sp, #4]
  408dc4:	9b02      	ldr	r3, [sp, #8]
  408dc6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  408dca:	930a      	str	r3, [sp, #40]	; 0x28
  408dcc:	f040 8217 	bne.w	4091fe <_vfiprintf_r+0x6fe>
  408dd0:	9b08      	ldr	r3, [sp, #32]
  408dd2:	9a01      	ldr	r2, [sp, #4]
  408dd4:	1a9d      	subs	r5, r3, r2
  408dd6:	2d00      	cmp	r5, #0
  408dd8:	f340 8211 	ble.w	4091fe <_vfiprintf_r+0x6fe>
  408ddc:	2d10      	cmp	r5, #16
  408dde:	f340 8490 	ble.w	409702 <_vfiprintf_r+0xc02>
  408de2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408de4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408de6:	4ec4      	ldr	r6, [pc, #784]	; (4090f8 <_vfiprintf_r+0x5f8>)
  408de8:	46d6      	mov	lr, sl
  408dea:	2710      	movs	r7, #16
  408dec:	46a2      	mov	sl, r4
  408dee:	4619      	mov	r1, r3
  408df0:	9c06      	ldr	r4, [sp, #24]
  408df2:	e007      	b.n	408e04 <_vfiprintf_r+0x304>
  408df4:	f101 0c02 	add.w	ip, r1, #2
  408df8:	f10e 0e08 	add.w	lr, lr, #8
  408dfc:	4601      	mov	r1, r0
  408dfe:	3d10      	subs	r5, #16
  408e00:	2d10      	cmp	r5, #16
  408e02:	dd11      	ble.n	408e28 <_vfiprintf_r+0x328>
  408e04:	1c48      	adds	r0, r1, #1
  408e06:	3210      	adds	r2, #16
  408e08:	2807      	cmp	r0, #7
  408e0a:	9211      	str	r2, [sp, #68]	; 0x44
  408e0c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  408e10:	9010      	str	r0, [sp, #64]	; 0x40
  408e12:	ddef      	ble.n	408df4 <_vfiprintf_r+0x2f4>
  408e14:	2a00      	cmp	r2, #0
  408e16:	f040 81e4 	bne.w	4091e2 <_vfiprintf_r+0x6e2>
  408e1a:	3d10      	subs	r5, #16
  408e1c:	2d10      	cmp	r5, #16
  408e1e:	4611      	mov	r1, r2
  408e20:	f04f 0c01 	mov.w	ip, #1
  408e24:	46ce      	mov	lr, r9
  408e26:	dced      	bgt.n	408e04 <_vfiprintf_r+0x304>
  408e28:	4654      	mov	r4, sl
  408e2a:	4661      	mov	r1, ip
  408e2c:	46f2      	mov	sl, lr
  408e2e:	442a      	add	r2, r5
  408e30:	2907      	cmp	r1, #7
  408e32:	9211      	str	r2, [sp, #68]	; 0x44
  408e34:	f8ca 6000 	str.w	r6, [sl]
  408e38:	f8ca 5004 	str.w	r5, [sl, #4]
  408e3c:	9110      	str	r1, [sp, #64]	; 0x40
  408e3e:	f300 82ec 	bgt.w	40941a <_vfiprintf_r+0x91a>
  408e42:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408e46:	f10a 0a08 	add.w	sl, sl, #8
  408e4a:	1c48      	adds	r0, r1, #1
  408e4c:	2d00      	cmp	r5, #0
  408e4e:	f040 81de 	bne.w	40920e <_vfiprintf_r+0x70e>
  408e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408e54:	2b00      	cmp	r3, #0
  408e56:	f000 81f8 	beq.w	40924a <_vfiprintf_r+0x74a>
  408e5a:	3202      	adds	r2, #2
  408e5c:	a90e      	add	r1, sp, #56	; 0x38
  408e5e:	2302      	movs	r3, #2
  408e60:	2807      	cmp	r0, #7
  408e62:	9211      	str	r2, [sp, #68]	; 0x44
  408e64:	9010      	str	r0, [sp, #64]	; 0x40
  408e66:	e88a 000a 	stmia.w	sl, {r1, r3}
  408e6a:	f340 81ea 	ble.w	409242 <_vfiprintf_r+0x742>
  408e6e:	2a00      	cmp	r2, #0
  408e70:	f040 838c 	bne.w	40958c <_vfiprintf_r+0xa8c>
  408e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408e76:	2b80      	cmp	r3, #128	; 0x80
  408e78:	f04f 0001 	mov.w	r0, #1
  408e7c:	4611      	mov	r1, r2
  408e7e:	46ca      	mov	sl, r9
  408e80:	f040 81e7 	bne.w	409252 <_vfiprintf_r+0x752>
  408e84:	9b08      	ldr	r3, [sp, #32]
  408e86:	9d01      	ldr	r5, [sp, #4]
  408e88:	1b5e      	subs	r6, r3, r5
  408e8a:	2e00      	cmp	r6, #0
  408e8c:	f340 81e1 	ble.w	409252 <_vfiprintf_r+0x752>
  408e90:	2e10      	cmp	r6, #16
  408e92:	4d9a      	ldr	r5, [pc, #616]	; (4090fc <_vfiprintf_r+0x5fc>)
  408e94:	f340 8450 	ble.w	409738 <_vfiprintf_r+0xc38>
  408e98:	46d4      	mov	ip, sl
  408e9a:	2710      	movs	r7, #16
  408e9c:	46a2      	mov	sl, r4
  408e9e:	9c06      	ldr	r4, [sp, #24]
  408ea0:	e007      	b.n	408eb2 <_vfiprintf_r+0x3b2>
  408ea2:	f101 0e02 	add.w	lr, r1, #2
  408ea6:	f10c 0c08 	add.w	ip, ip, #8
  408eaa:	4601      	mov	r1, r0
  408eac:	3e10      	subs	r6, #16
  408eae:	2e10      	cmp	r6, #16
  408eb0:	dd11      	ble.n	408ed6 <_vfiprintf_r+0x3d6>
  408eb2:	1c48      	adds	r0, r1, #1
  408eb4:	3210      	adds	r2, #16
  408eb6:	2807      	cmp	r0, #7
  408eb8:	9211      	str	r2, [sp, #68]	; 0x44
  408eba:	e88c 00a0 	stmia.w	ip, {r5, r7}
  408ebe:	9010      	str	r0, [sp, #64]	; 0x40
  408ec0:	ddef      	ble.n	408ea2 <_vfiprintf_r+0x3a2>
  408ec2:	2a00      	cmp	r2, #0
  408ec4:	f040 829d 	bne.w	409402 <_vfiprintf_r+0x902>
  408ec8:	3e10      	subs	r6, #16
  408eca:	2e10      	cmp	r6, #16
  408ecc:	f04f 0e01 	mov.w	lr, #1
  408ed0:	4611      	mov	r1, r2
  408ed2:	46cc      	mov	ip, r9
  408ed4:	dced      	bgt.n	408eb2 <_vfiprintf_r+0x3b2>
  408ed6:	4654      	mov	r4, sl
  408ed8:	46e2      	mov	sl, ip
  408eda:	4432      	add	r2, r6
  408edc:	f1be 0f07 	cmp.w	lr, #7
  408ee0:	9211      	str	r2, [sp, #68]	; 0x44
  408ee2:	e88a 0060 	stmia.w	sl, {r5, r6}
  408ee6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  408eea:	f300 8369 	bgt.w	4095c0 <_vfiprintf_r+0xac0>
  408eee:	f10a 0a08 	add.w	sl, sl, #8
  408ef2:	f10e 0001 	add.w	r0, lr, #1
  408ef6:	4671      	mov	r1, lr
  408ef8:	e1ab      	b.n	409252 <_vfiprintf_r+0x752>
  408efa:	9608      	str	r6, [sp, #32]
  408efc:	f013 0220 	ands.w	r2, r3, #32
  408f00:	f040 838c 	bne.w	40961c <_vfiprintf_r+0xb1c>
  408f04:	f013 0110 	ands.w	r1, r3, #16
  408f08:	f040 831a 	bne.w	409540 <_vfiprintf_r+0xa40>
  408f0c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  408f10:	f000 8316 	beq.w	409540 <_vfiprintf_r+0xa40>
  408f14:	9807      	ldr	r0, [sp, #28]
  408f16:	460a      	mov	r2, r1
  408f18:	4601      	mov	r1, r0
  408f1a:	3104      	adds	r1, #4
  408f1c:	8806      	ldrh	r6, [r0, #0]
  408f1e:	9107      	str	r1, [sp, #28]
  408f20:	2700      	movs	r7, #0
  408f22:	e720      	b.n	408d66 <_vfiprintf_r+0x266>
  408f24:	9608      	str	r6, [sp, #32]
  408f26:	f043 0310 	orr.w	r3, r3, #16
  408f2a:	e7e7      	b.n	408efc <_vfiprintf_r+0x3fc>
  408f2c:	9608      	str	r6, [sp, #32]
  408f2e:	f043 0310 	orr.w	r3, r3, #16
  408f32:	e708      	b.n	408d46 <_vfiprintf_r+0x246>
  408f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408f38:	f898 2000 	ldrb.w	r2, [r8]
  408f3c:	e652      	b.n	408be4 <_vfiprintf_r+0xe4>
  408f3e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408f42:	2600      	movs	r6, #0
  408f44:	f818 2b01 	ldrb.w	r2, [r8], #1
  408f48:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  408f4c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  408f50:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408f54:	2909      	cmp	r1, #9
  408f56:	d9f5      	bls.n	408f44 <_vfiprintf_r+0x444>
  408f58:	e646      	b.n	408be8 <_vfiprintf_r+0xe8>
  408f5a:	9608      	str	r6, [sp, #32]
  408f5c:	2800      	cmp	r0, #0
  408f5e:	f040 8408 	bne.w	409772 <_vfiprintf_r+0xc72>
  408f62:	f043 0310 	orr.w	r3, r3, #16
  408f66:	069e      	lsls	r6, r3, #26
  408f68:	f100 834c 	bmi.w	409604 <_vfiprintf_r+0xb04>
  408f6c:	06dd      	lsls	r5, r3, #27
  408f6e:	f100 82f3 	bmi.w	409558 <_vfiprintf_r+0xa58>
  408f72:	0658      	lsls	r0, r3, #25
  408f74:	f140 82f0 	bpl.w	409558 <_vfiprintf_r+0xa58>
  408f78:	9d07      	ldr	r5, [sp, #28]
  408f7a:	f9b5 6000 	ldrsh.w	r6, [r5]
  408f7e:	462a      	mov	r2, r5
  408f80:	17f7      	asrs	r7, r6, #31
  408f82:	3204      	adds	r2, #4
  408f84:	4630      	mov	r0, r6
  408f86:	4639      	mov	r1, r7
  408f88:	9207      	str	r2, [sp, #28]
  408f8a:	2800      	cmp	r0, #0
  408f8c:	f171 0200 	sbcs.w	r2, r1, #0
  408f90:	f2c0 835d 	blt.w	40964e <_vfiprintf_r+0xb4e>
  408f94:	1c61      	adds	r1, r4, #1
  408f96:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408f9a:	f04f 0201 	mov.w	r2, #1
  408f9e:	f47f aeea 	bne.w	408d76 <_vfiprintf_r+0x276>
  408fa2:	ea56 0107 	orrs.w	r1, r6, r7
  408fa6:	f000 824d 	beq.w	409444 <_vfiprintf_r+0x944>
  408faa:	9302      	str	r3, [sp, #8]
  408fac:	2a01      	cmp	r2, #1
  408fae:	f000 828c 	beq.w	4094ca <_vfiprintf_r+0x9ca>
  408fb2:	2a02      	cmp	r2, #2
  408fb4:	f040 825c 	bne.w	409470 <_vfiprintf_r+0x970>
  408fb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  408fba:	46cb      	mov	fp, r9
  408fbc:	0933      	lsrs	r3, r6, #4
  408fbe:	f006 010f 	and.w	r1, r6, #15
  408fc2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  408fc6:	093a      	lsrs	r2, r7, #4
  408fc8:	461e      	mov	r6, r3
  408fca:	4617      	mov	r7, r2
  408fcc:	5c43      	ldrb	r3, [r0, r1]
  408fce:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  408fd2:	ea56 0307 	orrs.w	r3, r6, r7
  408fd6:	d1f1      	bne.n	408fbc <_vfiprintf_r+0x4bc>
  408fd8:	eba9 030b 	sub.w	r3, r9, fp
  408fdc:	9305      	str	r3, [sp, #20]
  408fde:	e6e1      	b.n	408da4 <_vfiprintf_r+0x2a4>
  408fe0:	2800      	cmp	r0, #0
  408fe2:	f040 83c0 	bne.w	409766 <_vfiprintf_r+0xc66>
  408fe6:	0699      	lsls	r1, r3, #26
  408fe8:	f100 8367 	bmi.w	4096ba <_vfiprintf_r+0xbba>
  408fec:	06da      	lsls	r2, r3, #27
  408fee:	f100 80f1 	bmi.w	4091d4 <_vfiprintf_r+0x6d4>
  408ff2:	065b      	lsls	r3, r3, #25
  408ff4:	f140 80ee 	bpl.w	4091d4 <_vfiprintf_r+0x6d4>
  408ff8:	9a07      	ldr	r2, [sp, #28]
  408ffa:	6813      	ldr	r3, [r2, #0]
  408ffc:	3204      	adds	r2, #4
  408ffe:	9207      	str	r2, [sp, #28]
  409000:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  409004:	801a      	strh	r2, [r3, #0]
  409006:	e5b8      	b.n	408b7a <_vfiprintf_r+0x7a>
  409008:	9807      	ldr	r0, [sp, #28]
  40900a:	4a3d      	ldr	r2, [pc, #244]	; (409100 <_vfiprintf_r+0x600>)
  40900c:	9608      	str	r6, [sp, #32]
  40900e:	920b      	str	r2, [sp, #44]	; 0x2c
  409010:	6806      	ldr	r6, [r0, #0]
  409012:	2278      	movs	r2, #120	; 0x78
  409014:	2130      	movs	r1, #48	; 0x30
  409016:	3004      	adds	r0, #4
  409018:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40901c:	f043 0302 	orr.w	r3, r3, #2
  409020:	9007      	str	r0, [sp, #28]
  409022:	2700      	movs	r7, #0
  409024:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  409028:	2202      	movs	r2, #2
  40902a:	e69c      	b.n	408d66 <_vfiprintf_r+0x266>
  40902c:	9608      	str	r6, [sp, #32]
  40902e:	2800      	cmp	r0, #0
  409030:	d099      	beq.n	408f66 <_vfiprintf_r+0x466>
  409032:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409036:	e796      	b.n	408f66 <_vfiprintf_r+0x466>
  409038:	f898 2000 	ldrb.w	r2, [r8]
  40903c:	2d00      	cmp	r5, #0
  40903e:	f47f add1 	bne.w	408be4 <_vfiprintf_r+0xe4>
  409042:	2001      	movs	r0, #1
  409044:	2520      	movs	r5, #32
  409046:	e5cd      	b.n	408be4 <_vfiprintf_r+0xe4>
  409048:	f043 0301 	orr.w	r3, r3, #1
  40904c:	f898 2000 	ldrb.w	r2, [r8]
  409050:	e5c8      	b.n	408be4 <_vfiprintf_r+0xe4>
  409052:	9608      	str	r6, [sp, #32]
  409054:	2800      	cmp	r0, #0
  409056:	f040 8393 	bne.w	409780 <_vfiprintf_r+0xc80>
  40905a:	4929      	ldr	r1, [pc, #164]	; (409100 <_vfiprintf_r+0x600>)
  40905c:	910b      	str	r1, [sp, #44]	; 0x2c
  40905e:	069f      	lsls	r7, r3, #26
  409060:	f100 82e8 	bmi.w	409634 <_vfiprintf_r+0xb34>
  409064:	9807      	ldr	r0, [sp, #28]
  409066:	06de      	lsls	r6, r3, #27
  409068:	4601      	mov	r1, r0
  40906a:	f100 8270 	bmi.w	40954e <_vfiprintf_r+0xa4e>
  40906e:	065d      	lsls	r5, r3, #25
  409070:	f140 826d 	bpl.w	40954e <_vfiprintf_r+0xa4e>
  409074:	3104      	adds	r1, #4
  409076:	8806      	ldrh	r6, [r0, #0]
  409078:	9107      	str	r1, [sp, #28]
  40907a:	2700      	movs	r7, #0
  40907c:	07d8      	lsls	r0, r3, #31
  40907e:	f140 8222 	bpl.w	4094c6 <_vfiprintf_r+0x9c6>
  409082:	ea56 0107 	orrs.w	r1, r6, r7
  409086:	f000 821e 	beq.w	4094c6 <_vfiprintf_r+0x9c6>
  40908a:	2130      	movs	r1, #48	; 0x30
  40908c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  409090:	f043 0302 	orr.w	r3, r3, #2
  409094:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  409098:	2202      	movs	r2, #2
  40909a:	e664      	b.n	408d66 <_vfiprintf_r+0x266>
  40909c:	9608      	str	r6, [sp, #32]
  40909e:	2800      	cmp	r0, #0
  4090a0:	f040 836b 	bne.w	40977a <_vfiprintf_r+0xc7a>
  4090a4:	4917      	ldr	r1, [pc, #92]	; (409104 <_vfiprintf_r+0x604>)
  4090a6:	910b      	str	r1, [sp, #44]	; 0x2c
  4090a8:	e7d9      	b.n	40905e <_vfiprintf_r+0x55e>
  4090aa:	9907      	ldr	r1, [sp, #28]
  4090ac:	9608      	str	r6, [sp, #32]
  4090ae:	680a      	ldr	r2, [r1, #0]
  4090b0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4090b4:	f04f 0000 	mov.w	r0, #0
  4090b8:	460a      	mov	r2, r1
  4090ba:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4090be:	3204      	adds	r2, #4
  4090c0:	2001      	movs	r0, #1
  4090c2:	9001      	str	r0, [sp, #4]
  4090c4:	9207      	str	r2, [sp, #28]
  4090c6:	9005      	str	r0, [sp, #20]
  4090c8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4090cc:	9302      	str	r3, [sp, #8]
  4090ce:	2400      	movs	r4, #0
  4090d0:	e670      	b.n	408db4 <_vfiprintf_r+0x2b4>
  4090d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4090d6:	f898 2000 	ldrb.w	r2, [r8]
  4090da:	e583      	b.n	408be4 <_vfiprintf_r+0xe4>
  4090dc:	f898 2000 	ldrb.w	r2, [r8]
  4090e0:	2a6c      	cmp	r2, #108	; 0x6c
  4090e2:	bf03      	ittte	eq
  4090e4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4090e8:	f043 0320 	orreq.w	r3, r3, #32
  4090ec:	f108 0801 	addeq.w	r8, r8, #1
  4090f0:	f043 0310 	orrne.w	r3, r3, #16
  4090f4:	e576      	b.n	408be4 <_vfiprintf_r+0xe4>
  4090f6:	bf00      	nop
  4090f8:	0040e7e0 	.word	0x0040e7e0
  4090fc:	0040e7f0 	.word	0x0040e7f0
  409100:	0040e7a4 	.word	0x0040e7a4
  409104:	0040e790 	.word	0x0040e790
  409108:	9907      	ldr	r1, [sp, #28]
  40910a:	680e      	ldr	r6, [r1, #0]
  40910c:	460a      	mov	r2, r1
  40910e:	2e00      	cmp	r6, #0
  409110:	f102 0204 	add.w	r2, r2, #4
  409114:	f6ff ae0f 	blt.w	408d36 <_vfiprintf_r+0x236>
  409118:	9207      	str	r2, [sp, #28]
  40911a:	f898 2000 	ldrb.w	r2, [r8]
  40911e:	e561      	b.n	408be4 <_vfiprintf_r+0xe4>
  409120:	f898 2000 	ldrb.w	r2, [r8]
  409124:	2001      	movs	r0, #1
  409126:	252b      	movs	r5, #43	; 0x2b
  409128:	e55c      	b.n	408be4 <_vfiprintf_r+0xe4>
  40912a:	9907      	ldr	r1, [sp, #28]
  40912c:	9608      	str	r6, [sp, #32]
  40912e:	f8d1 b000 	ldr.w	fp, [r1]
  409132:	f04f 0200 	mov.w	r2, #0
  409136:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40913a:	1d0e      	adds	r6, r1, #4
  40913c:	f1bb 0f00 	cmp.w	fp, #0
  409140:	f000 82e5 	beq.w	40970e <_vfiprintf_r+0xc0e>
  409144:	1c67      	adds	r7, r4, #1
  409146:	f000 82c4 	beq.w	4096d2 <_vfiprintf_r+0xbd2>
  40914a:	4622      	mov	r2, r4
  40914c:	2100      	movs	r1, #0
  40914e:	4658      	mov	r0, fp
  409150:	9301      	str	r3, [sp, #4]
  409152:	f002 fba5 	bl	40b8a0 <memchr>
  409156:	9b01      	ldr	r3, [sp, #4]
  409158:	2800      	cmp	r0, #0
  40915a:	f000 82e5 	beq.w	409728 <_vfiprintf_r+0xc28>
  40915e:	eba0 020b 	sub.w	r2, r0, fp
  409162:	9205      	str	r2, [sp, #20]
  409164:	9607      	str	r6, [sp, #28]
  409166:	9302      	str	r3, [sp, #8]
  409168:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40916c:	2400      	movs	r4, #0
  40916e:	e619      	b.n	408da4 <_vfiprintf_r+0x2a4>
  409170:	f898 2000 	ldrb.w	r2, [r8]
  409174:	2a2a      	cmp	r2, #42	; 0x2a
  409176:	f108 0701 	add.w	r7, r8, #1
  40917a:	f000 82e9 	beq.w	409750 <_vfiprintf_r+0xc50>
  40917e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  409182:	2909      	cmp	r1, #9
  409184:	46b8      	mov	r8, r7
  409186:	f04f 0400 	mov.w	r4, #0
  40918a:	f63f ad2d 	bhi.w	408be8 <_vfiprintf_r+0xe8>
  40918e:	f818 2b01 	ldrb.w	r2, [r8], #1
  409192:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  409196:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40919a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40919e:	2909      	cmp	r1, #9
  4091a0:	d9f5      	bls.n	40918e <_vfiprintf_r+0x68e>
  4091a2:	e521      	b.n	408be8 <_vfiprintf_r+0xe8>
  4091a4:	f043 0320 	orr.w	r3, r3, #32
  4091a8:	f898 2000 	ldrb.w	r2, [r8]
  4091ac:	e51a      	b.n	408be4 <_vfiprintf_r+0xe4>
  4091ae:	9608      	str	r6, [sp, #32]
  4091b0:	2800      	cmp	r0, #0
  4091b2:	f040 82db 	bne.w	40976c <_vfiprintf_r+0xc6c>
  4091b6:	2a00      	cmp	r2, #0
  4091b8:	f000 80e7 	beq.w	40938a <_vfiprintf_r+0x88a>
  4091bc:	2101      	movs	r1, #1
  4091be:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4091c2:	f04f 0200 	mov.w	r2, #0
  4091c6:	9101      	str	r1, [sp, #4]
  4091c8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4091cc:	9105      	str	r1, [sp, #20]
  4091ce:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4091d2:	e77b      	b.n	4090cc <_vfiprintf_r+0x5cc>
  4091d4:	9a07      	ldr	r2, [sp, #28]
  4091d6:	6813      	ldr	r3, [r2, #0]
  4091d8:	3204      	adds	r2, #4
  4091da:	9207      	str	r2, [sp, #28]
  4091dc:	9a03      	ldr	r2, [sp, #12]
  4091de:	601a      	str	r2, [r3, #0]
  4091e0:	e4cb      	b.n	408b7a <_vfiprintf_r+0x7a>
  4091e2:	aa0f      	add	r2, sp, #60	; 0x3c
  4091e4:	9904      	ldr	r1, [sp, #16]
  4091e6:	4620      	mov	r0, r4
  4091e8:	f7ff fc4a 	bl	408a80 <__sprint_r.part.0>
  4091ec:	2800      	cmp	r0, #0
  4091ee:	f040 8139 	bne.w	409464 <_vfiprintf_r+0x964>
  4091f2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4091f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4091f6:	f101 0c01 	add.w	ip, r1, #1
  4091fa:	46ce      	mov	lr, r9
  4091fc:	e5ff      	b.n	408dfe <_vfiprintf_r+0x2fe>
  4091fe:	9910      	ldr	r1, [sp, #64]	; 0x40
  409200:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409202:	1c48      	adds	r0, r1, #1
  409204:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  409208:	2d00      	cmp	r5, #0
  40920a:	f43f ae22 	beq.w	408e52 <_vfiprintf_r+0x352>
  40920e:	3201      	adds	r2, #1
  409210:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  409214:	2101      	movs	r1, #1
  409216:	2807      	cmp	r0, #7
  409218:	9211      	str	r2, [sp, #68]	; 0x44
  40921a:	9010      	str	r0, [sp, #64]	; 0x40
  40921c:	f8ca 5000 	str.w	r5, [sl]
  409220:	f8ca 1004 	str.w	r1, [sl, #4]
  409224:	f340 8108 	ble.w	409438 <_vfiprintf_r+0x938>
  409228:	2a00      	cmp	r2, #0
  40922a:	f040 81bc 	bne.w	4095a6 <_vfiprintf_r+0xaa6>
  40922e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409230:	2b00      	cmp	r3, #0
  409232:	f43f ae1f 	beq.w	408e74 <_vfiprintf_r+0x374>
  409236:	ab0e      	add	r3, sp, #56	; 0x38
  409238:	2202      	movs	r2, #2
  40923a:	4608      	mov	r0, r1
  40923c:	931c      	str	r3, [sp, #112]	; 0x70
  40923e:	921d      	str	r2, [sp, #116]	; 0x74
  409240:	46ca      	mov	sl, r9
  409242:	4601      	mov	r1, r0
  409244:	f10a 0a08 	add.w	sl, sl, #8
  409248:	3001      	adds	r0, #1
  40924a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40924c:	2b80      	cmp	r3, #128	; 0x80
  40924e:	f43f ae19 	beq.w	408e84 <_vfiprintf_r+0x384>
  409252:	9b05      	ldr	r3, [sp, #20]
  409254:	1ae4      	subs	r4, r4, r3
  409256:	2c00      	cmp	r4, #0
  409258:	dd2e      	ble.n	4092b8 <_vfiprintf_r+0x7b8>
  40925a:	2c10      	cmp	r4, #16
  40925c:	4db3      	ldr	r5, [pc, #716]	; (40952c <_vfiprintf_r+0xa2c>)
  40925e:	dd1e      	ble.n	40929e <_vfiprintf_r+0x79e>
  409260:	46d6      	mov	lr, sl
  409262:	2610      	movs	r6, #16
  409264:	9f06      	ldr	r7, [sp, #24]
  409266:	f8dd a010 	ldr.w	sl, [sp, #16]
  40926a:	e006      	b.n	40927a <_vfiprintf_r+0x77a>
  40926c:	1c88      	adds	r0, r1, #2
  40926e:	f10e 0e08 	add.w	lr, lr, #8
  409272:	4619      	mov	r1, r3
  409274:	3c10      	subs	r4, #16
  409276:	2c10      	cmp	r4, #16
  409278:	dd10      	ble.n	40929c <_vfiprintf_r+0x79c>
  40927a:	1c4b      	adds	r3, r1, #1
  40927c:	3210      	adds	r2, #16
  40927e:	2b07      	cmp	r3, #7
  409280:	9211      	str	r2, [sp, #68]	; 0x44
  409282:	e88e 0060 	stmia.w	lr, {r5, r6}
  409286:	9310      	str	r3, [sp, #64]	; 0x40
  409288:	ddf0      	ble.n	40926c <_vfiprintf_r+0x76c>
  40928a:	2a00      	cmp	r2, #0
  40928c:	d165      	bne.n	40935a <_vfiprintf_r+0x85a>
  40928e:	3c10      	subs	r4, #16
  409290:	2c10      	cmp	r4, #16
  409292:	f04f 0001 	mov.w	r0, #1
  409296:	4611      	mov	r1, r2
  409298:	46ce      	mov	lr, r9
  40929a:	dcee      	bgt.n	40927a <_vfiprintf_r+0x77a>
  40929c:	46f2      	mov	sl, lr
  40929e:	4422      	add	r2, r4
  4092a0:	2807      	cmp	r0, #7
  4092a2:	9211      	str	r2, [sp, #68]	; 0x44
  4092a4:	f8ca 5000 	str.w	r5, [sl]
  4092a8:	f8ca 4004 	str.w	r4, [sl, #4]
  4092ac:	9010      	str	r0, [sp, #64]	; 0x40
  4092ae:	f300 8085 	bgt.w	4093bc <_vfiprintf_r+0x8bc>
  4092b2:	f10a 0a08 	add.w	sl, sl, #8
  4092b6:	3001      	adds	r0, #1
  4092b8:	9905      	ldr	r1, [sp, #20]
  4092ba:	f8ca b000 	str.w	fp, [sl]
  4092be:	440a      	add	r2, r1
  4092c0:	2807      	cmp	r0, #7
  4092c2:	9211      	str	r2, [sp, #68]	; 0x44
  4092c4:	f8ca 1004 	str.w	r1, [sl, #4]
  4092c8:	9010      	str	r0, [sp, #64]	; 0x40
  4092ca:	f340 8082 	ble.w	4093d2 <_vfiprintf_r+0x8d2>
  4092ce:	2a00      	cmp	r2, #0
  4092d0:	f040 8118 	bne.w	409504 <_vfiprintf_r+0xa04>
  4092d4:	9b02      	ldr	r3, [sp, #8]
  4092d6:	9210      	str	r2, [sp, #64]	; 0x40
  4092d8:	0758      	lsls	r0, r3, #29
  4092da:	d535      	bpl.n	409348 <_vfiprintf_r+0x848>
  4092dc:	9b08      	ldr	r3, [sp, #32]
  4092de:	9901      	ldr	r1, [sp, #4]
  4092e0:	1a5c      	subs	r4, r3, r1
  4092e2:	2c00      	cmp	r4, #0
  4092e4:	f340 80e7 	ble.w	4094b6 <_vfiprintf_r+0x9b6>
  4092e8:	46ca      	mov	sl, r9
  4092ea:	2c10      	cmp	r4, #16
  4092ec:	f340 8218 	ble.w	409720 <_vfiprintf_r+0xc20>
  4092f0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4092f2:	4e8f      	ldr	r6, [pc, #572]	; (409530 <_vfiprintf_r+0xa30>)
  4092f4:	9f06      	ldr	r7, [sp, #24]
  4092f6:	f8dd b010 	ldr.w	fp, [sp, #16]
  4092fa:	2510      	movs	r5, #16
  4092fc:	e006      	b.n	40930c <_vfiprintf_r+0x80c>
  4092fe:	1c88      	adds	r0, r1, #2
  409300:	f10a 0a08 	add.w	sl, sl, #8
  409304:	4619      	mov	r1, r3
  409306:	3c10      	subs	r4, #16
  409308:	2c10      	cmp	r4, #16
  40930a:	dd11      	ble.n	409330 <_vfiprintf_r+0x830>
  40930c:	1c4b      	adds	r3, r1, #1
  40930e:	3210      	adds	r2, #16
  409310:	2b07      	cmp	r3, #7
  409312:	9211      	str	r2, [sp, #68]	; 0x44
  409314:	f8ca 6000 	str.w	r6, [sl]
  409318:	f8ca 5004 	str.w	r5, [sl, #4]
  40931c:	9310      	str	r3, [sp, #64]	; 0x40
  40931e:	ddee      	ble.n	4092fe <_vfiprintf_r+0x7fe>
  409320:	bb42      	cbnz	r2, 409374 <_vfiprintf_r+0x874>
  409322:	3c10      	subs	r4, #16
  409324:	2c10      	cmp	r4, #16
  409326:	f04f 0001 	mov.w	r0, #1
  40932a:	4611      	mov	r1, r2
  40932c:	46ca      	mov	sl, r9
  40932e:	dced      	bgt.n	40930c <_vfiprintf_r+0x80c>
  409330:	4422      	add	r2, r4
  409332:	2807      	cmp	r0, #7
  409334:	9211      	str	r2, [sp, #68]	; 0x44
  409336:	f8ca 6000 	str.w	r6, [sl]
  40933a:	f8ca 4004 	str.w	r4, [sl, #4]
  40933e:	9010      	str	r0, [sp, #64]	; 0x40
  409340:	dd51      	ble.n	4093e6 <_vfiprintf_r+0x8e6>
  409342:	2a00      	cmp	r2, #0
  409344:	f040 819b 	bne.w	40967e <_vfiprintf_r+0xb7e>
  409348:	9b03      	ldr	r3, [sp, #12]
  40934a:	9a08      	ldr	r2, [sp, #32]
  40934c:	9901      	ldr	r1, [sp, #4]
  40934e:	428a      	cmp	r2, r1
  409350:	bfac      	ite	ge
  409352:	189b      	addge	r3, r3, r2
  409354:	185b      	addlt	r3, r3, r1
  409356:	9303      	str	r3, [sp, #12]
  409358:	e04e      	b.n	4093f8 <_vfiprintf_r+0x8f8>
  40935a:	aa0f      	add	r2, sp, #60	; 0x3c
  40935c:	4651      	mov	r1, sl
  40935e:	4638      	mov	r0, r7
  409360:	f7ff fb8e 	bl	408a80 <__sprint_r.part.0>
  409364:	2800      	cmp	r0, #0
  409366:	f040 813f 	bne.w	4095e8 <_vfiprintf_r+0xae8>
  40936a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40936c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40936e:	1c48      	adds	r0, r1, #1
  409370:	46ce      	mov	lr, r9
  409372:	e77f      	b.n	409274 <_vfiprintf_r+0x774>
  409374:	aa0f      	add	r2, sp, #60	; 0x3c
  409376:	4659      	mov	r1, fp
  409378:	4638      	mov	r0, r7
  40937a:	f7ff fb81 	bl	408a80 <__sprint_r.part.0>
  40937e:	b960      	cbnz	r0, 40939a <_vfiprintf_r+0x89a>
  409380:	9910      	ldr	r1, [sp, #64]	; 0x40
  409382:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409384:	1c48      	adds	r0, r1, #1
  409386:	46ca      	mov	sl, r9
  409388:	e7bd      	b.n	409306 <_vfiprintf_r+0x806>
  40938a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40938c:	f8dd b010 	ldr.w	fp, [sp, #16]
  409390:	2b00      	cmp	r3, #0
  409392:	f040 81d4 	bne.w	40973e <_vfiprintf_r+0xc3e>
  409396:	2300      	movs	r3, #0
  409398:	9310      	str	r3, [sp, #64]	; 0x40
  40939a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40939e:	f013 0f01 	tst.w	r3, #1
  4093a2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4093a6:	d102      	bne.n	4093ae <_vfiprintf_r+0x8ae>
  4093a8:	059a      	lsls	r2, r3, #22
  4093aa:	f140 80de 	bpl.w	40956a <_vfiprintf_r+0xa6a>
  4093ae:	065b      	lsls	r3, r3, #25
  4093b0:	f53f acb2 	bmi.w	408d18 <_vfiprintf_r+0x218>
  4093b4:	9803      	ldr	r0, [sp, #12]
  4093b6:	b02d      	add	sp, #180	; 0xb4
  4093b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4093bc:	2a00      	cmp	r2, #0
  4093be:	f040 8106 	bne.w	4095ce <_vfiprintf_r+0xace>
  4093c2:	9a05      	ldr	r2, [sp, #20]
  4093c4:	921d      	str	r2, [sp, #116]	; 0x74
  4093c6:	2301      	movs	r3, #1
  4093c8:	9211      	str	r2, [sp, #68]	; 0x44
  4093ca:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4093ce:	9310      	str	r3, [sp, #64]	; 0x40
  4093d0:	46ca      	mov	sl, r9
  4093d2:	f10a 0a08 	add.w	sl, sl, #8
  4093d6:	9b02      	ldr	r3, [sp, #8]
  4093d8:	0759      	lsls	r1, r3, #29
  4093da:	d504      	bpl.n	4093e6 <_vfiprintf_r+0x8e6>
  4093dc:	9b08      	ldr	r3, [sp, #32]
  4093de:	9901      	ldr	r1, [sp, #4]
  4093e0:	1a5c      	subs	r4, r3, r1
  4093e2:	2c00      	cmp	r4, #0
  4093e4:	dc81      	bgt.n	4092ea <_vfiprintf_r+0x7ea>
  4093e6:	9b03      	ldr	r3, [sp, #12]
  4093e8:	9908      	ldr	r1, [sp, #32]
  4093ea:	9801      	ldr	r0, [sp, #4]
  4093ec:	4281      	cmp	r1, r0
  4093ee:	bfac      	ite	ge
  4093f0:	185b      	addge	r3, r3, r1
  4093f2:	181b      	addlt	r3, r3, r0
  4093f4:	9303      	str	r3, [sp, #12]
  4093f6:	bb72      	cbnz	r2, 409456 <_vfiprintf_r+0x956>
  4093f8:	2300      	movs	r3, #0
  4093fa:	9310      	str	r3, [sp, #64]	; 0x40
  4093fc:	46ca      	mov	sl, r9
  4093fe:	f7ff bbbc 	b.w	408b7a <_vfiprintf_r+0x7a>
  409402:	aa0f      	add	r2, sp, #60	; 0x3c
  409404:	9904      	ldr	r1, [sp, #16]
  409406:	4620      	mov	r0, r4
  409408:	f7ff fb3a 	bl	408a80 <__sprint_r.part.0>
  40940c:	bb50      	cbnz	r0, 409464 <_vfiprintf_r+0x964>
  40940e:	9910      	ldr	r1, [sp, #64]	; 0x40
  409410:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409412:	f101 0e01 	add.w	lr, r1, #1
  409416:	46cc      	mov	ip, r9
  409418:	e548      	b.n	408eac <_vfiprintf_r+0x3ac>
  40941a:	2a00      	cmp	r2, #0
  40941c:	f040 8140 	bne.w	4096a0 <_vfiprintf_r+0xba0>
  409420:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  409424:	2900      	cmp	r1, #0
  409426:	f000 811b 	beq.w	409660 <_vfiprintf_r+0xb60>
  40942a:	2201      	movs	r2, #1
  40942c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  409430:	4610      	mov	r0, r2
  409432:	921d      	str	r2, [sp, #116]	; 0x74
  409434:	911c      	str	r1, [sp, #112]	; 0x70
  409436:	46ca      	mov	sl, r9
  409438:	4601      	mov	r1, r0
  40943a:	f10a 0a08 	add.w	sl, sl, #8
  40943e:	3001      	adds	r0, #1
  409440:	e507      	b.n	408e52 <_vfiprintf_r+0x352>
  409442:	9b02      	ldr	r3, [sp, #8]
  409444:	2a01      	cmp	r2, #1
  409446:	f000 8098 	beq.w	40957a <_vfiprintf_r+0xa7a>
  40944a:	2a02      	cmp	r2, #2
  40944c:	d10d      	bne.n	40946a <_vfiprintf_r+0x96a>
  40944e:	9302      	str	r3, [sp, #8]
  409450:	2600      	movs	r6, #0
  409452:	2700      	movs	r7, #0
  409454:	e5b0      	b.n	408fb8 <_vfiprintf_r+0x4b8>
  409456:	aa0f      	add	r2, sp, #60	; 0x3c
  409458:	9904      	ldr	r1, [sp, #16]
  40945a:	9806      	ldr	r0, [sp, #24]
  40945c:	f7ff fb10 	bl	408a80 <__sprint_r.part.0>
  409460:	2800      	cmp	r0, #0
  409462:	d0c9      	beq.n	4093f8 <_vfiprintf_r+0x8f8>
  409464:	f8dd b010 	ldr.w	fp, [sp, #16]
  409468:	e797      	b.n	40939a <_vfiprintf_r+0x89a>
  40946a:	9302      	str	r3, [sp, #8]
  40946c:	2600      	movs	r6, #0
  40946e:	2700      	movs	r7, #0
  409470:	4649      	mov	r1, r9
  409472:	e000      	b.n	409476 <_vfiprintf_r+0x976>
  409474:	4659      	mov	r1, fp
  409476:	08f2      	lsrs	r2, r6, #3
  409478:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40947c:	08f8      	lsrs	r0, r7, #3
  40947e:	f006 0307 	and.w	r3, r6, #7
  409482:	4607      	mov	r7, r0
  409484:	4616      	mov	r6, r2
  409486:	3330      	adds	r3, #48	; 0x30
  409488:	ea56 0207 	orrs.w	r2, r6, r7
  40948c:	f801 3c01 	strb.w	r3, [r1, #-1]
  409490:	f101 3bff 	add.w	fp, r1, #4294967295
  409494:	d1ee      	bne.n	409474 <_vfiprintf_r+0x974>
  409496:	9a02      	ldr	r2, [sp, #8]
  409498:	07d6      	lsls	r6, r2, #31
  40949a:	f57f ad9d 	bpl.w	408fd8 <_vfiprintf_r+0x4d8>
  40949e:	2b30      	cmp	r3, #48	; 0x30
  4094a0:	f43f ad9a 	beq.w	408fd8 <_vfiprintf_r+0x4d8>
  4094a4:	3902      	subs	r1, #2
  4094a6:	2330      	movs	r3, #48	; 0x30
  4094a8:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4094ac:	eba9 0301 	sub.w	r3, r9, r1
  4094b0:	9305      	str	r3, [sp, #20]
  4094b2:	468b      	mov	fp, r1
  4094b4:	e476      	b.n	408da4 <_vfiprintf_r+0x2a4>
  4094b6:	9b03      	ldr	r3, [sp, #12]
  4094b8:	9a08      	ldr	r2, [sp, #32]
  4094ba:	428a      	cmp	r2, r1
  4094bc:	bfac      	ite	ge
  4094be:	189b      	addge	r3, r3, r2
  4094c0:	185b      	addlt	r3, r3, r1
  4094c2:	9303      	str	r3, [sp, #12]
  4094c4:	e798      	b.n	4093f8 <_vfiprintf_r+0x8f8>
  4094c6:	2202      	movs	r2, #2
  4094c8:	e44d      	b.n	408d66 <_vfiprintf_r+0x266>
  4094ca:	2f00      	cmp	r7, #0
  4094cc:	bf08      	it	eq
  4094ce:	2e0a      	cmpeq	r6, #10
  4094d0:	d352      	bcc.n	409578 <_vfiprintf_r+0xa78>
  4094d2:	46cb      	mov	fp, r9
  4094d4:	4630      	mov	r0, r6
  4094d6:	4639      	mov	r1, r7
  4094d8:	220a      	movs	r2, #10
  4094da:	2300      	movs	r3, #0
  4094dc:	f003 ff46 	bl	40d36c <__aeabi_uldivmod>
  4094e0:	3230      	adds	r2, #48	; 0x30
  4094e2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4094e6:	4630      	mov	r0, r6
  4094e8:	4639      	mov	r1, r7
  4094ea:	2300      	movs	r3, #0
  4094ec:	220a      	movs	r2, #10
  4094ee:	f003 ff3d 	bl	40d36c <__aeabi_uldivmod>
  4094f2:	4606      	mov	r6, r0
  4094f4:	460f      	mov	r7, r1
  4094f6:	ea56 0307 	orrs.w	r3, r6, r7
  4094fa:	d1eb      	bne.n	4094d4 <_vfiprintf_r+0x9d4>
  4094fc:	e56c      	b.n	408fd8 <_vfiprintf_r+0x4d8>
  4094fe:	9405      	str	r4, [sp, #20]
  409500:	46cb      	mov	fp, r9
  409502:	e44f      	b.n	408da4 <_vfiprintf_r+0x2a4>
  409504:	aa0f      	add	r2, sp, #60	; 0x3c
  409506:	9904      	ldr	r1, [sp, #16]
  409508:	9806      	ldr	r0, [sp, #24]
  40950a:	f7ff fab9 	bl	408a80 <__sprint_r.part.0>
  40950e:	2800      	cmp	r0, #0
  409510:	d1a8      	bne.n	409464 <_vfiprintf_r+0x964>
  409512:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409514:	46ca      	mov	sl, r9
  409516:	e75e      	b.n	4093d6 <_vfiprintf_r+0x8d6>
  409518:	aa0f      	add	r2, sp, #60	; 0x3c
  40951a:	9904      	ldr	r1, [sp, #16]
  40951c:	9806      	ldr	r0, [sp, #24]
  40951e:	f7ff faaf 	bl	408a80 <__sprint_r.part.0>
  409522:	2800      	cmp	r0, #0
  409524:	d19e      	bne.n	409464 <_vfiprintf_r+0x964>
  409526:	46ca      	mov	sl, r9
  409528:	f7ff bbc0 	b.w	408cac <_vfiprintf_r+0x1ac>
  40952c:	0040e7f0 	.word	0x0040e7f0
  409530:	0040e7e0 	.word	0x0040e7e0
  409534:	3104      	adds	r1, #4
  409536:	6816      	ldr	r6, [r2, #0]
  409538:	9107      	str	r1, [sp, #28]
  40953a:	2201      	movs	r2, #1
  40953c:	2700      	movs	r7, #0
  40953e:	e412      	b.n	408d66 <_vfiprintf_r+0x266>
  409540:	9807      	ldr	r0, [sp, #28]
  409542:	4601      	mov	r1, r0
  409544:	3104      	adds	r1, #4
  409546:	6806      	ldr	r6, [r0, #0]
  409548:	9107      	str	r1, [sp, #28]
  40954a:	2700      	movs	r7, #0
  40954c:	e40b      	b.n	408d66 <_vfiprintf_r+0x266>
  40954e:	680e      	ldr	r6, [r1, #0]
  409550:	3104      	adds	r1, #4
  409552:	9107      	str	r1, [sp, #28]
  409554:	2700      	movs	r7, #0
  409556:	e591      	b.n	40907c <_vfiprintf_r+0x57c>
  409558:	9907      	ldr	r1, [sp, #28]
  40955a:	680e      	ldr	r6, [r1, #0]
  40955c:	460a      	mov	r2, r1
  40955e:	17f7      	asrs	r7, r6, #31
  409560:	3204      	adds	r2, #4
  409562:	9207      	str	r2, [sp, #28]
  409564:	4630      	mov	r0, r6
  409566:	4639      	mov	r1, r7
  409568:	e50f      	b.n	408f8a <_vfiprintf_r+0x48a>
  40956a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40956e:	f001 fe4d 	bl	40b20c <__retarget_lock_release_recursive>
  409572:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  409576:	e71a      	b.n	4093ae <_vfiprintf_r+0x8ae>
  409578:	9b02      	ldr	r3, [sp, #8]
  40957a:	9302      	str	r3, [sp, #8]
  40957c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  409580:	3630      	adds	r6, #48	; 0x30
  409582:	2301      	movs	r3, #1
  409584:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  409588:	9305      	str	r3, [sp, #20]
  40958a:	e40b      	b.n	408da4 <_vfiprintf_r+0x2a4>
  40958c:	aa0f      	add	r2, sp, #60	; 0x3c
  40958e:	9904      	ldr	r1, [sp, #16]
  409590:	9806      	ldr	r0, [sp, #24]
  409592:	f7ff fa75 	bl	408a80 <__sprint_r.part.0>
  409596:	2800      	cmp	r0, #0
  409598:	f47f af64 	bne.w	409464 <_vfiprintf_r+0x964>
  40959c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40959e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4095a0:	1c48      	adds	r0, r1, #1
  4095a2:	46ca      	mov	sl, r9
  4095a4:	e651      	b.n	40924a <_vfiprintf_r+0x74a>
  4095a6:	aa0f      	add	r2, sp, #60	; 0x3c
  4095a8:	9904      	ldr	r1, [sp, #16]
  4095aa:	9806      	ldr	r0, [sp, #24]
  4095ac:	f7ff fa68 	bl	408a80 <__sprint_r.part.0>
  4095b0:	2800      	cmp	r0, #0
  4095b2:	f47f af57 	bne.w	409464 <_vfiprintf_r+0x964>
  4095b6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4095b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4095ba:	1c48      	adds	r0, r1, #1
  4095bc:	46ca      	mov	sl, r9
  4095be:	e448      	b.n	408e52 <_vfiprintf_r+0x352>
  4095c0:	2a00      	cmp	r2, #0
  4095c2:	f040 8091 	bne.w	4096e8 <_vfiprintf_r+0xbe8>
  4095c6:	2001      	movs	r0, #1
  4095c8:	4611      	mov	r1, r2
  4095ca:	46ca      	mov	sl, r9
  4095cc:	e641      	b.n	409252 <_vfiprintf_r+0x752>
  4095ce:	aa0f      	add	r2, sp, #60	; 0x3c
  4095d0:	9904      	ldr	r1, [sp, #16]
  4095d2:	9806      	ldr	r0, [sp, #24]
  4095d4:	f7ff fa54 	bl	408a80 <__sprint_r.part.0>
  4095d8:	2800      	cmp	r0, #0
  4095da:	f47f af43 	bne.w	409464 <_vfiprintf_r+0x964>
  4095de:	9810      	ldr	r0, [sp, #64]	; 0x40
  4095e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4095e2:	3001      	adds	r0, #1
  4095e4:	46ca      	mov	sl, r9
  4095e6:	e667      	b.n	4092b8 <_vfiprintf_r+0x7b8>
  4095e8:	46d3      	mov	fp, sl
  4095ea:	e6d6      	b.n	40939a <_vfiprintf_r+0x89a>
  4095ec:	9e07      	ldr	r6, [sp, #28]
  4095ee:	3607      	adds	r6, #7
  4095f0:	f026 0207 	bic.w	r2, r6, #7
  4095f4:	f102 0108 	add.w	r1, r2, #8
  4095f8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4095fc:	9107      	str	r1, [sp, #28]
  4095fe:	2201      	movs	r2, #1
  409600:	f7ff bbb1 	b.w	408d66 <_vfiprintf_r+0x266>
  409604:	9e07      	ldr	r6, [sp, #28]
  409606:	3607      	adds	r6, #7
  409608:	f026 0607 	bic.w	r6, r6, #7
  40960c:	e9d6 0100 	ldrd	r0, r1, [r6]
  409610:	f106 0208 	add.w	r2, r6, #8
  409614:	9207      	str	r2, [sp, #28]
  409616:	4606      	mov	r6, r0
  409618:	460f      	mov	r7, r1
  40961a:	e4b6      	b.n	408f8a <_vfiprintf_r+0x48a>
  40961c:	9e07      	ldr	r6, [sp, #28]
  40961e:	3607      	adds	r6, #7
  409620:	f026 0207 	bic.w	r2, r6, #7
  409624:	f102 0108 	add.w	r1, r2, #8
  409628:	e9d2 6700 	ldrd	r6, r7, [r2]
  40962c:	9107      	str	r1, [sp, #28]
  40962e:	2200      	movs	r2, #0
  409630:	f7ff bb99 	b.w	408d66 <_vfiprintf_r+0x266>
  409634:	9e07      	ldr	r6, [sp, #28]
  409636:	3607      	adds	r6, #7
  409638:	f026 0107 	bic.w	r1, r6, #7
  40963c:	f101 0008 	add.w	r0, r1, #8
  409640:	9007      	str	r0, [sp, #28]
  409642:	e9d1 6700 	ldrd	r6, r7, [r1]
  409646:	e519      	b.n	40907c <_vfiprintf_r+0x57c>
  409648:	46cb      	mov	fp, r9
  40964a:	f7ff bbab 	b.w	408da4 <_vfiprintf_r+0x2a4>
  40964e:	252d      	movs	r5, #45	; 0x2d
  409650:	4276      	negs	r6, r6
  409652:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  409656:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40965a:	2201      	movs	r2, #1
  40965c:	f7ff bb88 	b.w	408d70 <_vfiprintf_r+0x270>
  409660:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409662:	b9b3      	cbnz	r3, 409692 <_vfiprintf_r+0xb92>
  409664:	4611      	mov	r1, r2
  409666:	2001      	movs	r0, #1
  409668:	46ca      	mov	sl, r9
  40966a:	e5f2      	b.n	409252 <_vfiprintf_r+0x752>
  40966c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  409670:	f001 fdcc 	bl	40b20c <__retarget_lock_release_recursive>
  409674:	f04f 33ff 	mov.w	r3, #4294967295
  409678:	9303      	str	r3, [sp, #12]
  40967a:	f7ff bb50 	b.w	408d1e <_vfiprintf_r+0x21e>
  40967e:	aa0f      	add	r2, sp, #60	; 0x3c
  409680:	9904      	ldr	r1, [sp, #16]
  409682:	9806      	ldr	r0, [sp, #24]
  409684:	f7ff f9fc 	bl	408a80 <__sprint_r.part.0>
  409688:	2800      	cmp	r0, #0
  40968a:	f47f aeeb 	bne.w	409464 <_vfiprintf_r+0x964>
  40968e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409690:	e6a9      	b.n	4093e6 <_vfiprintf_r+0x8e6>
  409692:	ab0e      	add	r3, sp, #56	; 0x38
  409694:	2202      	movs	r2, #2
  409696:	931c      	str	r3, [sp, #112]	; 0x70
  409698:	921d      	str	r2, [sp, #116]	; 0x74
  40969a:	2001      	movs	r0, #1
  40969c:	46ca      	mov	sl, r9
  40969e:	e5d0      	b.n	409242 <_vfiprintf_r+0x742>
  4096a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4096a2:	9904      	ldr	r1, [sp, #16]
  4096a4:	9806      	ldr	r0, [sp, #24]
  4096a6:	f7ff f9eb 	bl	408a80 <__sprint_r.part.0>
  4096aa:	2800      	cmp	r0, #0
  4096ac:	f47f aeda 	bne.w	409464 <_vfiprintf_r+0x964>
  4096b0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4096b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4096b4:	1c48      	adds	r0, r1, #1
  4096b6:	46ca      	mov	sl, r9
  4096b8:	e5a4      	b.n	409204 <_vfiprintf_r+0x704>
  4096ba:	9a07      	ldr	r2, [sp, #28]
  4096bc:	9903      	ldr	r1, [sp, #12]
  4096be:	6813      	ldr	r3, [r2, #0]
  4096c0:	17cd      	asrs	r5, r1, #31
  4096c2:	4608      	mov	r0, r1
  4096c4:	3204      	adds	r2, #4
  4096c6:	4629      	mov	r1, r5
  4096c8:	9207      	str	r2, [sp, #28]
  4096ca:	e9c3 0100 	strd	r0, r1, [r3]
  4096ce:	f7ff ba54 	b.w	408b7a <_vfiprintf_r+0x7a>
  4096d2:	4658      	mov	r0, fp
  4096d4:	9607      	str	r6, [sp, #28]
  4096d6:	9302      	str	r3, [sp, #8]
  4096d8:	f7fd fcd2 	bl	407080 <strlen>
  4096dc:	2400      	movs	r4, #0
  4096de:	9005      	str	r0, [sp, #20]
  4096e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4096e4:	f7ff bb5e 	b.w	408da4 <_vfiprintf_r+0x2a4>
  4096e8:	aa0f      	add	r2, sp, #60	; 0x3c
  4096ea:	9904      	ldr	r1, [sp, #16]
  4096ec:	9806      	ldr	r0, [sp, #24]
  4096ee:	f7ff f9c7 	bl	408a80 <__sprint_r.part.0>
  4096f2:	2800      	cmp	r0, #0
  4096f4:	f47f aeb6 	bne.w	409464 <_vfiprintf_r+0x964>
  4096f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4096fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4096fc:	1c48      	adds	r0, r1, #1
  4096fe:	46ca      	mov	sl, r9
  409700:	e5a7      	b.n	409252 <_vfiprintf_r+0x752>
  409702:	9910      	ldr	r1, [sp, #64]	; 0x40
  409704:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409706:	4e20      	ldr	r6, [pc, #128]	; (409788 <_vfiprintf_r+0xc88>)
  409708:	3101      	adds	r1, #1
  40970a:	f7ff bb90 	b.w	408e2e <_vfiprintf_r+0x32e>
  40970e:	2c06      	cmp	r4, #6
  409710:	bf28      	it	cs
  409712:	2406      	movcs	r4, #6
  409714:	9405      	str	r4, [sp, #20]
  409716:	9607      	str	r6, [sp, #28]
  409718:	9401      	str	r4, [sp, #4]
  40971a:	f8df b070 	ldr.w	fp, [pc, #112]	; 40978c <_vfiprintf_r+0xc8c>
  40971e:	e4d5      	b.n	4090cc <_vfiprintf_r+0x5cc>
  409720:	9810      	ldr	r0, [sp, #64]	; 0x40
  409722:	4e19      	ldr	r6, [pc, #100]	; (409788 <_vfiprintf_r+0xc88>)
  409724:	3001      	adds	r0, #1
  409726:	e603      	b.n	409330 <_vfiprintf_r+0x830>
  409728:	9405      	str	r4, [sp, #20]
  40972a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40972e:	9607      	str	r6, [sp, #28]
  409730:	9302      	str	r3, [sp, #8]
  409732:	4604      	mov	r4, r0
  409734:	f7ff bb36 	b.w	408da4 <_vfiprintf_r+0x2a4>
  409738:	4686      	mov	lr, r0
  40973a:	f7ff bbce 	b.w	408eda <_vfiprintf_r+0x3da>
  40973e:	9806      	ldr	r0, [sp, #24]
  409740:	aa0f      	add	r2, sp, #60	; 0x3c
  409742:	4659      	mov	r1, fp
  409744:	f7ff f99c 	bl	408a80 <__sprint_r.part.0>
  409748:	2800      	cmp	r0, #0
  40974a:	f43f ae24 	beq.w	409396 <_vfiprintf_r+0x896>
  40974e:	e624      	b.n	40939a <_vfiprintf_r+0x89a>
  409750:	9907      	ldr	r1, [sp, #28]
  409752:	f898 2001 	ldrb.w	r2, [r8, #1]
  409756:	680c      	ldr	r4, [r1, #0]
  409758:	3104      	adds	r1, #4
  40975a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40975e:	46b8      	mov	r8, r7
  409760:	9107      	str	r1, [sp, #28]
  409762:	f7ff ba3f 	b.w	408be4 <_vfiprintf_r+0xe4>
  409766:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40976a:	e43c      	b.n	408fe6 <_vfiprintf_r+0x4e6>
  40976c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409770:	e521      	b.n	4091b6 <_vfiprintf_r+0x6b6>
  409772:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409776:	f7ff bbf4 	b.w	408f62 <_vfiprintf_r+0x462>
  40977a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40977e:	e491      	b.n	4090a4 <_vfiprintf_r+0x5a4>
  409780:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409784:	e469      	b.n	40905a <_vfiprintf_r+0x55a>
  409786:	bf00      	nop
  409788:	0040e7e0 	.word	0x0040e7e0
  40978c:	0040e7b8 	.word	0x0040e7b8

00409790 <__sbprintf>:
  409790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409794:	460c      	mov	r4, r1
  409796:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40979a:	8989      	ldrh	r1, [r1, #12]
  40979c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40979e:	89e5      	ldrh	r5, [r4, #14]
  4097a0:	9619      	str	r6, [sp, #100]	; 0x64
  4097a2:	f021 0102 	bic.w	r1, r1, #2
  4097a6:	4606      	mov	r6, r0
  4097a8:	69e0      	ldr	r0, [r4, #28]
  4097aa:	f8ad 100c 	strh.w	r1, [sp, #12]
  4097ae:	4617      	mov	r7, r2
  4097b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4097b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4097b6:	f8ad 500e 	strh.w	r5, [sp, #14]
  4097ba:	4698      	mov	r8, r3
  4097bc:	ad1a      	add	r5, sp, #104	; 0x68
  4097be:	2300      	movs	r3, #0
  4097c0:	9007      	str	r0, [sp, #28]
  4097c2:	a816      	add	r0, sp, #88	; 0x58
  4097c4:	9209      	str	r2, [sp, #36]	; 0x24
  4097c6:	9306      	str	r3, [sp, #24]
  4097c8:	9500      	str	r5, [sp, #0]
  4097ca:	9504      	str	r5, [sp, #16]
  4097cc:	9102      	str	r1, [sp, #8]
  4097ce:	9105      	str	r1, [sp, #20]
  4097d0:	f001 fd16 	bl	40b200 <__retarget_lock_init_recursive>
  4097d4:	4643      	mov	r3, r8
  4097d6:	463a      	mov	r2, r7
  4097d8:	4669      	mov	r1, sp
  4097da:	4630      	mov	r0, r6
  4097dc:	f7ff f990 	bl	408b00 <_vfiprintf_r>
  4097e0:	1e05      	subs	r5, r0, #0
  4097e2:	db07      	blt.n	4097f4 <__sbprintf+0x64>
  4097e4:	4630      	mov	r0, r6
  4097e6:	4669      	mov	r1, sp
  4097e8:	f001 f8e8 	bl	40a9bc <_fflush_r>
  4097ec:	2800      	cmp	r0, #0
  4097ee:	bf18      	it	ne
  4097f0:	f04f 35ff 	movne.w	r5, #4294967295
  4097f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4097f8:	065b      	lsls	r3, r3, #25
  4097fa:	d503      	bpl.n	409804 <__sbprintf+0x74>
  4097fc:	89a3      	ldrh	r3, [r4, #12]
  4097fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409802:	81a3      	strh	r3, [r4, #12]
  409804:	9816      	ldr	r0, [sp, #88]	; 0x58
  409806:	f001 fcfd 	bl	40b204 <__retarget_lock_close_recursive>
  40980a:	4628      	mov	r0, r5
  40980c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  409810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00409814 <__swsetup_r>:
  409814:	b538      	push	{r3, r4, r5, lr}
  409816:	4b30      	ldr	r3, [pc, #192]	; (4098d8 <__swsetup_r+0xc4>)
  409818:	681b      	ldr	r3, [r3, #0]
  40981a:	4605      	mov	r5, r0
  40981c:	460c      	mov	r4, r1
  40981e:	b113      	cbz	r3, 409826 <__swsetup_r+0x12>
  409820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  409822:	2a00      	cmp	r2, #0
  409824:	d038      	beq.n	409898 <__swsetup_r+0x84>
  409826:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40982a:	b293      	uxth	r3, r2
  40982c:	0718      	lsls	r0, r3, #28
  40982e:	d50c      	bpl.n	40984a <__swsetup_r+0x36>
  409830:	6920      	ldr	r0, [r4, #16]
  409832:	b1a8      	cbz	r0, 409860 <__swsetup_r+0x4c>
  409834:	f013 0201 	ands.w	r2, r3, #1
  409838:	d01e      	beq.n	409878 <__swsetup_r+0x64>
  40983a:	6963      	ldr	r3, [r4, #20]
  40983c:	2200      	movs	r2, #0
  40983e:	425b      	negs	r3, r3
  409840:	61a3      	str	r3, [r4, #24]
  409842:	60a2      	str	r2, [r4, #8]
  409844:	b1f0      	cbz	r0, 409884 <__swsetup_r+0x70>
  409846:	2000      	movs	r0, #0
  409848:	bd38      	pop	{r3, r4, r5, pc}
  40984a:	06d9      	lsls	r1, r3, #27
  40984c:	d53c      	bpl.n	4098c8 <__swsetup_r+0xb4>
  40984e:	0758      	lsls	r0, r3, #29
  409850:	d426      	bmi.n	4098a0 <__swsetup_r+0x8c>
  409852:	6920      	ldr	r0, [r4, #16]
  409854:	f042 0308 	orr.w	r3, r2, #8
  409858:	81a3      	strh	r3, [r4, #12]
  40985a:	b29b      	uxth	r3, r3
  40985c:	2800      	cmp	r0, #0
  40985e:	d1e9      	bne.n	409834 <__swsetup_r+0x20>
  409860:	f403 7220 	and.w	r2, r3, #640	; 0x280
  409864:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  409868:	d0e4      	beq.n	409834 <__swsetup_r+0x20>
  40986a:	4628      	mov	r0, r5
  40986c:	4621      	mov	r1, r4
  40986e:	f001 fcfd 	bl	40b26c <__smakebuf_r>
  409872:	89a3      	ldrh	r3, [r4, #12]
  409874:	6920      	ldr	r0, [r4, #16]
  409876:	e7dd      	b.n	409834 <__swsetup_r+0x20>
  409878:	0799      	lsls	r1, r3, #30
  40987a:	bf58      	it	pl
  40987c:	6962      	ldrpl	r2, [r4, #20]
  40987e:	60a2      	str	r2, [r4, #8]
  409880:	2800      	cmp	r0, #0
  409882:	d1e0      	bne.n	409846 <__swsetup_r+0x32>
  409884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409888:	061a      	lsls	r2, r3, #24
  40988a:	d5dd      	bpl.n	409848 <__swsetup_r+0x34>
  40988c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409890:	81a3      	strh	r3, [r4, #12]
  409892:	f04f 30ff 	mov.w	r0, #4294967295
  409896:	bd38      	pop	{r3, r4, r5, pc}
  409898:	4618      	mov	r0, r3
  40989a:	f001 f8e7 	bl	40aa6c <__sinit>
  40989e:	e7c2      	b.n	409826 <__swsetup_r+0x12>
  4098a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4098a2:	b151      	cbz	r1, 4098ba <__swsetup_r+0xa6>
  4098a4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4098a8:	4299      	cmp	r1, r3
  4098aa:	d004      	beq.n	4098b6 <__swsetup_r+0xa2>
  4098ac:	4628      	mov	r0, r5
  4098ae:	f001 fa03 	bl	40acb8 <_free_r>
  4098b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4098b6:	2300      	movs	r3, #0
  4098b8:	6323      	str	r3, [r4, #48]	; 0x30
  4098ba:	2300      	movs	r3, #0
  4098bc:	6920      	ldr	r0, [r4, #16]
  4098be:	6063      	str	r3, [r4, #4]
  4098c0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4098c4:	6020      	str	r0, [r4, #0]
  4098c6:	e7c5      	b.n	409854 <__swsetup_r+0x40>
  4098c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4098cc:	2309      	movs	r3, #9
  4098ce:	602b      	str	r3, [r5, #0]
  4098d0:	f04f 30ff 	mov.w	r0, #4294967295
  4098d4:	81a2      	strh	r2, [r4, #12]
  4098d6:	bd38      	pop	{r3, r4, r5, pc}
  4098d8:	2040003c 	.word	0x2040003c

004098dc <register_fini>:
  4098dc:	4b02      	ldr	r3, [pc, #8]	; (4098e8 <register_fini+0xc>)
  4098de:	b113      	cbz	r3, 4098e6 <register_fini+0xa>
  4098e0:	4802      	ldr	r0, [pc, #8]	; (4098ec <register_fini+0x10>)
  4098e2:	f000 b805 	b.w	4098f0 <atexit>
  4098e6:	4770      	bx	lr
  4098e8:	00000000 	.word	0x00000000
  4098ec:	0040aadd 	.word	0x0040aadd

004098f0 <atexit>:
  4098f0:	2300      	movs	r3, #0
  4098f2:	4601      	mov	r1, r0
  4098f4:	461a      	mov	r2, r3
  4098f6:	4618      	mov	r0, r3
  4098f8:	f002 bf50 	b.w	40c79c <__register_exitproc>

004098fc <quorem>:
  4098fc:	6902      	ldr	r2, [r0, #16]
  4098fe:	690b      	ldr	r3, [r1, #16]
  409900:	4293      	cmp	r3, r2
  409902:	f300 808d 	bgt.w	409a20 <quorem+0x124>
  409906:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40990a:	f103 38ff 	add.w	r8, r3, #4294967295
  40990e:	f101 0714 	add.w	r7, r1, #20
  409912:	f100 0b14 	add.w	fp, r0, #20
  409916:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40991a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40991e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  409922:	b083      	sub	sp, #12
  409924:	3201      	adds	r2, #1
  409926:	fbb3 f9f2 	udiv	r9, r3, r2
  40992a:	eb0b 0304 	add.w	r3, fp, r4
  40992e:	9400      	str	r4, [sp, #0]
  409930:	eb07 0a04 	add.w	sl, r7, r4
  409934:	9301      	str	r3, [sp, #4]
  409936:	f1b9 0f00 	cmp.w	r9, #0
  40993a:	d039      	beq.n	4099b0 <quorem+0xb4>
  40993c:	2500      	movs	r5, #0
  40993e:	462e      	mov	r6, r5
  409940:	46bc      	mov	ip, r7
  409942:	46de      	mov	lr, fp
  409944:	f85c 4b04 	ldr.w	r4, [ip], #4
  409948:	f8de 3000 	ldr.w	r3, [lr]
  40994c:	b2a2      	uxth	r2, r4
  40994e:	fb09 5502 	mla	r5, r9, r2, r5
  409952:	0c22      	lsrs	r2, r4, #16
  409954:	0c2c      	lsrs	r4, r5, #16
  409956:	fb09 4202 	mla	r2, r9, r2, r4
  40995a:	b2ad      	uxth	r5, r5
  40995c:	1b75      	subs	r5, r6, r5
  40995e:	b296      	uxth	r6, r2
  409960:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  409964:	fa15 f383 	uxtah	r3, r5, r3
  409968:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40996c:	b29b      	uxth	r3, r3
  40996e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  409972:	45e2      	cmp	sl, ip
  409974:	ea4f 4512 	mov.w	r5, r2, lsr #16
  409978:	f84e 3b04 	str.w	r3, [lr], #4
  40997c:	ea4f 4626 	mov.w	r6, r6, asr #16
  409980:	d2e0      	bcs.n	409944 <quorem+0x48>
  409982:	9b00      	ldr	r3, [sp, #0]
  409984:	f85b 3003 	ldr.w	r3, [fp, r3]
  409988:	b993      	cbnz	r3, 4099b0 <quorem+0xb4>
  40998a:	9c01      	ldr	r4, [sp, #4]
  40998c:	1f23      	subs	r3, r4, #4
  40998e:	459b      	cmp	fp, r3
  409990:	d20c      	bcs.n	4099ac <quorem+0xb0>
  409992:	f854 3c04 	ldr.w	r3, [r4, #-4]
  409996:	b94b      	cbnz	r3, 4099ac <quorem+0xb0>
  409998:	f1a4 0308 	sub.w	r3, r4, #8
  40999c:	e002      	b.n	4099a4 <quorem+0xa8>
  40999e:	681a      	ldr	r2, [r3, #0]
  4099a0:	3b04      	subs	r3, #4
  4099a2:	b91a      	cbnz	r2, 4099ac <quorem+0xb0>
  4099a4:	459b      	cmp	fp, r3
  4099a6:	f108 38ff 	add.w	r8, r8, #4294967295
  4099aa:	d3f8      	bcc.n	40999e <quorem+0xa2>
  4099ac:	f8c0 8010 	str.w	r8, [r0, #16]
  4099b0:	4604      	mov	r4, r0
  4099b2:	f002 fa63 	bl	40be7c <__mcmp>
  4099b6:	2800      	cmp	r0, #0
  4099b8:	db2e      	blt.n	409a18 <quorem+0x11c>
  4099ba:	f109 0901 	add.w	r9, r9, #1
  4099be:	465d      	mov	r5, fp
  4099c0:	2300      	movs	r3, #0
  4099c2:	f857 1b04 	ldr.w	r1, [r7], #4
  4099c6:	6828      	ldr	r0, [r5, #0]
  4099c8:	b28a      	uxth	r2, r1
  4099ca:	1a9a      	subs	r2, r3, r2
  4099cc:	0c0b      	lsrs	r3, r1, #16
  4099ce:	fa12 f280 	uxtah	r2, r2, r0
  4099d2:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4099d6:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4099da:	b292      	uxth	r2, r2
  4099dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4099e0:	45ba      	cmp	sl, r7
  4099e2:	f845 2b04 	str.w	r2, [r5], #4
  4099e6:	ea4f 4323 	mov.w	r3, r3, asr #16
  4099ea:	d2ea      	bcs.n	4099c2 <quorem+0xc6>
  4099ec:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4099f0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4099f4:	b982      	cbnz	r2, 409a18 <quorem+0x11c>
  4099f6:	1f1a      	subs	r2, r3, #4
  4099f8:	4593      	cmp	fp, r2
  4099fa:	d20b      	bcs.n	409a14 <quorem+0x118>
  4099fc:	f853 2c04 	ldr.w	r2, [r3, #-4]
  409a00:	b942      	cbnz	r2, 409a14 <quorem+0x118>
  409a02:	3b08      	subs	r3, #8
  409a04:	e002      	b.n	409a0c <quorem+0x110>
  409a06:	681a      	ldr	r2, [r3, #0]
  409a08:	3b04      	subs	r3, #4
  409a0a:	b91a      	cbnz	r2, 409a14 <quorem+0x118>
  409a0c:	459b      	cmp	fp, r3
  409a0e:	f108 38ff 	add.w	r8, r8, #4294967295
  409a12:	d3f8      	bcc.n	409a06 <quorem+0x10a>
  409a14:	f8c4 8010 	str.w	r8, [r4, #16]
  409a18:	4648      	mov	r0, r9
  409a1a:	b003      	add	sp, #12
  409a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a20:	2000      	movs	r0, #0
  409a22:	4770      	bx	lr
  409a24:	0000      	movs	r0, r0
	...

00409a28 <_dtoa_r>:
  409a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409a2c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  409a2e:	b09b      	sub	sp, #108	; 0x6c
  409a30:	4604      	mov	r4, r0
  409a32:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  409a34:	4692      	mov	sl, r2
  409a36:	469b      	mov	fp, r3
  409a38:	b141      	cbz	r1, 409a4c <_dtoa_r+0x24>
  409a3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  409a3c:	604a      	str	r2, [r1, #4]
  409a3e:	2301      	movs	r3, #1
  409a40:	4093      	lsls	r3, r2
  409a42:	608b      	str	r3, [r1, #8]
  409a44:	f002 f842 	bl	40bacc <_Bfree>
  409a48:	2300      	movs	r3, #0
  409a4a:	6423      	str	r3, [r4, #64]	; 0x40
  409a4c:	f1bb 0f00 	cmp.w	fp, #0
  409a50:	465d      	mov	r5, fp
  409a52:	db35      	blt.n	409ac0 <_dtoa_r+0x98>
  409a54:	2300      	movs	r3, #0
  409a56:	6033      	str	r3, [r6, #0]
  409a58:	4b9d      	ldr	r3, [pc, #628]	; (409cd0 <_dtoa_r+0x2a8>)
  409a5a:	43ab      	bics	r3, r5
  409a5c:	d015      	beq.n	409a8a <_dtoa_r+0x62>
  409a5e:	4650      	mov	r0, sl
  409a60:	4659      	mov	r1, fp
  409a62:	2200      	movs	r2, #0
  409a64:	2300      	movs	r3, #0
  409a66:	f003 fc11 	bl	40d28c <__aeabi_dcmpeq>
  409a6a:	4680      	mov	r8, r0
  409a6c:	2800      	cmp	r0, #0
  409a6e:	d02d      	beq.n	409acc <_dtoa_r+0xa4>
  409a70:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409a72:	2301      	movs	r3, #1
  409a74:	6013      	str	r3, [r2, #0]
  409a76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409a78:	2b00      	cmp	r3, #0
  409a7a:	f000 80bd 	beq.w	409bf8 <_dtoa_r+0x1d0>
  409a7e:	4895      	ldr	r0, [pc, #596]	; (409cd4 <_dtoa_r+0x2ac>)
  409a80:	6018      	str	r0, [r3, #0]
  409a82:	3801      	subs	r0, #1
  409a84:	b01b      	add	sp, #108	; 0x6c
  409a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a8a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409a8c:	f242 730f 	movw	r3, #9999	; 0x270f
  409a90:	6013      	str	r3, [r2, #0]
  409a92:	f1ba 0f00 	cmp.w	sl, #0
  409a96:	d10d      	bne.n	409ab4 <_dtoa_r+0x8c>
  409a98:	f3c5 0513 	ubfx	r5, r5, #0, #20
  409a9c:	b955      	cbnz	r5, 409ab4 <_dtoa_r+0x8c>
  409a9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409aa0:	488d      	ldr	r0, [pc, #564]	; (409cd8 <_dtoa_r+0x2b0>)
  409aa2:	2b00      	cmp	r3, #0
  409aa4:	d0ee      	beq.n	409a84 <_dtoa_r+0x5c>
  409aa6:	f100 0308 	add.w	r3, r0, #8
  409aaa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  409aac:	6013      	str	r3, [r2, #0]
  409aae:	b01b      	add	sp, #108	; 0x6c
  409ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409ab4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409ab6:	4889      	ldr	r0, [pc, #548]	; (409cdc <_dtoa_r+0x2b4>)
  409ab8:	2b00      	cmp	r3, #0
  409aba:	d0e3      	beq.n	409a84 <_dtoa_r+0x5c>
  409abc:	1cc3      	adds	r3, r0, #3
  409abe:	e7f4      	b.n	409aaa <_dtoa_r+0x82>
  409ac0:	2301      	movs	r3, #1
  409ac2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  409ac6:	6033      	str	r3, [r6, #0]
  409ac8:	46ab      	mov	fp, r5
  409aca:	e7c5      	b.n	409a58 <_dtoa_r+0x30>
  409acc:	aa18      	add	r2, sp, #96	; 0x60
  409ace:	ab19      	add	r3, sp, #100	; 0x64
  409ad0:	9201      	str	r2, [sp, #4]
  409ad2:	9300      	str	r3, [sp, #0]
  409ad4:	4652      	mov	r2, sl
  409ad6:	465b      	mov	r3, fp
  409ad8:	4620      	mov	r0, r4
  409ada:	f002 fa6f 	bl	40bfbc <__d2b>
  409ade:	0d2b      	lsrs	r3, r5, #20
  409ae0:	4681      	mov	r9, r0
  409ae2:	d071      	beq.n	409bc8 <_dtoa_r+0x1a0>
  409ae4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  409ae8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  409aec:	9f18      	ldr	r7, [sp, #96]	; 0x60
  409aee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  409af2:	4650      	mov	r0, sl
  409af4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  409af8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  409afc:	2200      	movs	r2, #0
  409afe:	4b78      	ldr	r3, [pc, #480]	; (409ce0 <_dtoa_r+0x2b8>)
  409b00:	f002 ffa8 	bl	40ca54 <__aeabi_dsub>
  409b04:	a36c      	add	r3, pc, #432	; (adr r3, 409cb8 <_dtoa_r+0x290>)
  409b06:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b0a:	f003 f957 	bl	40cdbc <__aeabi_dmul>
  409b0e:	a36c      	add	r3, pc, #432	; (adr r3, 409cc0 <_dtoa_r+0x298>)
  409b10:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b14:	f002 ffa0 	bl	40ca58 <__adddf3>
  409b18:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409b1c:	4630      	mov	r0, r6
  409b1e:	f003 f8e7 	bl	40ccf0 <__aeabi_i2d>
  409b22:	a369      	add	r3, pc, #420	; (adr r3, 409cc8 <_dtoa_r+0x2a0>)
  409b24:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b28:	f003 f948 	bl	40cdbc <__aeabi_dmul>
  409b2c:	4602      	mov	r2, r0
  409b2e:	460b      	mov	r3, r1
  409b30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409b34:	f002 ff90 	bl	40ca58 <__adddf3>
  409b38:	e9cd 0104 	strd	r0, r1, [sp, #16]
  409b3c:	f003 fbee 	bl	40d31c <__aeabi_d2iz>
  409b40:	2200      	movs	r2, #0
  409b42:	9002      	str	r0, [sp, #8]
  409b44:	2300      	movs	r3, #0
  409b46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409b4a:	f003 fba9 	bl	40d2a0 <__aeabi_dcmplt>
  409b4e:	2800      	cmp	r0, #0
  409b50:	f040 8173 	bne.w	409e3a <_dtoa_r+0x412>
  409b54:	9d02      	ldr	r5, [sp, #8]
  409b56:	2d16      	cmp	r5, #22
  409b58:	f200 815d 	bhi.w	409e16 <_dtoa_r+0x3ee>
  409b5c:	4b61      	ldr	r3, [pc, #388]	; (409ce4 <_dtoa_r+0x2bc>)
  409b5e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  409b62:	e9d3 0100 	ldrd	r0, r1, [r3]
  409b66:	4652      	mov	r2, sl
  409b68:	465b      	mov	r3, fp
  409b6a:	f003 fbb7 	bl	40d2dc <__aeabi_dcmpgt>
  409b6e:	2800      	cmp	r0, #0
  409b70:	f000 81c5 	beq.w	409efe <_dtoa_r+0x4d6>
  409b74:	1e6b      	subs	r3, r5, #1
  409b76:	9302      	str	r3, [sp, #8]
  409b78:	2300      	movs	r3, #0
  409b7a:	930e      	str	r3, [sp, #56]	; 0x38
  409b7c:	1bbf      	subs	r7, r7, r6
  409b7e:	1e7b      	subs	r3, r7, #1
  409b80:	9306      	str	r3, [sp, #24]
  409b82:	f100 8154 	bmi.w	409e2e <_dtoa_r+0x406>
  409b86:	2300      	movs	r3, #0
  409b88:	9308      	str	r3, [sp, #32]
  409b8a:	9b02      	ldr	r3, [sp, #8]
  409b8c:	2b00      	cmp	r3, #0
  409b8e:	f2c0 8145 	blt.w	409e1c <_dtoa_r+0x3f4>
  409b92:	9a06      	ldr	r2, [sp, #24]
  409b94:	930d      	str	r3, [sp, #52]	; 0x34
  409b96:	4611      	mov	r1, r2
  409b98:	4419      	add	r1, r3
  409b9a:	2300      	movs	r3, #0
  409b9c:	9106      	str	r1, [sp, #24]
  409b9e:	930c      	str	r3, [sp, #48]	; 0x30
  409ba0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409ba2:	2b09      	cmp	r3, #9
  409ba4:	d82a      	bhi.n	409bfc <_dtoa_r+0x1d4>
  409ba6:	2b05      	cmp	r3, #5
  409ba8:	f340 865b 	ble.w	40a862 <_dtoa_r+0xe3a>
  409bac:	3b04      	subs	r3, #4
  409bae:	9324      	str	r3, [sp, #144]	; 0x90
  409bb0:	2500      	movs	r5, #0
  409bb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409bb4:	3b02      	subs	r3, #2
  409bb6:	2b03      	cmp	r3, #3
  409bb8:	f200 8642 	bhi.w	40a840 <_dtoa_r+0xe18>
  409bbc:	e8df f013 	tbh	[pc, r3, lsl #1]
  409bc0:	02c903d4 	.word	0x02c903d4
  409bc4:	046103df 	.word	0x046103df
  409bc8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  409bca:	9e19      	ldr	r6, [sp, #100]	; 0x64
  409bcc:	443e      	add	r6, r7
  409bce:	f206 4332 	addw	r3, r6, #1074	; 0x432
  409bd2:	2b20      	cmp	r3, #32
  409bd4:	f340 818e 	ble.w	409ef4 <_dtoa_r+0x4cc>
  409bd8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  409bdc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  409be0:	409d      	lsls	r5, r3
  409be2:	fa2a f000 	lsr.w	r0, sl, r0
  409be6:	4328      	orrs	r0, r5
  409be8:	f003 f872 	bl	40ccd0 <__aeabi_ui2d>
  409bec:	2301      	movs	r3, #1
  409bee:	3e01      	subs	r6, #1
  409bf0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  409bf4:	9314      	str	r3, [sp, #80]	; 0x50
  409bf6:	e781      	b.n	409afc <_dtoa_r+0xd4>
  409bf8:	483b      	ldr	r0, [pc, #236]	; (409ce8 <_dtoa_r+0x2c0>)
  409bfa:	e743      	b.n	409a84 <_dtoa_r+0x5c>
  409bfc:	2100      	movs	r1, #0
  409bfe:	6461      	str	r1, [r4, #68]	; 0x44
  409c00:	4620      	mov	r0, r4
  409c02:	9125      	str	r1, [sp, #148]	; 0x94
  409c04:	f001 ff3c 	bl	40ba80 <_Balloc>
  409c08:	f04f 33ff 	mov.w	r3, #4294967295
  409c0c:	930a      	str	r3, [sp, #40]	; 0x28
  409c0e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409c10:	930f      	str	r3, [sp, #60]	; 0x3c
  409c12:	2301      	movs	r3, #1
  409c14:	9004      	str	r0, [sp, #16]
  409c16:	6420      	str	r0, [r4, #64]	; 0x40
  409c18:	9224      	str	r2, [sp, #144]	; 0x90
  409c1a:	930b      	str	r3, [sp, #44]	; 0x2c
  409c1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  409c1e:	2b00      	cmp	r3, #0
  409c20:	f2c0 80d9 	blt.w	409dd6 <_dtoa_r+0x3ae>
  409c24:	9a02      	ldr	r2, [sp, #8]
  409c26:	2a0e      	cmp	r2, #14
  409c28:	f300 80d5 	bgt.w	409dd6 <_dtoa_r+0x3ae>
  409c2c:	4b2d      	ldr	r3, [pc, #180]	; (409ce4 <_dtoa_r+0x2bc>)
  409c2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409c32:	e9d3 2300 	ldrd	r2, r3, [r3]
  409c36:	e9cd 2308 	strd	r2, r3, [sp, #32]
  409c3a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409c3c:	2b00      	cmp	r3, #0
  409c3e:	f2c0 83ba 	blt.w	40a3b6 <_dtoa_r+0x98e>
  409c42:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  409c46:	4650      	mov	r0, sl
  409c48:	462a      	mov	r2, r5
  409c4a:	4633      	mov	r3, r6
  409c4c:	4659      	mov	r1, fp
  409c4e:	f003 f9df 	bl	40d010 <__aeabi_ddiv>
  409c52:	f003 fb63 	bl	40d31c <__aeabi_d2iz>
  409c56:	4680      	mov	r8, r0
  409c58:	f003 f84a 	bl	40ccf0 <__aeabi_i2d>
  409c5c:	462a      	mov	r2, r5
  409c5e:	4633      	mov	r3, r6
  409c60:	f003 f8ac 	bl	40cdbc <__aeabi_dmul>
  409c64:	460b      	mov	r3, r1
  409c66:	4602      	mov	r2, r0
  409c68:	4659      	mov	r1, fp
  409c6a:	4650      	mov	r0, sl
  409c6c:	f002 fef2 	bl	40ca54 <__aeabi_dsub>
  409c70:	9d04      	ldr	r5, [sp, #16]
  409c72:	f108 0330 	add.w	r3, r8, #48	; 0x30
  409c76:	702b      	strb	r3, [r5, #0]
  409c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409c7a:	2b01      	cmp	r3, #1
  409c7c:	4606      	mov	r6, r0
  409c7e:	460f      	mov	r7, r1
  409c80:	f105 0501 	add.w	r5, r5, #1
  409c84:	d068      	beq.n	409d58 <_dtoa_r+0x330>
  409c86:	2200      	movs	r2, #0
  409c88:	4b18      	ldr	r3, [pc, #96]	; (409cec <_dtoa_r+0x2c4>)
  409c8a:	f003 f897 	bl	40cdbc <__aeabi_dmul>
  409c8e:	2200      	movs	r2, #0
  409c90:	2300      	movs	r3, #0
  409c92:	4606      	mov	r6, r0
  409c94:	460f      	mov	r7, r1
  409c96:	f003 faf9 	bl	40d28c <__aeabi_dcmpeq>
  409c9a:	2800      	cmp	r0, #0
  409c9c:	f040 8088 	bne.w	409db0 <_dtoa_r+0x388>
  409ca0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  409ca4:	f04f 0a00 	mov.w	sl, #0
  409ca8:	f8df b040 	ldr.w	fp, [pc, #64]	; 409cec <_dtoa_r+0x2c4>
  409cac:	940c      	str	r4, [sp, #48]	; 0x30
  409cae:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  409cb2:	e028      	b.n	409d06 <_dtoa_r+0x2de>
  409cb4:	f3af 8000 	nop.w
  409cb8:	636f4361 	.word	0x636f4361
  409cbc:	3fd287a7 	.word	0x3fd287a7
  409cc0:	8b60c8b3 	.word	0x8b60c8b3
  409cc4:	3fc68a28 	.word	0x3fc68a28
  409cc8:	509f79fb 	.word	0x509f79fb
  409ccc:	3fd34413 	.word	0x3fd34413
  409cd0:	7ff00000 	.word	0x7ff00000
  409cd4:	0040e5bd 	.word	0x0040e5bd
  409cd8:	0040e800 	.word	0x0040e800
  409cdc:	0040e80c 	.word	0x0040e80c
  409ce0:	3ff80000 	.word	0x3ff80000
  409ce4:	0040e848 	.word	0x0040e848
  409ce8:	0040e5bc 	.word	0x0040e5bc
  409cec:	40240000 	.word	0x40240000
  409cf0:	f003 f864 	bl	40cdbc <__aeabi_dmul>
  409cf4:	2200      	movs	r2, #0
  409cf6:	2300      	movs	r3, #0
  409cf8:	4606      	mov	r6, r0
  409cfa:	460f      	mov	r7, r1
  409cfc:	f003 fac6 	bl	40d28c <__aeabi_dcmpeq>
  409d00:	2800      	cmp	r0, #0
  409d02:	f040 83c1 	bne.w	40a488 <_dtoa_r+0xa60>
  409d06:	4642      	mov	r2, r8
  409d08:	464b      	mov	r3, r9
  409d0a:	4630      	mov	r0, r6
  409d0c:	4639      	mov	r1, r7
  409d0e:	f003 f97f 	bl	40d010 <__aeabi_ddiv>
  409d12:	f003 fb03 	bl	40d31c <__aeabi_d2iz>
  409d16:	4604      	mov	r4, r0
  409d18:	f002 ffea 	bl	40ccf0 <__aeabi_i2d>
  409d1c:	4642      	mov	r2, r8
  409d1e:	464b      	mov	r3, r9
  409d20:	f003 f84c 	bl	40cdbc <__aeabi_dmul>
  409d24:	4602      	mov	r2, r0
  409d26:	460b      	mov	r3, r1
  409d28:	4630      	mov	r0, r6
  409d2a:	4639      	mov	r1, r7
  409d2c:	f002 fe92 	bl	40ca54 <__aeabi_dsub>
  409d30:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  409d34:	9e04      	ldr	r6, [sp, #16]
  409d36:	f805 eb01 	strb.w	lr, [r5], #1
  409d3a:	eba5 0e06 	sub.w	lr, r5, r6
  409d3e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  409d40:	45b6      	cmp	lr, r6
  409d42:	e9cd 0106 	strd	r0, r1, [sp, #24]
  409d46:	4652      	mov	r2, sl
  409d48:	465b      	mov	r3, fp
  409d4a:	d1d1      	bne.n	409cf0 <_dtoa_r+0x2c8>
  409d4c:	46a0      	mov	r8, r4
  409d4e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  409d52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  409d54:	4606      	mov	r6, r0
  409d56:	460f      	mov	r7, r1
  409d58:	4632      	mov	r2, r6
  409d5a:	463b      	mov	r3, r7
  409d5c:	4630      	mov	r0, r6
  409d5e:	4639      	mov	r1, r7
  409d60:	f002 fe7a 	bl	40ca58 <__adddf3>
  409d64:	4606      	mov	r6, r0
  409d66:	460f      	mov	r7, r1
  409d68:	4602      	mov	r2, r0
  409d6a:	460b      	mov	r3, r1
  409d6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409d70:	f003 fa96 	bl	40d2a0 <__aeabi_dcmplt>
  409d74:	b948      	cbnz	r0, 409d8a <_dtoa_r+0x362>
  409d76:	4632      	mov	r2, r6
  409d78:	463b      	mov	r3, r7
  409d7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409d7e:	f003 fa85 	bl	40d28c <__aeabi_dcmpeq>
  409d82:	b1a8      	cbz	r0, 409db0 <_dtoa_r+0x388>
  409d84:	f018 0f01 	tst.w	r8, #1
  409d88:	d012      	beq.n	409db0 <_dtoa_r+0x388>
  409d8a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409d8e:	9a04      	ldr	r2, [sp, #16]
  409d90:	1e6b      	subs	r3, r5, #1
  409d92:	e004      	b.n	409d9e <_dtoa_r+0x376>
  409d94:	429a      	cmp	r2, r3
  409d96:	f000 8401 	beq.w	40a59c <_dtoa_r+0xb74>
  409d9a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  409d9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  409da2:	f103 0501 	add.w	r5, r3, #1
  409da6:	d0f5      	beq.n	409d94 <_dtoa_r+0x36c>
  409da8:	f108 0801 	add.w	r8, r8, #1
  409dac:	f883 8000 	strb.w	r8, [r3]
  409db0:	4649      	mov	r1, r9
  409db2:	4620      	mov	r0, r4
  409db4:	f001 fe8a 	bl	40bacc <_Bfree>
  409db8:	2200      	movs	r2, #0
  409dba:	9b02      	ldr	r3, [sp, #8]
  409dbc:	702a      	strb	r2, [r5, #0]
  409dbe:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409dc0:	3301      	adds	r3, #1
  409dc2:	6013      	str	r3, [r2, #0]
  409dc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409dc6:	2b00      	cmp	r3, #0
  409dc8:	f000 839e 	beq.w	40a508 <_dtoa_r+0xae0>
  409dcc:	9804      	ldr	r0, [sp, #16]
  409dce:	601d      	str	r5, [r3, #0]
  409dd0:	b01b      	add	sp, #108	; 0x6c
  409dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409dd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409dd8:	2a00      	cmp	r2, #0
  409dda:	d03e      	beq.n	409e5a <_dtoa_r+0x432>
  409ddc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409dde:	2a01      	cmp	r2, #1
  409de0:	f340 8311 	ble.w	40a406 <_dtoa_r+0x9de>
  409de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409de6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409de8:	1e5f      	subs	r7, r3, #1
  409dea:	42ba      	cmp	r2, r7
  409dec:	f2c0 838f 	blt.w	40a50e <_dtoa_r+0xae6>
  409df0:	1bd7      	subs	r7, r2, r7
  409df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409df4:	2b00      	cmp	r3, #0
  409df6:	f2c0 848b 	blt.w	40a710 <_dtoa_r+0xce8>
  409dfa:	9d08      	ldr	r5, [sp, #32]
  409dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409dfe:	9a08      	ldr	r2, [sp, #32]
  409e00:	441a      	add	r2, r3
  409e02:	9208      	str	r2, [sp, #32]
  409e04:	9a06      	ldr	r2, [sp, #24]
  409e06:	2101      	movs	r1, #1
  409e08:	441a      	add	r2, r3
  409e0a:	4620      	mov	r0, r4
  409e0c:	9206      	str	r2, [sp, #24]
  409e0e:	f001 fef7 	bl	40bc00 <__i2b>
  409e12:	4606      	mov	r6, r0
  409e14:	e024      	b.n	409e60 <_dtoa_r+0x438>
  409e16:	2301      	movs	r3, #1
  409e18:	930e      	str	r3, [sp, #56]	; 0x38
  409e1a:	e6af      	b.n	409b7c <_dtoa_r+0x154>
  409e1c:	9a08      	ldr	r2, [sp, #32]
  409e1e:	9b02      	ldr	r3, [sp, #8]
  409e20:	1ad2      	subs	r2, r2, r3
  409e22:	425b      	negs	r3, r3
  409e24:	930c      	str	r3, [sp, #48]	; 0x30
  409e26:	2300      	movs	r3, #0
  409e28:	9208      	str	r2, [sp, #32]
  409e2a:	930d      	str	r3, [sp, #52]	; 0x34
  409e2c:	e6b8      	b.n	409ba0 <_dtoa_r+0x178>
  409e2e:	f1c7 0301 	rsb	r3, r7, #1
  409e32:	9308      	str	r3, [sp, #32]
  409e34:	2300      	movs	r3, #0
  409e36:	9306      	str	r3, [sp, #24]
  409e38:	e6a7      	b.n	409b8a <_dtoa_r+0x162>
  409e3a:	9d02      	ldr	r5, [sp, #8]
  409e3c:	4628      	mov	r0, r5
  409e3e:	f002 ff57 	bl	40ccf0 <__aeabi_i2d>
  409e42:	4602      	mov	r2, r0
  409e44:	460b      	mov	r3, r1
  409e46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409e4a:	f003 fa1f 	bl	40d28c <__aeabi_dcmpeq>
  409e4e:	2800      	cmp	r0, #0
  409e50:	f47f ae80 	bne.w	409b54 <_dtoa_r+0x12c>
  409e54:	1e6b      	subs	r3, r5, #1
  409e56:	9302      	str	r3, [sp, #8]
  409e58:	e67c      	b.n	409b54 <_dtoa_r+0x12c>
  409e5a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409e5c:	9d08      	ldr	r5, [sp, #32]
  409e5e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  409e60:	2d00      	cmp	r5, #0
  409e62:	dd0c      	ble.n	409e7e <_dtoa_r+0x456>
  409e64:	9906      	ldr	r1, [sp, #24]
  409e66:	2900      	cmp	r1, #0
  409e68:	460b      	mov	r3, r1
  409e6a:	dd08      	ble.n	409e7e <_dtoa_r+0x456>
  409e6c:	42a9      	cmp	r1, r5
  409e6e:	9a08      	ldr	r2, [sp, #32]
  409e70:	bfa8      	it	ge
  409e72:	462b      	movge	r3, r5
  409e74:	1ad2      	subs	r2, r2, r3
  409e76:	1aed      	subs	r5, r5, r3
  409e78:	1acb      	subs	r3, r1, r3
  409e7a:	9208      	str	r2, [sp, #32]
  409e7c:	9306      	str	r3, [sp, #24]
  409e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409e80:	b1d3      	cbz	r3, 409eb8 <_dtoa_r+0x490>
  409e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409e84:	2b00      	cmp	r3, #0
  409e86:	f000 82b7 	beq.w	40a3f8 <_dtoa_r+0x9d0>
  409e8a:	2f00      	cmp	r7, #0
  409e8c:	dd10      	ble.n	409eb0 <_dtoa_r+0x488>
  409e8e:	4631      	mov	r1, r6
  409e90:	463a      	mov	r2, r7
  409e92:	4620      	mov	r0, r4
  409e94:	f001 ff50 	bl	40bd38 <__pow5mult>
  409e98:	464a      	mov	r2, r9
  409e9a:	4601      	mov	r1, r0
  409e9c:	4606      	mov	r6, r0
  409e9e:	4620      	mov	r0, r4
  409ea0:	f001 feb8 	bl	40bc14 <__multiply>
  409ea4:	4649      	mov	r1, r9
  409ea6:	4680      	mov	r8, r0
  409ea8:	4620      	mov	r0, r4
  409eaa:	f001 fe0f 	bl	40bacc <_Bfree>
  409eae:	46c1      	mov	r9, r8
  409eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409eb2:	1bda      	subs	r2, r3, r7
  409eb4:	f040 82a1 	bne.w	40a3fa <_dtoa_r+0x9d2>
  409eb8:	2101      	movs	r1, #1
  409eba:	4620      	mov	r0, r4
  409ebc:	f001 fea0 	bl	40bc00 <__i2b>
  409ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409ec2:	2b00      	cmp	r3, #0
  409ec4:	4680      	mov	r8, r0
  409ec6:	dd1c      	ble.n	409f02 <_dtoa_r+0x4da>
  409ec8:	4601      	mov	r1, r0
  409eca:	461a      	mov	r2, r3
  409ecc:	4620      	mov	r0, r4
  409ece:	f001 ff33 	bl	40bd38 <__pow5mult>
  409ed2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409ed4:	2b01      	cmp	r3, #1
  409ed6:	4680      	mov	r8, r0
  409ed8:	f340 8254 	ble.w	40a384 <_dtoa_r+0x95c>
  409edc:	2300      	movs	r3, #0
  409ede:	930c      	str	r3, [sp, #48]	; 0x30
  409ee0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409ee4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  409ee8:	6918      	ldr	r0, [r3, #16]
  409eea:	f001 fe39 	bl	40bb60 <__hi0bits>
  409eee:	f1c0 0020 	rsb	r0, r0, #32
  409ef2:	e010      	b.n	409f16 <_dtoa_r+0x4ee>
  409ef4:	f1c3 0520 	rsb	r5, r3, #32
  409ef8:	fa0a f005 	lsl.w	r0, sl, r5
  409efc:	e674      	b.n	409be8 <_dtoa_r+0x1c0>
  409efe:	900e      	str	r0, [sp, #56]	; 0x38
  409f00:	e63c      	b.n	409b7c <_dtoa_r+0x154>
  409f02:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409f04:	2b01      	cmp	r3, #1
  409f06:	f340 8287 	ble.w	40a418 <_dtoa_r+0x9f0>
  409f0a:	2300      	movs	r3, #0
  409f0c:	930c      	str	r3, [sp, #48]	; 0x30
  409f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409f10:	2001      	movs	r0, #1
  409f12:	2b00      	cmp	r3, #0
  409f14:	d1e4      	bne.n	409ee0 <_dtoa_r+0x4b8>
  409f16:	9a06      	ldr	r2, [sp, #24]
  409f18:	4410      	add	r0, r2
  409f1a:	f010 001f 	ands.w	r0, r0, #31
  409f1e:	f000 80a1 	beq.w	40a064 <_dtoa_r+0x63c>
  409f22:	f1c0 0320 	rsb	r3, r0, #32
  409f26:	2b04      	cmp	r3, #4
  409f28:	f340 849e 	ble.w	40a868 <_dtoa_r+0xe40>
  409f2c:	9b08      	ldr	r3, [sp, #32]
  409f2e:	f1c0 001c 	rsb	r0, r0, #28
  409f32:	4403      	add	r3, r0
  409f34:	9308      	str	r3, [sp, #32]
  409f36:	4613      	mov	r3, r2
  409f38:	4403      	add	r3, r0
  409f3a:	4405      	add	r5, r0
  409f3c:	9306      	str	r3, [sp, #24]
  409f3e:	9b08      	ldr	r3, [sp, #32]
  409f40:	2b00      	cmp	r3, #0
  409f42:	dd05      	ble.n	409f50 <_dtoa_r+0x528>
  409f44:	4649      	mov	r1, r9
  409f46:	461a      	mov	r2, r3
  409f48:	4620      	mov	r0, r4
  409f4a:	f001 ff45 	bl	40bdd8 <__lshift>
  409f4e:	4681      	mov	r9, r0
  409f50:	9b06      	ldr	r3, [sp, #24]
  409f52:	2b00      	cmp	r3, #0
  409f54:	dd05      	ble.n	409f62 <_dtoa_r+0x53a>
  409f56:	4641      	mov	r1, r8
  409f58:	461a      	mov	r2, r3
  409f5a:	4620      	mov	r0, r4
  409f5c:	f001 ff3c 	bl	40bdd8 <__lshift>
  409f60:	4680      	mov	r8, r0
  409f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409f64:	2b00      	cmp	r3, #0
  409f66:	f040 8086 	bne.w	40a076 <_dtoa_r+0x64e>
  409f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409f6c:	2b00      	cmp	r3, #0
  409f6e:	f340 8266 	ble.w	40a43e <_dtoa_r+0xa16>
  409f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409f74:	2b00      	cmp	r3, #0
  409f76:	f000 8098 	beq.w	40a0aa <_dtoa_r+0x682>
  409f7a:	2d00      	cmp	r5, #0
  409f7c:	dd05      	ble.n	409f8a <_dtoa_r+0x562>
  409f7e:	4631      	mov	r1, r6
  409f80:	462a      	mov	r2, r5
  409f82:	4620      	mov	r0, r4
  409f84:	f001 ff28 	bl	40bdd8 <__lshift>
  409f88:	4606      	mov	r6, r0
  409f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409f8c:	2b00      	cmp	r3, #0
  409f8e:	f040 8337 	bne.w	40a600 <_dtoa_r+0xbd8>
  409f92:	9606      	str	r6, [sp, #24]
  409f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409f96:	9a04      	ldr	r2, [sp, #16]
  409f98:	f8dd b018 	ldr.w	fp, [sp, #24]
  409f9c:	3b01      	subs	r3, #1
  409f9e:	18d3      	adds	r3, r2, r3
  409fa0:	930b      	str	r3, [sp, #44]	; 0x2c
  409fa2:	f00a 0301 	and.w	r3, sl, #1
  409fa6:	930c      	str	r3, [sp, #48]	; 0x30
  409fa8:	4617      	mov	r7, r2
  409faa:	46c2      	mov	sl, r8
  409fac:	4651      	mov	r1, sl
  409fae:	4648      	mov	r0, r9
  409fb0:	f7ff fca4 	bl	4098fc <quorem>
  409fb4:	4631      	mov	r1, r6
  409fb6:	4605      	mov	r5, r0
  409fb8:	4648      	mov	r0, r9
  409fba:	f001 ff5f 	bl	40be7c <__mcmp>
  409fbe:	465a      	mov	r2, fp
  409fc0:	900a      	str	r0, [sp, #40]	; 0x28
  409fc2:	4651      	mov	r1, sl
  409fc4:	4620      	mov	r0, r4
  409fc6:	f001 ff75 	bl	40beb4 <__mdiff>
  409fca:	68c2      	ldr	r2, [r0, #12]
  409fcc:	4680      	mov	r8, r0
  409fce:	f105 0330 	add.w	r3, r5, #48	; 0x30
  409fd2:	2a00      	cmp	r2, #0
  409fd4:	f040 822b 	bne.w	40a42e <_dtoa_r+0xa06>
  409fd8:	4601      	mov	r1, r0
  409fda:	4648      	mov	r0, r9
  409fdc:	9308      	str	r3, [sp, #32]
  409fde:	f001 ff4d 	bl	40be7c <__mcmp>
  409fe2:	4641      	mov	r1, r8
  409fe4:	9006      	str	r0, [sp, #24]
  409fe6:	4620      	mov	r0, r4
  409fe8:	f001 fd70 	bl	40bacc <_Bfree>
  409fec:	9a06      	ldr	r2, [sp, #24]
  409fee:	9b08      	ldr	r3, [sp, #32]
  409ff0:	b932      	cbnz	r2, 40a000 <_dtoa_r+0x5d8>
  409ff2:	9924      	ldr	r1, [sp, #144]	; 0x90
  409ff4:	b921      	cbnz	r1, 40a000 <_dtoa_r+0x5d8>
  409ff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409ff8:	2a00      	cmp	r2, #0
  409ffa:	f000 83ef 	beq.w	40a7dc <_dtoa_r+0xdb4>
  409ffe:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a000:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a002:	2900      	cmp	r1, #0
  40a004:	f2c0 829f 	blt.w	40a546 <_dtoa_r+0xb1e>
  40a008:	d105      	bne.n	40a016 <_dtoa_r+0x5ee>
  40a00a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40a00c:	b919      	cbnz	r1, 40a016 <_dtoa_r+0x5ee>
  40a00e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40a010:	2900      	cmp	r1, #0
  40a012:	f000 8298 	beq.w	40a546 <_dtoa_r+0xb1e>
  40a016:	2a00      	cmp	r2, #0
  40a018:	f300 8306 	bgt.w	40a628 <_dtoa_r+0xc00>
  40a01c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a01e:	703b      	strb	r3, [r7, #0]
  40a020:	f107 0801 	add.w	r8, r7, #1
  40a024:	4297      	cmp	r7, r2
  40a026:	4645      	mov	r5, r8
  40a028:	f000 830c 	beq.w	40a644 <_dtoa_r+0xc1c>
  40a02c:	4649      	mov	r1, r9
  40a02e:	2300      	movs	r3, #0
  40a030:	220a      	movs	r2, #10
  40a032:	4620      	mov	r0, r4
  40a034:	f001 fd54 	bl	40bae0 <__multadd>
  40a038:	455e      	cmp	r6, fp
  40a03a:	4681      	mov	r9, r0
  40a03c:	4631      	mov	r1, r6
  40a03e:	f04f 0300 	mov.w	r3, #0
  40a042:	f04f 020a 	mov.w	r2, #10
  40a046:	4620      	mov	r0, r4
  40a048:	f000 81eb 	beq.w	40a422 <_dtoa_r+0x9fa>
  40a04c:	f001 fd48 	bl	40bae0 <__multadd>
  40a050:	4659      	mov	r1, fp
  40a052:	4606      	mov	r6, r0
  40a054:	2300      	movs	r3, #0
  40a056:	220a      	movs	r2, #10
  40a058:	4620      	mov	r0, r4
  40a05a:	f001 fd41 	bl	40bae0 <__multadd>
  40a05e:	4647      	mov	r7, r8
  40a060:	4683      	mov	fp, r0
  40a062:	e7a3      	b.n	409fac <_dtoa_r+0x584>
  40a064:	201c      	movs	r0, #28
  40a066:	9b08      	ldr	r3, [sp, #32]
  40a068:	4403      	add	r3, r0
  40a06a:	9308      	str	r3, [sp, #32]
  40a06c:	9b06      	ldr	r3, [sp, #24]
  40a06e:	4403      	add	r3, r0
  40a070:	4405      	add	r5, r0
  40a072:	9306      	str	r3, [sp, #24]
  40a074:	e763      	b.n	409f3e <_dtoa_r+0x516>
  40a076:	4641      	mov	r1, r8
  40a078:	4648      	mov	r0, r9
  40a07a:	f001 feff 	bl	40be7c <__mcmp>
  40a07e:	2800      	cmp	r0, #0
  40a080:	f6bf af73 	bge.w	409f6a <_dtoa_r+0x542>
  40a084:	9f02      	ldr	r7, [sp, #8]
  40a086:	4649      	mov	r1, r9
  40a088:	2300      	movs	r3, #0
  40a08a:	220a      	movs	r2, #10
  40a08c:	4620      	mov	r0, r4
  40a08e:	3f01      	subs	r7, #1
  40a090:	9702      	str	r7, [sp, #8]
  40a092:	f001 fd25 	bl	40bae0 <__multadd>
  40a096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a098:	4681      	mov	r9, r0
  40a09a:	2b00      	cmp	r3, #0
  40a09c:	f040 83b6 	bne.w	40a80c <_dtoa_r+0xde4>
  40a0a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a0a2:	2b00      	cmp	r3, #0
  40a0a4:	f340 83bf 	ble.w	40a826 <_dtoa_r+0xdfe>
  40a0a8:	930a      	str	r3, [sp, #40]	; 0x28
  40a0aa:	f8dd b010 	ldr.w	fp, [sp, #16]
  40a0ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40a0b0:	465d      	mov	r5, fp
  40a0b2:	e002      	b.n	40a0ba <_dtoa_r+0x692>
  40a0b4:	f001 fd14 	bl	40bae0 <__multadd>
  40a0b8:	4681      	mov	r9, r0
  40a0ba:	4641      	mov	r1, r8
  40a0bc:	4648      	mov	r0, r9
  40a0be:	f7ff fc1d 	bl	4098fc <quorem>
  40a0c2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40a0c6:	f805 ab01 	strb.w	sl, [r5], #1
  40a0ca:	eba5 030b 	sub.w	r3, r5, fp
  40a0ce:	42bb      	cmp	r3, r7
  40a0d0:	f04f 020a 	mov.w	r2, #10
  40a0d4:	f04f 0300 	mov.w	r3, #0
  40a0d8:	4649      	mov	r1, r9
  40a0da:	4620      	mov	r0, r4
  40a0dc:	dbea      	blt.n	40a0b4 <_dtoa_r+0x68c>
  40a0de:	9b04      	ldr	r3, [sp, #16]
  40a0e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a0e2:	2a01      	cmp	r2, #1
  40a0e4:	bfac      	ite	ge
  40a0e6:	189b      	addge	r3, r3, r2
  40a0e8:	3301      	addlt	r3, #1
  40a0ea:	461d      	mov	r5, r3
  40a0ec:	f04f 0b00 	mov.w	fp, #0
  40a0f0:	4649      	mov	r1, r9
  40a0f2:	2201      	movs	r2, #1
  40a0f4:	4620      	mov	r0, r4
  40a0f6:	f001 fe6f 	bl	40bdd8 <__lshift>
  40a0fa:	4641      	mov	r1, r8
  40a0fc:	4681      	mov	r9, r0
  40a0fe:	f001 febd 	bl	40be7c <__mcmp>
  40a102:	2800      	cmp	r0, #0
  40a104:	f340 823d 	ble.w	40a582 <_dtoa_r+0xb5a>
  40a108:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40a10c:	9904      	ldr	r1, [sp, #16]
  40a10e:	1e6b      	subs	r3, r5, #1
  40a110:	e004      	b.n	40a11c <_dtoa_r+0x6f4>
  40a112:	428b      	cmp	r3, r1
  40a114:	f000 81ae 	beq.w	40a474 <_dtoa_r+0xa4c>
  40a118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40a11c:	2a39      	cmp	r2, #57	; 0x39
  40a11e:	f103 0501 	add.w	r5, r3, #1
  40a122:	d0f6      	beq.n	40a112 <_dtoa_r+0x6ea>
  40a124:	3201      	adds	r2, #1
  40a126:	701a      	strb	r2, [r3, #0]
  40a128:	4641      	mov	r1, r8
  40a12a:	4620      	mov	r0, r4
  40a12c:	f001 fcce 	bl	40bacc <_Bfree>
  40a130:	2e00      	cmp	r6, #0
  40a132:	f43f ae3d 	beq.w	409db0 <_dtoa_r+0x388>
  40a136:	f1bb 0f00 	cmp.w	fp, #0
  40a13a:	d005      	beq.n	40a148 <_dtoa_r+0x720>
  40a13c:	45b3      	cmp	fp, r6
  40a13e:	d003      	beq.n	40a148 <_dtoa_r+0x720>
  40a140:	4659      	mov	r1, fp
  40a142:	4620      	mov	r0, r4
  40a144:	f001 fcc2 	bl	40bacc <_Bfree>
  40a148:	4631      	mov	r1, r6
  40a14a:	4620      	mov	r0, r4
  40a14c:	f001 fcbe 	bl	40bacc <_Bfree>
  40a150:	e62e      	b.n	409db0 <_dtoa_r+0x388>
  40a152:	2300      	movs	r3, #0
  40a154:	930b      	str	r3, [sp, #44]	; 0x2c
  40a156:	9b02      	ldr	r3, [sp, #8]
  40a158:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a15a:	4413      	add	r3, r2
  40a15c:	930f      	str	r3, [sp, #60]	; 0x3c
  40a15e:	3301      	adds	r3, #1
  40a160:	2b01      	cmp	r3, #1
  40a162:	461f      	mov	r7, r3
  40a164:	461e      	mov	r6, r3
  40a166:	930a      	str	r3, [sp, #40]	; 0x28
  40a168:	bfb8      	it	lt
  40a16a:	2701      	movlt	r7, #1
  40a16c:	2100      	movs	r1, #0
  40a16e:	2f17      	cmp	r7, #23
  40a170:	6461      	str	r1, [r4, #68]	; 0x44
  40a172:	d90a      	bls.n	40a18a <_dtoa_r+0x762>
  40a174:	2201      	movs	r2, #1
  40a176:	2304      	movs	r3, #4
  40a178:	005b      	lsls	r3, r3, #1
  40a17a:	f103 0014 	add.w	r0, r3, #20
  40a17e:	4287      	cmp	r7, r0
  40a180:	4611      	mov	r1, r2
  40a182:	f102 0201 	add.w	r2, r2, #1
  40a186:	d2f7      	bcs.n	40a178 <_dtoa_r+0x750>
  40a188:	6461      	str	r1, [r4, #68]	; 0x44
  40a18a:	4620      	mov	r0, r4
  40a18c:	f001 fc78 	bl	40ba80 <_Balloc>
  40a190:	2e0e      	cmp	r6, #14
  40a192:	9004      	str	r0, [sp, #16]
  40a194:	6420      	str	r0, [r4, #64]	; 0x40
  40a196:	f63f ad41 	bhi.w	409c1c <_dtoa_r+0x1f4>
  40a19a:	2d00      	cmp	r5, #0
  40a19c:	f43f ad3e 	beq.w	409c1c <_dtoa_r+0x1f4>
  40a1a0:	9902      	ldr	r1, [sp, #8]
  40a1a2:	2900      	cmp	r1, #0
  40a1a4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40a1a8:	f340 8202 	ble.w	40a5b0 <_dtoa_r+0xb88>
  40a1ac:	4bb8      	ldr	r3, [pc, #736]	; (40a490 <_dtoa_r+0xa68>)
  40a1ae:	f001 020f 	and.w	r2, r1, #15
  40a1b2:	110d      	asrs	r5, r1, #4
  40a1b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a1b8:	06e9      	lsls	r1, r5, #27
  40a1ba:	e9d3 6700 	ldrd	r6, r7, [r3]
  40a1be:	f140 81ae 	bpl.w	40a51e <_dtoa_r+0xaf6>
  40a1c2:	4bb4      	ldr	r3, [pc, #720]	; (40a494 <_dtoa_r+0xa6c>)
  40a1c4:	4650      	mov	r0, sl
  40a1c6:	4659      	mov	r1, fp
  40a1c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40a1cc:	f002 ff20 	bl	40d010 <__aeabi_ddiv>
  40a1d0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40a1d4:	f005 050f 	and.w	r5, r5, #15
  40a1d8:	f04f 0a03 	mov.w	sl, #3
  40a1dc:	b18d      	cbz	r5, 40a202 <_dtoa_r+0x7da>
  40a1de:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40a494 <_dtoa_r+0xa6c>
  40a1e2:	07ea      	lsls	r2, r5, #31
  40a1e4:	d509      	bpl.n	40a1fa <_dtoa_r+0x7d2>
  40a1e6:	4630      	mov	r0, r6
  40a1e8:	4639      	mov	r1, r7
  40a1ea:	e9d8 2300 	ldrd	r2, r3, [r8]
  40a1ee:	f002 fde5 	bl	40cdbc <__aeabi_dmul>
  40a1f2:	f10a 0a01 	add.w	sl, sl, #1
  40a1f6:	4606      	mov	r6, r0
  40a1f8:	460f      	mov	r7, r1
  40a1fa:	106d      	asrs	r5, r5, #1
  40a1fc:	f108 0808 	add.w	r8, r8, #8
  40a200:	d1ef      	bne.n	40a1e2 <_dtoa_r+0x7ba>
  40a202:	463b      	mov	r3, r7
  40a204:	4632      	mov	r2, r6
  40a206:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40a20a:	f002 ff01 	bl	40d010 <__aeabi_ddiv>
  40a20e:	4607      	mov	r7, r0
  40a210:	4688      	mov	r8, r1
  40a212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a214:	b143      	cbz	r3, 40a228 <_dtoa_r+0x800>
  40a216:	2200      	movs	r2, #0
  40a218:	4b9f      	ldr	r3, [pc, #636]	; (40a498 <_dtoa_r+0xa70>)
  40a21a:	4638      	mov	r0, r7
  40a21c:	4641      	mov	r1, r8
  40a21e:	f003 f83f 	bl	40d2a0 <__aeabi_dcmplt>
  40a222:	2800      	cmp	r0, #0
  40a224:	f040 8286 	bne.w	40a734 <_dtoa_r+0xd0c>
  40a228:	4650      	mov	r0, sl
  40a22a:	f002 fd61 	bl	40ccf0 <__aeabi_i2d>
  40a22e:	463a      	mov	r2, r7
  40a230:	4643      	mov	r3, r8
  40a232:	f002 fdc3 	bl	40cdbc <__aeabi_dmul>
  40a236:	4b99      	ldr	r3, [pc, #612]	; (40a49c <_dtoa_r+0xa74>)
  40a238:	2200      	movs	r2, #0
  40a23a:	f002 fc0d 	bl	40ca58 <__adddf3>
  40a23e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a240:	4605      	mov	r5, r0
  40a242:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40a246:	2b00      	cmp	r3, #0
  40a248:	f000 813e 	beq.w	40a4c8 <_dtoa_r+0xaa0>
  40a24c:	9b02      	ldr	r3, [sp, #8]
  40a24e:	9315      	str	r3, [sp, #84]	; 0x54
  40a250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a252:	9312      	str	r3, [sp, #72]	; 0x48
  40a254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a256:	2b00      	cmp	r3, #0
  40a258:	f000 81fa 	beq.w	40a650 <_dtoa_r+0xc28>
  40a25c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40a25e:	4b8c      	ldr	r3, [pc, #560]	; (40a490 <_dtoa_r+0xa68>)
  40a260:	498f      	ldr	r1, [pc, #572]	; (40a4a0 <_dtoa_r+0xa78>)
  40a262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a266:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40a26a:	2000      	movs	r0, #0
  40a26c:	f002 fed0 	bl	40d010 <__aeabi_ddiv>
  40a270:	462a      	mov	r2, r5
  40a272:	4633      	mov	r3, r6
  40a274:	f002 fbee 	bl	40ca54 <__aeabi_dsub>
  40a278:	4682      	mov	sl, r0
  40a27a:	468b      	mov	fp, r1
  40a27c:	4638      	mov	r0, r7
  40a27e:	4641      	mov	r1, r8
  40a280:	f003 f84c 	bl	40d31c <__aeabi_d2iz>
  40a284:	4605      	mov	r5, r0
  40a286:	f002 fd33 	bl	40ccf0 <__aeabi_i2d>
  40a28a:	4602      	mov	r2, r0
  40a28c:	460b      	mov	r3, r1
  40a28e:	4638      	mov	r0, r7
  40a290:	4641      	mov	r1, r8
  40a292:	f002 fbdf 	bl	40ca54 <__aeabi_dsub>
  40a296:	3530      	adds	r5, #48	; 0x30
  40a298:	fa5f f885 	uxtb.w	r8, r5
  40a29c:	9d04      	ldr	r5, [sp, #16]
  40a29e:	4606      	mov	r6, r0
  40a2a0:	460f      	mov	r7, r1
  40a2a2:	f885 8000 	strb.w	r8, [r5]
  40a2a6:	4602      	mov	r2, r0
  40a2a8:	460b      	mov	r3, r1
  40a2aa:	4650      	mov	r0, sl
  40a2ac:	4659      	mov	r1, fp
  40a2ae:	3501      	adds	r5, #1
  40a2b0:	f003 f814 	bl	40d2dc <__aeabi_dcmpgt>
  40a2b4:	2800      	cmp	r0, #0
  40a2b6:	d154      	bne.n	40a362 <_dtoa_r+0x93a>
  40a2b8:	4632      	mov	r2, r6
  40a2ba:	463b      	mov	r3, r7
  40a2bc:	2000      	movs	r0, #0
  40a2be:	4976      	ldr	r1, [pc, #472]	; (40a498 <_dtoa_r+0xa70>)
  40a2c0:	f002 fbc8 	bl	40ca54 <__aeabi_dsub>
  40a2c4:	4602      	mov	r2, r0
  40a2c6:	460b      	mov	r3, r1
  40a2c8:	4650      	mov	r0, sl
  40a2ca:	4659      	mov	r1, fp
  40a2cc:	f003 f806 	bl	40d2dc <__aeabi_dcmpgt>
  40a2d0:	2800      	cmp	r0, #0
  40a2d2:	f040 8270 	bne.w	40a7b6 <_dtoa_r+0xd8e>
  40a2d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40a2d8:	2a01      	cmp	r2, #1
  40a2da:	f000 8111 	beq.w	40a500 <_dtoa_r+0xad8>
  40a2de:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a2e0:	9a04      	ldr	r2, [sp, #16]
  40a2e2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40a2e6:	4413      	add	r3, r2
  40a2e8:	4699      	mov	r9, r3
  40a2ea:	e00d      	b.n	40a308 <_dtoa_r+0x8e0>
  40a2ec:	2000      	movs	r0, #0
  40a2ee:	496a      	ldr	r1, [pc, #424]	; (40a498 <_dtoa_r+0xa70>)
  40a2f0:	f002 fbb0 	bl	40ca54 <__aeabi_dsub>
  40a2f4:	4652      	mov	r2, sl
  40a2f6:	465b      	mov	r3, fp
  40a2f8:	f002 ffd2 	bl	40d2a0 <__aeabi_dcmplt>
  40a2fc:	2800      	cmp	r0, #0
  40a2fe:	f040 8258 	bne.w	40a7b2 <_dtoa_r+0xd8a>
  40a302:	454d      	cmp	r5, r9
  40a304:	f000 80fa 	beq.w	40a4fc <_dtoa_r+0xad4>
  40a308:	4650      	mov	r0, sl
  40a30a:	4659      	mov	r1, fp
  40a30c:	2200      	movs	r2, #0
  40a30e:	4b65      	ldr	r3, [pc, #404]	; (40a4a4 <_dtoa_r+0xa7c>)
  40a310:	f002 fd54 	bl	40cdbc <__aeabi_dmul>
  40a314:	2200      	movs	r2, #0
  40a316:	4b63      	ldr	r3, [pc, #396]	; (40a4a4 <_dtoa_r+0xa7c>)
  40a318:	4682      	mov	sl, r0
  40a31a:	468b      	mov	fp, r1
  40a31c:	4630      	mov	r0, r6
  40a31e:	4639      	mov	r1, r7
  40a320:	f002 fd4c 	bl	40cdbc <__aeabi_dmul>
  40a324:	460f      	mov	r7, r1
  40a326:	4606      	mov	r6, r0
  40a328:	f002 fff8 	bl	40d31c <__aeabi_d2iz>
  40a32c:	4680      	mov	r8, r0
  40a32e:	f002 fcdf 	bl	40ccf0 <__aeabi_i2d>
  40a332:	4602      	mov	r2, r0
  40a334:	460b      	mov	r3, r1
  40a336:	4630      	mov	r0, r6
  40a338:	4639      	mov	r1, r7
  40a33a:	f002 fb8b 	bl	40ca54 <__aeabi_dsub>
  40a33e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40a342:	fa5f f888 	uxtb.w	r8, r8
  40a346:	4652      	mov	r2, sl
  40a348:	465b      	mov	r3, fp
  40a34a:	f805 8b01 	strb.w	r8, [r5], #1
  40a34e:	4606      	mov	r6, r0
  40a350:	460f      	mov	r7, r1
  40a352:	f002 ffa5 	bl	40d2a0 <__aeabi_dcmplt>
  40a356:	4632      	mov	r2, r6
  40a358:	463b      	mov	r3, r7
  40a35a:	2800      	cmp	r0, #0
  40a35c:	d0c6      	beq.n	40a2ec <_dtoa_r+0x8c4>
  40a35e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40a362:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a364:	9302      	str	r3, [sp, #8]
  40a366:	e523      	b.n	409db0 <_dtoa_r+0x388>
  40a368:	2300      	movs	r3, #0
  40a36a:	930b      	str	r3, [sp, #44]	; 0x2c
  40a36c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a36e:	2b00      	cmp	r3, #0
  40a370:	f340 80dc 	ble.w	40a52c <_dtoa_r+0xb04>
  40a374:	461f      	mov	r7, r3
  40a376:	461e      	mov	r6, r3
  40a378:	930f      	str	r3, [sp, #60]	; 0x3c
  40a37a:	930a      	str	r3, [sp, #40]	; 0x28
  40a37c:	e6f6      	b.n	40a16c <_dtoa_r+0x744>
  40a37e:	2301      	movs	r3, #1
  40a380:	930b      	str	r3, [sp, #44]	; 0x2c
  40a382:	e7f3      	b.n	40a36c <_dtoa_r+0x944>
  40a384:	f1ba 0f00 	cmp.w	sl, #0
  40a388:	f47f ada8 	bne.w	409edc <_dtoa_r+0x4b4>
  40a38c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40a390:	2b00      	cmp	r3, #0
  40a392:	f47f adba 	bne.w	409f0a <_dtoa_r+0x4e2>
  40a396:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40a39a:	0d3f      	lsrs	r7, r7, #20
  40a39c:	053f      	lsls	r7, r7, #20
  40a39e:	2f00      	cmp	r7, #0
  40a3a0:	f000 820d 	beq.w	40a7be <_dtoa_r+0xd96>
  40a3a4:	9b08      	ldr	r3, [sp, #32]
  40a3a6:	3301      	adds	r3, #1
  40a3a8:	9308      	str	r3, [sp, #32]
  40a3aa:	9b06      	ldr	r3, [sp, #24]
  40a3ac:	3301      	adds	r3, #1
  40a3ae:	9306      	str	r3, [sp, #24]
  40a3b0:	2301      	movs	r3, #1
  40a3b2:	930c      	str	r3, [sp, #48]	; 0x30
  40a3b4:	e5ab      	b.n	409f0e <_dtoa_r+0x4e6>
  40a3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a3b8:	2b00      	cmp	r3, #0
  40a3ba:	f73f ac42 	bgt.w	409c42 <_dtoa_r+0x21a>
  40a3be:	f040 8221 	bne.w	40a804 <_dtoa_r+0xddc>
  40a3c2:	2200      	movs	r2, #0
  40a3c4:	4b38      	ldr	r3, [pc, #224]	; (40a4a8 <_dtoa_r+0xa80>)
  40a3c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40a3ca:	f002 fcf7 	bl	40cdbc <__aeabi_dmul>
  40a3ce:	4652      	mov	r2, sl
  40a3d0:	465b      	mov	r3, fp
  40a3d2:	f002 ff79 	bl	40d2c8 <__aeabi_dcmpge>
  40a3d6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40a3da:	4646      	mov	r6, r8
  40a3dc:	2800      	cmp	r0, #0
  40a3de:	d041      	beq.n	40a464 <_dtoa_r+0xa3c>
  40a3e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a3e2:	9d04      	ldr	r5, [sp, #16]
  40a3e4:	43db      	mvns	r3, r3
  40a3e6:	9302      	str	r3, [sp, #8]
  40a3e8:	4641      	mov	r1, r8
  40a3ea:	4620      	mov	r0, r4
  40a3ec:	f001 fb6e 	bl	40bacc <_Bfree>
  40a3f0:	2e00      	cmp	r6, #0
  40a3f2:	f43f acdd 	beq.w	409db0 <_dtoa_r+0x388>
  40a3f6:	e6a7      	b.n	40a148 <_dtoa_r+0x720>
  40a3f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a3fa:	4649      	mov	r1, r9
  40a3fc:	4620      	mov	r0, r4
  40a3fe:	f001 fc9b 	bl	40bd38 <__pow5mult>
  40a402:	4681      	mov	r9, r0
  40a404:	e558      	b.n	409eb8 <_dtoa_r+0x490>
  40a406:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40a408:	2a00      	cmp	r2, #0
  40a40a:	f000 8187 	beq.w	40a71c <_dtoa_r+0xcf4>
  40a40e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40a412:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a414:	9d08      	ldr	r5, [sp, #32]
  40a416:	e4f2      	b.n	409dfe <_dtoa_r+0x3d6>
  40a418:	f1ba 0f00 	cmp.w	sl, #0
  40a41c:	f47f ad75 	bne.w	409f0a <_dtoa_r+0x4e2>
  40a420:	e7b4      	b.n	40a38c <_dtoa_r+0x964>
  40a422:	f001 fb5d 	bl	40bae0 <__multadd>
  40a426:	4647      	mov	r7, r8
  40a428:	4606      	mov	r6, r0
  40a42a:	4683      	mov	fp, r0
  40a42c:	e5be      	b.n	409fac <_dtoa_r+0x584>
  40a42e:	4601      	mov	r1, r0
  40a430:	4620      	mov	r0, r4
  40a432:	9306      	str	r3, [sp, #24]
  40a434:	f001 fb4a 	bl	40bacc <_Bfree>
  40a438:	2201      	movs	r2, #1
  40a43a:	9b06      	ldr	r3, [sp, #24]
  40a43c:	e5e0      	b.n	40a000 <_dtoa_r+0x5d8>
  40a43e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a440:	2b02      	cmp	r3, #2
  40a442:	f77f ad96 	ble.w	409f72 <_dtoa_r+0x54a>
  40a446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a448:	2b00      	cmp	r3, #0
  40a44a:	d1c9      	bne.n	40a3e0 <_dtoa_r+0x9b8>
  40a44c:	4641      	mov	r1, r8
  40a44e:	2205      	movs	r2, #5
  40a450:	4620      	mov	r0, r4
  40a452:	f001 fb45 	bl	40bae0 <__multadd>
  40a456:	4601      	mov	r1, r0
  40a458:	4680      	mov	r8, r0
  40a45a:	4648      	mov	r0, r9
  40a45c:	f001 fd0e 	bl	40be7c <__mcmp>
  40a460:	2800      	cmp	r0, #0
  40a462:	ddbd      	ble.n	40a3e0 <_dtoa_r+0x9b8>
  40a464:	9a02      	ldr	r2, [sp, #8]
  40a466:	9904      	ldr	r1, [sp, #16]
  40a468:	2331      	movs	r3, #49	; 0x31
  40a46a:	3201      	adds	r2, #1
  40a46c:	9202      	str	r2, [sp, #8]
  40a46e:	700b      	strb	r3, [r1, #0]
  40a470:	1c4d      	adds	r5, r1, #1
  40a472:	e7b9      	b.n	40a3e8 <_dtoa_r+0x9c0>
  40a474:	9a02      	ldr	r2, [sp, #8]
  40a476:	3201      	adds	r2, #1
  40a478:	9202      	str	r2, [sp, #8]
  40a47a:	9a04      	ldr	r2, [sp, #16]
  40a47c:	2331      	movs	r3, #49	; 0x31
  40a47e:	7013      	strb	r3, [r2, #0]
  40a480:	e652      	b.n	40a128 <_dtoa_r+0x700>
  40a482:	2301      	movs	r3, #1
  40a484:	930b      	str	r3, [sp, #44]	; 0x2c
  40a486:	e666      	b.n	40a156 <_dtoa_r+0x72e>
  40a488:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40a48c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a48e:	e48f      	b.n	409db0 <_dtoa_r+0x388>
  40a490:	0040e848 	.word	0x0040e848
  40a494:	0040e820 	.word	0x0040e820
  40a498:	3ff00000 	.word	0x3ff00000
  40a49c:	401c0000 	.word	0x401c0000
  40a4a0:	3fe00000 	.word	0x3fe00000
  40a4a4:	40240000 	.word	0x40240000
  40a4a8:	40140000 	.word	0x40140000
  40a4ac:	4650      	mov	r0, sl
  40a4ae:	f002 fc1f 	bl	40ccf0 <__aeabi_i2d>
  40a4b2:	463a      	mov	r2, r7
  40a4b4:	4643      	mov	r3, r8
  40a4b6:	f002 fc81 	bl	40cdbc <__aeabi_dmul>
  40a4ba:	2200      	movs	r2, #0
  40a4bc:	4bc1      	ldr	r3, [pc, #772]	; (40a7c4 <_dtoa_r+0xd9c>)
  40a4be:	f002 facb 	bl	40ca58 <__adddf3>
  40a4c2:	4605      	mov	r5, r0
  40a4c4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40a4c8:	4641      	mov	r1, r8
  40a4ca:	2200      	movs	r2, #0
  40a4cc:	4bbe      	ldr	r3, [pc, #760]	; (40a7c8 <_dtoa_r+0xda0>)
  40a4ce:	4638      	mov	r0, r7
  40a4d0:	f002 fac0 	bl	40ca54 <__aeabi_dsub>
  40a4d4:	462a      	mov	r2, r5
  40a4d6:	4633      	mov	r3, r6
  40a4d8:	4682      	mov	sl, r0
  40a4da:	468b      	mov	fp, r1
  40a4dc:	f002 fefe 	bl	40d2dc <__aeabi_dcmpgt>
  40a4e0:	4680      	mov	r8, r0
  40a4e2:	2800      	cmp	r0, #0
  40a4e4:	f040 8110 	bne.w	40a708 <_dtoa_r+0xce0>
  40a4e8:	462a      	mov	r2, r5
  40a4ea:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40a4ee:	4650      	mov	r0, sl
  40a4f0:	4659      	mov	r1, fp
  40a4f2:	f002 fed5 	bl	40d2a0 <__aeabi_dcmplt>
  40a4f6:	b118      	cbz	r0, 40a500 <_dtoa_r+0xad8>
  40a4f8:	4646      	mov	r6, r8
  40a4fa:	e771      	b.n	40a3e0 <_dtoa_r+0x9b8>
  40a4fc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40a500:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40a504:	f7ff bb8a 	b.w	409c1c <_dtoa_r+0x1f4>
  40a508:	9804      	ldr	r0, [sp, #16]
  40a50a:	f7ff babb 	b.w	409a84 <_dtoa_r+0x5c>
  40a50e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40a512:	970c      	str	r7, [sp, #48]	; 0x30
  40a514:	1afb      	subs	r3, r7, r3
  40a516:	441a      	add	r2, r3
  40a518:	920d      	str	r2, [sp, #52]	; 0x34
  40a51a:	2700      	movs	r7, #0
  40a51c:	e469      	b.n	409df2 <_dtoa_r+0x3ca>
  40a51e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40a522:	f04f 0a02 	mov.w	sl, #2
  40a526:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40a52a:	e657      	b.n	40a1dc <_dtoa_r+0x7b4>
  40a52c:	2100      	movs	r1, #0
  40a52e:	2301      	movs	r3, #1
  40a530:	6461      	str	r1, [r4, #68]	; 0x44
  40a532:	4620      	mov	r0, r4
  40a534:	9325      	str	r3, [sp, #148]	; 0x94
  40a536:	f001 faa3 	bl	40ba80 <_Balloc>
  40a53a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a53c:	9004      	str	r0, [sp, #16]
  40a53e:	6420      	str	r0, [r4, #64]	; 0x40
  40a540:	930a      	str	r3, [sp, #40]	; 0x28
  40a542:	930f      	str	r3, [sp, #60]	; 0x3c
  40a544:	e629      	b.n	40a19a <_dtoa_r+0x772>
  40a546:	2a00      	cmp	r2, #0
  40a548:	46d0      	mov	r8, sl
  40a54a:	f8cd b018 	str.w	fp, [sp, #24]
  40a54e:	469a      	mov	sl, r3
  40a550:	dd11      	ble.n	40a576 <_dtoa_r+0xb4e>
  40a552:	4649      	mov	r1, r9
  40a554:	2201      	movs	r2, #1
  40a556:	4620      	mov	r0, r4
  40a558:	f001 fc3e 	bl	40bdd8 <__lshift>
  40a55c:	4641      	mov	r1, r8
  40a55e:	4681      	mov	r9, r0
  40a560:	f001 fc8c 	bl	40be7c <__mcmp>
  40a564:	2800      	cmp	r0, #0
  40a566:	f340 8146 	ble.w	40a7f6 <_dtoa_r+0xdce>
  40a56a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40a56e:	f000 8106 	beq.w	40a77e <_dtoa_r+0xd56>
  40a572:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40a576:	46b3      	mov	fp, r6
  40a578:	f887 a000 	strb.w	sl, [r7]
  40a57c:	1c7d      	adds	r5, r7, #1
  40a57e:	9e06      	ldr	r6, [sp, #24]
  40a580:	e5d2      	b.n	40a128 <_dtoa_r+0x700>
  40a582:	d104      	bne.n	40a58e <_dtoa_r+0xb66>
  40a584:	f01a 0f01 	tst.w	sl, #1
  40a588:	d001      	beq.n	40a58e <_dtoa_r+0xb66>
  40a58a:	e5bd      	b.n	40a108 <_dtoa_r+0x6e0>
  40a58c:	4615      	mov	r5, r2
  40a58e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40a592:	2b30      	cmp	r3, #48	; 0x30
  40a594:	f105 32ff 	add.w	r2, r5, #4294967295
  40a598:	d0f8      	beq.n	40a58c <_dtoa_r+0xb64>
  40a59a:	e5c5      	b.n	40a128 <_dtoa_r+0x700>
  40a59c:	9904      	ldr	r1, [sp, #16]
  40a59e:	2230      	movs	r2, #48	; 0x30
  40a5a0:	700a      	strb	r2, [r1, #0]
  40a5a2:	9a02      	ldr	r2, [sp, #8]
  40a5a4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40a5a8:	3201      	adds	r2, #1
  40a5aa:	9202      	str	r2, [sp, #8]
  40a5ac:	f7ff bbfc 	b.w	409da8 <_dtoa_r+0x380>
  40a5b0:	f000 80bb 	beq.w	40a72a <_dtoa_r+0xd02>
  40a5b4:	9b02      	ldr	r3, [sp, #8]
  40a5b6:	425d      	negs	r5, r3
  40a5b8:	4b84      	ldr	r3, [pc, #528]	; (40a7cc <_dtoa_r+0xda4>)
  40a5ba:	f005 020f 	and.w	r2, r5, #15
  40a5be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a5c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40a5ca:	f002 fbf7 	bl	40cdbc <__aeabi_dmul>
  40a5ce:	112d      	asrs	r5, r5, #4
  40a5d0:	4607      	mov	r7, r0
  40a5d2:	4688      	mov	r8, r1
  40a5d4:	f000 812c 	beq.w	40a830 <_dtoa_r+0xe08>
  40a5d8:	4e7d      	ldr	r6, [pc, #500]	; (40a7d0 <_dtoa_r+0xda8>)
  40a5da:	f04f 0a02 	mov.w	sl, #2
  40a5de:	07eb      	lsls	r3, r5, #31
  40a5e0:	d509      	bpl.n	40a5f6 <_dtoa_r+0xbce>
  40a5e2:	4638      	mov	r0, r7
  40a5e4:	4641      	mov	r1, r8
  40a5e6:	e9d6 2300 	ldrd	r2, r3, [r6]
  40a5ea:	f002 fbe7 	bl	40cdbc <__aeabi_dmul>
  40a5ee:	f10a 0a01 	add.w	sl, sl, #1
  40a5f2:	4607      	mov	r7, r0
  40a5f4:	4688      	mov	r8, r1
  40a5f6:	106d      	asrs	r5, r5, #1
  40a5f8:	f106 0608 	add.w	r6, r6, #8
  40a5fc:	d1ef      	bne.n	40a5de <_dtoa_r+0xbb6>
  40a5fe:	e608      	b.n	40a212 <_dtoa_r+0x7ea>
  40a600:	6871      	ldr	r1, [r6, #4]
  40a602:	4620      	mov	r0, r4
  40a604:	f001 fa3c 	bl	40ba80 <_Balloc>
  40a608:	6933      	ldr	r3, [r6, #16]
  40a60a:	3302      	adds	r3, #2
  40a60c:	009a      	lsls	r2, r3, #2
  40a60e:	4605      	mov	r5, r0
  40a610:	f106 010c 	add.w	r1, r6, #12
  40a614:	300c      	adds	r0, #12
  40a616:	f7fc fb55 	bl	406cc4 <memcpy>
  40a61a:	4629      	mov	r1, r5
  40a61c:	2201      	movs	r2, #1
  40a61e:	4620      	mov	r0, r4
  40a620:	f001 fbda 	bl	40bdd8 <__lshift>
  40a624:	9006      	str	r0, [sp, #24]
  40a626:	e4b5      	b.n	409f94 <_dtoa_r+0x56c>
  40a628:	2b39      	cmp	r3, #57	; 0x39
  40a62a:	f8cd b018 	str.w	fp, [sp, #24]
  40a62e:	46d0      	mov	r8, sl
  40a630:	f000 80a5 	beq.w	40a77e <_dtoa_r+0xd56>
  40a634:	f103 0a01 	add.w	sl, r3, #1
  40a638:	46b3      	mov	fp, r6
  40a63a:	f887 a000 	strb.w	sl, [r7]
  40a63e:	1c7d      	adds	r5, r7, #1
  40a640:	9e06      	ldr	r6, [sp, #24]
  40a642:	e571      	b.n	40a128 <_dtoa_r+0x700>
  40a644:	465a      	mov	r2, fp
  40a646:	46d0      	mov	r8, sl
  40a648:	46b3      	mov	fp, r6
  40a64a:	469a      	mov	sl, r3
  40a64c:	4616      	mov	r6, r2
  40a64e:	e54f      	b.n	40a0f0 <_dtoa_r+0x6c8>
  40a650:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a652:	495e      	ldr	r1, [pc, #376]	; (40a7cc <_dtoa_r+0xda4>)
  40a654:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40a658:	462a      	mov	r2, r5
  40a65a:	4633      	mov	r3, r6
  40a65c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  40a660:	f002 fbac 	bl	40cdbc <__aeabi_dmul>
  40a664:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  40a668:	4638      	mov	r0, r7
  40a66a:	4641      	mov	r1, r8
  40a66c:	f002 fe56 	bl	40d31c <__aeabi_d2iz>
  40a670:	4605      	mov	r5, r0
  40a672:	f002 fb3d 	bl	40ccf0 <__aeabi_i2d>
  40a676:	460b      	mov	r3, r1
  40a678:	4602      	mov	r2, r0
  40a67a:	4641      	mov	r1, r8
  40a67c:	4638      	mov	r0, r7
  40a67e:	f002 f9e9 	bl	40ca54 <__aeabi_dsub>
  40a682:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a684:	460f      	mov	r7, r1
  40a686:	9904      	ldr	r1, [sp, #16]
  40a688:	3530      	adds	r5, #48	; 0x30
  40a68a:	2b01      	cmp	r3, #1
  40a68c:	700d      	strb	r5, [r1, #0]
  40a68e:	4606      	mov	r6, r0
  40a690:	f101 0501 	add.w	r5, r1, #1
  40a694:	d026      	beq.n	40a6e4 <_dtoa_r+0xcbc>
  40a696:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a698:	9a04      	ldr	r2, [sp, #16]
  40a69a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 40a7d8 <_dtoa_r+0xdb0>
  40a69e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40a6a2:	4413      	add	r3, r2
  40a6a4:	f04f 0a00 	mov.w	sl, #0
  40a6a8:	4699      	mov	r9, r3
  40a6aa:	4652      	mov	r2, sl
  40a6ac:	465b      	mov	r3, fp
  40a6ae:	4630      	mov	r0, r6
  40a6b0:	4639      	mov	r1, r7
  40a6b2:	f002 fb83 	bl	40cdbc <__aeabi_dmul>
  40a6b6:	460f      	mov	r7, r1
  40a6b8:	4606      	mov	r6, r0
  40a6ba:	f002 fe2f 	bl	40d31c <__aeabi_d2iz>
  40a6be:	4680      	mov	r8, r0
  40a6c0:	f002 fb16 	bl	40ccf0 <__aeabi_i2d>
  40a6c4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40a6c8:	4602      	mov	r2, r0
  40a6ca:	460b      	mov	r3, r1
  40a6cc:	4630      	mov	r0, r6
  40a6ce:	4639      	mov	r1, r7
  40a6d0:	f002 f9c0 	bl	40ca54 <__aeabi_dsub>
  40a6d4:	f805 8b01 	strb.w	r8, [r5], #1
  40a6d8:	454d      	cmp	r5, r9
  40a6da:	4606      	mov	r6, r0
  40a6dc:	460f      	mov	r7, r1
  40a6de:	d1e4      	bne.n	40a6aa <_dtoa_r+0xc82>
  40a6e0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40a6e4:	4b3b      	ldr	r3, [pc, #236]	; (40a7d4 <_dtoa_r+0xdac>)
  40a6e6:	2200      	movs	r2, #0
  40a6e8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40a6ec:	f002 f9b4 	bl	40ca58 <__adddf3>
  40a6f0:	4632      	mov	r2, r6
  40a6f2:	463b      	mov	r3, r7
  40a6f4:	f002 fdd4 	bl	40d2a0 <__aeabi_dcmplt>
  40a6f8:	2800      	cmp	r0, #0
  40a6fa:	d046      	beq.n	40a78a <_dtoa_r+0xd62>
  40a6fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a6fe:	9302      	str	r3, [sp, #8]
  40a700:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40a704:	f7ff bb43 	b.w	409d8e <_dtoa_r+0x366>
  40a708:	f04f 0800 	mov.w	r8, #0
  40a70c:	4646      	mov	r6, r8
  40a70e:	e6a9      	b.n	40a464 <_dtoa_r+0xa3c>
  40a710:	9b08      	ldr	r3, [sp, #32]
  40a712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a714:	1a9d      	subs	r5, r3, r2
  40a716:	2300      	movs	r3, #0
  40a718:	f7ff bb71 	b.w	409dfe <_dtoa_r+0x3d6>
  40a71c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40a71e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a720:	9d08      	ldr	r5, [sp, #32]
  40a722:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40a726:	f7ff bb6a 	b.w	409dfe <_dtoa_r+0x3d6>
  40a72a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40a72e:	f04f 0a02 	mov.w	sl, #2
  40a732:	e56e      	b.n	40a212 <_dtoa_r+0x7ea>
  40a734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a736:	2b00      	cmp	r3, #0
  40a738:	f43f aeb8 	beq.w	40a4ac <_dtoa_r+0xa84>
  40a73c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a73e:	2b00      	cmp	r3, #0
  40a740:	f77f aede 	ble.w	40a500 <_dtoa_r+0xad8>
  40a744:	2200      	movs	r2, #0
  40a746:	4b24      	ldr	r3, [pc, #144]	; (40a7d8 <_dtoa_r+0xdb0>)
  40a748:	4638      	mov	r0, r7
  40a74a:	4641      	mov	r1, r8
  40a74c:	f002 fb36 	bl	40cdbc <__aeabi_dmul>
  40a750:	4607      	mov	r7, r0
  40a752:	4688      	mov	r8, r1
  40a754:	f10a 0001 	add.w	r0, sl, #1
  40a758:	f002 faca 	bl	40ccf0 <__aeabi_i2d>
  40a75c:	463a      	mov	r2, r7
  40a75e:	4643      	mov	r3, r8
  40a760:	f002 fb2c 	bl	40cdbc <__aeabi_dmul>
  40a764:	2200      	movs	r2, #0
  40a766:	4b17      	ldr	r3, [pc, #92]	; (40a7c4 <_dtoa_r+0xd9c>)
  40a768:	f002 f976 	bl	40ca58 <__adddf3>
  40a76c:	9a02      	ldr	r2, [sp, #8]
  40a76e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a770:	9312      	str	r3, [sp, #72]	; 0x48
  40a772:	3a01      	subs	r2, #1
  40a774:	4605      	mov	r5, r0
  40a776:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40a77a:	9215      	str	r2, [sp, #84]	; 0x54
  40a77c:	e56a      	b.n	40a254 <_dtoa_r+0x82c>
  40a77e:	2239      	movs	r2, #57	; 0x39
  40a780:	46b3      	mov	fp, r6
  40a782:	703a      	strb	r2, [r7, #0]
  40a784:	9e06      	ldr	r6, [sp, #24]
  40a786:	1c7d      	adds	r5, r7, #1
  40a788:	e4c0      	b.n	40a10c <_dtoa_r+0x6e4>
  40a78a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40a78e:	2000      	movs	r0, #0
  40a790:	4910      	ldr	r1, [pc, #64]	; (40a7d4 <_dtoa_r+0xdac>)
  40a792:	f002 f95f 	bl	40ca54 <__aeabi_dsub>
  40a796:	4632      	mov	r2, r6
  40a798:	463b      	mov	r3, r7
  40a79a:	f002 fd9f 	bl	40d2dc <__aeabi_dcmpgt>
  40a79e:	b908      	cbnz	r0, 40a7a4 <_dtoa_r+0xd7c>
  40a7a0:	e6ae      	b.n	40a500 <_dtoa_r+0xad8>
  40a7a2:	4615      	mov	r5, r2
  40a7a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40a7a8:	2b30      	cmp	r3, #48	; 0x30
  40a7aa:	f105 32ff 	add.w	r2, r5, #4294967295
  40a7ae:	d0f8      	beq.n	40a7a2 <_dtoa_r+0xd7a>
  40a7b0:	e5d7      	b.n	40a362 <_dtoa_r+0x93a>
  40a7b2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40a7b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a7b8:	9302      	str	r3, [sp, #8]
  40a7ba:	f7ff bae8 	b.w	409d8e <_dtoa_r+0x366>
  40a7be:	970c      	str	r7, [sp, #48]	; 0x30
  40a7c0:	f7ff bba5 	b.w	409f0e <_dtoa_r+0x4e6>
  40a7c4:	401c0000 	.word	0x401c0000
  40a7c8:	40140000 	.word	0x40140000
  40a7cc:	0040e848 	.word	0x0040e848
  40a7d0:	0040e820 	.word	0x0040e820
  40a7d4:	3fe00000 	.word	0x3fe00000
  40a7d8:	40240000 	.word	0x40240000
  40a7dc:	2b39      	cmp	r3, #57	; 0x39
  40a7de:	f8cd b018 	str.w	fp, [sp, #24]
  40a7e2:	46d0      	mov	r8, sl
  40a7e4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40a7e8:	469a      	mov	sl, r3
  40a7ea:	d0c8      	beq.n	40a77e <_dtoa_r+0xd56>
  40a7ec:	f1bb 0f00 	cmp.w	fp, #0
  40a7f0:	f73f aebf 	bgt.w	40a572 <_dtoa_r+0xb4a>
  40a7f4:	e6bf      	b.n	40a576 <_dtoa_r+0xb4e>
  40a7f6:	f47f aebe 	bne.w	40a576 <_dtoa_r+0xb4e>
  40a7fa:	f01a 0f01 	tst.w	sl, #1
  40a7fe:	f43f aeba 	beq.w	40a576 <_dtoa_r+0xb4e>
  40a802:	e6b2      	b.n	40a56a <_dtoa_r+0xb42>
  40a804:	f04f 0800 	mov.w	r8, #0
  40a808:	4646      	mov	r6, r8
  40a80a:	e5e9      	b.n	40a3e0 <_dtoa_r+0x9b8>
  40a80c:	4631      	mov	r1, r6
  40a80e:	2300      	movs	r3, #0
  40a810:	220a      	movs	r2, #10
  40a812:	4620      	mov	r0, r4
  40a814:	f001 f964 	bl	40bae0 <__multadd>
  40a818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a81a:	2b00      	cmp	r3, #0
  40a81c:	4606      	mov	r6, r0
  40a81e:	dd0a      	ble.n	40a836 <_dtoa_r+0xe0e>
  40a820:	930a      	str	r3, [sp, #40]	; 0x28
  40a822:	f7ff bbaa 	b.w	409f7a <_dtoa_r+0x552>
  40a826:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a828:	2b02      	cmp	r3, #2
  40a82a:	dc23      	bgt.n	40a874 <_dtoa_r+0xe4c>
  40a82c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a82e:	e43b      	b.n	40a0a8 <_dtoa_r+0x680>
  40a830:	f04f 0a02 	mov.w	sl, #2
  40a834:	e4ed      	b.n	40a212 <_dtoa_r+0x7ea>
  40a836:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a838:	2b02      	cmp	r3, #2
  40a83a:	dc1b      	bgt.n	40a874 <_dtoa_r+0xe4c>
  40a83c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a83e:	e7ef      	b.n	40a820 <_dtoa_r+0xdf8>
  40a840:	2500      	movs	r5, #0
  40a842:	6465      	str	r5, [r4, #68]	; 0x44
  40a844:	4629      	mov	r1, r5
  40a846:	4620      	mov	r0, r4
  40a848:	f001 f91a 	bl	40ba80 <_Balloc>
  40a84c:	f04f 33ff 	mov.w	r3, #4294967295
  40a850:	930a      	str	r3, [sp, #40]	; 0x28
  40a852:	930f      	str	r3, [sp, #60]	; 0x3c
  40a854:	2301      	movs	r3, #1
  40a856:	9004      	str	r0, [sp, #16]
  40a858:	9525      	str	r5, [sp, #148]	; 0x94
  40a85a:	6420      	str	r0, [r4, #64]	; 0x40
  40a85c:	930b      	str	r3, [sp, #44]	; 0x2c
  40a85e:	f7ff b9dd 	b.w	409c1c <_dtoa_r+0x1f4>
  40a862:	2501      	movs	r5, #1
  40a864:	f7ff b9a5 	b.w	409bb2 <_dtoa_r+0x18a>
  40a868:	f43f ab69 	beq.w	409f3e <_dtoa_r+0x516>
  40a86c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40a870:	f7ff bbf9 	b.w	40a066 <_dtoa_r+0x63e>
  40a874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a876:	930a      	str	r3, [sp, #40]	; 0x28
  40a878:	e5e5      	b.n	40a446 <_dtoa_r+0xa1e>
  40a87a:	bf00      	nop

0040a87c <__sflush_r>:
  40a87c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40a880:	b29a      	uxth	r2, r3
  40a882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a886:	460d      	mov	r5, r1
  40a888:	0711      	lsls	r1, r2, #28
  40a88a:	4680      	mov	r8, r0
  40a88c:	d43a      	bmi.n	40a904 <__sflush_r+0x88>
  40a88e:	686a      	ldr	r2, [r5, #4]
  40a890:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40a894:	2a00      	cmp	r2, #0
  40a896:	81ab      	strh	r3, [r5, #12]
  40a898:	dd6f      	ble.n	40a97a <__sflush_r+0xfe>
  40a89a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40a89c:	2c00      	cmp	r4, #0
  40a89e:	d049      	beq.n	40a934 <__sflush_r+0xb8>
  40a8a0:	2200      	movs	r2, #0
  40a8a2:	b29b      	uxth	r3, r3
  40a8a4:	f8d8 6000 	ldr.w	r6, [r8]
  40a8a8:	f8c8 2000 	str.w	r2, [r8]
  40a8ac:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40a8b0:	d067      	beq.n	40a982 <__sflush_r+0x106>
  40a8b2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40a8b4:	075f      	lsls	r7, r3, #29
  40a8b6:	d505      	bpl.n	40a8c4 <__sflush_r+0x48>
  40a8b8:	6869      	ldr	r1, [r5, #4]
  40a8ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40a8bc:	1a52      	subs	r2, r2, r1
  40a8be:	b10b      	cbz	r3, 40a8c4 <__sflush_r+0x48>
  40a8c0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40a8c2:	1ad2      	subs	r2, r2, r3
  40a8c4:	2300      	movs	r3, #0
  40a8c6:	69e9      	ldr	r1, [r5, #28]
  40a8c8:	4640      	mov	r0, r8
  40a8ca:	47a0      	blx	r4
  40a8cc:	1c44      	adds	r4, r0, #1
  40a8ce:	d03c      	beq.n	40a94a <__sflush_r+0xce>
  40a8d0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40a8d4:	692a      	ldr	r2, [r5, #16]
  40a8d6:	602a      	str	r2, [r5, #0]
  40a8d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40a8dc:	2200      	movs	r2, #0
  40a8de:	81ab      	strh	r3, [r5, #12]
  40a8e0:	04db      	lsls	r3, r3, #19
  40a8e2:	606a      	str	r2, [r5, #4]
  40a8e4:	d447      	bmi.n	40a976 <__sflush_r+0xfa>
  40a8e6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40a8e8:	f8c8 6000 	str.w	r6, [r8]
  40a8ec:	b311      	cbz	r1, 40a934 <__sflush_r+0xb8>
  40a8ee:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40a8f2:	4299      	cmp	r1, r3
  40a8f4:	d002      	beq.n	40a8fc <__sflush_r+0x80>
  40a8f6:	4640      	mov	r0, r8
  40a8f8:	f000 f9de 	bl	40acb8 <_free_r>
  40a8fc:	2000      	movs	r0, #0
  40a8fe:	6328      	str	r0, [r5, #48]	; 0x30
  40a900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a904:	692e      	ldr	r6, [r5, #16]
  40a906:	b1ae      	cbz	r6, 40a934 <__sflush_r+0xb8>
  40a908:	682c      	ldr	r4, [r5, #0]
  40a90a:	602e      	str	r6, [r5, #0]
  40a90c:	0791      	lsls	r1, r2, #30
  40a90e:	bf0c      	ite	eq
  40a910:	696b      	ldreq	r3, [r5, #20]
  40a912:	2300      	movne	r3, #0
  40a914:	1ba4      	subs	r4, r4, r6
  40a916:	60ab      	str	r3, [r5, #8]
  40a918:	e00a      	b.n	40a930 <__sflush_r+0xb4>
  40a91a:	4623      	mov	r3, r4
  40a91c:	4632      	mov	r2, r6
  40a91e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40a920:	69e9      	ldr	r1, [r5, #28]
  40a922:	4640      	mov	r0, r8
  40a924:	47b8      	blx	r7
  40a926:	2800      	cmp	r0, #0
  40a928:	eba4 0400 	sub.w	r4, r4, r0
  40a92c:	4406      	add	r6, r0
  40a92e:	dd04      	ble.n	40a93a <__sflush_r+0xbe>
  40a930:	2c00      	cmp	r4, #0
  40a932:	dcf2      	bgt.n	40a91a <__sflush_r+0x9e>
  40a934:	2000      	movs	r0, #0
  40a936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a93a:	89ab      	ldrh	r3, [r5, #12]
  40a93c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a940:	81ab      	strh	r3, [r5, #12]
  40a942:	f04f 30ff 	mov.w	r0, #4294967295
  40a946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a94a:	f8d8 4000 	ldr.w	r4, [r8]
  40a94e:	2c1d      	cmp	r4, #29
  40a950:	d8f3      	bhi.n	40a93a <__sflush_r+0xbe>
  40a952:	4b19      	ldr	r3, [pc, #100]	; (40a9b8 <__sflush_r+0x13c>)
  40a954:	40e3      	lsrs	r3, r4
  40a956:	43db      	mvns	r3, r3
  40a958:	f013 0301 	ands.w	r3, r3, #1
  40a95c:	d1ed      	bne.n	40a93a <__sflush_r+0xbe>
  40a95e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40a962:	606b      	str	r3, [r5, #4]
  40a964:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40a968:	6929      	ldr	r1, [r5, #16]
  40a96a:	81ab      	strh	r3, [r5, #12]
  40a96c:	04da      	lsls	r2, r3, #19
  40a96e:	6029      	str	r1, [r5, #0]
  40a970:	d5b9      	bpl.n	40a8e6 <__sflush_r+0x6a>
  40a972:	2c00      	cmp	r4, #0
  40a974:	d1b7      	bne.n	40a8e6 <__sflush_r+0x6a>
  40a976:	6528      	str	r0, [r5, #80]	; 0x50
  40a978:	e7b5      	b.n	40a8e6 <__sflush_r+0x6a>
  40a97a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40a97c:	2a00      	cmp	r2, #0
  40a97e:	dc8c      	bgt.n	40a89a <__sflush_r+0x1e>
  40a980:	e7d8      	b.n	40a934 <__sflush_r+0xb8>
  40a982:	2301      	movs	r3, #1
  40a984:	69e9      	ldr	r1, [r5, #28]
  40a986:	4640      	mov	r0, r8
  40a988:	47a0      	blx	r4
  40a98a:	1c43      	adds	r3, r0, #1
  40a98c:	4602      	mov	r2, r0
  40a98e:	d002      	beq.n	40a996 <__sflush_r+0x11a>
  40a990:	89ab      	ldrh	r3, [r5, #12]
  40a992:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40a994:	e78e      	b.n	40a8b4 <__sflush_r+0x38>
  40a996:	f8d8 3000 	ldr.w	r3, [r8]
  40a99a:	2b00      	cmp	r3, #0
  40a99c:	d0f8      	beq.n	40a990 <__sflush_r+0x114>
  40a99e:	2b1d      	cmp	r3, #29
  40a9a0:	d001      	beq.n	40a9a6 <__sflush_r+0x12a>
  40a9a2:	2b16      	cmp	r3, #22
  40a9a4:	d102      	bne.n	40a9ac <__sflush_r+0x130>
  40a9a6:	f8c8 6000 	str.w	r6, [r8]
  40a9aa:	e7c3      	b.n	40a934 <__sflush_r+0xb8>
  40a9ac:	89ab      	ldrh	r3, [r5, #12]
  40a9ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a9b2:	81ab      	strh	r3, [r5, #12]
  40a9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a9b8:	20400001 	.word	0x20400001

0040a9bc <_fflush_r>:
  40a9bc:	b538      	push	{r3, r4, r5, lr}
  40a9be:	460d      	mov	r5, r1
  40a9c0:	4604      	mov	r4, r0
  40a9c2:	b108      	cbz	r0, 40a9c8 <_fflush_r+0xc>
  40a9c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a9c6:	b1bb      	cbz	r3, 40a9f8 <_fflush_r+0x3c>
  40a9c8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40a9cc:	b188      	cbz	r0, 40a9f2 <_fflush_r+0x36>
  40a9ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40a9d0:	07db      	lsls	r3, r3, #31
  40a9d2:	d401      	bmi.n	40a9d8 <_fflush_r+0x1c>
  40a9d4:	0581      	lsls	r1, r0, #22
  40a9d6:	d517      	bpl.n	40aa08 <_fflush_r+0x4c>
  40a9d8:	4620      	mov	r0, r4
  40a9da:	4629      	mov	r1, r5
  40a9dc:	f7ff ff4e 	bl	40a87c <__sflush_r>
  40a9e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40a9e2:	07da      	lsls	r2, r3, #31
  40a9e4:	4604      	mov	r4, r0
  40a9e6:	d402      	bmi.n	40a9ee <_fflush_r+0x32>
  40a9e8:	89ab      	ldrh	r3, [r5, #12]
  40a9ea:	059b      	lsls	r3, r3, #22
  40a9ec:	d507      	bpl.n	40a9fe <_fflush_r+0x42>
  40a9ee:	4620      	mov	r0, r4
  40a9f0:	bd38      	pop	{r3, r4, r5, pc}
  40a9f2:	4604      	mov	r4, r0
  40a9f4:	4620      	mov	r0, r4
  40a9f6:	bd38      	pop	{r3, r4, r5, pc}
  40a9f8:	f000 f838 	bl	40aa6c <__sinit>
  40a9fc:	e7e4      	b.n	40a9c8 <_fflush_r+0xc>
  40a9fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40aa00:	f000 fc04 	bl	40b20c <__retarget_lock_release_recursive>
  40aa04:	4620      	mov	r0, r4
  40aa06:	bd38      	pop	{r3, r4, r5, pc}
  40aa08:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40aa0a:	f000 fbfd 	bl	40b208 <__retarget_lock_acquire_recursive>
  40aa0e:	e7e3      	b.n	40a9d8 <_fflush_r+0x1c>

0040aa10 <_cleanup_r>:
  40aa10:	4901      	ldr	r1, [pc, #4]	; (40aa18 <_cleanup_r+0x8>)
  40aa12:	f000 bbaf 	b.w	40b174 <_fwalk_reent>
  40aa16:	bf00      	nop
  40aa18:	0040c8e5 	.word	0x0040c8e5

0040aa1c <std.isra.0>:
  40aa1c:	b510      	push	{r4, lr}
  40aa1e:	2300      	movs	r3, #0
  40aa20:	4604      	mov	r4, r0
  40aa22:	8181      	strh	r1, [r0, #12]
  40aa24:	81c2      	strh	r2, [r0, #14]
  40aa26:	6003      	str	r3, [r0, #0]
  40aa28:	6043      	str	r3, [r0, #4]
  40aa2a:	6083      	str	r3, [r0, #8]
  40aa2c:	6643      	str	r3, [r0, #100]	; 0x64
  40aa2e:	6103      	str	r3, [r0, #16]
  40aa30:	6143      	str	r3, [r0, #20]
  40aa32:	6183      	str	r3, [r0, #24]
  40aa34:	4619      	mov	r1, r3
  40aa36:	2208      	movs	r2, #8
  40aa38:	305c      	adds	r0, #92	; 0x5c
  40aa3a:	f7fc f9dd 	bl	406df8 <memset>
  40aa3e:	4807      	ldr	r0, [pc, #28]	; (40aa5c <std.isra.0+0x40>)
  40aa40:	4907      	ldr	r1, [pc, #28]	; (40aa60 <std.isra.0+0x44>)
  40aa42:	4a08      	ldr	r2, [pc, #32]	; (40aa64 <std.isra.0+0x48>)
  40aa44:	4b08      	ldr	r3, [pc, #32]	; (40aa68 <std.isra.0+0x4c>)
  40aa46:	6220      	str	r0, [r4, #32]
  40aa48:	61e4      	str	r4, [r4, #28]
  40aa4a:	6261      	str	r1, [r4, #36]	; 0x24
  40aa4c:	62a2      	str	r2, [r4, #40]	; 0x28
  40aa4e:	62e3      	str	r3, [r4, #44]	; 0x2c
  40aa50:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40aa54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40aa58:	f000 bbd2 	b.w	40b200 <__retarget_lock_init_recursive>
  40aa5c:	0040c3e5 	.word	0x0040c3e5
  40aa60:	0040c409 	.word	0x0040c409
  40aa64:	0040c445 	.word	0x0040c445
  40aa68:	0040c465 	.word	0x0040c465

0040aa6c <__sinit>:
  40aa6c:	b510      	push	{r4, lr}
  40aa6e:	4604      	mov	r4, r0
  40aa70:	4812      	ldr	r0, [pc, #72]	; (40aabc <__sinit+0x50>)
  40aa72:	f000 fbc9 	bl	40b208 <__retarget_lock_acquire_recursive>
  40aa76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40aa78:	b9d2      	cbnz	r2, 40aab0 <__sinit+0x44>
  40aa7a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40aa7e:	4810      	ldr	r0, [pc, #64]	; (40aac0 <__sinit+0x54>)
  40aa80:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40aa84:	2103      	movs	r1, #3
  40aa86:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40aa8a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40aa8c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40aa90:	6860      	ldr	r0, [r4, #4]
  40aa92:	2104      	movs	r1, #4
  40aa94:	f7ff ffc2 	bl	40aa1c <std.isra.0>
  40aa98:	2201      	movs	r2, #1
  40aa9a:	2109      	movs	r1, #9
  40aa9c:	68a0      	ldr	r0, [r4, #8]
  40aa9e:	f7ff ffbd 	bl	40aa1c <std.isra.0>
  40aaa2:	2202      	movs	r2, #2
  40aaa4:	2112      	movs	r1, #18
  40aaa6:	68e0      	ldr	r0, [r4, #12]
  40aaa8:	f7ff ffb8 	bl	40aa1c <std.isra.0>
  40aaac:	2301      	movs	r3, #1
  40aaae:	63a3      	str	r3, [r4, #56]	; 0x38
  40aab0:	4802      	ldr	r0, [pc, #8]	; (40aabc <__sinit+0x50>)
  40aab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40aab6:	f000 bba9 	b.w	40b20c <__retarget_lock_release_recursive>
  40aaba:	bf00      	nop
  40aabc:	2040d1b0 	.word	0x2040d1b0
  40aac0:	0040aa11 	.word	0x0040aa11

0040aac4 <__sfp_lock_acquire>:
  40aac4:	4801      	ldr	r0, [pc, #4]	; (40aacc <__sfp_lock_acquire+0x8>)
  40aac6:	f000 bb9f 	b.w	40b208 <__retarget_lock_acquire_recursive>
  40aaca:	bf00      	nop
  40aacc:	2040d1c4 	.word	0x2040d1c4

0040aad0 <__sfp_lock_release>:
  40aad0:	4801      	ldr	r0, [pc, #4]	; (40aad8 <__sfp_lock_release+0x8>)
  40aad2:	f000 bb9b 	b.w	40b20c <__retarget_lock_release_recursive>
  40aad6:	bf00      	nop
  40aad8:	2040d1c4 	.word	0x2040d1c4

0040aadc <__libc_fini_array>:
  40aadc:	b538      	push	{r3, r4, r5, lr}
  40aade:	4c0a      	ldr	r4, [pc, #40]	; (40ab08 <__libc_fini_array+0x2c>)
  40aae0:	4d0a      	ldr	r5, [pc, #40]	; (40ab0c <__libc_fini_array+0x30>)
  40aae2:	1b64      	subs	r4, r4, r5
  40aae4:	10a4      	asrs	r4, r4, #2
  40aae6:	d00a      	beq.n	40aafe <__libc_fini_array+0x22>
  40aae8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40aaec:	3b01      	subs	r3, #1
  40aaee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40aaf2:	3c01      	subs	r4, #1
  40aaf4:	f855 3904 	ldr.w	r3, [r5], #-4
  40aaf8:	4798      	blx	r3
  40aafa:	2c00      	cmp	r4, #0
  40aafc:	d1f9      	bne.n	40aaf2 <__libc_fini_array+0x16>
  40aafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40ab02:	f003 bf97 	b.w	40ea34 <_fini>
  40ab06:	bf00      	nop
  40ab08:	0040ea44 	.word	0x0040ea44
  40ab0c:	0040ea40 	.word	0x0040ea40

0040ab10 <__fputwc>:
  40ab10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ab14:	b082      	sub	sp, #8
  40ab16:	4680      	mov	r8, r0
  40ab18:	4689      	mov	r9, r1
  40ab1a:	4614      	mov	r4, r2
  40ab1c:	f000 fb54 	bl	40b1c8 <__locale_mb_cur_max>
  40ab20:	2801      	cmp	r0, #1
  40ab22:	d036      	beq.n	40ab92 <__fputwc+0x82>
  40ab24:	464a      	mov	r2, r9
  40ab26:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40ab2a:	a901      	add	r1, sp, #4
  40ab2c:	4640      	mov	r0, r8
  40ab2e:	f001 fde7 	bl	40c700 <_wcrtomb_r>
  40ab32:	1c42      	adds	r2, r0, #1
  40ab34:	4606      	mov	r6, r0
  40ab36:	d025      	beq.n	40ab84 <__fputwc+0x74>
  40ab38:	b3a8      	cbz	r0, 40aba6 <__fputwc+0x96>
  40ab3a:	f89d e004 	ldrb.w	lr, [sp, #4]
  40ab3e:	2500      	movs	r5, #0
  40ab40:	f10d 0a04 	add.w	sl, sp, #4
  40ab44:	e009      	b.n	40ab5a <__fputwc+0x4a>
  40ab46:	6823      	ldr	r3, [r4, #0]
  40ab48:	1c5a      	adds	r2, r3, #1
  40ab4a:	6022      	str	r2, [r4, #0]
  40ab4c:	f883 e000 	strb.w	lr, [r3]
  40ab50:	3501      	adds	r5, #1
  40ab52:	42b5      	cmp	r5, r6
  40ab54:	d227      	bcs.n	40aba6 <__fputwc+0x96>
  40ab56:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40ab5a:	68a3      	ldr	r3, [r4, #8]
  40ab5c:	3b01      	subs	r3, #1
  40ab5e:	2b00      	cmp	r3, #0
  40ab60:	60a3      	str	r3, [r4, #8]
  40ab62:	daf0      	bge.n	40ab46 <__fputwc+0x36>
  40ab64:	69a7      	ldr	r7, [r4, #24]
  40ab66:	42bb      	cmp	r3, r7
  40ab68:	4671      	mov	r1, lr
  40ab6a:	4622      	mov	r2, r4
  40ab6c:	4640      	mov	r0, r8
  40ab6e:	db02      	blt.n	40ab76 <__fputwc+0x66>
  40ab70:	f1be 0f0a 	cmp.w	lr, #10
  40ab74:	d1e7      	bne.n	40ab46 <__fputwc+0x36>
  40ab76:	f001 fd6b 	bl	40c650 <__swbuf_r>
  40ab7a:	1c43      	adds	r3, r0, #1
  40ab7c:	d1e8      	bne.n	40ab50 <__fputwc+0x40>
  40ab7e:	b002      	add	sp, #8
  40ab80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ab84:	89a3      	ldrh	r3, [r4, #12]
  40ab86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ab8a:	81a3      	strh	r3, [r4, #12]
  40ab8c:	b002      	add	sp, #8
  40ab8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ab92:	f109 33ff 	add.w	r3, r9, #4294967295
  40ab96:	2bfe      	cmp	r3, #254	; 0xfe
  40ab98:	d8c4      	bhi.n	40ab24 <__fputwc+0x14>
  40ab9a:	fa5f fe89 	uxtb.w	lr, r9
  40ab9e:	4606      	mov	r6, r0
  40aba0:	f88d e004 	strb.w	lr, [sp, #4]
  40aba4:	e7cb      	b.n	40ab3e <__fputwc+0x2e>
  40aba6:	4648      	mov	r0, r9
  40aba8:	b002      	add	sp, #8
  40abaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40abae:	bf00      	nop

0040abb0 <_fputwc_r>:
  40abb0:	b530      	push	{r4, r5, lr}
  40abb2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40abb4:	f013 0f01 	tst.w	r3, #1
  40abb8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40abbc:	4614      	mov	r4, r2
  40abbe:	b083      	sub	sp, #12
  40abc0:	4605      	mov	r5, r0
  40abc2:	b29a      	uxth	r2, r3
  40abc4:	d101      	bne.n	40abca <_fputwc_r+0x1a>
  40abc6:	0590      	lsls	r0, r2, #22
  40abc8:	d51c      	bpl.n	40ac04 <_fputwc_r+0x54>
  40abca:	0490      	lsls	r0, r2, #18
  40abcc:	d406      	bmi.n	40abdc <_fputwc_r+0x2c>
  40abce:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40abd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40abd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40abd8:	81a3      	strh	r3, [r4, #12]
  40abda:	6662      	str	r2, [r4, #100]	; 0x64
  40abdc:	4628      	mov	r0, r5
  40abde:	4622      	mov	r2, r4
  40abe0:	f7ff ff96 	bl	40ab10 <__fputwc>
  40abe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40abe6:	07da      	lsls	r2, r3, #31
  40abe8:	4605      	mov	r5, r0
  40abea:	d402      	bmi.n	40abf2 <_fputwc_r+0x42>
  40abec:	89a3      	ldrh	r3, [r4, #12]
  40abee:	059b      	lsls	r3, r3, #22
  40abf0:	d502      	bpl.n	40abf8 <_fputwc_r+0x48>
  40abf2:	4628      	mov	r0, r5
  40abf4:	b003      	add	sp, #12
  40abf6:	bd30      	pop	{r4, r5, pc}
  40abf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40abfa:	f000 fb07 	bl	40b20c <__retarget_lock_release_recursive>
  40abfe:	4628      	mov	r0, r5
  40ac00:	b003      	add	sp, #12
  40ac02:	bd30      	pop	{r4, r5, pc}
  40ac04:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40ac06:	9101      	str	r1, [sp, #4]
  40ac08:	f000 fafe 	bl	40b208 <__retarget_lock_acquire_recursive>
  40ac0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ac10:	9901      	ldr	r1, [sp, #4]
  40ac12:	b29a      	uxth	r2, r3
  40ac14:	e7d9      	b.n	40abca <_fputwc_r+0x1a>
  40ac16:	bf00      	nop

0040ac18 <_malloc_trim_r>:
  40ac18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ac1a:	4f24      	ldr	r7, [pc, #144]	; (40acac <_malloc_trim_r+0x94>)
  40ac1c:	460c      	mov	r4, r1
  40ac1e:	4606      	mov	r6, r0
  40ac20:	f000 ff22 	bl	40ba68 <__malloc_lock>
  40ac24:	68bb      	ldr	r3, [r7, #8]
  40ac26:	685d      	ldr	r5, [r3, #4]
  40ac28:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40ac2c:	310f      	adds	r1, #15
  40ac2e:	f025 0503 	bic.w	r5, r5, #3
  40ac32:	4429      	add	r1, r5
  40ac34:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40ac38:	f021 010f 	bic.w	r1, r1, #15
  40ac3c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40ac40:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40ac44:	db07      	blt.n	40ac56 <_malloc_trim_r+0x3e>
  40ac46:	2100      	movs	r1, #0
  40ac48:	4630      	mov	r0, r6
  40ac4a:	f001 fbb9 	bl	40c3c0 <_sbrk_r>
  40ac4e:	68bb      	ldr	r3, [r7, #8]
  40ac50:	442b      	add	r3, r5
  40ac52:	4298      	cmp	r0, r3
  40ac54:	d004      	beq.n	40ac60 <_malloc_trim_r+0x48>
  40ac56:	4630      	mov	r0, r6
  40ac58:	f000 ff0c 	bl	40ba74 <__malloc_unlock>
  40ac5c:	2000      	movs	r0, #0
  40ac5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ac60:	4261      	negs	r1, r4
  40ac62:	4630      	mov	r0, r6
  40ac64:	f001 fbac 	bl	40c3c0 <_sbrk_r>
  40ac68:	3001      	adds	r0, #1
  40ac6a:	d00d      	beq.n	40ac88 <_malloc_trim_r+0x70>
  40ac6c:	4b10      	ldr	r3, [pc, #64]	; (40acb0 <_malloc_trim_r+0x98>)
  40ac6e:	68ba      	ldr	r2, [r7, #8]
  40ac70:	6819      	ldr	r1, [r3, #0]
  40ac72:	1b2d      	subs	r5, r5, r4
  40ac74:	f045 0501 	orr.w	r5, r5, #1
  40ac78:	4630      	mov	r0, r6
  40ac7a:	1b09      	subs	r1, r1, r4
  40ac7c:	6055      	str	r5, [r2, #4]
  40ac7e:	6019      	str	r1, [r3, #0]
  40ac80:	f000 fef8 	bl	40ba74 <__malloc_unlock>
  40ac84:	2001      	movs	r0, #1
  40ac86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ac88:	2100      	movs	r1, #0
  40ac8a:	4630      	mov	r0, r6
  40ac8c:	f001 fb98 	bl	40c3c0 <_sbrk_r>
  40ac90:	68ba      	ldr	r2, [r7, #8]
  40ac92:	1a83      	subs	r3, r0, r2
  40ac94:	2b0f      	cmp	r3, #15
  40ac96:	ddde      	ble.n	40ac56 <_malloc_trim_r+0x3e>
  40ac98:	4c06      	ldr	r4, [pc, #24]	; (40acb4 <_malloc_trim_r+0x9c>)
  40ac9a:	4905      	ldr	r1, [pc, #20]	; (40acb0 <_malloc_trim_r+0x98>)
  40ac9c:	6824      	ldr	r4, [r4, #0]
  40ac9e:	f043 0301 	orr.w	r3, r3, #1
  40aca2:	1b00      	subs	r0, r0, r4
  40aca4:	6053      	str	r3, [r2, #4]
  40aca6:	6008      	str	r0, [r1, #0]
  40aca8:	e7d5      	b.n	40ac56 <_malloc_trim_r+0x3e>
  40acaa:	bf00      	nop
  40acac:	204005d8 	.word	0x204005d8
  40acb0:	2040cf04 	.word	0x2040cf04
  40acb4:	204009e0 	.word	0x204009e0

0040acb8 <_free_r>:
  40acb8:	2900      	cmp	r1, #0
  40acba:	d044      	beq.n	40ad46 <_free_r+0x8e>
  40acbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40acc0:	460d      	mov	r5, r1
  40acc2:	4680      	mov	r8, r0
  40acc4:	f000 fed0 	bl	40ba68 <__malloc_lock>
  40acc8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40accc:	4969      	ldr	r1, [pc, #420]	; (40ae74 <_free_r+0x1bc>)
  40acce:	f027 0301 	bic.w	r3, r7, #1
  40acd2:	f1a5 0408 	sub.w	r4, r5, #8
  40acd6:	18e2      	adds	r2, r4, r3
  40acd8:	688e      	ldr	r6, [r1, #8]
  40acda:	6850      	ldr	r0, [r2, #4]
  40acdc:	42b2      	cmp	r2, r6
  40acde:	f020 0003 	bic.w	r0, r0, #3
  40ace2:	d05e      	beq.n	40ada2 <_free_r+0xea>
  40ace4:	07fe      	lsls	r6, r7, #31
  40ace6:	6050      	str	r0, [r2, #4]
  40ace8:	d40b      	bmi.n	40ad02 <_free_r+0x4a>
  40acea:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40acee:	1be4      	subs	r4, r4, r7
  40acf0:	f101 0e08 	add.w	lr, r1, #8
  40acf4:	68a5      	ldr	r5, [r4, #8]
  40acf6:	4575      	cmp	r5, lr
  40acf8:	443b      	add	r3, r7
  40acfa:	d06d      	beq.n	40add8 <_free_r+0x120>
  40acfc:	68e7      	ldr	r7, [r4, #12]
  40acfe:	60ef      	str	r7, [r5, #12]
  40ad00:	60bd      	str	r5, [r7, #8]
  40ad02:	1815      	adds	r5, r2, r0
  40ad04:	686d      	ldr	r5, [r5, #4]
  40ad06:	07ed      	lsls	r5, r5, #31
  40ad08:	d53e      	bpl.n	40ad88 <_free_r+0xd0>
  40ad0a:	f043 0201 	orr.w	r2, r3, #1
  40ad0e:	6062      	str	r2, [r4, #4]
  40ad10:	50e3      	str	r3, [r4, r3]
  40ad12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40ad16:	d217      	bcs.n	40ad48 <_free_r+0x90>
  40ad18:	08db      	lsrs	r3, r3, #3
  40ad1a:	1c58      	adds	r0, r3, #1
  40ad1c:	109a      	asrs	r2, r3, #2
  40ad1e:	684d      	ldr	r5, [r1, #4]
  40ad20:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40ad24:	60a7      	str	r7, [r4, #8]
  40ad26:	2301      	movs	r3, #1
  40ad28:	4093      	lsls	r3, r2
  40ad2a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40ad2e:	432b      	orrs	r3, r5
  40ad30:	3a08      	subs	r2, #8
  40ad32:	60e2      	str	r2, [r4, #12]
  40ad34:	604b      	str	r3, [r1, #4]
  40ad36:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40ad3a:	60fc      	str	r4, [r7, #12]
  40ad3c:	4640      	mov	r0, r8
  40ad3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40ad42:	f000 be97 	b.w	40ba74 <__malloc_unlock>
  40ad46:	4770      	bx	lr
  40ad48:	0a5a      	lsrs	r2, r3, #9
  40ad4a:	2a04      	cmp	r2, #4
  40ad4c:	d852      	bhi.n	40adf4 <_free_r+0x13c>
  40ad4e:	099a      	lsrs	r2, r3, #6
  40ad50:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40ad54:	00ff      	lsls	r7, r7, #3
  40ad56:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40ad5a:	19c8      	adds	r0, r1, r7
  40ad5c:	59ca      	ldr	r2, [r1, r7]
  40ad5e:	3808      	subs	r0, #8
  40ad60:	4290      	cmp	r0, r2
  40ad62:	d04f      	beq.n	40ae04 <_free_r+0x14c>
  40ad64:	6851      	ldr	r1, [r2, #4]
  40ad66:	f021 0103 	bic.w	r1, r1, #3
  40ad6a:	428b      	cmp	r3, r1
  40ad6c:	d232      	bcs.n	40add4 <_free_r+0x11c>
  40ad6e:	6892      	ldr	r2, [r2, #8]
  40ad70:	4290      	cmp	r0, r2
  40ad72:	d1f7      	bne.n	40ad64 <_free_r+0xac>
  40ad74:	68c3      	ldr	r3, [r0, #12]
  40ad76:	60a0      	str	r0, [r4, #8]
  40ad78:	60e3      	str	r3, [r4, #12]
  40ad7a:	609c      	str	r4, [r3, #8]
  40ad7c:	60c4      	str	r4, [r0, #12]
  40ad7e:	4640      	mov	r0, r8
  40ad80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40ad84:	f000 be76 	b.w	40ba74 <__malloc_unlock>
  40ad88:	6895      	ldr	r5, [r2, #8]
  40ad8a:	4f3b      	ldr	r7, [pc, #236]	; (40ae78 <_free_r+0x1c0>)
  40ad8c:	42bd      	cmp	r5, r7
  40ad8e:	4403      	add	r3, r0
  40ad90:	d040      	beq.n	40ae14 <_free_r+0x15c>
  40ad92:	68d0      	ldr	r0, [r2, #12]
  40ad94:	60e8      	str	r0, [r5, #12]
  40ad96:	f043 0201 	orr.w	r2, r3, #1
  40ad9a:	6085      	str	r5, [r0, #8]
  40ad9c:	6062      	str	r2, [r4, #4]
  40ad9e:	50e3      	str	r3, [r4, r3]
  40ada0:	e7b7      	b.n	40ad12 <_free_r+0x5a>
  40ada2:	07ff      	lsls	r7, r7, #31
  40ada4:	4403      	add	r3, r0
  40ada6:	d407      	bmi.n	40adb8 <_free_r+0x100>
  40ada8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40adac:	1aa4      	subs	r4, r4, r2
  40adae:	4413      	add	r3, r2
  40adb0:	68a0      	ldr	r0, [r4, #8]
  40adb2:	68e2      	ldr	r2, [r4, #12]
  40adb4:	60c2      	str	r2, [r0, #12]
  40adb6:	6090      	str	r0, [r2, #8]
  40adb8:	4a30      	ldr	r2, [pc, #192]	; (40ae7c <_free_r+0x1c4>)
  40adba:	6812      	ldr	r2, [r2, #0]
  40adbc:	f043 0001 	orr.w	r0, r3, #1
  40adc0:	4293      	cmp	r3, r2
  40adc2:	6060      	str	r0, [r4, #4]
  40adc4:	608c      	str	r4, [r1, #8]
  40adc6:	d3b9      	bcc.n	40ad3c <_free_r+0x84>
  40adc8:	4b2d      	ldr	r3, [pc, #180]	; (40ae80 <_free_r+0x1c8>)
  40adca:	4640      	mov	r0, r8
  40adcc:	6819      	ldr	r1, [r3, #0]
  40adce:	f7ff ff23 	bl	40ac18 <_malloc_trim_r>
  40add2:	e7b3      	b.n	40ad3c <_free_r+0x84>
  40add4:	4610      	mov	r0, r2
  40add6:	e7cd      	b.n	40ad74 <_free_r+0xbc>
  40add8:	1811      	adds	r1, r2, r0
  40adda:	6849      	ldr	r1, [r1, #4]
  40addc:	07c9      	lsls	r1, r1, #31
  40adde:	d444      	bmi.n	40ae6a <_free_r+0x1b2>
  40ade0:	6891      	ldr	r1, [r2, #8]
  40ade2:	68d2      	ldr	r2, [r2, #12]
  40ade4:	60ca      	str	r2, [r1, #12]
  40ade6:	4403      	add	r3, r0
  40ade8:	f043 0001 	orr.w	r0, r3, #1
  40adec:	6091      	str	r1, [r2, #8]
  40adee:	6060      	str	r0, [r4, #4]
  40adf0:	50e3      	str	r3, [r4, r3]
  40adf2:	e7a3      	b.n	40ad3c <_free_r+0x84>
  40adf4:	2a14      	cmp	r2, #20
  40adf6:	d816      	bhi.n	40ae26 <_free_r+0x16e>
  40adf8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40adfc:	00ff      	lsls	r7, r7, #3
  40adfe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40ae02:	e7aa      	b.n	40ad5a <_free_r+0xa2>
  40ae04:	10aa      	asrs	r2, r5, #2
  40ae06:	2301      	movs	r3, #1
  40ae08:	684d      	ldr	r5, [r1, #4]
  40ae0a:	4093      	lsls	r3, r2
  40ae0c:	432b      	orrs	r3, r5
  40ae0e:	604b      	str	r3, [r1, #4]
  40ae10:	4603      	mov	r3, r0
  40ae12:	e7b0      	b.n	40ad76 <_free_r+0xbe>
  40ae14:	f043 0201 	orr.w	r2, r3, #1
  40ae18:	614c      	str	r4, [r1, #20]
  40ae1a:	610c      	str	r4, [r1, #16]
  40ae1c:	60e5      	str	r5, [r4, #12]
  40ae1e:	60a5      	str	r5, [r4, #8]
  40ae20:	6062      	str	r2, [r4, #4]
  40ae22:	50e3      	str	r3, [r4, r3]
  40ae24:	e78a      	b.n	40ad3c <_free_r+0x84>
  40ae26:	2a54      	cmp	r2, #84	; 0x54
  40ae28:	d806      	bhi.n	40ae38 <_free_r+0x180>
  40ae2a:	0b1a      	lsrs	r2, r3, #12
  40ae2c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40ae30:	00ff      	lsls	r7, r7, #3
  40ae32:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40ae36:	e790      	b.n	40ad5a <_free_r+0xa2>
  40ae38:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40ae3c:	d806      	bhi.n	40ae4c <_free_r+0x194>
  40ae3e:	0bda      	lsrs	r2, r3, #15
  40ae40:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40ae44:	00ff      	lsls	r7, r7, #3
  40ae46:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40ae4a:	e786      	b.n	40ad5a <_free_r+0xa2>
  40ae4c:	f240 5054 	movw	r0, #1364	; 0x554
  40ae50:	4282      	cmp	r2, r0
  40ae52:	d806      	bhi.n	40ae62 <_free_r+0x1aa>
  40ae54:	0c9a      	lsrs	r2, r3, #18
  40ae56:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40ae5a:	00ff      	lsls	r7, r7, #3
  40ae5c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40ae60:	e77b      	b.n	40ad5a <_free_r+0xa2>
  40ae62:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40ae66:	257e      	movs	r5, #126	; 0x7e
  40ae68:	e777      	b.n	40ad5a <_free_r+0xa2>
  40ae6a:	f043 0101 	orr.w	r1, r3, #1
  40ae6e:	6061      	str	r1, [r4, #4]
  40ae70:	6013      	str	r3, [r2, #0]
  40ae72:	e763      	b.n	40ad3c <_free_r+0x84>
  40ae74:	204005d8 	.word	0x204005d8
  40ae78:	204005e0 	.word	0x204005e0
  40ae7c:	204009e4 	.word	0x204009e4
  40ae80:	2040cf34 	.word	0x2040cf34

0040ae84 <__sfvwrite_r>:
  40ae84:	6893      	ldr	r3, [r2, #8]
  40ae86:	2b00      	cmp	r3, #0
  40ae88:	d073      	beq.n	40af72 <__sfvwrite_r+0xee>
  40ae8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ae8e:	898b      	ldrh	r3, [r1, #12]
  40ae90:	b083      	sub	sp, #12
  40ae92:	460c      	mov	r4, r1
  40ae94:	0719      	lsls	r1, r3, #28
  40ae96:	9000      	str	r0, [sp, #0]
  40ae98:	4616      	mov	r6, r2
  40ae9a:	d526      	bpl.n	40aeea <__sfvwrite_r+0x66>
  40ae9c:	6922      	ldr	r2, [r4, #16]
  40ae9e:	b322      	cbz	r2, 40aeea <__sfvwrite_r+0x66>
  40aea0:	f013 0002 	ands.w	r0, r3, #2
  40aea4:	6835      	ldr	r5, [r6, #0]
  40aea6:	d02c      	beq.n	40af02 <__sfvwrite_r+0x7e>
  40aea8:	f04f 0900 	mov.w	r9, #0
  40aeac:	4fb0      	ldr	r7, [pc, #704]	; (40b170 <__sfvwrite_r+0x2ec>)
  40aeae:	46c8      	mov	r8, r9
  40aeb0:	46b2      	mov	sl, r6
  40aeb2:	45b8      	cmp	r8, r7
  40aeb4:	4643      	mov	r3, r8
  40aeb6:	464a      	mov	r2, r9
  40aeb8:	bf28      	it	cs
  40aeba:	463b      	movcs	r3, r7
  40aebc:	9800      	ldr	r0, [sp, #0]
  40aebe:	f1b8 0f00 	cmp.w	r8, #0
  40aec2:	d050      	beq.n	40af66 <__sfvwrite_r+0xe2>
  40aec4:	69e1      	ldr	r1, [r4, #28]
  40aec6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40aec8:	47b0      	blx	r6
  40aeca:	2800      	cmp	r0, #0
  40aecc:	dd58      	ble.n	40af80 <__sfvwrite_r+0xfc>
  40aece:	f8da 3008 	ldr.w	r3, [sl, #8]
  40aed2:	1a1b      	subs	r3, r3, r0
  40aed4:	4481      	add	r9, r0
  40aed6:	eba8 0800 	sub.w	r8, r8, r0
  40aeda:	f8ca 3008 	str.w	r3, [sl, #8]
  40aede:	2b00      	cmp	r3, #0
  40aee0:	d1e7      	bne.n	40aeb2 <__sfvwrite_r+0x2e>
  40aee2:	2000      	movs	r0, #0
  40aee4:	b003      	add	sp, #12
  40aee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aeea:	4621      	mov	r1, r4
  40aeec:	9800      	ldr	r0, [sp, #0]
  40aeee:	f7fe fc91 	bl	409814 <__swsetup_r>
  40aef2:	2800      	cmp	r0, #0
  40aef4:	f040 8133 	bne.w	40b15e <__sfvwrite_r+0x2da>
  40aef8:	89a3      	ldrh	r3, [r4, #12]
  40aefa:	6835      	ldr	r5, [r6, #0]
  40aefc:	f013 0002 	ands.w	r0, r3, #2
  40af00:	d1d2      	bne.n	40aea8 <__sfvwrite_r+0x24>
  40af02:	f013 0901 	ands.w	r9, r3, #1
  40af06:	d145      	bne.n	40af94 <__sfvwrite_r+0x110>
  40af08:	464f      	mov	r7, r9
  40af0a:	9601      	str	r6, [sp, #4]
  40af0c:	b337      	cbz	r7, 40af5c <__sfvwrite_r+0xd8>
  40af0e:	059a      	lsls	r2, r3, #22
  40af10:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40af14:	f140 8083 	bpl.w	40b01e <__sfvwrite_r+0x19a>
  40af18:	4547      	cmp	r7, r8
  40af1a:	46c3      	mov	fp, r8
  40af1c:	f0c0 80ab 	bcc.w	40b076 <__sfvwrite_r+0x1f2>
  40af20:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40af24:	f040 80ac 	bne.w	40b080 <__sfvwrite_r+0x1fc>
  40af28:	6820      	ldr	r0, [r4, #0]
  40af2a:	46ba      	mov	sl, r7
  40af2c:	465a      	mov	r2, fp
  40af2e:	4649      	mov	r1, r9
  40af30:	f000 fd36 	bl	40b9a0 <memmove>
  40af34:	68a2      	ldr	r2, [r4, #8]
  40af36:	6823      	ldr	r3, [r4, #0]
  40af38:	eba2 0208 	sub.w	r2, r2, r8
  40af3c:	445b      	add	r3, fp
  40af3e:	60a2      	str	r2, [r4, #8]
  40af40:	6023      	str	r3, [r4, #0]
  40af42:	9a01      	ldr	r2, [sp, #4]
  40af44:	6893      	ldr	r3, [r2, #8]
  40af46:	eba3 030a 	sub.w	r3, r3, sl
  40af4a:	44d1      	add	r9, sl
  40af4c:	eba7 070a 	sub.w	r7, r7, sl
  40af50:	6093      	str	r3, [r2, #8]
  40af52:	2b00      	cmp	r3, #0
  40af54:	d0c5      	beq.n	40aee2 <__sfvwrite_r+0x5e>
  40af56:	89a3      	ldrh	r3, [r4, #12]
  40af58:	2f00      	cmp	r7, #0
  40af5a:	d1d8      	bne.n	40af0e <__sfvwrite_r+0x8a>
  40af5c:	f8d5 9000 	ldr.w	r9, [r5]
  40af60:	686f      	ldr	r7, [r5, #4]
  40af62:	3508      	adds	r5, #8
  40af64:	e7d2      	b.n	40af0c <__sfvwrite_r+0x88>
  40af66:	f8d5 9000 	ldr.w	r9, [r5]
  40af6a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40af6e:	3508      	adds	r5, #8
  40af70:	e79f      	b.n	40aeb2 <__sfvwrite_r+0x2e>
  40af72:	2000      	movs	r0, #0
  40af74:	4770      	bx	lr
  40af76:	4621      	mov	r1, r4
  40af78:	9800      	ldr	r0, [sp, #0]
  40af7a:	f7ff fd1f 	bl	40a9bc <_fflush_r>
  40af7e:	b370      	cbz	r0, 40afde <__sfvwrite_r+0x15a>
  40af80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40af84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40af88:	f04f 30ff 	mov.w	r0, #4294967295
  40af8c:	81a3      	strh	r3, [r4, #12]
  40af8e:	b003      	add	sp, #12
  40af90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40af94:	4681      	mov	r9, r0
  40af96:	4633      	mov	r3, r6
  40af98:	464e      	mov	r6, r9
  40af9a:	46a8      	mov	r8, r5
  40af9c:	469a      	mov	sl, r3
  40af9e:	464d      	mov	r5, r9
  40afa0:	b34e      	cbz	r6, 40aff6 <__sfvwrite_r+0x172>
  40afa2:	b380      	cbz	r0, 40b006 <__sfvwrite_r+0x182>
  40afa4:	6820      	ldr	r0, [r4, #0]
  40afa6:	6923      	ldr	r3, [r4, #16]
  40afa8:	6962      	ldr	r2, [r4, #20]
  40afaa:	45b1      	cmp	r9, r6
  40afac:	46cb      	mov	fp, r9
  40afae:	bf28      	it	cs
  40afb0:	46b3      	movcs	fp, r6
  40afb2:	4298      	cmp	r0, r3
  40afb4:	465f      	mov	r7, fp
  40afb6:	d904      	bls.n	40afc2 <__sfvwrite_r+0x13e>
  40afb8:	68a3      	ldr	r3, [r4, #8]
  40afba:	4413      	add	r3, r2
  40afbc:	459b      	cmp	fp, r3
  40afbe:	f300 80a6 	bgt.w	40b10e <__sfvwrite_r+0x28a>
  40afc2:	4593      	cmp	fp, r2
  40afc4:	db4b      	blt.n	40b05e <__sfvwrite_r+0x1da>
  40afc6:	4613      	mov	r3, r2
  40afc8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40afca:	69e1      	ldr	r1, [r4, #28]
  40afcc:	9800      	ldr	r0, [sp, #0]
  40afce:	462a      	mov	r2, r5
  40afd0:	47b8      	blx	r7
  40afd2:	1e07      	subs	r7, r0, #0
  40afd4:	ddd4      	ble.n	40af80 <__sfvwrite_r+0xfc>
  40afd6:	ebb9 0907 	subs.w	r9, r9, r7
  40afda:	d0cc      	beq.n	40af76 <__sfvwrite_r+0xf2>
  40afdc:	2001      	movs	r0, #1
  40afde:	f8da 3008 	ldr.w	r3, [sl, #8]
  40afe2:	1bdb      	subs	r3, r3, r7
  40afe4:	443d      	add	r5, r7
  40afe6:	1bf6      	subs	r6, r6, r7
  40afe8:	f8ca 3008 	str.w	r3, [sl, #8]
  40afec:	2b00      	cmp	r3, #0
  40afee:	f43f af78 	beq.w	40aee2 <__sfvwrite_r+0x5e>
  40aff2:	2e00      	cmp	r6, #0
  40aff4:	d1d5      	bne.n	40afa2 <__sfvwrite_r+0x11e>
  40aff6:	f108 0308 	add.w	r3, r8, #8
  40affa:	e913 0060 	ldmdb	r3, {r5, r6}
  40affe:	4698      	mov	r8, r3
  40b000:	3308      	adds	r3, #8
  40b002:	2e00      	cmp	r6, #0
  40b004:	d0f9      	beq.n	40affa <__sfvwrite_r+0x176>
  40b006:	4632      	mov	r2, r6
  40b008:	210a      	movs	r1, #10
  40b00a:	4628      	mov	r0, r5
  40b00c:	f000 fc48 	bl	40b8a0 <memchr>
  40b010:	2800      	cmp	r0, #0
  40b012:	f000 80a1 	beq.w	40b158 <__sfvwrite_r+0x2d4>
  40b016:	3001      	adds	r0, #1
  40b018:	eba0 0905 	sub.w	r9, r0, r5
  40b01c:	e7c2      	b.n	40afa4 <__sfvwrite_r+0x120>
  40b01e:	6820      	ldr	r0, [r4, #0]
  40b020:	6923      	ldr	r3, [r4, #16]
  40b022:	4298      	cmp	r0, r3
  40b024:	d802      	bhi.n	40b02c <__sfvwrite_r+0x1a8>
  40b026:	6963      	ldr	r3, [r4, #20]
  40b028:	429f      	cmp	r7, r3
  40b02a:	d25d      	bcs.n	40b0e8 <__sfvwrite_r+0x264>
  40b02c:	45b8      	cmp	r8, r7
  40b02e:	bf28      	it	cs
  40b030:	46b8      	movcs	r8, r7
  40b032:	4642      	mov	r2, r8
  40b034:	4649      	mov	r1, r9
  40b036:	f000 fcb3 	bl	40b9a0 <memmove>
  40b03a:	68a3      	ldr	r3, [r4, #8]
  40b03c:	6822      	ldr	r2, [r4, #0]
  40b03e:	eba3 0308 	sub.w	r3, r3, r8
  40b042:	4442      	add	r2, r8
  40b044:	60a3      	str	r3, [r4, #8]
  40b046:	6022      	str	r2, [r4, #0]
  40b048:	b10b      	cbz	r3, 40b04e <__sfvwrite_r+0x1ca>
  40b04a:	46c2      	mov	sl, r8
  40b04c:	e779      	b.n	40af42 <__sfvwrite_r+0xbe>
  40b04e:	4621      	mov	r1, r4
  40b050:	9800      	ldr	r0, [sp, #0]
  40b052:	f7ff fcb3 	bl	40a9bc <_fflush_r>
  40b056:	2800      	cmp	r0, #0
  40b058:	d192      	bne.n	40af80 <__sfvwrite_r+0xfc>
  40b05a:	46c2      	mov	sl, r8
  40b05c:	e771      	b.n	40af42 <__sfvwrite_r+0xbe>
  40b05e:	465a      	mov	r2, fp
  40b060:	4629      	mov	r1, r5
  40b062:	f000 fc9d 	bl	40b9a0 <memmove>
  40b066:	68a2      	ldr	r2, [r4, #8]
  40b068:	6823      	ldr	r3, [r4, #0]
  40b06a:	eba2 020b 	sub.w	r2, r2, fp
  40b06e:	445b      	add	r3, fp
  40b070:	60a2      	str	r2, [r4, #8]
  40b072:	6023      	str	r3, [r4, #0]
  40b074:	e7af      	b.n	40afd6 <__sfvwrite_r+0x152>
  40b076:	6820      	ldr	r0, [r4, #0]
  40b078:	46b8      	mov	r8, r7
  40b07a:	46ba      	mov	sl, r7
  40b07c:	46bb      	mov	fp, r7
  40b07e:	e755      	b.n	40af2c <__sfvwrite_r+0xa8>
  40b080:	6962      	ldr	r2, [r4, #20]
  40b082:	6820      	ldr	r0, [r4, #0]
  40b084:	6921      	ldr	r1, [r4, #16]
  40b086:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40b08a:	eba0 0a01 	sub.w	sl, r0, r1
  40b08e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40b092:	f10a 0001 	add.w	r0, sl, #1
  40b096:	ea4f 0868 	mov.w	r8, r8, asr #1
  40b09a:	4438      	add	r0, r7
  40b09c:	4540      	cmp	r0, r8
  40b09e:	4642      	mov	r2, r8
  40b0a0:	bf84      	itt	hi
  40b0a2:	4680      	movhi	r8, r0
  40b0a4:	4642      	movhi	r2, r8
  40b0a6:	055b      	lsls	r3, r3, #21
  40b0a8:	d544      	bpl.n	40b134 <__sfvwrite_r+0x2b0>
  40b0aa:	4611      	mov	r1, r2
  40b0ac:	9800      	ldr	r0, [sp, #0]
  40b0ae:	f000 f92f 	bl	40b310 <_malloc_r>
  40b0b2:	4683      	mov	fp, r0
  40b0b4:	2800      	cmp	r0, #0
  40b0b6:	d055      	beq.n	40b164 <__sfvwrite_r+0x2e0>
  40b0b8:	4652      	mov	r2, sl
  40b0ba:	6921      	ldr	r1, [r4, #16]
  40b0bc:	f7fb fe02 	bl	406cc4 <memcpy>
  40b0c0:	89a3      	ldrh	r3, [r4, #12]
  40b0c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40b0c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40b0ca:	81a3      	strh	r3, [r4, #12]
  40b0cc:	eb0b 000a 	add.w	r0, fp, sl
  40b0d0:	eba8 030a 	sub.w	r3, r8, sl
  40b0d4:	f8c4 b010 	str.w	fp, [r4, #16]
  40b0d8:	f8c4 8014 	str.w	r8, [r4, #20]
  40b0dc:	6020      	str	r0, [r4, #0]
  40b0de:	60a3      	str	r3, [r4, #8]
  40b0e0:	46b8      	mov	r8, r7
  40b0e2:	46ba      	mov	sl, r7
  40b0e4:	46bb      	mov	fp, r7
  40b0e6:	e721      	b.n	40af2c <__sfvwrite_r+0xa8>
  40b0e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40b0ec:	42b9      	cmp	r1, r7
  40b0ee:	bf28      	it	cs
  40b0f0:	4639      	movcs	r1, r7
  40b0f2:	464a      	mov	r2, r9
  40b0f4:	fb91 f1f3 	sdiv	r1, r1, r3
  40b0f8:	9800      	ldr	r0, [sp, #0]
  40b0fa:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40b0fc:	fb03 f301 	mul.w	r3, r3, r1
  40b100:	69e1      	ldr	r1, [r4, #28]
  40b102:	47b0      	blx	r6
  40b104:	f1b0 0a00 	subs.w	sl, r0, #0
  40b108:	f73f af1b 	bgt.w	40af42 <__sfvwrite_r+0xbe>
  40b10c:	e738      	b.n	40af80 <__sfvwrite_r+0xfc>
  40b10e:	461a      	mov	r2, r3
  40b110:	4629      	mov	r1, r5
  40b112:	9301      	str	r3, [sp, #4]
  40b114:	f000 fc44 	bl	40b9a0 <memmove>
  40b118:	6822      	ldr	r2, [r4, #0]
  40b11a:	9b01      	ldr	r3, [sp, #4]
  40b11c:	9800      	ldr	r0, [sp, #0]
  40b11e:	441a      	add	r2, r3
  40b120:	6022      	str	r2, [r4, #0]
  40b122:	4621      	mov	r1, r4
  40b124:	f7ff fc4a 	bl	40a9bc <_fflush_r>
  40b128:	9b01      	ldr	r3, [sp, #4]
  40b12a:	2800      	cmp	r0, #0
  40b12c:	f47f af28 	bne.w	40af80 <__sfvwrite_r+0xfc>
  40b130:	461f      	mov	r7, r3
  40b132:	e750      	b.n	40afd6 <__sfvwrite_r+0x152>
  40b134:	9800      	ldr	r0, [sp, #0]
  40b136:	f000 ff9d 	bl	40c074 <_realloc_r>
  40b13a:	4683      	mov	fp, r0
  40b13c:	2800      	cmp	r0, #0
  40b13e:	d1c5      	bne.n	40b0cc <__sfvwrite_r+0x248>
  40b140:	9d00      	ldr	r5, [sp, #0]
  40b142:	6921      	ldr	r1, [r4, #16]
  40b144:	4628      	mov	r0, r5
  40b146:	f7ff fdb7 	bl	40acb8 <_free_r>
  40b14a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b14e:	220c      	movs	r2, #12
  40b150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40b154:	602a      	str	r2, [r5, #0]
  40b156:	e715      	b.n	40af84 <__sfvwrite_r+0x100>
  40b158:	f106 0901 	add.w	r9, r6, #1
  40b15c:	e722      	b.n	40afa4 <__sfvwrite_r+0x120>
  40b15e:	f04f 30ff 	mov.w	r0, #4294967295
  40b162:	e6bf      	b.n	40aee4 <__sfvwrite_r+0x60>
  40b164:	9a00      	ldr	r2, [sp, #0]
  40b166:	230c      	movs	r3, #12
  40b168:	6013      	str	r3, [r2, #0]
  40b16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b16e:	e709      	b.n	40af84 <__sfvwrite_r+0x100>
  40b170:	7ffffc00 	.word	0x7ffffc00

0040b174 <_fwalk_reent>:
  40b174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b178:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40b17c:	d01f      	beq.n	40b1be <_fwalk_reent+0x4a>
  40b17e:	4688      	mov	r8, r1
  40b180:	4606      	mov	r6, r0
  40b182:	f04f 0900 	mov.w	r9, #0
  40b186:	687d      	ldr	r5, [r7, #4]
  40b188:	68bc      	ldr	r4, [r7, #8]
  40b18a:	3d01      	subs	r5, #1
  40b18c:	d411      	bmi.n	40b1b2 <_fwalk_reent+0x3e>
  40b18e:	89a3      	ldrh	r3, [r4, #12]
  40b190:	2b01      	cmp	r3, #1
  40b192:	f105 35ff 	add.w	r5, r5, #4294967295
  40b196:	d908      	bls.n	40b1aa <_fwalk_reent+0x36>
  40b198:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40b19c:	3301      	adds	r3, #1
  40b19e:	4621      	mov	r1, r4
  40b1a0:	4630      	mov	r0, r6
  40b1a2:	d002      	beq.n	40b1aa <_fwalk_reent+0x36>
  40b1a4:	47c0      	blx	r8
  40b1a6:	ea49 0900 	orr.w	r9, r9, r0
  40b1aa:	1c6b      	adds	r3, r5, #1
  40b1ac:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40b1b0:	d1ed      	bne.n	40b18e <_fwalk_reent+0x1a>
  40b1b2:	683f      	ldr	r7, [r7, #0]
  40b1b4:	2f00      	cmp	r7, #0
  40b1b6:	d1e6      	bne.n	40b186 <_fwalk_reent+0x12>
  40b1b8:	4648      	mov	r0, r9
  40b1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b1be:	46b9      	mov	r9, r7
  40b1c0:	4648      	mov	r0, r9
  40b1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b1c6:	bf00      	nop

0040b1c8 <__locale_mb_cur_max>:
  40b1c8:	4b04      	ldr	r3, [pc, #16]	; (40b1dc <__locale_mb_cur_max+0x14>)
  40b1ca:	4a05      	ldr	r2, [pc, #20]	; (40b1e0 <__locale_mb_cur_max+0x18>)
  40b1cc:	681b      	ldr	r3, [r3, #0]
  40b1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40b1d0:	2b00      	cmp	r3, #0
  40b1d2:	bf08      	it	eq
  40b1d4:	4613      	moveq	r3, r2
  40b1d6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40b1da:	4770      	bx	lr
  40b1dc:	2040003c 	.word	0x2040003c
  40b1e0:	2040046c 	.word	0x2040046c

0040b1e4 <_localeconv_r>:
  40b1e4:	4a04      	ldr	r2, [pc, #16]	; (40b1f8 <_localeconv_r+0x14>)
  40b1e6:	4b05      	ldr	r3, [pc, #20]	; (40b1fc <_localeconv_r+0x18>)
  40b1e8:	6812      	ldr	r2, [r2, #0]
  40b1ea:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40b1ec:	2800      	cmp	r0, #0
  40b1ee:	bf08      	it	eq
  40b1f0:	4618      	moveq	r0, r3
  40b1f2:	30f0      	adds	r0, #240	; 0xf0
  40b1f4:	4770      	bx	lr
  40b1f6:	bf00      	nop
  40b1f8:	2040003c 	.word	0x2040003c
  40b1fc:	2040046c 	.word	0x2040046c

0040b200 <__retarget_lock_init_recursive>:
  40b200:	4770      	bx	lr
  40b202:	bf00      	nop

0040b204 <__retarget_lock_close_recursive>:
  40b204:	4770      	bx	lr
  40b206:	bf00      	nop

0040b208 <__retarget_lock_acquire_recursive>:
  40b208:	4770      	bx	lr
  40b20a:	bf00      	nop

0040b20c <__retarget_lock_release_recursive>:
  40b20c:	4770      	bx	lr
  40b20e:	bf00      	nop

0040b210 <__swhatbuf_r>:
  40b210:	b570      	push	{r4, r5, r6, lr}
  40b212:	460c      	mov	r4, r1
  40b214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b218:	2900      	cmp	r1, #0
  40b21a:	b090      	sub	sp, #64	; 0x40
  40b21c:	4615      	mov	r5, r2
  40b21e:	461e      	mov	r6, r3
  40b220:	db14      	blt.n	40b24c <__swhatbuf_r+0x3c>
  40b222:	aa01      	add	r2, sp, #4
  40b224:	f001 fbc0 	bl	40c9a8 <_fstat_r>
  40b228:	2800      	cmp	r0, #0
  40b22a:	db0f      	blt.n	40b24c <__swhatbuf_r+0x3c>
  40b22c:	9a02      	ldr	r2, [sp, #8]
  40b22e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40b232:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40b236:	fab2 f282 	clz	r2, r2
  40b23a:	0952      	lsrs	r2, r2, #5
  40b23c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40b240:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40b244:	6032      	str	r2, [r6, #0]
  40b246:	602b      	str	r3, [r5, #0]
  40b248:	b010      	add	sp, #64	; 0x40
  40b24a:	bd70      	pop	{r4, r5, r6, pc}
  40b24c:	89a2      	ldrh	r2, [r4, #12]
  40b24e:	2300      	movs	r3, #0
  40b250:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40b254:	6033      	str	r3, [r6, #0]
  40b256:	d004      	beq.n	40b262 <__swhatbuf_r+0x52>
  40b258:	2240      	movs	r2, #64	; 0x40
  40b25a:	4618      	mov	r0, r3
  40b25c:	602a      	str	r2, [r5, #0]
  40b25e:	b010      	add	sp, #64	; 0x40
  40b260:	bd70      	pop	{r4, r5, r6, pc}
  40b262:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40b266:	602b      	str	r3, [r5, #0]
  40b268:	b010      	add	sp, #64	; 0x40
  40b26a:	bd70      	pop	{r4, r5, r6, pc}

0040b26c <__smakebuf_r>:
  40b26c:	898a      	ldrh	r2, [r1, #12]
  40b26e:	0792      	lsls	r2, r2, #30
  40b270:	460b      	mov	r3, r1
  40b272:	d506      	bpl.n	40b282 <__smakebuf_r+0x16>
  40b274:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40b278:	2101      	movs	r1, #1
  40b27a:	601a      	str	r2, [r3, #0]
  40b27c:	611a      	str	r2, [r3, #16]
  40b27e:	6159      	str	r1, [r3, #20]
  40b280:	4770      	bx	lr
  40b282:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b284:	b083      	sub	sp, #12
  40b286:	ab01      	add	r3, sp, #4
  40b288:	466a      	mov	r2, sp
  40b28a:	460c      	mov	r4, r1
  40b28c:	4606      	mov	r6, r0
  40b28e:	f7ff ffbf 	bl	40b210 <__swhatbuf_r>
  40b292:	9900      	ldr	r1, [sp, #0]
  40b294:	4605      	mov	r5, r0
  40b296:	4630      	mov	r0, r6
  40b298:	f000 f83a 	bl	40b310 <_malloc_r>
  40b29c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b2a0:	b1d8      	cbz	r0, 40b2da <__smakebuf_r+0x6e>
  40b2a2:	9a01      	ldr	r2, [sp, #4]
  40b2a4:	4f15      	ldr	r7, [pc, #84]	; (40b2fc <__smakebuf_r+0x90>)
  40b2a6:	9900      	ldr	r1, [sp, #0]
  40b2a8:	63f7      	str	r7, [r6, #60]	; 0x3c
  40b2aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40b2ae:	81a3      	strh	r3, [r4, #12]
  40b2b0:	6020      	str	r0, [r4, #0]
  40b2b2:	6120      	str	r0, [r4, #16]
  40b2b4:	6161      	str	r1, [r4, #20]
  40b2b6:	b91a      	cbnz	r2, 40b2c0 <__smakebuf_r+0x54>
  40b2b8:	432b      	orrs	r3, r5
  40b2ba:	81a3      	strh	r3, [r4, #12]
  40b2bc:	b003      	add	sp, #12
  40b2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b2c0:	4630      	mov	r0, r6
  40b2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b2c6:	f001 fb83 	bl	40c9d0 <_isatty_r>
  40b2ca:	b1a0      	cbz	r0, 40b2f6 <__smakebuf_r+0x8a>
  40b2cc:	89a3      	ldrh	r3, [r4, #12]
  40b2ce:	f023 0303 	bic.w	r3, r3, #3
  40b2d2:	f043 0301 	orr.w	r3, r3, #1
  40b2d6:	b21b      	sxth	r3, r3
  40b2d8:	e7ee      	b.n	40b2b8 <__smakebuf_r+0x4c>
  40b2da:	059a      	lsls	r2, r3, #22
  40b2dc:	d4ee      	bmi.n	40b2bc <__smakebuf_r+0x50>
  40b2de:	f023 0303 	bic.w	r3, r3, #3
  40b2e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40b2e6:	f043 0302 	orr.w	r3, r3, #2
  40b2ea:	2101      	movs	r1, #1
  40b2ec:	81a3      	strh	r3, [r4, #12]
  40b2ee:	6022      	str	r2, [r4, #0]
  40b2f0:	6122      	str	r2, [r4, #16]
  40b2f2:	6161      	str	r1, [r4, #20]
  40b2f4:	e7e2      	b.n	40b2bc <__smakebuf_r+0x50>
  40b2f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b2fa:	e7dd      	b.n	40b2b8 <__smakebuf_r+0x4c>
  40b2fc:	0040aa11 	.word	0x0040aa11

0040b300 <malloc>:
  40b300:	4b02      	ldr	r3, [pc, #8]	; (40b30c <malloc+0xc>)
  40b302:	4601      	mov	r1, r0
  40b304:	6818      	ldr	r0, [r3, #0]
  40b306:	f000 b803 	b.w	40b310 <_malloc_r>
  40b30a:	bf00      	nop
  40b30c:	2040003c 	.word	0x2040003c

0040b310 <_malloc_r>:
  40b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b314:	f101 060b 	add.w	r6, r1, #11
  40b318:	2e16      	cmp	r6, #22
  40b31a:	b083      	sub	sp, #12
  40b31c:	4605      	mov	r5, r0
  40b31e:	f240 809e 	bls.w	40b45e <_malloc_r+0x14e>
  40b322:	f036 0607 	bics.w	r6, r6, #7
  40b326:	f100 80bd 	bmi.w	40b4a4 <_malloc_r+0x194>
  40b32a:	42b1      	cmp	r1, r6
  40b32c:	f200 80ba 	bhi.w	40b4a4 <_malloc_r+0x194>
  40b330:	f000 fb9a 	bl	40ba68 <__malloc_lock>
  40b334:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40b338:	f0c0 8293 	bcc.w	40b862 <_malloc_r+0x552>
  40b33c:	0a73      	lsrs	r3, r6, #9
  40b33e:	f000 80b8 	beq.w	40b4b2 <_malloc_r+0x1a2>
  40b342:	2b04      	cmp	r3, #4
  40b344:	f200 8179 	bhi.w	40b63a <_malloc_r+0x32a>
  40b348:	09b3      	lsrs	r3, r6, #6
  40b34a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40b34e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40b352:	00c3      	lsls	r3, r0, #3
  40b354:	4fbf      	ldr	r7, [pc, #764]	; (40b654 <_malloc_r+0x344>)
  40b356:	443b      	add	r3, r7
  40b358:	f1a3 0108 	sub.w	r1, r3, #8
  40b35c:	685c      	ldr	r4, [r3, #4]
  40b35e:	42a1      	cmp	r1, r4
  40b360:	d106      	bne.n	40b370 <_malloc_r+0x60>
  40b362:	e00c      	b.n	40b37e <_malloc_r+0x6e>
  40b364:	2a00      	cmp	r2, #0
  40b366:	f280 80aa 	bge.w	40b4be <_malloc_r+0x1ae>
  40b36a:	68e4      	ldr	r4, [r4, #12]
  40b36c:	42a1      	cmp	r1, r4
  40b36e:	d006      	beq.n	40b37e <_malloc_r+0x6e>
  40b370:	6863      	ldr	r3, [r4, #4]
  40b372:	f023 0303 	bic.w	r3, r3, #3
  40b376:	1b9a      	subs	r2, r3, r6
  40b378:	2a0f      	cmp	r2, #15
  40b37a:	ddf3      	ble.n	40b364 <_malloc_r+0x54>
  40b37c:	4670      	mov	r0, lr
  40b37e:	693c      	ldr	r4, [r7, #16]
  40b380:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40b668 <_malloc_r+0x358>
  40b384:	4574      	cmp	r4, lr
  40b386:	f000 81ab 	beq.w	40b6e0 <_malloc_r+0x3d0>
  40b38a:	6863      	ldr	r3, [r4, #4]
  40b38c:	f023 0303 	bic.w	r3, r3, #3
  40b390:	1b9a      	subs	r2, r3, r6
  40b392:	2a0f      	cmp	r2, #15
  40b394:	f300 8190 	bgt.w	40b6b8 <_malloc_r+0x3a8>
  40b398:	2a00      	cmp	r2, #0
  40b39a:	f8c7 e014 	str.w	lr, [r7, #20]
  40b39e:	f8c7 e010 	str.w	lr, [r7, #16]
  40b3a2:	f280 809d 	bge.w	40b4e0 <_malloc_r+0x1d0>
  40b3a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b3aa:	f080 8161 	bcs.w	40b670 <_malloc_r+0x360>
  40b3ae:	08db      	lsrs	r3, r3, #3
  40b3b0:	f103 0c01 	add.w	ip, r3, #1
  40b3b4:	1099      	asrs	r1, r3, #2
  40b3b6:	687a      	ldr	r2, [r7, #4]
  40b3b8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40b3bc:	f8c4 8008 	str.w	r8, [r4, #8]
  40b3c0:	2301      	movs	r3, #1
  40b3c2:	408b      	lsls	r3, r1
  40b3c4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40b3c8:	4313      	orrs	r3, r2
  40b3ca:	3908      	subs	r1, #8
  40b3cc:	60e1      	str	r1, [r4, #12]
  40b3ce:	607b      	str	r3, [r7, #4]
  40b3d0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40b3d4:	f8c8 400c 	str.w	r4, [r8, #12]
  40b3d8:	1082      	asrs	r2, r0, #2
  40b3da:	2401      	movs	r4, #1
  40b3dc:	4094      	lsls	r4, r2
  40b3de:	429c      	cmp	r4, r3
  40b3e0:	f200 808b 	bhi.w	40b4fa <_malloc_r+0x1ea>
  40b3e4:	421c      	tst	r4, r3
  40b3e6:	d106      	bne.n	40b3f6 <_malloc_r+0xe6>
  40b3e8:	f020 0003 	bic.w	r0, r0, #3
  40b3ec:	0064      	lsls	r4, r4, #1
  40b3ee:	421c      	tst	r4, r3
  40b3f0:	f100 0004 	add.w	r0, r0, #4
  40b3f4:	d0fa      	beq.n	40b3ec <_malloc_r+0xdc>
  40b3f6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40b3fa:	46cc      	mov	ip, r9
  40b3fc:	4680      	mov	r8, r0
  40b3fe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40b402:	459c      	cmp	ip, r3
  40b404:	d107      	bne.n	40b416 <_malloc_r+0x106>
  40b406:	e16d      	b.n	40b6e4 <_malloc_r+0x3d4>
  40b408:	2a00      	cmp	r2, #0
  40b40a:	f280 817b 	bge.w	40b704 <_malloc_r+0x3f4>
  40b40e:	68db      	ldr	r3, [r3, #12]
  40b410:	459c      	cmp	ip, r3
  40b412:	f000 8167 	beq.w	40b6e4 <_malloc_r+0x3d4>
  40b416:	6859      	ldr	r1, [r3, #4]
  40b418:	f021 0103 	bic.w	r1, r1, #3
  40b41c:	1b8a      	subs	r2, r1, r6
  40b41e:	2a0f      	cmp	r2, #15
  40b420:	ddf2      	ble.n	40b408 <_malloc_r+0xf8>
  40b422:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40b426:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40b42a:	9300      	str	r3, [sp, #0]
  40b42c:	199c      	adds	r4, r3, r6
  40b42e:	4628      	mov	r0, r5
  40b430:	f046 0601 	orr.w	r6, r6, #1
  40b434:	f042 0501 	orr.w	r5, r2, #1
  40b438:	605e      	str	r6, [r3, #4]
  40b43a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40b43e:	f8cc 8008 	str.w	r8, [ip, #8]
  40b442:	617c      	str	r4, [r7, #20]
  40b444:	613c      	str	r4, [r7, #16]
  40b446:	f8c4 e00c 	str.w	lr, [r4, #12]
  40b44a:	f8c4 e008 	str.w	lr, [r4, #8]
  40b44e:	6065      	str	r5, [r4, #4]
  40b450:	505a      	str	r2, [r3, r1]
  40b452:	f000 fb0f 	bl	40ba74 <__malloc_unlock>
  40b456:	9b00      	ldr	r3, [sp, #0]
  40b458:	f103 0408 	add.w	r4, r3, #8
  40b45c:	e01e      	b.n	40b49c <_malloc_r+0x18c>
  40b45e:	2910      	cmp	r1, #16
  40b460:	d820      	bhi.n	40b4a4 <_malloc_r+0x194>
  40b462:	f000 fb01 	bl	40ba68 <__malloc_lock>
  40b466:	2610      	movs	r6, #16
  40b468:	2318      	movs	r3, #24
  40b46a:	2002      	movs	r0, #2
  40b46c:	4f79      	ldr	r7, [pc, #484]	; (40b654 <_malloc_r+0x344>)
  40b46e:	443b      	add	r3, r7
  40b470:	f1a3 0208 	sub.w	r2, r3, #8
  40b474:	685c      	ldr	r4, [r3, #4]
  40b476:	4294      	cmp	r4, r2
  40b478:	f000 813d 	beq.w	40b6f6 <_malloc_r+0x3e6>
  40b47c:	6863      	ldr	r3, [r4, #4]
  40b47e:	68e1      	ldr	r1, [r4, #12]
  40b480:	68a6      	ldr	r6, [r4, #8]
  40b482:	f023 0303 	bic.w	r3, r3, #3
  40b486:	4423      	add	r3, r4
  40b488:	4628      	mov	r0, r5
  40b48a:	685a      	ldr	r2, [r3, #4]
  40b48c:	60f1      	str	r1, [r6, #12]
  40b48e:	f042 0201 	orr.w	r2, r2, #1
  40b492:	608e      	str	r6, [r1, #8]
  40b494:	605a      	str	r2, [r3, #4]
  40b496:	f000 faed 	bl	40ba74 <__malloc_unlock>
  40b49a:	3408      	adds	r4, #8
  40b49c:	4620      	mov	r0, r4
  40b49e:	b003      	add	sp, #12
  40b4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b4a4:	2400      	movs	r4, #0
  40b4a6:	230c      	movs	r3, #12
  40b4a8:	4620      	mov	r0, r4
  40b4aa:	602b      	str	r3, [r5, #0]
  40b4ac:	b003      	add	sp, #12
  40b4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b4b2:	2040      	movs	r0, #64	; 0x40
  40b4b4:	f44f 7300 	mov.w	r3, #512	; 0x200
  40b4b8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40b4bc:	e74a      	b.n	40b354 <_malloc_r+0x44>
  40b4be:	4423      	add	r3, r4
  40b4c0:	68e1      	ldr	r1, [r4, #12]
  40b4c2:	685a      	ldr	r2, [r3, #4]
  40b4c4:	68a6      	ldr	r6, [r4, #8]
  40b4c6:	f042 0201 	orr.w	r2, r2, #1
  40b4ca:	60f1      	str	r1, [r6, #12]
  40b4cc:	4628      	mov	r0, r5
  40b4ce:	608e      	str	r6, [r1, #8]
  40b4d0:	605a      	str	r2, [r3, #4]
  40b4d2:	f000 facf 	bl	40ba74 <__malloc_unlock>
  40b4d6:	3408      	adds	r4, #8
  40b4d8:	4620      	mov	r0, r4
  40b4da:	b003      	add	sp, #12
  40b4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b4e0:	4423      	add	r3, r4
  40b4e2:	4628      	mov	r0, r5
  40b4e4:	685a      	ldr	r2, [r3, #4]
  40b4e6:	f042 0201 	orr.w	r2, r2, #1
  40b4ea:	605a      	str	r2, [r3, #4]
  40b4ec:	f000 fac2 	bl	40ba74 <__malloc_unlock>
  40b4f0:	3408      	adds	r4, #8
  40b4f2:	4620      	mov	r0, r4
  40b4f4:	b003      	add	sp, #12
  40b4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b4fa:	68bc      	ldr	r4, [r7, #8]
  40b4fc:	6863      	ldr	r3, [r4, #4]
  40b4fe:	f023 0803 	bic.w	r8, r3, #3
  40b502:	45b0      	cmp	r8, r6
  40b504:	d304      	bcc.n	40b510 <_malloc_r+0x200>
  40b506:	eba8 0306 	sub.w	r3, r8, r6
  40b50a:	2b0f      	cmp	r3, #15
  40b50c:	f300 8085 	bgt.w	40b61a <_malloc_r+0x30a>
  40b510:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40b66c <_malloc_r+0x35c>
  40b514:	4b50      	ldr	r3, [pc, #320]	; (40b658 <_malloc_r+0x348>)
  40b516:	f8d9 2000 	ldr.w	r2, [r9]
  40b51a:	681b      	ldr	r3, [r3, #0]
  40b51c:	3201      	adds	r2, #1
  40b51e:	4433      	add	r3, r6
  40b520:	eb04 0a08 	add.w	sl, r4, r8
  40b524:	f000 8155 	beq.w	40b7d2 <_malloc_r+0x4c2>
  40b528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40b52c:	330f      	adds	r3, #15
  40b52e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40b532:	f02b 0b0f 	bic.w	fp, fp, #15
  40b536:	4659      	mov	r1, fp
  40b538:	4628      	mov	r0, r5
  40b53a:	f000 ff41 	bl	40c3c0 <_sbrk_r>
  40b53e:	1c41      	adds	r1, r0, #1
  40b540:	4602      	mov	r2, r0
  40b542:	f000 80fc 	beq.w	40b73e <_malloc_r+0x42e>
  40b546:	4582      	cmp	sl, r0
  40b548:	f200 80f7 	bhi.w	40b73a <_malloc_r+0x42a>
  40b54c:	4b43      	ldr	r3, [pc, #268]	; (40b65c <_malloc_r+0x34c>)
  40b54e:	6819      	ldr	r1, [r3, #0]
  40b550:	4459      	add	r1, fp
  40b552:	6019      	str	r1, [r3, #0]
  40b554:	f000 814d 	beq.w	40b7f2 <_malloc_r+0x4e2>
  40b558:	f8d9 0000 	ldr.w	r0, [r9]
  40b55c:	3001      	adds	r0, #1
  40b55e:	bf1b      	ittet	ne
  40b560:	eba2 0a0a 	subne.w	sl, r2, sl
  40b564:	4451      	addne	r1, sl
  40b566:	f8c9 2000 	streq.w	r2, [r9]
  40b56a:	6019      	strne	r1, [r3, #0]
  40b56c:	f012 0107 	ands.w	r1, r2, #7
  40b570:	f000 8115 	beq.w	40b79e <_malloc_r+0x48e>
  40b574:	f1c1 0008 	rsb	r0, r1, #8
  40b578:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40b57c:	4402      	add	r2, r0
  40b57e:	3108      	adds	r1, #8
  40b580:	eb02 090b 	add.w	r9, r2, fp
  40b584:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40b588:	eba1 0909 	sub.w	r9, r1, r9
  40b58c:	4649      	mov	r1, r9
  40b58e:	4628      	mov	r0, r5
  40b590:	9301      	str	r3, [sp, #4]
  40b592:	9200      	str	r2, [sp, #0]
  40b594:	f000 ff14 	bl	40c3c0 <_sbrk_r>
  40b598:	1c43      	adds	r3, r0, #1
  40b59a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40b59e:	f000 8143 	beq.w	40b828 <_malloc_r+0x518>
  40b5a2:	1a80      	subs	r0, r0, r2
  40b5a4:	4448      	add	r0, r9
  40b5a6:	f040 0001 	orr.w	r0, r0, #1
  40b5aa:	6819      	ldr	r1, [r3, #0]
  40b5ac:	60ba      	str	r2, [r7, #8]
  40b5ae:	4449      	add	r1, r9
  40b5b0:	42bc      	cmp	r4, r7
  40b5b2:	6050      	str	r0, [r2, #4]
  40b5b4:	6019      	str	r1, [r3, #0]
  40b5b6:	d017      	beq.n	40b5e8 <_malloc_r+0x2d8>
  40b5b8:	f1b8 0f0f 	cmp.w	r8, #15
  40b5bc:	f240 80fb 	bls.w	40b7b6 <_malloc_r+0x4a6>
  40b5c0:	6860      	ldr	r0, [r4, #4]
  40b5c2:	f1a8 020c 	sub.w	r2, r8, #12
  40b5c6:	f022 0207 	bic.w	r2, r2, #7
  40b5ca:	eb04 0e02 	add.w	lr, r4, r2
  40b5ce:	f000 0001 	and.w	r0, r0, #1
  40b5d2:	f04f 0c05 	mov.w	ip, #5
  40b5d6:	4310      	orrs	r0, r2
  40b5d8:	2a0f      	cmp	r2, #15
  40b5da:	6060      	str	r0, [r4, #4]
  40b5dc:	f8ce c004 	str.w	ip, [lr, #4]
  40b5e0:	f8ce c008 	str.w	ip, [lr, #8]
  40b5e4:	f200 8117 	bhi.w	40b816 <_malloc_r+0x506>
  40b5e8:	4b1d      	ldr	r3, [pc, #116]	; (40b660 <_malloc_r+0x350>)
  40b5ea:	68bc      	ldr	r4, [r7, #8]
  40b5ec:	681a      	ldr	r2, [r3, #0]
  40b5ee:	4291      	cmp	r1, r2
  40b5f0:	bf88      	it	hi
  40b5f2:	6019      	strhi	r1, [r3, #0]
  40b5f4:	4b1b      	ldr	r3, [pc, #108]	; (40b664 <_malloc_r+0x354>)
  40b5f6:	681a      	ldr	r2, [r3, #0]
  40b5f8:	4291      	cmp	r1, r2
  40b5fa:	6862      	ldr	r2, [r4, #4]
  40b5fc:	bf88      	it	hi
  40b5fe:	6019      	strhi	r1, [r3, #0]
  40b600:	f022 0203 	bic.w	r2, r2, #3
  40b604:	4296      	cmp	r6, r2
  40b606:	eba2 0306 	sub.w	r3, r2, r6
  40b60a:	d801      	bhi.n	40b610 <_malloc_r+0x300>
  40b60c:	2b0f      	cmp	r3, #15
  40b60e:	dc04      	bgt.n	40b61a <_malloc_r+0x30a>
  40b610:	4628      	mov	r0, r5
  40b612:	f000 fa2f 	bl	40ba74 <__malloc_unlock>
  40b616:	2400      	movs	r4, #0
  40b618:	e740      	b.n	40b49c <_malloc_r+0x18c>
  40b61a:	19a2      	adds	r2, r4, r6
  40b61c:	f043 0301 	orr.w	r3, r3, #1
  40b620:	f046 0601 	orr.w	r6, r6, #1
  40b624:	6066      	str	r6, [r4, #4]
  40b626:	4628      	mov	r0, r5
  40b628:	60ba      	str	r2, [r7, #8]
  40b62a:	6053      	str	r3, [r2, #4]
  40b62c:	f000 fa22 	bl	40ba74 <__malloc_unlock>
  40b630:	3408      	adds	r4, #8
  40b632:	4620      	mov	r0, r4
  40b634:	b003      	add	sp, #12
  40b636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b63a:	2b14      	cmp	r3, #20
  40b63c:	d971      	bls.n	40b722 <_malloc_r+0x412>
  40b63e:	2b54      	cmp	r3, #84	; 0x54
  40b640:	f200 80a3 	bhi.w	40b78a <_malloc_r+0x47a>
  40b644:	0b33      	lsrs	r3, r6, #12
  40b646:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40b64a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40b64e:	00c3      	lsls	r3, r0, #3
  40b650:	e680      	b.n	40b354 <_malloc_r+0x44>
  40b652:	bf00      	nop
  40b654:	204005d8 	.word	0x204005d8
  40b658:	2040cf34 	.word	0x2040cf34
  40b65c:	2040cf04 	.word	0x2040cf04
  40b660:	2040cf2c 	.word	0x2040cf2c
  40b664:	2040cf30 	.word	0x2040cf30
  40b668:	204005e0 	.word	0x204005e0
  40b66c:	204009e0 	.word	0x204009e0
  40b670:	0a5a      	lsrs	r2, r3, #9
  40b672:	2a04      	cmp	r2, #4
  40b674:	d95b      	bls.n	40b72e <_malloc_r+0x41e>
  40b676:	2a14      	cmp	r2, #20
  40b678:	f200 80ae 	bhi.w	40b7d8 <_malloc_r+0x4c8>
  40b67c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40b680:	00c9      	lsls	r1, r1, #3
  40b682:	325b      	adds	r2, #91	; 0x5b
  40b684:	eb07 0c01 	add.w	ip, r7, r1
  40b688:	5879      	ldr	r1, [r7, r1]
  40b68a:	f1ac 0c08 	sub.w	ip, ip, #8
  40b68e:	458c      	cmp	ip, r1
  40b690:	f000 8088 	beq.w	40b7a4 <_malloc_r+0x494>
  40b694:	684a      	ldr	r2, [r1, #4]
  40b696:	f022 0203 	bic.w	r2, r2, #3
  40b69a:	4293      	cmp	r3, r2
  40b69c:	d273      	bcs.n	40b786 <_malloc_r+0x476>
  40b69e:	6889      	ldr	r1, [r1, #8]
  40b6a0:	458c      	cmp	ip, r1
  40b6a2:	d1f7      	bne.n	40b694 <_malloc_r+0x384>
  40b6a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40b6a8:	687b      	ldr	r3, [r7, #4]
  40b6aa:	60e2      	str	r2, [r4, #12]
  40b6ac:	f8c4 c008 	str.w	ip, [r4, #8]
  40b6b0:	6094      	str	r4, [r2, #8]
  40b6b2:	f8cc 400c 	str.w	r4, [ip, #12]
  40b6b6:	e68f      	b.n	40b3d8 <_malloc_r+0xc8>
  40b6b8:	19a1      	adds	r1, r4, r6
  40b6ba:	f046 0c01 	orr.w	ip, r6, #1
  40b6be:	f042 0601 	orr.w	r6, r2, #1
  40b6c2:	f8c4 c004 	str.w	ip, [r4, #4]
  40b6c6:	4628      	mov	r0, r5
  40b6c8:	6179      	str	r1, [r7, #20]
  40b6ca:	6139      	str	r1, [r7, #16]
  40b6cc:	f8c1 e00c 	str.w	lr, [r1, #12]
  40b6d0:	f8c1 e008 	str.w	lr, [r1, #8]
  40b6d4:	604e      	str	r6, [r1, #4]
  40b6d6:	50e2      	str	r2, [r4, r3]
  40b6d8:	f000 f9cc 	bl	40ba74 <__malloc_unlock>
  40b6dc:	3408      	adds	r4, #8
  40b6de:	e6dd      	b.n	40b49c <_malloc_r+0x18c>
  40b6e0:	687b      	ldr	r3, [r7, #4]
  40b6e2:	e679      	b.n	40b3d8 <_malloc_r+0xc8>
  40b6e4:	f108 0801 	add.w	r8, r8, #1
  40b6e8:	f018 0f03 	tst.w	r8, #3
  40b6ec:	f10c 0c08 	add.w	ip, ip, #8
  40b6f0:	f47f ae85 	bne.w	40b3fe <_malloc_r+0xee>
  40b6f4:	e02d      	b.n	40b752 <_malloc_r+0x442>
  40b6f6:	68dc      	ldr	r4, [r3, #12]
  40b6f8:	42a3      	cmp	r3, r4
  40b6fa:	bf08      	it	eq
  40b6fc:	3002      	addeq	r0, #2
  40b6fe:	f43f ae3e 	beq.w	40b37e <_malloc_r+0x6e>
  40b702:	e6bb      	b.n	40b47c <_malloc_r+0x16c>
  40b704:	4419      	add	r1, r3
  40b706:	461c      	mov	r4, r3
  40b708:	684a      	ldr	r2, [r1, #4]
  40b70a:	68db      	ldr	r3, [r3, #12]
  40b70c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40b710:	f042 0201 	orr.w	r2, r2, #1
  40b714:	604a      	str	r2, [r1, #4]
  40b716:	4628      	mov	r0, r5
  40b718:	60f3      	str	r3, [r6, #12]
  40b71a:	609e      	str	r6, [r3, #8]
  40b71c:	f000 f9aa 	bl	40ba74 <__malloc_unlock>
  40b720:	e6bc      	b.n	40b49c <_malloc_r+0x18c>
  40b722:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40b726:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40b72a:	00c3      	lsls	r3, r0, #3
  40b72c:	e612      	b.n	40b354 <_malloc_r+0x44>
  40b72e:	099a      	lsrs	r2, r3, #6
  40b730:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40b734:	00c9      	lsls	r1, r1, #3
  40b736:	3238      	adds	r2, #56	; 0x38
  40b738:	e7a4      	b.n	40b684 <_malloc_r+0x374>
  40b73a:	42bc      	cmp	r4, r7
  40b73c:	d054      	beq.n	40b7e8 <_malloc_r+0x4d8>
  40b73e:	68bc      	ldr	r4, [r7, #8]
  40b740:	6862      	ldr	r2, [r4, #4]
  40b742:	f022 0203 	bic.w	r2, r2, #3
  40b746:	e75d      	b.n	40b604 <_malloc_r+0x2f4>
  40b748:	f859 3908 	ldr.w	r3, [r9], #-8
  40b74c:	4599      	cmp	r9, r3
  40b74e:	f040 8086 	bne.w	40b85e <_malloc_r+0x54e>
  40b752:	f010 0f03 	tst.w	r0, #3
  40b756:	f100 30ff 	add.w	r0, r0, #4294967295
  40b75a:	d1f5      	bne.n	40b748 <_malloc_r+0x438>
  40b75c:	687b      	ldr	r3, [r7, #4]
  40b75e:	ea23 0304 	bic.w	r3, r3, r4
  40b762:	607b      	str	r3, [r7, #4]
  40b764:	0064      	lsls	r4, r4, #1
  40b766:	429c      	cmp	r4, r3
  40b768:	f63f aec7 	bhi.w	40b4fa <_malloc_r+0x1ea>
  40b76c:	2c00      	cmp	r4, #0
  40b76e:	f43f aec4 	beq.w	40b4fa <_malloc_r+0x1ea>
  40b772:	421c      	tst	r4, r3
  40b774:	4640      	mov	r0, r8
  40b776:	f47f ae3e 	bne.w	40b3f6 <_malloc_r+0xe6>
  40b77a:	0064      	lsls	r4, r4, #1
  40b77c:	421c      	tst	r4, r3
  40b77e:	f100 0004 	add.w	r0, r0, #4
  40b782:	d0fa      	beq.n	40b77a <_malloc_r+0x46a>
  40b784:	e637      	b.n	40b3f6 <_malloc_r+0xe6>
  40b786:	468c      	mov	ip, r1
  40b788:	e78c      	b.n	40b6a4 <_malloc_r+0x394>
  40b78a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40b78e:	d815      	bhi.n	40b7bc <_malloc_r+0x4ac>
  40b790:	0bf3      	lsrs	r3, r6, #15
  40b792:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40b796:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40b79a:	00c3      	lsls	r3, r0, #3
  40b79c:	e5da      	b.n	40b354 <_malloc_r+0x44>
  40b79e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40b7a2:	e6ed      	b.n	40b580 <_malloc_r+0x270>
  40b7a4:	687b      	ldr	r3, [r7, #4]
  40b7a6:	1092      	asrs	r2, r2, #2
  40b7a8:	2101      	movs	r1, #1
  40b7aa:	fa01 f202 	lsl.w	r2, r1, r2
  40b7ae:	4313      	orrs	r3, r2
  40b7b0:	607b      	str	r3, [r7, #4]
  40b7b2:	4662      	mov	r2, ip
  40b7b4:	e779      	b.n	40b6aa <_malloc_r+0x39a>
  40b7b6:	2301      	movs	r3, #1
  40b7b8:	6053      	str	r3, [r2, #4]
  40b7ba:	e729      	b.n	40b610 <_malloc_r+0x300>
  40b7bc:	f240 5254 	movw	r2, #1364	; 0x554
  40b7c0:	4293      	cmp	r3, r2
  40b7c2:	d822      	bhi.n	40b80a <_malloc_r+0x4fa>
  40b7c4:	0cb3      	lsrs	r3, r6, #18
  40b7c6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40b7ca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40b7ce:	00c3      	lsls	r3, r0, #3
  40b7d0:	e5c0      	b.n	40b354 <_malloc_r+0x44>
  40b7d2:	f103 0b10 	add.w	fp, r3, #16
  40b7d6:	e6ae      	b.n	40b536 <_malloc_r+0x226>
  40b7d8:	2a54      	cmp	r2, #84	; 0x54
  40b7da:	d829      	bhi.n	40b830 <_malloc_r+0x520>
  40b7dc:	0b1a      	lsrs	r2, r3, #12
  40b7de:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40b7e2:	00c9      	lsls	r1, r1, #3
  40b7e4:	326e      	adds	r2, #110	; 0x6e
  40b7e6:	e74d      	b.n	40b684 <_malloc_r+0x374>
  40b7e8:	4b20      	ldr	r3, [pc, #128]	; (40b86c <_malloc_r+0x55c>)
  40b7ea:	6819      	ldr	r1, [r3, #0]
  40b7ec:	4459      	add	r1, fp
  40b7ee:	6019      	str	r1, [r3, #0]
  40b7f0:	e6b2      	b.n	40b558 <_malloc_r+0x248>
  40b7f2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40b7f6:	2800      	cmp	r0, #0
  40b7f8:	f47f aeae 	bne.w	40b558 <_malloc_r+0x248>
  40b7fc:	eb08 030b 	add.w	r3, r8, fp
  40b800:	68ba      	ldr	r2, [r7, #8]
  40b802:	f043 0301 	orr.w	r3, r3, #1
  40b806:	6053      	str	r3, [r2, #4]
  40b808:	e6ee      	b.n	40b5e8 <_malloc_r+0x2d8>
  40b80a:	207f      	movs	r0, #127	; 0x7f
  40b80c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40b810:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40b814:	e59e      	b.n	40b354 <_malloc_r+0x44>
  40b816:	f104 0108 	add.w	r1, r4, #8
  40b81a:	4628      	mov	r0, r5
  40b81c:	9300      	str	r3, [sp, #0]
  40b81e:	f7ff fa4b 	bl	40acb8 <_free_r>
  40b822:	9b00      	ldr	r3, [sp, #0]
  40b824:	6819      	ldr	r1, [r3, #0]
  40b826:	e6df      	b.n	40b5e8 <_malloc_r+0x2d8>
  40b828:	2001      	movs	r0, #1
  40b82a:	f04f 0900 	mov.w	r9, #0
  40b82e:	e6bc      	b.n	40b5aa <_malloc_r+0x29a>
  40b830:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40b834:	d805      	bhi.n	40b842 <_malloc_r+0x532>
  40b836:	0bda      	lsrs	r2, r3, #15
  40b838:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40b83c:	00c9      	lsls	r1, r1, #3
  40b83e:	3277      	adds	r2, #119	; 0x77
  40b840:	e720      	b.n	40b684 <_malloc_r+0x374>
  40b842:	f240 5154 	movw	r1, #1364	; 0x554
  40b846:	428a      	cmp	r2, r1
  40b848:	d805      	bhi.n	40b856 <_malloc_r+0x546>
  40b84a:	0c9a      	lsrs	r2, r3, #18
  40b84c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40b850:	00c9      	lsls	r1, r1, #3
  40b852:	327c      	adds	r2, #124	; 0x7c
  40b854:	e716      	b.n	40b684 <_malloc_r+0x374>
  40b856:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40b85a:	227e      	movs	r2, #126	; 0x7e
  40b85c:	e712      	b.n	40b684 <_malloc_r+0x374>
  40b85e:	687b      	ldr	r3, [r7, #4]
  40b860:	e780      	b.n	40b764 <_malloc_r+0x454>
  40b862:	08f0      	lsrs	r0, r6, #3
  40b864:	f106 0308 	add.w	r3, r6, #8
  40b868:	e600      	b.n	40b46c <_malloc_r+0x15c>
  40b86a:	bf00      	nop
  40b86c:	2040cf04 	.word	0x2040cf04

0040b870 <__ascii_mbtowc>:
  40b870:	b082      	sub	sp, #8
  40b872:	b149      	cbz	r1, 40b888 <__ascii_mbtowc+0x18>
  40b874:	b15a      	cbz	r2, 40b88e <__ascii_mbtowc+0x1e>
  40b876:	b16b      	cbz	r3, 40b894 <__ascii_mbtowc+0x24>
  40b878:	7813      	ldrb	r3, [r2, #0]
  40b87a:	600b      	str	r3, [r1, #0]
  40b87c:	7812      	ldrb	r2, [r2, #0]
  40b87e:	1c10      	adds	r0, r2, #0
  40b880:	bf18      	it	ne
  40b882:	2001      	movne	r0, #1
  40b884:	b002      	add	sp, #8
  40b886:	4770      	bx	lr
  40b888:	a901      	add	r1, sp, #4
  40b88a:	2a00      	cmp	r2, #0
  40b88c:	d1f3      	bne.n	40b876 <__ascii_mbtowc+0x6>
  40b88e:	4610      	mov	r0, r2
  40b890:	b002      	add	sp, #8
  40b892:	4770      	bx	lr
  40b894:	f06f 0001 	mvn.w	r0, #1
  40b898:	e7f4      	b.n	40b884 <__ascii_mbtowc+0x14>
  40b89a:	bf00      	nop
  40b89c:	0000      	movs	r0, r0
	...

0040b8a0 <memchr>:
  40b8a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40b8a4:	2a10      	cmp	r2, #16
  40b8a6:	db2b      	blt.n	40b900 <memchr+0x60>
  40b8a8:	f010 0f07 	tst.w	r0, #7
  40b8ac:	d008      	beq.n	40b8c0 <memchr+0x20>
  40b8ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  40b8b2:	3a01      	subs	r2, #1
  40b8b4:	428b      	cmp	r3, r1
  40b8b6:	d02d      	beq.n	40b914 <memchr+0x74>
  40b8b8:	f010 0f07 	tst.w	r0, #7
  40b8bc:	b342      	cbz	r2, 40b910 <memchr+0x70>
  40b8be:	d1f6      	bne.n	40b8ae <memchr+0xe>
  40b8c0:	b4f0      	push	{r4, r5, r6, r7}
  40b8c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40b8c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40b8ca:	f022 0407 	bic.w	r4, r2, #7
  40b8ce:	f07f 0700 	mvns.w	r7, #0
  40b8d2:	2300      	movs	r3, #0
  40b8d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40b8d8:	3c08      	subs	r4, #8
  40b8da:	ea85 0501 	eor.w	r5, r5, r1
  40b8de:	ea86 0601 	eor.w	r6, r6, r1
  40b8e2:	fa85 f547 	uadd8	r5, r5, r7
  40b8e6:	faa3 f587 	sel	r5, r3, r7
  40b8ea:	fa86 f647 	uadd8	r6, r6, r7
  40b8ee:	faa5 f687 	sel	r6, r5, r7
  40b8f2:	b98e      	cbnz	r6, 40b918 <memchr+0x78>
  40b8f4:	d1ee      	bne.n	40b8d4 <memchr+0x34>
  40b8f6:	bcf0      	pop	{r4, r5, r6, r7}
  40b8f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40b8fc:	f002 0207 	and.w	r2, r2, #7
  40b900:	b132      	cbz	r2, 40b910 <memchr+0x70>
  40b902:	f810 3b01 	ldrb.w	r3, [r0], #1
  40b906:	3a01      	subs	r2, #1
  40b908:	ea83 0301 	eor.w	r3, r3, r1
  40b90c:	b113      	cbz	r3, 40b914 <memchr+0x74>
  40b90e:	d1f8      	bne.n	40b902 <memchr+0x62>
  40b910:	2000      	movs	r0, #0
  40b912:	4770      	bx	lr
  40b914:	3801      	subs	r0, #1
  40b916:	4770      	bx	lr
  40b918:	2d00      	cmp	r5, #0
  40b91a:	bf06      	itte	eq
  40b91c:	4635      	moveq	r5, r6
  40b91e:	3803      	subeq	r0, #3
  40b920:	3807      	subne	r0, #7
  40b922:	f015 0f01 	tst.w	r5, #1
  40b926:	d107      	bne.n	40b938 <memchr+0x98>
  40b928:	3001      	adds	r0, #1
  40b92a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40b92e:	bf02      	ittt	eq
  40b930:	3001      	addeq	r0, #1
  40b932:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40b936:	3001      	addeq	r0, #1
  40b938:	bcf0      	pop	{r4, r5, r6, r7}
  40b93a:	3801      	subs	r0, #1
  40b93c:	4770      	bx	lr
  40b93e:	bf00      	nop

0040b940 <memcmp>:
  40b940:	2a03      	cmp	r2, #3
  40b942:	b470      	push	{r4, r5, r6}
  40b944:	d922      	bls.n	40b98c <memcmp+0x4c>
  40b946:	ea40 0301 	orr.w	r3, r0, r1
  40b94a:	079b      	lsls	r3, r3, #30
  40b94c:	d011      	beq.n	40b972 <memcmp+0x32>
  40b94e:	7803      	ldrb	r3, [r0, #0]
  40b950:	780c      	ldrb	r4, [r1, #0]
  40b952:	42a3      	cmp	r3, r4
  40b954:	d11d      	bne.n	40b992 <memcmp+0x52>
  40b956:	440a      	add	r2, r1
  40b958:	3101      	adds	r1, #1
  40b95a:	e005      	b.n	40b968 <memcmp+0x28>
  40b95c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40b960:	f811 4b01 	ldrb.w	r4, [r1], #1
  40b964:	42a3      	cmp	r3, r4
  40b966:	d114      	bne.n	40b992 <memcmp+0x52>
  40b968:	4291      	cmp	r1, r2
  40b96a:	d1f7      	bne.n	40b95c <memcmp+0x1c>
  40b96c:	2000      	movs	r0, #0
  40b96e:	bc70      	pop	{r4, r5, r6}
  40b970:	4770      	bx	lr
  40b972:	680d      	ldr	r5, [r1, #0]
  40b974:	6806      	ldr	r6, [r0, #0]
  40b976:	42ae      	cmp	r6, r5
  40b978:	460c      	mov	r4, r1
  40b97a:	4603      	mov	r3, r0
  40b97c:	f101 0104 	add.w	r1, r1, #4
  40b980:	f100 0004 	add.w	r0, r0, #4
  40b984:	d108      	bne.n	40b998 <memcmp+0x58>
  40b986:	3a04      	subs	r2, #4
  40b988:	2a03      	cmp	r2, #3
  40b98a:	d8f2      	bhi.n	40b972 <memcmp+0x32>
  40b98c:	2a00      	cmp	r2, #0
  40b98e:	d1de      	bne.n	40b94e <memcmp+0xe>
  40b990:	e7ec      	b.n	40b96c <memcmp+0x2c>
  40b992:	1b18      	subs	r0, r3, r4
  40b994:	bc70      	pop	{r4, r5, r6}
  40b996:	4770      	bx	lr
  40b998:	4621      	mov	r1, r4
  40b99a:	4618      	mov	r0, r3
  40b99c:	e7d7      	b.n	40b94e <memcmp+0xe>
  40b99e:	bf00      	nop

0040b9a0 <memmove>:
  40b9a0:	4288      	cmp	r0, r1
  40b9a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b9a4:	d90d      	bls.n	40b9c2 <memmove+0x22>
  40b9a6:	188b      	adds	r3, r1, r2
  40b9a8:	4298      	cmp	r0, r3
  40b9aa:	d20a      	bcs.n	40b9c2 <memmove+0x22>
  40b9ac:	1884      	adds	r4, r0, r2
  40b9ae:	2a00      	cmp	r2, #0
  40b9b0:	d051      	beq.n	40ba56 <memmove+0xb6>
  40b9b2:	4622      	mov	r2, r4
  40b9b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40b9b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40b9bc:	4299      	cmp	r1, r3
  40b9be:	d1f9      	bne.n	40b9b4 <memmove+0x14>
  40b9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b9c2:	2a0f      	cmp	r2, #15
  40b9c4:	d948      	bls.n	40ba58 <memmove+0xb8>
  40b9c6:	ea41 0300 	orr.w	r3, r1, r0
  40b9ca:	079b      	lsls	r3, r3, #30
  40b9cc:	d146      	bne.n	40ba5c <memmove+0xbc>
  40b9ce:	f100 0410 	add.w	r4, r0, #16
  40b9d2:	f101 0310 	add.w	r3, r1, #16
  40b9d6:	4615      	mov	r5, r2
  40b9d8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40b9dc:	f844 6c10 	str.w	r6, [r4, #-16]
  40b9e0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40b9e4:	f844 6c0c 	str.w	r6, [r4, #-12]
  40b9e8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40b9ec:	f844 6c08 	str.w	r6, [r4, #-8]
  40b9f0:	3d10      	subs	r5, #16
  40b9f2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40b9f6:	f844 6c04 	str.w	r6, [r4, #-4]
  40b9fa:	2d0f      	cmp	r5, #15
  40b9fc:	f103 0310 	add.w	r3, r3, #16
  40ba00:	f104 0410 	add.w	r4, r4, #16
  40ba04:	d8e8      	bhi.n	40b9d8 <memmove+0x38>
  40ba06:	f1a2 0310 	sub.w	r3, r2, #16
  40ba0a:	f023 030f 	bic.w	r3, r3, #15
  40ba0e:	f002 0e0f 	and.w	lr, r2, #15
  40ba12:	3310      	adds	r3, #16
  40ba14:	f1be 0f03 	cmp.w	lr, #3
  40ba18:	4419      	add	r1, r3
  40ba1a:	4403      	add	r3, r0
  40ba1c:	d921      	bls.n	40ba62 <memmove+0xc2>
  40ba1e:	1f1e      	subs	r6, r3, #4
  40ba20:	460d      	mov	r5, r1
  40ba22:	4674      	mov	r4, lr
  40ba24:	3c04      	subs	r4, #4
  40ba26:	f855 7b04 	ldr.w	r7, [r5], #4
  40ba2a:	f846 7f04 	str.w	r7, [r6, #4]!
  40ba2e:	2c03      	cmp	r4, #3
  40ba30:	d8f8      	bhi.n	40ba24 <memmove+0x84>
  40ba32:	f1ae 0404 	sub.w	r4, lr, #4
  40ba36:	f024 0403 	bic.w	r4, r4, #3
  40ba3a:	3404      	adds	r4, #4
  40ba3c:	4421      	add	r1, r4
  40ba3e:	4423      	add	r3, r4
  40ba40:	f002 0203 	and.w	r2, r2, #3
  40ba44:	b162      	cbz	r2, 40ba60 <memmove+0xc0>
  40ba46:	3b01      	subs	r3, #1
  40ba48:	440a      	add	r2, r1
  40ba4a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40ba4e:	f803 4f01 	strb.w	r4, [r3, #1]!
  40ba52:	428a      	cmp	r2, r1
  40ba54:	d1f9      	bne.n	40ba4a <memmove+0xaa>
  40ba56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ba58:	4603      	mov	r3, r0
  40ba5a:	e7f3      	b.n	40ba44 <memmove+0xa4>
  40ba5c:	4603      	mov	r3, r0
  40ba5e:	e7f2      	b.n	40ba46 <memmove+0xa6>
  40ba60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ba62:	4672      	mov	r2, lr
  40ba64:	e7ee      	b.n	40ba44 <memmove+0xa4>
  40ba66:	bf00      	nop

0040ba68 <__malloc_lock>:
  40ba68:	4801      	ldr	r0, [pc, #4]	; (40ba70 <__malloc_lock+0x8>)
  40ba6a:	f7ff bbcd 	b.w	40b208 <__retarget_lock_acquire_recursive>
  40ba6e:	bf00      	nop
  40ba70:	2040d1b4 	.word	0x2040d1b4

0040ba74 <__malloc_unlock>:
  40ba74:	4801      	ldr	r0, [pc, #4]	; (40ba7c <__malloc_unlock+0x8>)
  40ba76:	f7ff bbc9 	b.w	40b20c <__retarget_lock_release_recursive>
  40ba7a:	bf00      	nop
  40ba7c:	2040d1b4 	.word	0x2040d1b4

0040ba80 <_Balloc>:
  40ba80:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40ba82:	b570      	push	{r4, r5, r6, lr}
  40ba84:	4605      	mov	r5, r0
  40ba86:	460c      	mov	r4, r1
  40ba88:	b14b      	cbz	r3, 40ba9e <_Balloc+0x1e>
  40ba8a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40ba8e:	b180      	cbz	r0, 40bab2 <_Balloc+0x32>
  40ba90:	6802      	ldr	r2, [r0, #0]
  40ba92:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40ba96:	2300      	movs	r3, #0
  40ba98:	6103      	str	r3, [r0, #16]
  40ba9a:	60c3      	str	r3, [r0, #12]
  40ba9c:	bd70      	pop	{r4, r5, r6, pc}
  40ba9e:	2221      	movs	r2, #33	; 0x21
  40baa0:	2104      	movs	r1, #4
  40baa2:	f000 fedd 	bl	40c860 <_calloc_r>
  40baa6:	64e8      	str	r0, [r5, #76]	; 0x4c
  40baa8:	4603      	mov	r3, r0
  40baaa:	2800      	cmp	r0, #0
  40baac:	d1ed      	bne.n	40ba8a <_Balloc+0xa>
  40baae:	2000      	movs	r0, #0
  40bab0:	bd70      	pop	{r4, r5, r6, pc}
  40bab2:	2101      	movs	r1, #1
  40bab4:	fa01 f604 	lsl.w	r6, r1, r4
  40bab8:	1d72      	adds	r2, r6, #5
  40baba:	4628      	mov	r0, r5
  40babc:	0092      	lsls	r2, r2, #2
  40babe:	f000 fecf 	bl	40c860 <_calloc_r>
  40bac2:	2800      	cmp	r0, #0
  40bac4:	d0f3      	beq.n	40baae <_Balloc+0x2e>
  40bac6:	6044      	str	r4, [r0, #4]
  40bac8:	6086      	str	r6, [r0, #8]
  40baca:	e7e4      	b.n	40ba96 <_Balloc+0x16>

0040bacc <_Bfree>:
  40bacc:	b131      	cbz	r1, 40badc <_Bfree+0x10>
  40bace:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40bad0:	684a      	ldr	r2, [r1, #4]
  40bad2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40bad6:	6008      	str	r0, [r1, #0]
  40bad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40badc:	4770      	bx	lr
  40bade:	bf00      	nop

0040bae0 <__multadd>:
  40bae0:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bae2:	690c      	ldr	r4, [r1, #16]
  40bae4:	b083      	sub	sp, #12
  40bae6:	460d      	mov	r5, r1
  40bae8:	4606      	mov	r6, r0
  40baea:	f101 0e14 	add.w	lr, r1, #20
  40baee:	2700      	movs	r7, #0
  40baf0:	f8de 0000 	ldr.w	r0, [lr]
  40baf4:	b281      	uxth	r1, r0
  40baf6:	fb02 3301 	mla	r3, r2, r1, r3
  40bafa:	0c01      	lsrs	r1, r0, #16
  40bafc:	0c18      	lsrs	r0, r3, #16
  40bafe:	fb02 0101 	mla	r1, r2, r1, r0
  40bb02:	b29b      	uxth	r3, r3
  40bb04:	3701      	adds	r7, #1
  40bb06:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40bb0a:	42bc      	cmp	r4, r7
  40bb0c:	f84e 3b04 	str.w	r3, [lr], #4
  40bb10:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40bb14:	dcec      	bgt.n	40baf0 <__multadd+0x10>
  40bb16:	b13b      	cbz	r3, 40bb28 <__multadd+0x48>
  40bb18:	68aa      	ldr	r2, [r5, #8]
  40bb1a:	4294      	cmp	r4, r2
  40bb1c:	da07      	bge.n	40bb2e <__multadd+0x4e>
  40bb1e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40bb22:	3401      	adds	r4, #1
  40bb24:	6153      	str	r3, [r2, #20]
  40bb26:	612c      	str	r4, [r5, #16]
  40bb28:	4628      	mov	r0, r5
  40bb2a:	b003      	add	sp, #12
  40bb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bb2e:	6869      	ldr	r1, [r5, #4]
  40bb30:	9301      	str	r3, [sp, #4]
  40bb32:	3101      	adds	r1, #1
  40bb34:	4630      	mov	r0, r6
  40bb36:	f7ff ffa3 	bl	40ba80 <_Balloc>
  40bb3a:	692a      	ldr	r2, [r5, #16]
  40bb3c:	3202      	adds	r2, #2
  40bb3e:	f105 010c 	add.w	r1, r5, #12
  40bb42:	4607      	mov	r7, r0
  40bb44:	0092      	lsls	r2, r2, #2
  40bb46:	300c      	adds	r0, #12
  40bb48:	f7fb f8bc 	bl	406cc4 <memcpy>
  40bb4c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40bb4e:	6869      	ldr	r1, [r5, #4]
  40bb50:	9b01      	ldr	r3, [sp, #4]
  40bb52:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40bb56:	6028      	str	r0, [r5, #0]
  40bb58:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40bb5c:	463d      	mov	r5, r7
  40bb5e:	e7de      	b.n	40bb1e <__multadd+0x3e>

0040bb60 <__hi0bits>:
  40bb60:	0c02      	lsrs	r2, r0, #16
  40bb62:	0412      	lsls	r2, r2, #16
  40bb64:	4603      	mov	r3, r0
  40bb66:	b9b2      	cbnz	r2, 40bb96 <__hi0bits+0x36>
  40bb68:	0403      	lsls	r3, r0, #16
  40bb6a:	2010      	movs	r0, #16
  40bb6c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40bb70:	bf04      	itt	eq
  40bb72:	021b      	lsleq	r3, r3, #8
  40bb74:	3008      	addeq	r0, #8
  40bb76:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40bb7a:	bf04      	itt	eq
  40bb7c:	011b      	lsleq	r3, r3, #4
  40bb7e:	3004      	addeq	r0, #4
  40bb80:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40bb84:	bf04      	itt	eq
  40bb86:	009b      	lsleq	r3, r3, #2
  40bb88:	3002      	addeq	r0, #2
  40bb8a:	2b00      	cmp	r3, #0
  40bb8c:	db02      	blt.n	40bb94 <__hi0bits+0x34>
  40bb8e:	005b      	lsls	r3, r3, #1
  40bb90:	d403      	bmi.n	40bb9a <__hi0bits+0x3a>
  40bb92:	2020      	movs	r0, #32
  40bb94:	4770      	bx	lr
  40bb96:	2000      	movs	r0, #0
  40bb98:	e7e8      	b.n	40bb6c <__hi0bits+0xc>
  40bb9a:	3001      	adds	r0, #1
  40bb9c:	4770      	bx	lr
  40bb9e:	bf00      	nop

0040bba0 <__lo0bits>:
  40bba0:	6803      	ldr	r3, [r0, #0]
  40bba2:	f013 0207 	ands.w	r2, r3, #7
  40bba6:	4601      	mov	r1, r0
  40bba8:	d007      	beq.n	40bbba <__lo0bits+0x1a>
  40bbaa:	07da      	lsls	r2, r3, #31
  40bbac:	d421      	bmi.n	40bbf2 <__lo0bits+0x52>
  40bbae:	0798      	lsls	r0, r3, #30
  40bbb0:	d421      	bmi.n	40bbf6 <__lo0bits+0x56>
  40bbb2:	089b      	lsrs	r3, r3, #2
  40bbb4:	600b      	str	r3, [r1, #0]
  40bbb6:	2002      	movs	r0, #2
  40bbb8:	4770      	bx	lr
  40bbba:	b298      	uxth	r0, r3
  40bbbc:	b198      	cbz	r0, 40bbe6 <__lo0bits+0x46>
  40bbbe:	4610      	mov	r0, r2
  40bbc0:	f013 0fff 	tst.w	r3, #255	; 0xff
  40bbc4:	bf04      	itt	eq
  40bbc6:	0a1b      	lsreq	r3, r3, #8
  40bbc8:	3008      	addeq	r0, #8
  40bbca:	071a      	lsls	r2, r3, #28
  40bbcc:	bf04      	itt	eq
  40bbce:	091b      	lsreq	r3, r3, #4
  40bbd0:	3004      	addeq	r0, #4
  40bbd2:	079a      	lsls	r2, r3, #30
  40bbd4:	bf04      	itt	eq
  40bbd6:	089b      	lsreq	r3, r3, #2
  40bbd8:	3002      	addeq	r0, #2
  40bbda:	07da      	lsls	r2, r3, #31
  40bbdc:	d407      	bmi.n	40bbee <__lo0bits+0x4e>
  40bbde:	085b      	lsrs	r3, r3, #1
  40bbe0:	d104      	bne.n	40bbec <__lo0bits+0x4c>
  40bbe2:	2020      	movs	r0, #32
  40bbe4:	4770      	bx	lr
  40bbe6:	0c1b      	lsrs	r3, r3, #16
  40bbe8:	2010      	movs	r0, #16
  40bbea:	e7e9      	b.n	40bbc0 <__lo0bits+0x20>
  40bbec:	3001      	adds	r0, #1
  40bbee:	600b      	str	r3, [r1, #0]
  40bbf0:	4770      	bx	lr
  40bbf2:	2000      	movs	r0, #0
  40bbf4:	4770      	bx	lr
  40bbf6:	085b      	lsrs	r3, r3, #1
  40bbf8:	600b      	str	r3, [r1, #0]
  40bbfa:	2001      	movs	r0, #1
  40bbfc:	4770      	bx	lr
  40bbfe:	bf00      	nop

0040bc00 <__i2b>:
  40bc00:	b510      	push	{r4, lr}
  40bc02:	460c      	mov	r4, r1
  40bc04:	2101      	movs	r1, #1
  40bc06:	f7ff ff3b 	bl	40ba80 <_Balloc>
  40bc0a:	2201      	movs	r2, #1
  40bc0c:	6144      	str	r4, [r0, #20]
  40bc0e:	6102      	str	r2, [r0, #16]
  40bc10:	bd10      	pop	{r4, pc}
  40bc12:	bf00      	nop

0040bc14 <__multiply>:
  40bc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bc18:	690c      	ldr	r4, [r1, #16]
  40bc1a:	6915      	ldr	r5, [r2, #16]
  40bc1c:	42ac      	cmp	r4, r5
  40bc1e:	b083      	sub	sp, #12
  40bc20:	468b      	mov	fp, r1
  40bc22:	4616      	mov	r6, r2
  40bc24:	da04      	bge.n	40bc30 <__multiply+0x1c>
  40bc26:	4622      	mov	r2, r4
  40bc28:	46b3      	mov	fp, r6
  40bc2a:	462c      	mov	r4, r5
  40bc2c:	460e      	mov	r6, r1
  40bc2e:	4615      	mov	r5, r2
  40bc30:	f8db 3008 	ldr.w	r3, [fp, #8]
  40bc34:	f8db 1004 	ldr.w	r1, [fp, #4]
  40bc38:	eb04 0805 	add.w	r8, r4, r5
  40bc3c:	4598      	cmp	r8, r3
  40bc3e:	bfc8      	it	gt
  40bc40:	3101      	addgt	r1, #1
  40bc42:	f7ff ff1d 	bl	40ba80 <_Balloc>
  40bc46:	f100 0914 	add.w	r9, r0, #20
  40bc4a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40bc4e:	45d1      	cmp	r9, sl
  40bc50:	9000      	str	r0, [sp, #0]
  40bc52:	d205      	bcs.n	40bc60 <__multiply+0x4c>
  40bc54:	464b      	mov	r3, r9
  40bc56:	2100      	movs	r1, #0
  40bc58:	f843 1b04 	str.w	r1, [r3], #4
  40bc5c:	459a      	cmp	sl, r3
  40bc5e:	d8fb      	bhi.n	40bc58 <__multiply+0x44>
  40bc60:	f106 0c14 	add.w	ip, r6, #20
  40bc64:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40bc68:	f10b 0b14 	add.w	fp, fp, #20
  40bc6c:	459c      	cmp	ip, r3
  40bc6e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40bc72:	d24c      	bcs.n	40bd0e <__multiply+0xfa>
  40bc74:	f8cd a004 	str.w	sl, [sp, #4]
  40bc78:	469a      	mov	sl, r3
  40bc7a:	f8dc 5000 	ldr.w	r5, [ip]
  40bc7e:	b2af      	uxth	r7, r5
  40bc80:	b1ef      	cbz	r7, 40bcbe <__multiply+0xaa>
  40bc82:	2100      	movs	r1, #0
  40bc84:	464d      	mov	r5, r9
  40bc86:	465e      	mov	r6, fp
  40bc88:	460c      	mov	r4, r1
  40bc8a:	f856 2b04 	ldr.w	r2, [r6], #4
  40bc8e:	6828      	ldr	r0, [r5, #0]
  40bc90:	b293      	uxth	r3, r2
  40bc92:	b281      	uxth	r1, r0
  40bc94:	fb07 1303 	mla	r3, r7, r3, r1
  40bc98:	0c12      	lsrs	r2, r2, #16
  40bc9a:	0c01      	lsrs	r1, r0, #16
  40bc9c:	4423      	add	r3, r4
  40bc9e:	fb07 1102 	mla	r1, r7, r2, r1
  40bca2:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40bca6:	b29b      	uxth	r3, r3
  40bca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40bcac:	45b6      	cmp	lr, r6
  40bcae:	f845 3b04 	str.w	r3, [r5], #4
  40bcb2:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40bcb6:	d8e8      	bhi.n	40bc8a <__multiply+0x76>
  40bcb8:	602c      	str	r4, [r5, #0]
  40bcba:	f8dc 5000 	ldr.w	r5, [ip]
  40bcbe:	0c2d      	lsrs	r5, r5, #16
  40bcc0:	d01d      	beq.n	40bcfe <__multiply+0xea>
  40bcc2:	f8d9 3000 	ldr.w	r3, [r9]
  40bcc6:	4648      	mov	r0, r9
  40bcc8:	461c      	mov	r4, r3
  40bcca:	4659      	mov	r1, fp
  40bccc:	2200      	movs	r2, #0
  40bcce:	880e      	ldrh	r6, [r1, #0]
  40bcd0:	0c24      	lsrs	r4, r4, #16
  40bcd2:	fb05 4406 	mla	r4, r5, r6, r4
  40bcd6:	4422      	add	r2, r4
  40bcd8:	b29b      	uxth	r3, r3
  40bcda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40bcde:	f840 3b04 	str.w	r3, [r0], #4
  40bce2:	f851 3b04 	ldr.w	r3, [r1], #4
  40bce6:	6804      	ldr	r4, [r0, #0]
  40bce8:	0c1b      	lsrs	r3, r3, #16
  40bcea:	b2a6      	uxth	r6, r4
  40bcec:	fb05 6303 	mla	r3, r5, r3, r6
  40bcf0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40bcf4:	458e      	cmp	lr, r1
  40bcf6:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40bcfa:	d8e8      	bhi.n	40bcce <__multiply+0xba>
  40bcfc:	6003      	str	r3, [r0, #0]
  40bcfe:	f10c 0c04 	add.w	ip, ip, #4
  40bd02:	45e2      	cmp	sl, ip
  40bd04:	f109 0904 	add.w	r9, r9, #4
  40bd08:	d8b7      	bhi.n	40bc7a <__multiply+0x66>
  40bd0a:	f8dd a004 	ldr.w	sl, [sp, #4]
  40bd0e:	f1b8 0f00 	cmp.w	r8, #0
  40bd12:	dd0b      	ble.n	40bd2c <__multiply+0x118>
  40bd14:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40bd18:	f1aa 0a04 	sub.w	sl, sl, #4
  40bd1c:	b11b      	cbz	r3, 40bd26 <__multiply+0x112>
  40bd1e:	e005      	b.n	40bd2c <__multiply+0x118>
  40bd20:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40bd24:	b913      	cbnz	r3, 40bd2c <__multiply+0x118>
  40bd26:	f1b8 0801 	subs.w	r8, r8, #1
  40bd2a:	d1f9      	bne.n	40bd20 <__multiply+0x10c>
  40bd2c:	9800      	ldr	r0, [sp, #0]
  40bd2e:	f8c0 8010 	str.w	r8, [r0, #16]
  40bd32:	b003      	add	sp, #12
  40bd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040bd38 <__pow5mult>:
  40bd38:	f012 0303 	ands.w	r3, r2, #3
  40bd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bd40:	4614      	mov	r4, r2
  40bd42:	4607      	mov	r7, r0
  40bd44:	d12e      	bne.n	40bda4 <__pow5mult+0x6c>
  40bd46:	460d      	mov	r5, r1
  40bd48:	10a4      	asrs	r4, r4, #2
  40bd4a:	d01c      	beq.n	40bd86 <__pow5mult+0x4e>
  40bd4c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40bd4e:	b396      	cbz	r6, 40bdb6 <__pow5mult+0x7e>
  40bd50:	07e3      	lsls	r3, r4, #31
  40bd52:	f04f 0800 	mov.w	r8, #0
  40bd56:	d406      	bmi.n	40bd66 <__pow5mult+0x2e>
  40bd58:	1064      	asrs	r4, r4, #1
  40bd5a:	d014      	beq.n	40bd86 <__pow5mult+0x4e>
  40bd5c:	6830      	ldr	r0, [r6, #0]
  40bd5e:	b1a8      	cbz	r0, 40bd8c <__pow5mult+0x54>
  40bd60:	4606      	mov	r6, r0
  40bd62:	07e3      	lsls	r3, r4, #31
  40bd64:	d5f8      	bpl.n	40bd58 <__pow5mult+0x20>
  40bd66:	4632      	mov	r2, r6
  40bd68:	4629      	mov	r1, r5
  40bd6a:	4638      	mov	r0, r7
  40bd6c:	f7ff ff52 	bl	40bc14 <__multiply>
  40bd70:	b1b5      	cbz	r5, 40bda0 <__pow5mult+0x68>
  40bd72:	686a      	ldr	r2, [r5, #4]
  40bd74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40bd76:	1064      	asrs	r4, r4, #1
  40bd78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40bd7c:	6029      	str	r1, [r5, #0]
  40bd7e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40bd82:	4605      	mov	r5, r0
  40bd84:	d1ea      	bne.n	40bd5c <__pow5mult+0x24>
  40bd86:	4628      	mov	r0, r5
  40bd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bd8c:	4632      	mov	r2, r6
  40bd8e:	4631      	mov	r1, r6
  40bd90:	4638      	mov	r0, r7
  40bd92:	f7ff ff3f 	bl	40bc14 <__multiply>
  40bd96:	6030      	str	r0, [r6, #0]
  40bd98:	f8c0 8000 	str.w	r8, [r0]
  40bd9c:	4606      	mov	r6, r0
  40bd9e:	e7e0      	b.n	40bd62 <__pow5mult+0x2a>
  40bda0:	4605      	mov	r5, r0
  40bda2:	e7d9      	b.n	40bd58 <__pow5mult+0x20>
  40bda4:	1e5a      	subs	r2, r3, #1
  40bda6:	4d0b      	ldr	r5, [pc, #44]	; (40bdd4 <__pow5mult+0x9c>)
  40bda8:	2300      	movs	r3, #0
  40bdaa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40bdae:	f7ff fe97 	bl	40bae0 <__multadd>
  40bdb2:	4605      	mov	r5, r0
  40bdb4:	e7c8      	b.n	40bd48 <__pow5mult+0x10>
  40bdb6:	2101      	movs	r1, #1
  40bdb8:	4638      	mov	r0, r7
  40bdba:	f7ff fe61 	bl	40ba80 <_Balloc>
  40bdbe:	f240 2171 	movw	r1, #625	; 0x271
  40bdc2:	2201      	movs	r2, #1
  40bdc4:	2300      	movs	r3, #0
  40bdc6:	6141      	str	r1, [r0, #20]
  40bdc8:	6102      	str	r2, [r0, #16]
  40bdca:	4606      	mov	r6, r0
  40bdcc:	64b8      	str	r0, [r7, #72]	; 0x48
  40bdce:	6003      	str	r3, [r0, #0]
  40bdd0:	e7be      	b.n	40bd50 <__pow5mult+0x18>
  40bdd2:	bf00      	nop
  40bdd4:	0040e910 	.word	0x0040e910

0040bdd8 <__lshift>:
  40bdd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40bddc:	4691      	mov	r9, r2
  40bdde:	690a      	ldr	r2, [r1, #16]
  40bde0:	688b      	ldr	r3, [r1, #8]
  40bde2:	ea4f 1469 	mov.w	r4, r9, asr #5
  40bde6:	eb04 0802 	add.w	r8, r4, r2
  40bdea:	f108 0501 	add.w	r5, r8, #1
  40bdee:	429d      	cmp	r5, r3
  40bdf0:	460e      	mov	r6, r1
  40bdf2:	4607      	mov	r7, r0
  40bdf4:	6849      	ldr	r1, [r1, #4]
  40bdf6:	dd04      	ble.n	40be02 <__lshift+0x2a>
  40bdf8:	005b      	lsls	r3, r3, #1
  40bdfa:	429d      	cmp	r5, r3
  40bdfc:	f101 0101 	add.w	r1, r1, #1
  40be00:	dcfa      	bgt.n	40bdf8 <__lshift+0x20>
  40be02:	4638      	mov	r0, r7
  40be04:	f7ff fe3c 	bl	40ba80 <_Balloc>
  40be08:	2c00      	cmp	r4, #0
  40be0a:	f100 0314 	add.w	r3, r0, #20
  40be0e:	dd06      	ble.n	40be1e <__lshift+0x46>
  40be10:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40be14:	2100      	movs	r1, #0
  40be16:	f843 1b04 	str.w	r1, [r3], #4
  40be1a:	429a      	cmp	r2, r3
  40be1c:	d1fb      	bne.n	40be16 <__lshift+0x3e>
  40be1e:	6934      	ldr	r4, [r6, #16]
  40be20:	f106 0114 	add.w	r1, r6, #20
  40be24:	f019 091f 	ands.w	r9, r9, #31
  40be28:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40be2c:	d01d      	beq.n	40be6a <__lshift+0x92>
  40be2e:	f1c9 0c20 	rsb	ip, r9, #32
  40be32:	2200      	movs	r2, #0
  40be34:	680c      	ldr	r4, [r1, #0]
  40be36:	fa04 f409 	lsl.w	r4, r4, r9
  40be3a:	4314      	orrs	r4, r2
  40be3c:	f843 4b04 	str.w	r4, [r3], #4
  40be40:	f851 2b04 	ldr.w	r2, [r1], #4
  40be44:	458e      	cmp	lr, r1
  40be46:	fa22 f20c 	lsr.w	r2, r2, ip
  40be4a:	d8f3      	bhi.n	40be34 <__lshift+0x5c>
  40be4c:	601a      	str	r2, [r3, #0]
  40be4e:	b10a      	cbz	r2, 40be54 <__lshift+0x7c>
  40be50:	f108 0502 	add.w	r5, r8, #2
  40be54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40be56:	6872      	ldr	r2, [r6, #4]
  40be58:	3d01      	subs	r5, #1
  40be5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40be5e:	6105      	str	r5, [r0, #16]
  40be60:	6031      	str	r1, [r6, #0]
  40be62:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40be66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40be6a:	3b04      	subs	r3, #4
  40be6c:	f851 2b04 	ldr.w	r2, [r1], #4
  40be70:	f843 2f04 	str.w	r2, [r3, #4]!
  40be74:	458e      	cmp	lr, r1
  40be76:	d8f9      	bhi.n	40be6c <__lshift+0x94>
  40be78:	e7ec      	b.n	40be54 <__lshift+0x7c>
  40be7a:	bf00      	nop

0040be7c <__mcmp>:
  40be7c:	b430      	push	{r4, r5}
  40be7e:	690b      	ldr	r3, [r1, #16]
  40be80:	4605      	mov	r5, r0
  40be82:	6900      	ldr	r0, [r0, #16]
  40be84:	1ac0      	subs	r0, r0, r3
  40be86:	d10f      	bne.n	40bea8 <__mcmp+0x2c>
  40be88:	009b      	lsls	r3, r3, #2
  40be8a:	3514      	adds	r5, #20
  40be8c:	3114      	adds	r1, #20
  40be8e:	4419      	add	r1, r3
  40be90:	442b      	add	r3, r5
  40be92:	e001      	b.n	40be98 <__mcmp+0x1c>
  40be94:	429d      	cmp	r5, r3
  40be96:	d207      	bcs.n	40bea8 <__mcmp+0x2c>
  40be98:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40be9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40bea0:	4294      	cmp	r4, r2
  40bea2:	d0f7      	beq.n	40be94 <__mcmp+0x18>
  40bea4:	d302      	bcc.n	40beac <__mcmp+0x30>
  40bea6:	2001      	movs	r0, #1
  40bea8:	bc30      	pop	{r4, r5}
  40beaa:	4770      	bx	lr
  40beac:	f04f 30ff 	mov.w	r0, #4294967295
  40beb0:	e7fa      	b.n	40bea8 <__mcmp+0x2c>
  40beb2:	bf00      	nop

0040beb4 <__mdiff>:
  40beb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40beb8:	690f      	ldr	r7, [r1, #16]
  40beba:	460e      	mov	r6, r1
  40bebc:	6911      	ldr	r1, [r2, #16]
  40bebe:	1a7f      	subs	r7, r7, r1
  40bec0:	2f00      	cmp	r7, #0
  40bec2:	4690      	mov	r8, r2
  40bec4:	d117      	bne.n	40bef6 <__mdiff+0x42>
  40bec6:	0089      	lsls	r1, r1, #2
  40bec8:	f106 0514 	add.w	r5, r6, #20
  40becc:	f102 0e14 	add.w	lr, r2, #20
  40bed0:	186b      	adds	r3, r5, r1
  40bed2:	4471      	add	r1, lr
  40bed4:	e001      	b.n	40beda <__mdiff+0x26>
  40bed6:	429d      	cmp	r5, r3
  40bed8:	d25c      	bcs.n	40bf94 <__mdiff+0xe0>
  40beda:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40bede:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40bee2:	42a2      	cmp	r2, r4
  40bee4:	d0f7      	beq.n	40bed6 <__mdiff+0x22>
  40bee6:	d25e      	bcs.n	40bfa6 <__mdiff+0xf2>
  40bee8:	4633      	mov	r3, r6
  40beea:	462c      	mov	r4, r5
  40beec:	4646      	mov	r6, r8
  40beee:	4675      	mov	r5, lr
  40bef0:	4698      	mov	r8, r3
  40bef2:	2701      	movs	r7, #1
  40bef4:	e005      	b.n	40bf02 <__mdiff+0x4e>
  40bef6:	db58      	blt.n	40bfaa <__mdiff+0xf6>
  40bef8:	f106 0514 	add.w	r5, r6, #20
  40befc:	f108 0414 	add.w	r4, r8, #20
  40bf00:	2700      	movs	r7, #0
  40bf02:	6871      	ldr	r1, [r6, #4]
  40bf04:	f7ff fdbc 	bl	40ba80 <_Balloc>
  40bf08:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40bf0c:	6936      	ldr	r6, [r6, #16]
  40bf0e:	60c7      	str	r7, [r0, #12]
  40bf10:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40bf14:	46a6      	mov	lr, r4
  40bf16:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40bf1a:	f100 0414 	add.w	r4, r0, #20
  40bf1e:	2300      	movs	r3, #0
  40bf20:	f85e 1b04 	ldr.w	r1, [lr], #4
  40bf24:	f855 8b04 	ldr.w	r8, [r5], #4
  40bf28:	b28a      	uxth	r2, r1
  40bf2a:	fa13 f388 	uxtah	r3, r3, r8
  40bf2e:	0c09      	lsrs	r1, r1, #16
  40bf30:	1a9a      	subs	r2, r3, r2
  40bf32:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40bf36:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40bf3a:	b292      	uxth	r2, r2
  40bf3c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40bf40:	45f4      	cmp	ip, lr
  40bf42:	f844 2b04 	str.w	r2, [r4], #4
  40bf46:	ea4f 4323 	mov.w	r3, r3, asr #16
  40bf4a:	d8e9      	bhi.n	40bf20 <__mdiff+0x6c>
  40bf4c:	42af      	cmp	r7, r5
  40bf4e:	d917      	bls.n	40bf80 <__mdiff+0xcc>
  40bf50:	46a4      	mov	ip, r4
  40bf52:	46ae      	mov	lr, r5
  40bf54:	f85e 2b04 	ldr.w	r2, [lr], #4
  40bf58:	fa13 f382 	uxtah	r3, r3, r2
  40bf5c:	1419      	asrs	r1, r3, #16
  40bf5e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40bf62:	b29b      	uxth	r3, r3
  40bf64:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40bf68:	4577      	cmp	r7, lr
  40bf6a:	f84c 2b04 	str.w	r2, [ip], #4
  40bf6e:	ea4f 4321 	mov.w	r3, r1, asr #16
  40bf72:	d8ef      	bhi.n	40bf54 <__mdiff+0xa0>
  40bf74:	43ed      	mvns	r5, r5
  40bf76:	442f      	add	r7, r5
  40bf78:	f027 0703 	bic.w	r7, r7, #3
  40bf7c:	3704      	adds	r7, #4
  40bf7e:	443c      	add	r4, r7
  40bf80:	3c04      	subs	r4, #4
  40bf82:	b922      	cbnz	r2, 40bf8e <__mdiff+0xda>
  40bf84:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40bf88:	3e01      	subs	r6, #1
  40bf8a:	2b00      	cmp	r3, #0
  40bf8c:	d0fa      	beq.n	40bf84 <__mdiff+0xd0>
  40bf8e:	6106      	str	r6, [r0, #16]
  40bf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bf94:	2100      	movs	r1, #0
  40bf96:	f7ff fd73 	bl	40ba80 <_Balloc>
  40bf9a:	2201      	movs	r2, #1
  40bf9c:	2300      	movs	r3, #0
  40bf9e:	6102      	str	r2, [r0, #16]
  40bfa0:	6143      	str	r3, [r0, #20]
  40bfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bfa6:	4674      	mov	r4, lr
  40bfa8:	e7ab      	b.n	40bf02 <__mdiff+0x4e>
  40bfaa:	4633      	mov	r3, r6
  40bfac:	f106 0414 	add.w	r4, r6, #20
  40bfb0:	f102 0514 	add.w	r5, r2, #20
  40bfb4:	4616      	mov	r6, r2
  40bfb6:	2701      	movs	r7, #1
  40bfb8:	4698      	mov	r8, r3
  40bfba:	e7a2      	b.n	40bf02 <__mdiff+0x4e>

0040bfbc <__d2b>:
  40bfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bfc0:	b082      	sub	sp, #8
  40bfc2:	2101      	movs	r1, #1
  40bfc4:	461c      	mov	r4, r3
  40bfc6:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40bfca:	4615      	mov	r5, r2
  40bfcc:	9e08      	ldr	r6, [sp, #32]
  40bfce:	f7ff fd57 	bl	40ba80 <_Balloc>
  40bfd2:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40bfd6:	4680      	mov	r8, r0
  40bfd8:	b10f      	cbz	r7, 40bfde <__d2b+0x22>
  40bfda:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40bfde:	9401      	str	r4, [sp, #4]
  40bfe0:	b31d      	cbz	r5, 40c02a <__d2b+0x6e>
  40bfe2:	a802      	add	r0, sp, #8
  40bfe4:	f840 5d08 	str.w	r5, [r0, #-8]!
  40bfe8:	f7ff fdda 	bl	40bba0 <__lo0bits>
  40bfec:	2800      	cmp	r0, #0
  40bfee:	d134      	bne.n	40c05a <__d2b+0x9e>
  40bff0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40bff4:	f8c8 2014 	str.w	r2, [r8, #20]
  40bff8:	2b00      	cmp	r3, #0
  40bffa:	bf0c      	ite	eq
  40bffc:	2101      	moveq	r1, #1
  40bffe:	2102      	movne	r1, #2
  40c000:	f8c8 3018 	str.w	r3, [r8, #24]
  40c004:	f8c8 1010 	str.w	r1, [r8, #16]
  40c008:	b9df      	cbnz	r7, 40c042 <__d2b+0x86>
  40c00a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40c00e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40c012:	6030      	str	r0, [r6, #0]
  40c014:	6918      	ldr	r0, [r3, #16]
  40c016:	f7ff fda3 	bl	40bb60 <__hi0bits>
  40c01a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c01c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40c020:	6018      	str	r0, [r3, #0]
  40c022:	4640      	mov	r0, r8
  40c024:	b002      	add	sp, #8
  40c026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c02a:	a801      	add	r0, sp, #4
  40c02c:	f7ff fdb8 	bl	40bba0 <__lo0bits>
  40c030:	9b01      	ldr	r3, [sp, #4]
  40c032:	f8c8 3014 	str.w	r3, [r8, #20]
  40c036:	2101      	movs	r1, #1
  40c038:	3020      	adds	r0, #32
  40c03a:	f8c8 1010 	str.w	r1, [r8, #16]
  40c03e:	2f00      	cmp	r7, #0
  40c040:	d0e3      	beq.n	40c00a <__d2b+0x4e>
  40c042:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c044:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40c048:	4407      	add	r7, r0
  40c04a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40c04e:	6037      	str	r7, [r6, #0]
  40c050:	6018      	str	r0, [r3, #0]
  40c052:	4640      	mov	r0, r8
  40c054:	b002      	add	sp, #8
  40c056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c05a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40c05e:	f1c0 0220 	rsb	r2, r0, #32
  40c062:	fa03 f202 	lsl.w	r2, r3, r2
  40c066:	430a      	orrs	r2, r1
  40c068:	40c3      	lsrs	r3, r0
  40c06a:	9301      	str	r3, [sp, #4]
  40c06c:	f8c8 2014 	str.w	r2, [r8, #20]
  40c070:	e7c2      	b.n	40bff8 <__d2b+0x3c>
  40c072:	bf00      	nop

0040c074 <_realloc_r>:
  40c074:	2900      	cmp	r1, #0
  40c076:	f000 8095 	beq.w	40c1a4 <_realloc_r+0x130>
  40c07a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c07e:	460d      	mov	r5, r1
  40c080:	4616      	mov	r6, r2
  40c082:	b083      	sub	sp, #12
  40c084:	4680      	mov	r8, r0
  40c086:	f106 070b 	add.w	r7, r6, #11
  40c08a:	f7ff fced 	bl	40ba68 <__malloc_lock>
  40c08e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40c092:	2f16      	cmp	r7, #22
  40c094:	f02e 0403 	bic.w	r4, lr, #3
  40c098:	f1a5 0908 	sub.w	r9, r5, #8
  40c09c:	d83c      	bhi.n	40c118 <_realloc_r+0xa4>
  40c09e:	2210      	movs	r2, #16
  40c0a0:	4617      	mov	r7, r2
  40c0a2:	42be      	cmp	r6, r7
  40c0a4:	d83d      	bhi.n	40c122 <_realloc_r+0xae>
  40c0a6:	4294      	cmp	r4, r2
  40c0a8:	da43      	bge.n	40c132 <_realloc_r+0xbe>
  40c0aa:	4bc4      	ldr	r3, [pc, #784]	; (40c3bc <_realloc_r+0x348>)
  40c0ac:	6899      	ldr	r1, [r3, #8]
  40c0ae:	eb09 0004 	add.w	r0, r9, r4
  40c0b2:	4288      	cmp	r0, r1
  40c0b4:	f000 80b4 	beq.w	40c220 <_realloc_r+0x1ac>
  40c0b8:	6843      	ldr	r3, [r0, #4]
  40c0ba:	f023 0101 	bic.w	r1, r3, #1
  40c0be:	4401      	add	r1, r0
  40c0c0:	6849      	ldr	r1, [r1, #4]
  40c0c2:	07c9      	lsls	r1, r1, #31
  40c0c4:	d54c      	bpl.n	40c160 <_realloc_r+0xec>
  40c0c6:	f01e 0f01 	tst.w	lr, #1
  40c0ca:	f000 809b 	beq.w	40c204 <_realloc_r+0x190>
  40c0ce:	4631      	mov	r1, r6
  40c0d0:	4640      	mov	r0, r8
  40c0d2:	f7ff f91d 	bl	40b310 <_malloc_r>
  40c0d6:	4606      	mov	r6, r0
  40c0d8:	2800      	cmp	r0, #0
  40c0da:	d03a      	beq.n	40c152 <_realloc_r+0xde>
  40c0dc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40c0e0:	f023 0301 	bic.w	r3, r3, #1
  40c0e4:	444b      	add	r3, r9
  40c0e6:	f1a0 0208 	sub.w	r2, r0, #8
  40c0ea:	429a      	cmp	r2, r3
  40c0ec:	f000 8121 	beq.w	40c332 <_realloc_r+0x2be>
  40c0f0:	1f22      	subs	r2, r4, #4
  40c0f2:	2a24      	cmp	r2, #36	; 0x24
  40c0f4:	f200 8107 	bhi.w	40c306 <_realloc_r+0x292>
  40c0f8:	2a13      	cmp	r2, #19
  40c0fa:	f200 80db 	bhi.w	40c2b4 <_realloc_r+0x240>
  40c0fe:	4603      	mov	r3, r0
  40c100:	462a      	mov	r2, r5
  40c102:	6811      	ldr	r1, [r2, #0]
  40c104:	6019      	str	r1, [r3, #0]
  40c106:	6851      	ldr	r1, [r2, #4]
  40c108:	6059      	str	r1, [r3, #4]
  40c10a:	6892      	ldr	r2, [r2, #8]
  40c10c:	609a      	str	r2, [r3, #8]
  40c10e:	4629      	mov	r1, r5
  40c110:	4640      	mov	r0, r8
  40c112:	f7fe fdd1 	bl	40acb8 <_free_r>
  40c116:	e01c      	b.n	40c152 <_realloc_r+0xde>
  40c118:	f027 0707 	bic.w	r7, r7, #7
  40c11c:	2f00      	cmp	r7, #0
  40c11e:	463a      	mov	r2, r7
  40c120:	dabf      	bge.n	40c0a2 <_realloc_r+0x2e>
  40c122:	2600      	movs	r6, #0
  40c124:	230c      	movs	r3, #12
  40c126:	4630      	mov	r0, r6
  40c128:	f8c8 3000 	str.w	r3, [r8]
  40c12c:	b003      	add	sp, #12
  40c12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c132:	462e      	mov	r6, r5
  40c134:	1be3      	subs	r3, r4, r7
  40c136:	2b0f      	cmp	r3, #15
  40c138:	d81e      	bhi.n	40c178 <_realloc_r+0x104>
  40c13a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40c13e:	f003 0301 	and.w	r3, r3, #1
  40c142:	4323      	orrs	r3, r4
  40c144:	444c      	add	r4, r9
  40c146:	f8c9 3004 	str.w	r3, [r9, #4]
  40c14a:	6863      	ldr	r3, [r4, #4]
  40c14c:	f043 0301 	orr.w	r3, r3, #1
  40c150:	6063      	str	r3, [r4, #4]
  40c152:	4640      	mov	r0, r8
  40c154:	f7ff fc8e 	bl	40ba74 <__malloc_unlock>
  40c158:	4630      	mov	r0, r6
  40c15a:	b003      	add	sp, #12
  40c15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c160:	f023 0303 	bic.w	r3, r3, #3
  40c164:	18e1      	adds	r1, r4, r3
  40c166:	4291      	cmp	r1, r2
  40c168:	db1f      	blt.n	40c1aa <_realloc_r+0x136>
  40c16a:	68c3      	ldr	r3, [r0, #12]
  40c16c:	6882      	ldr	r2, [r0, #8]
  40c16e:	462e      	mov	r6, r5
  40c170:	60d3      	str	r3, [r2, #12]
  40c172:	460c      	mov	r4, r1
  40c174:	609a      	str	r2, [r3, #8]
  40c176:	e7dd      	b.n	40c134 <_realloc_r+0xc0>
  40c178:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40c17c:	eb09 0107 	add.w	r1, r9, r7
  40c180:	f002 0201 	and.w	r2, r2, #1
  40c184:	444c      	add	r4, r9
  40c186:	f043 0301 	orr.w	r3, r3, #1
  40c18a:	4317      	orrs	r7, r2
  40c18c:	f8c9 7004 	str.w	r7, [r9, #4]
  40c190:	604b      	str	r3, [r1, #4]
  40c192:	6863      	ldr	r3, [r4, #4]
  40c194:	f043 0301 	orr.w	r3, r3, #1
  40c198:	3108      	adds	r1, #8
  40c19a:	6063      	str	r3, [r4, #4]
  40c19c:	4640      	mov	r0, r8
  40c19e:	f7fe fd8b 	bl	40acb8 <_free_r>
  40c1a2:	e7d6      	b.n	40c152 <_realloc_r+0xde>
  40c1a4:	4611      	mov	r1, r2
  40c1a6:	f7ff b8b3 	b.w	40b310 <_malloc_r>
  40c1aa:	f01e 0f01 	tst.w	lr, #1
  40c1ae:	d18e      	bne.n	40c0ce <_realloc_r+0x5a>
  40c1b0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40c1b4:	eba9 0a01 	sub.w	sl, r9, r1
  40c1b8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40c1bc:	f021 0103 	bic.w	r1, r1, #3
  40c1c0:	440b      	add	r3, r1
  40c1c2:	4423      	add	r3, r4
  40c1c4:	4293      	cmp	r3, r2
  40c1c6:	db25      	blt.n	40c214 <_realloc_r+0x1a0>
  40c1c8:	68c2      	ldr	r2, [r0, #12]
  40c1ca:	6881      	ldr	r1, [r0, #8]
  40c1cc:	4656      	mov	r6, sl
  40c1ce:	60ca      	str	r2, [r1, #12]
  40c1d0:	6091      	str	r1, [r2, #8]
  40c1d2:	f8da 100c 	ldr.w	r1, [sl, #12]
  40c1d6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40c1da:	1f22      	subs	r2, r4, #4
  40c1dc:	2a24      	cmp	r2, #36	; 0x24
  40c1de:	60c1      	str	r1, [r0, #12]
  40c1e0:	6088      	str	r0, [r1, #8]
  40c1e2:	f200 8094 	bhi.w	40c30e <_realloc_r+0x29a>
  40c1e6:	2a13      	cmp	r2, #19
  40c1e8:	d96f      	bls.n	40c2ca <_realloc_r+0x256>
  40c1ea:	6829      	ldr	r1, [r5, #0]
  40c1ec:	f8ca 1008 	str.w	r1, [sl, #8]
  40c1f0:	6869      	ldr	r1, [r5, #4]
  40c1f2:	f8ca 100c 	str.w	r1, [sl, #12]
  40c1f6:	2a1b      	cmp	r2, #27
  40c1f8:	f200 80a2 	bhi.w	40c340 <_realloc_r+0x2cc>
  40c1fc:	3508      	adds	r5, #8
  40c1fe:	f10a 0210 	add.w	r2, sl, #16
  40c202:	e063      	b.n	40c2cc <_realloc_r+0x258>
  40c204:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40c208:	eba9 0a03 	sub.w	sl, r9, r3
  40c20c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40c210:	f021 0103 	bic.w	r1, r1, #3
  40c214:	1863      	adds	r3, r4, r1
  40c216:	4293      	cmp	r3, r2
  40c218:	f6ff af59 	blt.w	40c0ce <_realloc_r+0x5a>
  40c21c:	4656      	mov	r6, sl
  40c21e:	e7d8      	b.n	40c1d2 <_realloc_r+0x15e>
  40c220:	6841      	ldr	r1, [r0, #4]
  40c222:	f021 0b03 	bic.w	fp, r1, #3
  40c226:	44a3      	add	fp, r4
  40c228:	f107 0010 	add.w	r0, r7, #16
  40c22c:	4583      	cmp	fp, r0
  40c22e:	da56      	bge.n	40c2de <_realloc_r+0x26a>
  40c230:	f01e 0f01 	tst.w	lr, #1
  40c234:	f47f af4b 	bne.w	40c0ce <_realloc_r+0x5a>
  40c238:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40c23c:	eba9 0a01 	sub.w	sl, r9, r1
  40c240:	f8da 1004 	ldr.w	r1, [sl, #4]
  40c244:	f021 0103 	bic.w	r1, r1, #3
  40c248:	448b      	add	fp, r1
  40c24a:	4558      	cmp	r0, fp
  40c24c:	dce2      	bgt.n	40c214 <_realloc_r+0x1a0>
  40c24e:	4656      	mov	r6, sl
  40c250:	f8da 100c 	ldr.w	r1, [sl, #12]
  40c254:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40c258:	1f22      	subs	r2, r4, #4
  40c25a:	2a24      	cmp	r2, #36	; 0x24
  40c25c:	60c1      	str	r1, [r0, #12]
  40c25e:	6088      	str	r0, [r1, #8]
  40c260:	f200 808f 	bhi.w	40c382 <_realloc_r+0x30e>
  40c264:	2a13      	cmp	r2, #19
  40c266:	f240 808a 	bls.w	40c37e <_realloc_r+0x30a>
  40c26a:	6829      	ldr	r1, [r5, #0]
  40c26c:	f8ca 1008 	str.w	r1, [sl, #8]
  40c270:	6869      	ldr	r1, [r5, #4]
  40c272:	f8ca 100c 	str.w	r1, [sl, #12]
  40c276:	2a1b      	cmp	r2, #27
  40c278:	f200 808a 	bhi.w	40c390 <_realloc_r+0x31c>
  40c27c:	3508      	adds	r5, #8
  40c27e:	f10a 0210 	add.w	r2, sl, #16
  40c282:	6829      	ldr	r1, [r5, #0]
  40c284:	6011      	str	r1, [r2, #0]
  40c286:	6869      	ldr	r1, [r5, #4]
  40c288:	6051      	str	r1, [r2, #4]
  40c28a:	68a9      	ldr	r1, [r5, #8]
  40c28c:	6091      	str	r1, [r2, #8]
  40c28e:	eb0a 0107 	add.w	r1, sl, r7
  40c292:	ebab 0207 	sub.w	r2, fp, r7
  40c296:	f042 0201 	orr.w	r2, r2, #1
  40c29a:	6099      	str	r1, [r3, #8]
  40c29c:	604a      	str	r2, [r1, #4]
  40c29e:	f8da 3004 	ldr.w	r3, [sl, #4]
  40c2a2:	f003 0301 	and.w	r3, r3, #1
  40c2a6:	431f      	orrs	r7, r3
  40c2a8:	4640      	mov	r0, r8
  40c2aa:	f8ca 7004 	str.w	r7, [sl, #4]
  40c2ae:	f7ff fbe1 	bl	40ba74 <__malloc_unlock>
  40c2b2:	e751      	b.n	40c158 <_realloc_r+0xe4>
  40c2b4:	682b      	ldr	r3, [r5, #0]
  40c2b6:	6003      	str	r3, [r0, #0]
  40c2b8:	686b      	ldr	r3, [r5, #4]
  40c2ba:	6043      	str	r3, [r0, #4]
  40c2bc:	2a1b      	cmp	r2, #27
  40c2be:	d82d      	bhi.n	40c31c <_realloc_r+0x2a8>
  40c2c0:	f100 0308 	add.w	r3, r0, #8
  40c2c4:	f105 0208 	add.w	r2, r5, #8
  40c2c8:	e71b      	b.n	40c102 <_realloc_r+0x8e>
  40c2ca:	4632      	mov	r2, r6
  40c2cc:	6829      	ldr	r1, [r5, #0]
  40c2ce:	6011      	str	r1, [r2, #0]
  40c2d0:	6869      	ldr	r1, [r5, #4]
  40c2d2:	6051      	str	r1, [r2, #4]
  40c2d4:	68a9      	ldr	r1, [r5, #8]
  40c2d6:	6091      	str	r1, [r2, #8]
  40c2d8:	461c      	mov	r4, r3
  40c2da:	46d1      	mov	r9, sl
  40c2dc:	e72a      	b.n	40c134 <_realloc_r+0xc0>
  40c2de:	eb09 0107 	add.w	r1, r9, r7
  40c2e2:	ebab 0b07 	sub.w	fp, fp, r7
  40c2e6:	f04b 0201 	orr.w	r2, fp, #1
  40c2ea:	6099      	str	r1, [r3, #8]
  40c2ec:	604a      	str	r2, [r1, #4]
  40c2ee:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40c2f2:	f003 0301 	and.w	r3, r3, #1
  40c2f6:	431f      	orrs	r7, r3
  40c2f8:	4640      	mov	r0, r8
  40c2fa:	f845 7c04 	str.w	r7, [r5, #-4]
  40c2fe:	f7ff fbb9 	bl	40ba74 <__malloc_unlock>
  40c302:	462e      	mov	r6, r5
  40c304:	e728      	b.n	40c158 <_realloc_r+0xe4>
  40c306:	4629      	mov	r1, r5
  40c308:	f7ff fb4a 	bl	40b9a0 <memmove>
  40c30c:	e6ff      	b.n	40c10e <_realloc_r+0x9a>
  40c30e:	4629      	mov	r1, r5
  40c310:	4630      	mov	r0, r6
  40c312:	461c      	mov	r4, r3
  40c314:	46d1      	mov	r9, sl
  40c316:	f7ff fb43 	bl	40b9a0 <memmove>
  40c31a:	e70b      	b.n	40c134 <_realloc_r+0xc0>
  40c31c:	68ab      	ldr	r3, [r5, #8]
  40c31e:	6083      	str	r3, [r0, #8]
  40c320:	68eb      	ldr	r3, [r5, #12]
  40c322:	60c3      	str	r3, [r0, #12]
  40c324:	2a24      	cmp	r2, #36	; 0x24
  40c326:	d017      	beq.n	40c358 <_realloc_r+0x2e4>
  40c328:	f100 0310 	add.w	r3, r0, #16
  40c32c:	f105 0210 	add.w	r2, r5, #16
  40c330:	e6e7      	b.n	40c102 <_realloc_r+0x8e>
  40c332:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40c336:	f023 0303 	bic.w	r3, r3, #3
  40c33a:	441c      	add	r4, r3
  40c33c:	462e      	mov	r6, r5
  40c33e:	e6f9      	b.n	40c134 <_realloc_r+0xc0>
  40c340:	68a9      	ldr	r1, [r5, #8]
  40c342:	f8ca 1010 	str.w	r1, [sl, #16]
  40c346:	68e9      	ldr	r1, [r5, #12]
  40c348:	f8ca 1014 	str.w	r1, [sl, #20]
  40c34c:	2a24      	cmp	r2, #36	; 0x24
  40c34e:	d00c      	beq.n	40c36a <_realloc_r+0x2f6>
  40c350:	3510      	adds	r5, #16
  40c352:	f10a 0218 	add.w	r2, sl, #24
  40c356:	e7b9      	b.n	40c2cc <_realloc_r+0x258>
  40c358:	692b      	ldr	r3, [r5, #16]
  40c35a:	6103      	str	r3, [r0, #16]
  40c35c:	696b      	ldr	r3, [r5, #20]
  40c35e:	6143      	str	r3, [r0, #20]
  40c360:	f105 0218 	add.w	r2, r5, #24
  40c364:	f100 0318 	add.w	r3, r0, #24
  40c368:	e6cb      	b.n	40c102 <_realloc_r+0x8e>
  40c36a:	692a      	ldr	r2, [r5, #16]
  40c36c:	f8ca 2018 	str.w	r2, [sl, #24]
  40c370:	696a      	ldr	r2, [r5, #20]
  40c372:	f8ca 201c 	str.w	r2, [sl, #28]
  40c376:	3518      	adds	r5, #24
  40c378:	f10a 0220 	add.w	r2, sl, #32
  40c37c:	e7a6      	b.n	40c2cc <_realloc_r+0x258>
  40c37e:	4632      	mov	r2, r6
  40c380:	e77f      	b.n	40c282 <_realloc_r+0x20e>
  40c382:	4629      	mov	r1, r5
  40c384:	4630      	mov	r0, r6
  40c386:	9301      	str	r3, [sp, #4]
  40c388:	f7ff fb0a 	bl	40b9a0 <memmove>
  40c38c:	9b01      	ldr	r3, [sp, #4]
  40c38e:	e77e      	b.n	40c28e <_realloc_r+0x21a>
  40c390:	68a9      	ldr	r1, [r5, #8]
  40c392:	f8ca 1010 	str.w	r1, [sl, #16]
  40c396:	68e9      	ldr	r1, [r5, #12]
  40c398:	f8ca 1014 	str.w	r1, [sl, #20]
  40c39c:	2a24      	cmp	r2, #36	; 0x24
  40c39e:	d003      	beq.n	40c3a8 <_realloc_r+0x334>
  40c3a0:	3510      	adds	r5, #16
  40c3a2:	f10a 0218 	add.w	r2, sl, #24
  40c3a6:	e76c      	b.n	40c282 <_realloc_r+0x20e>
  40c3a8:	692a      	ldr	r2, [r5, #16]
  40c3aa:	f8ca 2018 	str.w	r2, [sl, #24]
  40c3ae:	696a      	ldr	r2, [r5, #20]
  40c3b0:	f8ca 201c 	str.w	r2, [sl, #28]
  40c3b4:	3518      	adds	r5, #24
  40c3b6:	f10a 0220 	add.w	r2, sl, #32
  40c3ba:	e762      	b.n	40c282 <_realloc_r+0x20e>
  40c3bc:	204005d8 	.word	0x204005d8

0040c3c0 <_sbrk_r>:
  40c3c0:	b538      	push	{r3, r4, r5, lr}
  40c3c2:	4c07      	ldr	r4, [pc, #28]	; (40c3e0 <_sbrk_r+0x20>)
  40c3c4:	2300      	movs	r3, #0
  40c3c6:	4605      	mov	r5, r0
  40c3c8:	4608      	mov	r0, r1
  40c3ca:	6023      	str	r3, [r4, #0]
  40c3cc:	f7f9 fdda 	bl	405f84 <_sbrk>
  40c3d0:	1c43      	adds	r3, r0, #1
  40c3d2:	d000      	beq.n	40c3d6 <_sbrk_r+0x16>
  40c3d4:	bd38      	pop	{r3, r4, r5, pc}
  40c3d6:	6823      	ldr	r3, [r4, #0]
  40c3d8:	2b00      	cmp	r3, #0
  40c3da:	d0fb      	beq.n	40c3d4 <_sbrk_r+0x14>
  40c3dc:	602b      	str	r3, [r5, #0]
  40c3de:	bd38      	pop	{r3, r4, r5, pc}
  40c3e0:	2040d1c8 	.word	0x2040d1c8

0040c3e4 <__sread>:
  40c3e4:	b510      	push	{r4, lr}
  40c3e6:	460c      	mov	r4, r1
  40c3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c3ec:	f000 fb18 	bl	40ca20 <_read_r>
  40c3f0:	2800      	cmp	r0, #0
  40c3f2:	db03      	blt.n	40c3fc <__sread+0x18>
  40c3f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40c3f6:	4403      	add	r3, r0
  40c3f8:	6523      	str	r3, [r4, #80]	; 0x50
  40c3fa:	bd10      	pop	{r4, pc}
  40c3fc:	89a3      	ldrh	r3, [r4, #12]
  40c3fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40c402:	81a3      	strh	r3, [r4, #12]
  40c404:	bd10      	pop	{r4, pc}
  40c406:	bf00      	nop

0040c408 <__swrite>:
  40c408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c40c:	4616      	mov	r6, r2
  40c40e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40c412:	461f      	mov	r7, r3
  40c414:	05d3      	lsls	r3, r2, #23
  40c416:	460c      	mov	r4, r1
  40c418:	4605      	mov	r5, r0
  40c41a:	d507      	bpl.n	40c42c <__swrite+0x24>
  40c41c:	2200      	movs	r2, #0
  40c41e:	2302      	movs	r3, #2
  40c420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c424:	f000 fae6 	bl	40c9f4 <_lseek_r>
  40c428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c42c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40c430:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40c434:	81a2      	strh	r2, [r4, #12]
  40c436:	463b      	mov	r3, r7
  40c438:	4632      	mov	r2, r6
  40c43a:	4628      	mov	r0, r5
  40c43c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40c440:	f000 b996 	b.w	40c770 <_write_r>

0040c444 <__sseek>:
  40c444:	b510      	push	{r4, lr}
  40c446:	460c      	mov	r4, r1
  40c448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c44c:	f000 fad2 	bl	40c9f4 <_lseek_r>
  40c450:	89a3      	ldrh	r3, [r4, #12]
  40c452:	1c42      	adds	r2, r0, #1
  40c454:	bf0e      	itee	eq
  40c456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40c45a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40c45e:	6520      	strne	r0, [r4, #80]	; 0x50
  40c460:	81a3      	strh	r3, [r4, #12]
  40c462:	bd10      	pop	{r4, pc}

0040c464 <__sclose>:
  40c464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c468:	f000 ba2a 	b.w	40c8c0 <_close_r>

0040c46c <strchr>:
  40c46c:	b2c9      	uxtb	r1, r1
  40c46e:	2900      	cmp	r1, #0
  40c470:	d041      	beq.n	40c4f6 <strchr+0x8a>
  40c472:	0782      	lsls	r2, r0, #30
  40c474:	b4f0      	push	{r4, r5, r6, r7}
  40c476:	d067      	beq.n	40c548 <strchr+0xdc>
  40c478:	7803      	ldrb	r3, [r0, #0]
  40c47a:	2b00      	cmp	r3, #0
  40c47c:	d068      	beq.n	40c550 <strchr+0xe4>
  40c47e:	4299      	cmp	r1, r3
  40c480:	d037      	beq.n	40c4f2 <strchr+0x86>
  40c482:	1c43      	adds	r3, r0, #1
  40c484:	e004      	b.n	40c490 <strchr+0x24>
  40c486:	f813 0b01 	ldrb.w	r0, [r3], #1
  40c48a:	b390      	cbz	r0, 40c4f2 <strchr+0x86>
  40c48c:	4281      	cmp	r1, r0
  40c48e:	d02f      	beq.n	40c4f0 <strchr+0x84>
  40c490:	079a      	lsls	r2, r3, #30
  40c492:	461c      	mov	r4, r3
  40c494:	d1f7      	bne.n	40c486 <strchr+0x1a>
  40c496:	6825      	ldr	r5, [r4, #0]
  40c498:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  40c49c:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  40c4a0:	ea83 0605 	eor.w	r6, r3, r5
  40c4a4:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  40c4a8:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  40c4ac:	ea20 0006 	bic.w	r0, r0, r6
  40c4b0:	ea22 0205 	bic.w	r2, r2, r5
  40c4b4:	4302      	orrs	r2, r0
  40c4b6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40c4ba:	d111      	bne.n	40c4e0 <strchr+0x74>
  40c4bc:	4620      	mov	r0, r4
  40c4be:	f850 6f04 	ldr.w	r6, [r0, #4]!
  40c4c2:	ea83 0706 	eor.w	r7, r3, r6
  40c4c6:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  40c4ca:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  40c4ce:	ea25 0507 	bic.w	r5, r5, r7
  40c4d2:	ea22 0206 	bic.w	r2, r2, r6
  40c4d6:	432a      	orrs	r2, r5
  40c4d8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40c4dc:	d0ef      	beq.n	40c4be <strchr+0x52>
  40c4de:	4604      	mov	r4, r0
  40c4e0:	7820      	ldrb	r0, [r4, #0]
  40c4e2:	b918      	cbnz	r0, 40c4ec <strchr+0x80>
  40c4e4:	e005      	b.n	40c4f2 <strchr+0x86>
  40c4e6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40c4ea:	b110      	cbz	r0, 40c4f2 <strchr+0x86>
  40c4ec:	4281      	cmp	r1, r0
  40c4ee:	d1fa      	bne.n	40c4e6 <strchr+0x7a>
  40c4f0:	4620      	mov	r0, r4
  40c4f2:	bcf0      	pop	{r4, r5, r6, r7}
  40c4f4:	4770      	bx	lr
  40c4f6:	0783      	lsls	r3, r0, #30
  40c4f8:	d024      	beq.n	40c544 <strchr+0xd8>
  40c4fa:	7803      	ldrb	r3, [r0, #0]
  40c4fc:	2b00      	cmp	r3, #0
  40c4fe:	d0f9      	beq.n	40c4f4 <strchr+0x88>
  40c500:	1c43      	adds	r3, r0, #1
  40c502:	e003      	b.n	40c50c <strchr+0xa0>
  40c504:	7802      	ldrb	r2, [r0, #0]
  40c506:	3301      	adds	r3, #1
  40c508:	2a00      	cmp	r2, #0
  40c50a:	d0f3      	beq.n	40c4f4 <strchr+0x88>
  40c50c:	0799      	lsls	r1, r3, #30
  40c50e:	4618      	mov	r0, r3
  40c510:	d1f8      	bne.n	40c504 <strchr+0x98>
  40c512:	6819      	ldr	r1, [r3, #0]
  40c514:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40c518:	ea22 0201 	bic.w	r2, r2, r1
  40c51c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40c520:	d108      	bne.n	40c534 <strchr+0xc8>
  40c522:	f853 1f04 	ldr.w	r1, [r3, #4]!
  40c526:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40c52a:	ea22 0201 	bic.w	r2, r2, r1
  40c52e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40c532:	d0f6      	beq.n	40c522 <strchr+0xb6>
  40c534:	781a      	ldrb	r2, [r3, #0]
  40c536:	4618      	mov	r0, r3
  40c538:	b142      	cbz	r2, 40c54c <strchr+0xe0>
  40c53a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40c53e:	2b00      	cmp	r3, #0
  40c540:	d1fb      	bne.n	40c53a <strchr+0xce>
  40c542:	4770      	bx	lr
  40c544:	4603      	mov	r3, r0
  40c546:	e7e4      	b.n	40c512 <strchr+0xa6>
  40c548:	4604      	mov	r4, r0
  40c54a:	e7a4      	b.n	40c496 <strchr+0x2a>
  40c54c:	4618      	mov	r0, r3
  40c54e:	4770      	bx	lr
  40c550:	4618      	mov	r0, r3
  40c552:	e7ce      	b.n	40c4f2 <strchr+0x86>

0040c554 <__ssprint_r>:
  40c554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c558:	6893      	ldr	r3, [r2, #8]
  40c55a:	b083      	sub	sp, #12
  40c55c:	4690      	mov	r8, r2
  40c55e:	2b00      	cmp	r3, #0
  40c560:	d070      	beq.n	40c644 <__ssprint_r+0xf0>
  40c562:	4682      	mov	sl, r0
  40c564:	460c      	mov	r4, r1
  40c566:	6817      	ldr	r7, [r2, #0]
  40c568:	688d      	ldr	r5, [r1, #8]
  40c56a:	6808      	ldr	r0, [r1, #0]
  40c56c:	e042      	b.n	40c5f4 <__ssprint_r+0xa0>
  40c56e:	89a3      	ldrh	r3, [r4, #12]
  40c570:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40c574:	d02e      	beq.n	40c5d4 <__ssprint_r+0x80>
  40c576:	6965      	ldr	r5, [r4, #20]
  40c578:	6921      	ldr	r1, [r4, #16]
  40c57a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40c57e:	eba0 0b01 	sub.w	fp, r0, r1
  40c582:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40c586:	f10b 0001 	add.w	r0, fp, #1
  40c58a:	106d      	asrs	r5, r5, #1
  40c58c:	4430      	add	r0, r6
  40c58e:	42a8      	cmp	r0, r5
  40c590:	462a      	mov	r2, r5
  40c592:	bf84      	itt	hi
  40c594:	4605      	movhi	r5, r0
  40c596:	462a      	movhi	r2, r5
  40c598:	055b      	lsls	r3, r3, #21
  40c59a:	d538      	bpl.n	40c60e <__ssprint_r+0xba>
  40c59c:	4611      	mov	r1, r2
  40c59e:	4650      	mov	r0, sl
  40c5a0:	f7fe feb6 	bl	40b310 <_malloc_r>
  40c5a4:	2800      	cmp	r0, #0
  40c5a6:	d03c      	beq.n	40c622 <__ssprint_r+0xce>
  40c5a8:	465a      	mov	r2, fp
  40c5aa:	6921      	ldr	r1, [r4, #16]
  40c5ac:	9001      	str	r0, [sp, #4]
  40c5ae:	f7fa fb89 	bl	406cc4 <memcpy>
  40c5b2:	89a2      	ldrh	r2, [r4, #12]
  40c5b4:	9b01      	ldr	r3, [sp, #4]
  40c5b6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40c5ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40c5be:	81a2      	strh	r2, [r4, #12]
  40c5c0:	eba5 020b 	sub.w	r2, r5, fp
  40c5c4:	eb03 000b 	add.w	r0, r3, fp
  40c5c8:	6165      	str	r5, [r4, #20]
  40c5ca:	6123      	str	r3, [r4, #16]
  40c5cc:	6020      	str	r0, [r4, #0]
  40c5ce:	60a2      	str	r2, [r4, #8]
  40c5d0:	4635      	mov	r5, r6
  40c5d2:	46b3      	mov	fp, r6
  40c5d4:	465a      	mov	r2, fp
  40c5d6:	4649      	mov	r1, r9
  40c5d8:	f7ff f9e2 	bl	40b9a0 <memmove>
  40c5dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40c5e0:	68a2      	ldr	r2, [r4, #8]
  40c5e2:	6820      	ldr	r0, [r4, #0]
  40c5e4:	1b55      	subs	r5, r2, r5
  40c5e6:	4458      	add	r0, fp
  40c5e8:	1b9e      	subs	r6, r3, r6
  40c5ea:	60a5      	str	r5, [r4, #8]
  40c5ec:	6020      	str	r0, [r4, #0]
  40c5ee:	f8c8 6008 	str.w	r6, [r8, #8]
  40c5f2:	b33e      	cbz	r6, 40c644 <__ssprint_r+0xf0>
  40c5f4:	687e      	ldr	r6, [r7, #4]
  40c5f6:	463b      	mov	r3, r7
  40c5f8:	3708      	adds	r7, #8
  40c5fa:	2e00      	cmp	r6, #0
  40c5fc:	d0fa      	beq.n	40c5f4 <__ssprint_r+0xa0>
  40c5fe:	42ae      	cmp	r6, r5
  40c600:	f8d3 9000 	ldr.w	r9, [r3]
  40c604:	46ab      	mov	fp, r5
  40c606:	d2b2      	bcs.n	40c56e <__ssprint_r+0x1a>
  40c608:	4635      	mov	r5, r6
  40c60a:	46b3      	mov	fp, r6
  40c60c:	e7e2      	b.n	40c5d4 <__ssprint_r+0x80>
  40c60e:	4650      	mov	r0, sl
  40c610:	f7ff fd30 	bl	40c074 <_realloc_r>
  40c614:	4603      	mov	r3, r0
  40c616:	2800      	cmp	r0, #0
  40c618:	d1d2      	bne.n	40c5c0 <__ssprint_r+0x6c>
  40c61a:	6921      	ldr	r1, [r4, #16]
  40c61c:	4650      	mov	r0, sl
  40c61e:	f7fe fb4b 	bl	40acb8 <_free_r>
  40c622:	230c      	movs	r3, #12
  40c624:	f8ca 3000 	str.w	r3, [sl]
  40c628:	89a3      	ldrh	r3, [r4, #12]
  40c62a:	2200      	movs	r2, #0
  40c62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c630:	f04f 30ff 	mov.w	r0, #4294967295
  40c634:	81a3      	strh	r3, [r4, #12]
  40c636:	f8c8 2008 	str.w	r2, [r8, #8]
  40c63a:	f8c8 2004 	str.w	r2, [r8, #4]
  40c63e:	b003      	add	sp, #12
  40c640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c644:	2000      	movs	r0, #0
  40c646:	f8c8 0004 	str.w	r0, [r8, #4]
  40c64a:	b003      	add	sp, #12
  40c64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040c650 <__swbuf_r>:
  40c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c652:	460d      	mov	r5, r1
  40c654:	4614      	mov	r4, r2
  40c656:	4606      	mov	r6, r0
  40c658:	b110      	cbz	r0, 40c660 <__swbuf_r+0x10>
  40c65a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40c65c:	2b00      	cmp	r3, #0
  40c65e:	d04b      	beq.n	40c6f8 <__swbuf_r+0xa8>
  40c660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c664:	69a3      	ldr	r3, [r4, #24]
  40c666:	60a3      	str	r3, [r4, #8]
  40c668:	b291      	uxth	r1, r2
  40c66a:	0708      	lsls	r0, r1, #28
  40c66c:	d539      	bpl.n	40c6e2 <__swbuf_r+0x92>
  40c66e:	6923      	ldr	r3, [r4, #16]
  40c670:	2b00      	cmp	r3, #0
  40c672:	d036      	beq.n	40c6e2 <__swbuf_r+0x92>
  40c674:	b2ed      	uxtb	r5, r5
  40c676:	0489      	lsls	r1, r1, #18
  40c678:	462f      	mov	r7, r5
  40c67a:	d515      	bpl.n	40c6a8 <__swbuf_r+0x58>
  40c67c:	6822      	ldr	r2, [r4, #0]
  40c67e:	6961      	ldr	r1, [r4, #20]
  40c680:	1ad3      	subs	r3, r2, r3
  40c682:	428b      	cmp	r3, r1
  40c684:	da1c      	bge.n	40c6c0 <__swbuf_r+0x70>
  40c686:	3301      	adds	r3, #1
  40c688:	68a1      	ldr	r1, [r4, #8]
  40c68a:	1c50      	adds	r0, r2, #1
  40c68c:	3901      	subs	r1, #1
  40c68e:	60a1      	str	r1, [r4, #8]
  40c690:	6020      	str	r0, [r4, #0]
  40c692:	7015      	strb	r5, [r2, #0]
  40c694:	6962      	ldr	r2, [r4, #20]
  40c696:	429a      	cmp	r2, r3
  40c698:	d01a      	beq.n	40c6d0 <__swbuf_r+0x80>
  40c69a:	89a3      	ldrh	r3, [r4, #12]
  40c69c:	07db      	lsls	r3, r3, #31
  40c69e:	d501      	bpl.n	40c6a4 <__swbuf_r+0x54>
  40c6a0:	2d0a      	cmp	r5, #10
  40c6a2:	d015      	beq.n	40c6d0 <__swbuf_r+0x80>
  40c6a4:	4638      	mov	r0, r7
  40c6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40c6a8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40c6aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40c6ae:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40c6b2:	81a2      	strh	r2, [r4, #12]
  40c6b4:	6822      	ldr	r2, [r4, #0]
  40c6b6:	6661      	str	r1, [r4, #100]	; 0x64
  40c6b8:	6961      	ldr	r1, [r4, #20]
  40c6ba:	1ad3      	subs	r3, r2, r3
  40c6bc:	428b      	cmp	r3, r1
  40c6be:	dbe2      	blt.n	40c686 <__swbuf_r+0x36>
  40c6c0:	4621      	mov	r1, r4
  40c6c2:	4630      	mov	r0, r6
  40c6c4:	f7fe f97a 	bl	40a9bc <_fflush_r>
  40c6c8:	b940      	cbnz	r0, 40c6dc <__swbuf_r+0x8c>
  40c6ca:	6822      	ldr	r2, [r4, #0]
  40c6cc:	2301      	movs	r3, #1
  40c6ce:	e7db      	b.n	40c688 <__swbuf_r+0x38>
  40c6d0:	4621      	mov	r1, r4
  40c6d2:	4630      	mov	r0, r6
  40c6d4:	f7fe f972 	bl	40a9bc <_fflush_r>
  40c6d8:	2800      	cmp	r0, #0
  40c6da:	d0e3      	beq.n	40c6a4 <__swbuf_r+0x54>
  40c6dc:	f04f 37ff 	mov.w	r7, #4294967295
  40c6e0:	e7e0      	b.n	40c6a4 <__swbuf_r+0x54>
  40c6e2:	4621      	mov	r1, r4
  40c6e4:	4630      	mov	r0, r6
  40c6e6:	f7fd f895 	bl	409814 <__swsetup_r>
  40c6ea:	2800      	cmp	r0, #0
  40c6ec:	d1f6      	bne.n	40c6dc <__swbuf_r+0x8c>
  40c6ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c6f2:	6923      	ldr	r3, [r4, #16]
  40c6f4:	b291      	uxth	r1, r2
  40c6f6:	e7bd      	b.n	40c674 <__swbuf_r+0x24>
  40c6f8:	f7fe f9b8 	bl	40aa6c <__sinit>
  40c6fc:	e7b0      	b.n	40c660 <__swbuf_r+0x10>
  40c6fe:	bf00      	nop

0040c700 <_wcrtomb_r>:
  40c700:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c702:	4606      	mov	r6, r0
  40c704:	b085      	sub	sp, #20
  40c706:	461f      	mov	r7, r3
  40c708:	b189      	cbz	r1, 40c72e <_wcrtomb_r+0x2e>
  40c70a:	4c10      	ldr	r4, [pc, #64]	; (40c74c <_wcrtomb_r+0x4c>)
  40c70c:	4d10      	ldr	r5, [pc, #64]	; (40c750 <_wcrtomb_r+0x50>)
  40c70e:	6824      	ldr	r4, [r4, #0]
  40c710:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40c712:	2c00      	cmp	r4, #0
  40c714:	bf08      	it	eq
  40c716:	462c      	moveq	r4, r5
  40c718:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40c71c:	47a0      	blx	r4
  40c71e:	1c43      	adds	r3, r0, #1
  40c720:	d103      	bne.n	40c72a <_wcrtomb_r+0x2a>
  40c722:	2200      	movs	r2, #0
  40c724:	238a      	movs	r3, #138	; 0x8a
  40c726:	603a      	str	r2, [r7, #0]
  40c728:	6033      	str	r3, [r6, #0]
  40c72a:	b005      	add	sp, #20
  40c72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c72e:	460c      	mov	r4, r1
  40c730:	4906      	ldr	r1, [pc, #24]	; (40c74c <_wcrtomb_r+0x4c>)
  40c732:	4a07      	ldr	r2, [pc, #28]	; (40c750 <_wcrtomb_r+0x50>)
  40c734:	6809      	ldr	r1, [r1, #0]
  40c736:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40c738:	2900      	cmp	r1, #0
  40c73a:	bf08      	it	eq
  40c73c:	4611      	moveq	r1, r2
  40c73e:	4622      	mov	r2, r4
  40c740:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40c744:	a901      	add	r1, sp, #4
  40c746:	47a0      	blx	r4
  40c748:	e7e9      	b.n	40c71e <_wcrtomb_r+0x1e>
  40c74a:	bf00      	nop
  40c74c:	2040003c 	.word	0x2040003c
  40c750:	2040046c 	.word	0x2040046c

0040c754 <__ascii_wctomb>:
  40c754:	b121      	cbz	r1, 40c760 <__ascii_wctomb+0xc>
  40c756:	2aff      	cmp	r2, #255	; 0xff
  40c758:	d804      	bhi.n	40c764 <__ascii_wctomb+0x10>
  40c75a:	700a      	strb	r2, [r1, #0]
  40c75c:	2001      	movs	r0, #1
  40c75e:	4770      	bx	lr
  40c760:	4608      	mov	r0, r1
  40c762:	4770      	bx	lr
  40c764:	238a      	movs	r3, #138	; 0x8a
  40c766:	6003      	str	r3, [r0, #0]
  40c768:	f04f 30ff 	mov.w	r0, #4294967295
  40c76c:	4770      	bx	lr
  40c76e:	bf00      	nop

0040c770 <_write_r>:
  40c770:	b570      	push	{r4, r5, r6, lr}
  40c772:	460d      	mov	r5, r1
  40c774:	4c08      	ldr	r4, [pc, #32]	; (40c798 <_write_r+0x28>)
  40c776:	4611      	mov	r1, r2
  40c778:	4606      	mov	r6, r0
  40c77a:	461a      	mov	r2, r3
  40c77c:	4628      	mov	r0, r5
  40c77e:	2300      	movs	r3, #0
  40c780:	6023      	str	r3, [r4, #0]
  40c782:	f7f8 fd83 	bl	40528c <_write>
  40c786:	1c43      	adds	r3, r0, #1
  40c788:	d000      	beq.n	40c78c <_write_r+0x1c>
  40c78a:	bd70      	pop	{r4, r5, r6, pc}
  40c78c:	6823      	ldr	r3, [r4, #0]
  40c78e:	2b00      	cmp	r3, #0
  40c790:	d0fb      	beq.n	40c78a <_write_r+0x1a>
  40c792:	6033      	str	r3, [r6, #0]
  40c794:	bd70      	pop	{r4, r5, r6, pc}
  40c796:	bf00      	nop
  40c798:	2040d1c8 	.word	0x2040d1c8

0040c79c <__register_exitproc>:
  40c79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c7a0:	4d2c      	ldr	r5, [pc, #176]	; (40c854 <__register_exitproc+0xb8>)
  40c7a2:	4606      	mov	r6, r0
  40c7a4:	6828      	ldr	r0, [r5, #0]
  40c7a6:	4698      	mov	r8, r3
  40c7a8:	460f      	mov	r7, r1
  40c7aa:	4691      	mov	r9, r2
  40c7ac:	f7fe fd2c 	bl	40b208 <__retarget_lock_acquire_recursive>
  40c7b0:	4b29      	ldr	r3, [pc, #164]	; (40c858 <__register_exitproc+0xbc>)
  40c7b2:	681c      	ldr	r4, [r3, #0]
  40c7b4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40c7b8:	2b00      	cmp	r3, #0
  40c7ba:	d03e      	beq.n	40c83a <__register_exitproc+0x9e>
  40c7bc:	685a      	ldr	r2, [r3, #4]
  40c7be:	2a1f      	cmp	r2, #31
  40c7c0:	dc1c      	bgt.n	40c7fc <__register_exitproc+0x60>
  40c7c2:	f102 0e01 	add.w	lr, r2, #1
  40c7c6:	b176      	cbz	r6, 40c7e6 <__register_exitproc+0x4a>
  40c7c8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40c7cc:	2401      	movs	r4, #1
  40c7ce:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40c7d2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40c7d6:	4094      	lsls	r4, r2
  40c7d8:	4320      	orrs	r0, r4
  40c7da:	2e02      	cmp	r6, #2
  40c7dc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40c7e0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40c7e4:	d023      	beq.n	40c82e <__register_exitproc+0x92>
  40c7e6:	3202      	adds	r2, #2
  40c7e8:	f8c3 e004 	str.w	lr, [r3, #4]
  40c7ec:	6828      	ldr	r0, [r5, #0]
  40c7ee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40c7f2:	f7fe fd0b 	bl	40b20c <__retarget_lock_release_recursive>
  40c7f6:	2000      	movs	r0, #0
  40c7f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c7fc:	4b17      	ldr	r3, [pc, #92]	; (40c85c <__register_exitproc+0xc0>)
  40c7fe:	b30b      	cbz	r3, 40c844 <__register_exitproc+0xa8>
  40c800:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40c804:	f7fe fd7c 	bl	40b300 <malloc>
  40c808:	4603      	mov	r3, r0
  40c80a:	b1d8      	cbz	r0, 40c844 <__register_exitproc+0xa8>
  40c80c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40c810:	6002      	str	r2, [r0, #0]
  40c812:	2100      	movs	r1, #0
  40c814:	6041      	str	r1, [r0, #4]
  40c816:	460a      	mov	r2, r1
  40c818:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40c81c:	f04f 0e01 	mov.w	lr, #1
  40c820:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40c824:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40c828:	2e00      	cmp	r6, #0
  40c82a:	d0dc      	beq.n	40c7e6 <__register_exitproc+0x4a>
  40c82c:	e7cc      	b.n	40c7c8 <__register_exitproc+0x2c>
  40c82e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40c832:	430c      	orrs	r4, r1
  40c834:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40c838:	e7d5      	b.n	40c7e6 <__register_exitproc+0x4a>
  40c83a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40c83e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40c842:	e7bb      	b.n	40c7bc <__register_exitproc+0x20>
  40c844:	6828      	ldr	r0, [r5, #0]
  40c846:	f7fe fce1 	bl	40b20c <__retarget_lock_release_recursive>
  40c84a:	f04f 30ff 	mov.w	r0, #4294967295
  40c84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c852:	bf00      	nop
  40c854:	20400468 	.word	0x20400468
  40c858:	0040e77c 	.word	0x0040e77c
  40c85c:	0040b301 	.word	0x0040b301

0040c860 <_calloc_r>:
  40c860:	b510      	push	{r4, lr}
  40c862:	fb02 f101 	mul.w	r1, r2, r1
  40c866:	f7fe fd53 	bl	40b310 <_malloc_r>
  40c86a:	4604      	mov	r4, r0
  40c86c:	b1d8      	cbz	r0, 40c8a6 <_calloc_r+0x46>
  40c86e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40c872:	f022 0203 	bic.w	r2, r2, #3
  40c876:	3a04      	subs	r2, #4
  40c878:	2a24      	cmp	r2, #36	; 0x24
  40c87a:	d818      	bhi.n	40c8ae <_calloc_r+0x4e>
  40c87c:	2a13      	cmp	r2, #19
  40c87e:	d914      	bls.n	40c8aa <_calloc_r+0x4a>
  40c880:	2300      	movs	r3, #0
  40c882:	2a1b      	cmp	r2, #27
  40c884:	6003      	str	r3, [r0, #0]
  40c886:	6043      	str	r3, [r0, #4]
  40c888:	d916      	bls.n	40c8b8 <_calloc_r+0x58>
  40c88a:	2a24      	cmp	r2, #36	; 0x24
  40c88c:	6083      	str	r3, [r0, #8]
  40c88e:	60c3      	str	r3, [r0, #12]
  40c890:	bf11      	iteee	ne
  40c892:	f100 0210 	addne.w	r2, r0, #16
  40c896:	6103      	streq	r3, [r0, #16]
  40c898:	6143      	streq	r3, [r0, #20]
  40c89a:	f100 0218 	addeq.w	r2, r0, #24
  40c89e:	2300      	movs	r3, #0
  40c8a0:	6013      	str	r3, [r2, #0]
  40c8a2:	6053      	str	r3, [r2, #4]
  40c8a4:	6093      	str	r3, [r2, #8]
  40c8a6:	4620      	mov	r0, r4
  40c8a8:	bd10      	pop	{r4, pc}
  40c8aa:	4602      	mov	r2, r0
  40c8ac:	e7f7      	b.n	40c89e <_calloc_r+0x3e>
  40c8ae:	2100      	movs	r1, #0
  40c8b0:	f7fa faa2 	bl	406df8 <memset>
  40c8b4:	4620      	mov	r0, r4
  40c8b6:	bd10      	pop	{r4, pc}
  40c8b8:	f100 0208 	add.w	r2, r0, #8
  40c8bc:	e7ef      	b.n	40c89e <_calloc_r+0x3e>
  40c8be:	bf00      	nop

0040c8c0 <_close_r>:
  40c8c0:	b538      	push	{r3, r4, r5, lr}
  40c8c2:	4c07      	ldr	r4, [pc, #28]	; (40c8e0 <_close_r+0x20>)
  40c8c4:	2300      	movs	r3, #0
  40c8c6:	4605      	mov	r5, r0
  40c8c8:	4608      	mov	r0, r1
  40c8ca:	6023      	str	r3, [r4, #0]
  40c8cc:	f7f9 fb76 	bl	405fbc <_close>
  40c8d0:	1c43      	adds	r3, r0, #1
  40c8d2:	d000      	beq.n	40c8d6 <_close_r+0x16>
  40c8d4:	bd38      	pop	{r3, r4, r5, pc}
  40c8d6:	6823      	ldr	r3, [r4, #0]
  40c8d8:	2b00      	cmp	r3, #0
  40c8da:	d0fb      	beq.n	40c8d4 <_close_r+0x14>
  40c8dc:	602b      	str	r3, [r5, #0]
  40c8de:	bd38      	pop	{r3, r4, r5, pc}
  40c8e0:	2040d1c8 	.word	0x2040d1c8

0040c8e4 <_fclose_r>:
  40c8e4:	b570      	push	{r4, r5, r6, lr}
  40c8e6:	b159      	cbz	r1, 40c900 <_fclose_r+0x1c>
  40c8e8:	4605      	mov	r5, r0
  40c8ea:	460c      	mov	r4, r1
  40c8ec:	b110      	cbz	r0, 40c8f4 <_fclose_r+0x10>
  40c8ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40c8f0:	2b00      	cmp	r3, #0
  40c8f2:	d03c      	beq.n	40c96e <_fclose_r+0x8a>
  40c8f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40c8f6:	07d8      	lsls	r0, r3, #31
  40c8f8:	d505      	bpl.n	40c906 <_fclose_r+0x22>
  40c8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c8fe:	b92b      	cbnz	r3, 40c90c <_fclose_r+0x28>
  40c900:	2600      	movs	r6, #0
  40c902:	4630      	mov	r0, r6
  40c904:	bd70      	pop	{r4, r5, r6, pc}
  40c906:	89a3      	ldrh	r3, [r4, #12]
  40c908:	0599      	lsls	r1, r3, #22
  40c90a:	d53c      	bpl.n	40c986 <_fclose_r+0xa2>
  40c90c:	4621      	mov	r1, r4
  40c90e:	4628      	mov	r0, r5
  40c910:	f7fd ffb4 	bl	40a87c <__sflush_r>
  40c914:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40c916:	4606      	mov	r6, r0
  40c918:	b133      	cbz	r3, 40c928 <_fclose_r+0x44>
  40c91a:	69e1      	ldr	r1, [r4, #28]
  40c91c:	4628      	mov	r0, r5
  40c91e:	4798      	blx	r3
  40c920:	2800      	cmp	r0, #0
  40c922:	bfb8      	it	lt
  40c924:	f04f 36ff 	movlt.w	r6, #4294967295
  40c928:	89a3      	ldrh	r3, [r4, #12]
  40c92a:	061a      	lsls	r2, r3, #24
  40c92c:	d422      	bmi.n	40c974 <_fclose_r+0x90>
  40c92e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40c930:	b141      	cbz	r1, 40c944 <_fclose_r+0x60>
  40c932:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40c936:	4299      	cmp	r1, r3
  40c938:	d002      	beq.n	40c940 <_fclose_r+0x5c>
  40c93a:	4628      	mov	r0, r5
  40c93c:	f7fe f9bc 	bl	40acb8 <_free_r>
  40c940:	2300      	movs	r3, #0
  40c942:	6323      	str	r3, [r4, #48]	; 0x30
  40c944:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40c946:	b121      	cbz	r1, 40c952 <_fclose_r+0x6e>
  40c948:	4628      	mov	r0, r5
  40c94a:	f7fe f9b5 	bl	40acb8 <_free_r>
  40c94e:	2300      	movs	r3, #0
  40c950:	6463      	str	r3, [r4, #68]	; 0x44
  40c952:	f7fe f8b7 	bl	40aac4 <__sfp_lock_acquire>
  40c956:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40c958:	2200      	movs	r2, #0
  40c95a:	07db      	lsls	r3, r3, #31
  40c95c:	81a2      	strh	r2, [r4, #12]
  40c95e:	d50e      	bpl.n	40c97e <_fclose_r+0x9a>
  40c960:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c962:	f7fe fc4f 	bl	40b204 <__retarget_lock_close_recursive>
  40c966:	f7fe f8b3 	bl	40aad0 <__sfp_lock_release>
  40c96a:	4630      	mov	r0, r6
  40c96c:	bd70      	pop	{r4, r5, r6, pc}
  40c96e:	f7fe f87d 	bl	40aa6c <__sinit>
  40c972:	e7bf      	b.n	40c8f4 <_fclose_r+0x10>
  40c974:	6921      	ldr	r1, [r4, #16]
  40c976:	4628      	mov	r0, r5
  40c978:	f7fe f99e 	bl	40acb8 <_free_r>
  40c97c:	e7d7      	b.n	40c92e <_fclose_r+0x4a>
  40c97e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c980:	f7fe fc44 	bl	40b20c <__retarget_lock_release_recursive>
  40c984:	e7ec      	b.n	40c960 <_fclose_r+0x7c>
  40c986:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c988:	f7fe fc3e 	bl	40b208 <__retarget_lock_acquire_recursive>
  40c98c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c990:	2b00      	cmp	r3, #0
  40c992:	d1bb      	bne.n	40c90c <_fclose_r+0x28>
  40c994:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40c996:	f016 0601 	ands.w	r6, r6, #1
  40c99a:	d1b1      	bne.n	40c900 <_fclose_r+0x1c>
  40c99c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c99e:	f7fe fc35 	bl	40b20c <__retarget_lock_release_recursive>
  40c9a2:	4630      	mov	r0, r6
  40c9a4:	bd70      	pop	{r4, r5, r6, pc}
  40c9a6:	bf00      	nop

0040c9a8 <_fstat_r>:
  40c9a8:	b538      	push	{r3, r4, r5, lr}
  40c9aa:	460b      	mov	r3, r1
  40c9ac:	4c07      	ldr	r4, [pc, #28]	; (40c9cc <_fstat_r+0x24>)
  40c9ae:	4605      	mov	r5, r0
  40c9b0:	4611      	mov	r1, r2
  40c9b2:	4618      	mov	r0, r3
  40c9b4:	2300      	movs	r3, #0
  40c9b6:	6023      	str	r3, [r4, #0]
  40c9b8:	f7f9 fb03 	bl	405fc2 <_fstat>
  40c9bc:	1c43      	adds	r3, r0, #1
  40c9be:	d000      	beq.n	40c9c2 <_fstat_r+0x1a>
  40c9c0:	bd38      	pop	{r3, r4, r5, pc}
  40c9c2:	6823      	ldr	r3, [r4, #0]
  40c9c4:	2b00      	cmp	r3, #0
  40c9c6:	d0fb      	beq.n	40c9c0 <_fstat_r+0x18>
  40c9c8:	602b      	str	r3, [r5, #0]
  40c9ca:	bd38      	pop	{r3, r4, r5, pc}
  40c9cc:	2040d1c8 	.word	0x2040d1c8

0040c9d0 <_isatty_r>:
  40c9d0:	b538      	push	{r3, r4, r5, lr}
  40c9d2:	4c07      	ldr	r4, [pc, #28]	; (40c9f0 <_isatty_r+0x20>)
  40c9d4:	2300      	movs	r3, #0
  40c9d6:	4605      	mov	r5, r0
  40c9d8:	4608      	mov	r0, r1
  40c9da:	6023      	str	r3, [r4, #0]
  40c9dc:	f7f9 faf6 	bl	405fcc <_isatty>
  40c9e0:	1c43      	adds	r3, r0, #1
  40c9e2:	d000      	beq.n	40c9e6 <_isatty_r+0x16>
  40c9e4:	bd38      	pop	{r3, r4, r5, pc}
  40c9e6:	6823      	ldr	r3, [r4, #0]
  40c9e8:	2b00      	cmp	r3, #0
  40c9ea:	d0fb      	beq.n	40c9e4 <_isatty_r+0x14>
  40c9ec:	602b      	str	r3, [r5, #0]
  40c9ee:	bd38      	pop	{r3, r4, r5, pc}
  40c9f0:	2040d1c8 	.word	0x2040d1c8

0040c9f4 <_lseek_r>:
  40c9f4:	b570      	push	{r4, r5, r6, lr}
  40c9f6:	460d      	mov	r5, r1
  40c9f8:	4c08      	ldr	r4, [pc, #32]	; (40ca1c <_lseek_r+0x28>)
  40c9fa:	4611      	mov	r1, r2
  40c9fc:	4606      	mov	r6, r0
  40c9fe:	461a      	mov	r2, r3
  40ca00:	4628      	mov	r0, r5
  40ca02:	2300      	movs	r3, #0
  40ca04:	6023      	str	r3, [r4, #0]
  40ca06:	f7f9 fae3 	bl	405fd0 <_lseek>
  40ca0a:	1c43      	adds	r3, r0, #1
  40ca0c:	d000      	beq.n	40ca10 <_lseek_r+0x1c>
  40ca0e:	bd70      	pop	{r4, r5, r6, pc}
  40ca10:	6823      	ldr	r3, [r4, #0]
  40ca12:	2b00      	cmp	r3, #0
  40ca14:	d0fb      	beq.n	40ca0e <_lseek_r+0x1a>
  40ca16:	6033      	str	r3, [r6, #0]
  40ca18:	bd70      	pop	{r4, r5, r6, pc}
  40ca1a:	bf00      	nop
  40ca1c:	2040d1c8 	.word	0x2040d1c8

0040ca20 <_read_r>:
  40ca20:	b570      	push	{r4, r5, r6, lr}
  40ca22:	460d      	mov	r5, r1
  40ca24:	4c08      	ldr	r4, [pc, #32]	; (40ca48 <_read_r+0x28>)
  40ca26:	4611      	mov	r1, r2
  40ca28:	4606      	mov	r6, r0
  40ca2a:	461a      	mov	r2, r3
  40ca2c:	4628      	mov	r0, r5
  40ca2e:	2300      	movs	r3, #0
  40ca30:	6023      	str	r3, [r4, #0]
  40ca32:	f7f8 fc0d 	bl	405250 <_read>
  40ca36:	1c43      	adds	r3, r0, #1
  40ca38:	d000      	beq.n	40ca3c <_read_r+0x1c>
  40ca3a:	bd70      	pop	{r4, r5, r6, pc}
  40ca3c:	6823      	ldr	r3, [r4, #0]
  40ca3e:	2b00      	cmp	r3, #0
  40ca40:	d0fb      	beq.n	40ca3a <_read_r+0x1a>
  40ca42:	6033      	str	r3, [r6, #0]
  40ca44:	bd70      	pop	{r4, r5, r6, pc}
  40ca46:	bf00      	nop
  40ca48:	2040d1c8 	.word	0x2040d1c8

0040ca4c <__aeabi_drsub>:
  40ca4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40ca50:	e002      	b.n	40ca58 <__adddf3>
  40ca52:	bf00      	nop

0040ca54 <__aeabi_dsub>:
  40ca54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040ca58 <__adddf3>:
  40ca58:	b530      	push	{r4, r5, lr}
  40ca5a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40ca5e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40ca62:	ea94 0f05 	teq	r4, r5
  40ca66:	bf08      	it	eq
  40ca68:	ea90 0f02 	teqeq	r0, r2
  40ca6c:	bf1f      	itttt	ne
  40ca6e:	ea54 0c00 	orrsne.w	ip, r4, r0
  40ca72:	ea55 0c02 	orrsne.w	ip, r5, r2
  40ca76:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40ca7a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40ca7e:	f000 80e2 	beq.w	40cc46 <__adddf3+0x1ee>
  40ca82:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40ca86:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40ca8a:	bfb8      	it	lt
  40ca8c:	426d      	neglt	r5, r5
  40ca8e:	dd0c      	ble.n	40caaa <__adddf3+0x52>
  40ca90:	442c      	add	r4, r5
  40ca92:	ea80 0202 	eor.w	r2, r0, r2
  40ca96:	ea81 0303 	eor.w	r3, r1, r3
  40ca9a:	ea82 0000 	eor.w	r0, r2, r0
  40ca9e:	ea83 0101 	eor.w	r1, r3, r1
  40caa2:	ea80 0202 	eor.w	r2, r0, r2
  40caa6:	ea81 0303 	eor.w	r3, r1, r3
  40caaa:	2d36      	cmp	r5, #54	; 0x36
  40caac:	bf88      	it	hi
  40caae:	bd30      	pophi	{r4, r5, pc}
  40cab0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40cab4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40cab8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40cabc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40cac0:	d002      	beq.n	40cac8 <__adddf3+0x70>
  40cac2:	4240      	negs	r0, r0
  40cac4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40cac8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40cacc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40cad0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40cad4:	d002      	beq.n	40cadc <__adddf3+0x84>
  40cad6:	4252      	negs	r2, r2
  40cad8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40cadc:	ea94 0f05 	teq	r4, r5
  40cae0:	f000 80a7 	beq.w	40cc32 <__adddf3+0x1da>
  40cae4:	f1a4 0401 	sub.w	r4, r4, #1
  40cae8:	f1d5 0e20 	rsbs	lr, r5, #32
  40caec:	db0d      	blt.n	40cb0a <__adddf3+0xb2>
  40caee:	fa02 fc0e 	lsl.w	ip, r2, lr
  40caf2:	fa22 f205 	lsr.w	r2, r2, r5
  40caf6:	1880      	adds	r0, r0, r2
  40caf8:	f141 0100 	adc.w	r1, r1, #0
  40cafc:	fa03 f20e 	lsl.w	r2, r3, lr
  40cb00:	1880      	adds	r0, r0, r2
  40cb02:	fa43 f305 	asr.w	r3, r3, r5
  40cb06:	4159      	adcs	r1, r3
  40cb08:	e00e      	b.n	40cb28 <__adddf3+0xd0>
  40cb0a:	f1a5 0520 	sub.w	r5, r5, #32
  40cb0e:	f10e 0e20 	add.w	lr, lr, #32
  40cb12:	2a01      	cmp	r2, #1
  40cb14:	fa03 fc0e 	lsl.w	ip, r3, lr
  40cb18:	bf28      	it	cs
  40cb1a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40cb1e:	fa43 f305 	asr.w	r3, r3, r5
  40cb22:	18c0      	adds	r0, r0, r3
  40cb24:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40cb28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40cb2c:	d507      	bpl.n	40cb3e <__adddf3+0xe6>
  40cb2e:	f04f 0e00 	mov.w	lr, #0
  40cb32:	f1dc 0c00 	rsbs	ip, ip, #0
  40cb36:	eb7e 0000 	sbcs.w	r0, lr, r0
  40cb3a:	eb6e 0101 	sbc.w	r1, lr, r1
  40cb3e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40cb42:	d31b      	bcc.n	40cb7c <__adddf3+0x124>
  40cb44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40cb48:	d30c      	bcc.n	40cb64 <__adddf3+0x10c>
  40cb4a:	0849      	lsrs	r1, r1, #1
  40cb4c:	ea5f 0030 	movs.w	r0, r0, rrx
  40cb50:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40cb54:	f104 0401 	add.w	r4, r4, #1
  40cb58:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40cb5c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40cb60:	f080 809a 	bcs.w	40cc98 <__adddf3+0x240>
  40cb64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40cb68:	bf08      	it	eq
  40cb6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40cb6e:	f150 0000 	adcs.w	r0, r0, #0
  40cb72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40cb76:	ea41 0105 	orr.w	r1, r1, r5
  40cb7a:	bd30      	pop	{r4, r5, pc}
  40cb7c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40cb80:	4140      	adcs	r0, r0
  40cb82:	eb41 0101 	adc.w	r1, r1, r1
  40cb86:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40cb8a:	f1a4 0401 	sub.w	r4, r4, #1
  40cb8e:	d1e9      	bne.n	40cb64 <__adddf3+0x10c>
  40cb90:	f091 0f00 	teq	r1, #0
  40cb94:	bf04      	itt	eq
  40cb96:	4601      	moveq	r1, r0
  40cb98:	2000      	moveq	r0, #0
  40cb9a:	fab1 f381 	clz	r3, r1
  40cb9e:	bf08      	it	eq
  40cba0:	3320      	addeq	r3, #32
  40cba2:	f1a3 030b 	sub.w	r3, r3, #11
  40cba6:	f1b3 0220 	subs.w	r2, r3, #32
  40cbaa:	da0c      	bge.n	40cbc6 <__adddf3+0x16e>
  40cbac:	320c      	adds	r2, #12
  40cbae:	dd08      	ble.n	40cbc2 <__adddf3+0x16a>
  40cbb0:	f102 0c14 	add.w	ip, r2, #20
  40cbb4:	f1c2 020c 	rsb	r2, r2, #12
  40cbb8:	fa01 f00c 	lsl.w	r0, r1, ip
  40cbbc:	fa21 f102 	lsr.w	r1, r1, r2
  40cbc0:	e00c      	b.n	40cbdc <__adddf3+0x184>
  40cbc2:	f102 0214 	add.w	r2, r2, #20
  40cbc6:	bfd8      	it	le
  40cbc8:	f1c2 0c20 	rsble	ip, r2, #32
  40cbcc:	fa01 f102 	lsl.w	r1, r1, r2
  40cbd0:	fa20 fc0c 	lsr.w	ip, r0, ip
  40cbd4:	bfdc      	itt	le
  40cbd6:	ea41 010c 	orrle.w	r1, r1, ip
  40cbda:	4090      	lslle	r0, r2
  40cbdc:	1ae4      	subs	r4, r4, r3
  40cbde:	bfa2      	ittt	ge
  40cbe0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40cbe4:	4329      	orrge	r1, r5
  40cbe6:	bd30      	popge	{r4, r5, pc}
  40cbe8:	ea6f 0404 	mvn.w	r4, r4
  40cbec:	3c1f      	subs	r4, #31
  40cbee:	da1c      	bge.n	40cc2a <__adddf3+0x1d2>
  40cbf0:	340c      	adds	r4, #12
  40cbf2:	dc0e      	bgt.n	40cc12 <__adddf3+0x1ba>
  40cbf4:	f104 0414 	add.w	r4, r4, #20
  40cbf8:	f1c4 0220 	rsb	r2, r4, #32
  40cbfc:	fa20 f004 	lsr.w	r0, r0, r4
  40cc00:	fa01 f302 	lsl.w	r3, r1, r2
  40cc04:	ea40 0003 	orr.w	r0, r0, r3
  40cc08:	fa21 f304 	lsr.w	r3, r1, r4
  40cc0c:	ea45 0103 	orr.w	r1, r5, r3
  40cc10:	bd30      	pop	{r4, r5, pc}
  40cc12:	f1c4 040c 	rsb	r4, r4, #12
  40cc16:	f1c4 0220 	rsb	r2, r4, #32
  40cc1a:	fa20 f002 	lsr.w	r0, r0, r2
  40cc1e:	fa01 f304 	lsl.w	r3, r1, r4
  40cc22:	ea40 0003 	orr.w	r0, r0, r3
  40cc26:	4629      	mov	r1, r5
  40cc28:	bd30      	pop	{r4, r5, pc}
  40cc2a:	fa21 f004 	lsr.w	r0, r1, r4
  40cc2e:	4629      	mov	r1, r5
  40cc30:	bd30      	pop	{r4, r5, pc}
  40cc32:	f094 0f00 	teq	r4, #0
  40cc36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40cc3a:	bf06      	itte	eq
  40cc3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40cc40:	3401      	addeq	r4, #1
  40cc42:	3d01      	subne	r5, #1
  40cc44:	e74e      	b.n	40cae4 <__adddf3+0x8c>
  40cc46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40cc4a:	bf18      	it	ne
  40cc4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40cc50:	d029      	beq.n	40cca6 <__adddf3+0x24e>
  40cc52:	ea94 0f05 	teq	r4, r5
  40cc56:	bf08      	it	eq
  40cc58:	ea90 0f02 	teqeq	r0, r2
  40cc5c:	d005      	beq.n	40cc6a <__adddf3+0x212>
  40cc5e:	ea54 0c00 	orrs.w	ip, r4, r0
  40cc62:	bf04      	itt	eq
  40cc64:	4619      	moveq	r1, r3
  40cc66:	4610      	moveq	r0, r2
  40cc68:	bd30      	pop	{r4, r5, pc}
  40cc6a:	ea91 0f03 	teq	r1, r3
  40cc6e:	bf1e      	ittt	ne
  40cc70:	2100      	movne	r1, #0
  40cc72:	2000      	movne	r0, #0
  40cc74:	bd30      	popne	{r4, r5, pc}
  40cc76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40cc7a:	d105      	bne.n	40cc88 <__adddf3+0x230>
  40cc7c:	0040      	lsls	r0, r0, #1
  40cc7e:	4149      	adcs	r1, r1
  40cc80:	bf28      	it	cs
  40cc82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40cc86:	bd30      	pop	{r4, r5, pc}
  40cc88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40cc8c:	bf3c      	itt	cc
  40cc8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40cc92:	bd30      	popcc	{r4, r5, pc}
  40cc94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40cc98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40cc9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40cca0:	f04f 0000 	mov.w	r0, #0
  40cca4:	bd30      	pop	{r4, r5, pc}
  40cca6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40ccaa:	bf1a      	itte	ne
  40ccac:	4619      	movne	r1, r3
  40ccae:	4610      	movne	r0, r2
  40ccb0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40ccb4:	bf1c      	itt	ne
  40ccb6:	460b      	movne	r3, r1
  40ccb8:	4602      	movne	r2, r0
  40ccba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ccbe:	bf06      	itte	eq
  40ccc0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40ccc4:	ea91 0f03 	teqeq	r1, r3
  40ccc8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40cccc:	bd30      	pop	{r4, r5, pc}
  40ccce:	bf00      	nop

0040ccd0 <__aeabi_ui2d>:
  40ccd0:	f090 0f00 	teq	r0, #0
  40ccd4:	bf04      	itt	eq
  40ccd6:	2100      	moveq	r1, #0
  40ccd8:	4770      	bxeq	lr
  40ccda:	b530      	push	{r4, r5, lr}
  40ccdc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40cce0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40cce4:	f04f 0500 	mov.w	r5, #0
  40cce8:	f04f 0100 	mov.w	r1, #0
  40ccec:	e750      	b.n	40cb90 <__adddf3+0x138>
  40ccee:	bf00      	nop

0040ccf0 <__aeabi_i2d>:
  40ccf0:	f090 0f00 	teq	r0, #0
  40ccf4:	bf04      	itt	eq
  40ccf6:	2100      	moveq	r1, #0
  40ccf8:	4770      	bxeq	lr
  40ccfa:	b530      	push	{r4, r5, lr}
  40ccfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40cd00:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40cd04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40cd08:	bf48      	it	mi
  40cd0a:	4240      	negmi	r0, r0
  40cd0c:	f04f 0100 	mov.w	r1, #0
  40cd10:	e73e      	b.n	40cb90 <__adddf3+0x138>
  40cd12:	bf00      	nop

0040cd14 <__aeabi_f2d>:
  40cd14:	0042      	lsls	r2, r0, #1
  40cd16:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40cd1a:	ea4f 0131 	mov.w	r1, r1, rrx
  40cd1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40cd22:	bf1f      	itttt	ne
  40cd24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40cd28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40cd2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40cd30:	4770      	bxne	lr
  40cd32:	f092 0f00 	teq	r2, #0
  40cd36:	bf14      	ite	ne
  40cd38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40cd3c:	4770      	bxeq	lr
  40cd3e:	b530      	push	{r4, r5, lr}
  40cd40:	f44f 7460 	mov.w	r4, #896	; 0x380
  40cd44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40cd48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40cd4c:	e720      	b.n	40cb90 <__adddf3+0x138>
  40cd4e:	bf00      	nop

0040cd50 <__aeabi_ul2d>:
  40cd50:	ea50 0201 	orrs.w	r2, r0, r1
  40cd54:	bf08      	it	eq
  40cd56:	4770      	bxeq	lr
  40cd58:	b530      	push	{r4, r5, lr}
  40cd5a:	f04f 0500 	mov.w	r5, #0
  40cd5e:	e00a      	b.n	40cd76 <__aeabi_l2d+0x16>

0040cd60 <__aeabi_l2d>:
  40cd60:	ea50 0201 	orrs.w	r2, r0, r1
  40cd64:	bf08      	it	eq
  40cd66:	4770      	bxeq	lr
  40cd68:	b530      	push	{r4, r5, lr}
  40cd6a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40cd6e:	d502      	bpl.n	40cd76 <__aeabi_l2d+0x16>
  40cd70:	4240      	negs	r0, r0
  40cd72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40cd76:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40cd7a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40cd7e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40cd82:	f43f aedc 	beq.w	40cb3e <__adddf3+0xe6>
  40cd86:	f04f 0203 	mov.w	r2, #3
  40cd8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40cd8e:	bf18      	it	ne
  40cd90:	3203      	addne	r2, #3
  40cd92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40cd96:	bf18      	it	ne
  40cd98:	3203      	addne	r2, #3
  40cd9a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40cd9e:	f1c2 0320 	rsb	r3, r2, #32
  40cda2:	fa00 fc03 	lsl.w	ip, r0, r3
  40cda6:	fa20 f002 	lsr.w	r0, r0, r2
  40cdaa:	fa01 fe03 	lsl.w	lr, r1, r3
  40cdae:	ea40 000e 	orr.w	r0, r0, lr
  40cdb2:	fa21 f102 	lsr.w	r1, r1, r2
  40cdb6:	4414      	add	r4, r2
  40cdb8:	e6c1      	b.n	40cb3e <__adddf3+0xe6>
  40cdba:	bf00      	nop

0040cdbc <__aeabi_dmul>:
  40cdbc:	b570      	push	{r4, r5, r6, lr}
  40cdbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40cdc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40cdc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40cdca:	bf1d      	ittte	ne
  40cdcc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40cdd0:	ea94 0f0c 	teqne	r4, ip
  40cdd4:	ea95 0f0c 	teqne	r5, ip
  40cdd8:	f000 f8de 	bleq	40cf98 <__aeabi_dmul+0x1dc>
  40cddc:	442c      	add	r4, r5
  40cdde:	ea81 0603 	eor.w	r6, r1, r3
  40cde2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40cde6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40cdea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40cdee:	bf18      	it	ne
  40cdf0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40cdf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40cdf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40cdfc:	d038      	beq.n	40ce70 <__aeabi_dmul+0xb4>
  40cdfe:	fba0 ce02 	umull	ip, lr, r0, r2
  40ce02:	f04f 0500 	mov.w	r5, #0
  40ce06:	fbe1 e502 	umlal	lr, r5, r1, r2
  40ce0a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40ce0e:	fbe0 e503 	umlal	lr, r5, r0, r3
  40ce12:	f04f 0600 	mov.w	r6, #0
  40ce16:	fbe1 5603 	umlal	r5, r6, r1, r3
  40ce1a:	f09c 0f00 	teq	ip, #0
  40ce1e:	bf18      	it	ne
  40ce20:	f04e 0e01 	orrne.w	lr, lr, #1
  40ce24:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40ce28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40ce2c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40ce30:	d204      	bcs.n	40ce3c <__aeabi_dmul+0x80>
  40ce32:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40ce36:	416d      	adcs	r5, r5
  40ce38:	eb46 0606 	adc.w	r6, r6, r6
  40ce3c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40ce40:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40ce44:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40ce48:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40ce4c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40ce50:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40ce54:	bf88      	it	hi
  40ce56:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40ce5a:	d81e      	bhi.n	40ce9a <__aeabi_dmul+0xde>
  40ce5c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40ce60:	bf08      	it	eq
  40ce62:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40ce66:	f150 0000 	adcs.w	r0, r0, #0
  40ce6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ce6e:	bd70      	pop	{r4, r5, r6, pc}
  40ce70:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40ce74:	ea46 0101 	orr.w	r1, r6, r1
  40ce78:	ea40 0002 	orr.w	r0, r0, r2
  40ce7c:	ea81 0103 	eor.w	r1, r1, r3
  40ce80:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40ce84:	bfc2      	ittt	gt
  40ce86:	ebd4 050c 	rsbsgt	r5, r4, ip
  40ce8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40ce8e:	bd70      	popgt	{r4, r5, r6, pc}
  40ce90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ce94:	f04f 0e00 	mov.w	lr, #0
  40ce98:	3c01      	subs	r4, #1
  40ce9a:	f300 80ab 	bgt.w	40cff4 <__aeabi_dmul+0x238>
  40ce9e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40cea2:	bfde      	ittt	le
  40cea4:	2000      	movle	r0, #0
  40cea6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40ceaa:	bd70      	pople	{r4, r5, r6, pc}
  40ceac:	f1c4 0400 	rsb	r4, r4, #0
  40ceb0:	3c20      	subs	r4, #32
  40ceb2:	da35      	bge.n	40cf20 <__aeabi_dmul+0x164>
  40ceb4:	340c      	adds	r4, #12
  40ceb6:	dc1b      	bgt.n	40cef0 <__aeabi_dmul+0x134>
  40ceb8:	f104 0414 	add.w	r4, r4, #20
  40cebc:	f1c4 0520 	rsb	r5, r4, #32
  40cec0:	fa00 f305 	lsl.w	r3, r0, r5
  40cec4:	fa20 f004 	lsr.w	r0, r0, r4
  40cec8:	fa01 f205 	lsl.w	r2, r1, r5
  40cecc:	ea40 0002 	orr.w	r0, r0, r2
  40ced0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40ced4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40ced8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40cedc:	fa21 f604 	lsr.w	r6, r1, r4
  40cee0:	eb42 0106 	adc.w	r1, r2, r6
  40cee4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40cee8:	bf08      	it	eq
  40ceea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40ceee:	bd70      	pop	{r4, r5, r6, pc}
  40cef0:	f1c4 040c 	rsb	r4, r4, #12
  40cef4:	f1c4 0520 	rsb	r5, r4, #32
  40cef8:	fa00 f304 	lsl.w	r3, r0, r4
  40cefc:	fa20 f005 	lsr.w	r0, r0, r5
  40cf00:	fa01 f204 	lsl.w	r2, r1, r4
  40cf04:	ea40 0002 	orr.w	r0, r0, r2
  40cf08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40cf0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40cf10:	f141 0100 	adc.w	r1, r1, #0
  40cf14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40cf18:	bf08      	it	eq
  40cf1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40cf1e:	bd70      	pop	{r4, r5, r6, pc}
  40cf20:	f1c4 0520 	rsb	r5, r4, #32
  40cf24:	fa00 f205 	lsl.w	r2, r0, r5
  40cf28:	ea4e 0e02 	orr.w	lr, lr, r2
  40cf2c:	fa20 f304 	lsr.w	r3, r0, r4
  40cf30:	fa01 f205 	lsl.w	r2, r1, r5
  40cf34:	ea43 0302 	orr.w	r3, r3, r2
  40cf38:	fa21 f004 	lsr.w	r0, r1, r4
  40cf3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40cf40:	fa21 f204 	lsr.w	r2, r1, r4
  40cf44:	ea20 0002 	bic.w	r0, r0, r2
  40cf48:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40cf4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40cf50:	bf08      	it	eq
  40cf52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40cf56:	bd70      	pop	{r4, r5, r6, pc}
  40cf58:	f094 0f00 	teq	r4, #0
  40cf5c:	d10f      	bne.n	40cf7e <__aeabi_dmul+0x1c2>
  40cf5e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40cf62:	0040      	lsls	r0, r0, #1
  40cf64:	eb41 0101 	adc.w	r1, r1, r1
  40cf68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40cf6c:	bf08      	it	eq
  40cf6e:	3c01      	subeq	r4, #1
  40cf70:	d0f7      	beq.n	40cf62 <__aeabi_dmul+0x1a6>
  40cf72:	ea41 0106 	orr.w	r1, r1, r6
  40cf76:	f095 0f00 	teq	r5, #0
  40cf7a:	bf18      	it	ne
  40cf7c:	4770      	bxne	lr
  40cf7e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40cf82:	0052      	lsls	r2, r2, #1
  40cf84:	eb43 0303 	adc.w	r3, r3, r3
  40cf88:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40cf8c:	bf08      	it	eq
  40cf8e:	3d01      	subeq	r5, #1
  40cf90:	d0f7      	beq.n	40cf82 <__aeabi_dmul+0x1c6>
  40cf92:	ea43 0306 	orr.w	r3, r3, r6
  40cf96:	4770      	bx	lr
  40cf98:	ea94 0f0c 	teq	r4, ip
  40cf9c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40cfa0:	bf18      	it	ne
  40cfa2:	ea95 0f0c 	teqne	r5, ip
  40cfa6:	d00c      	beq.n	40cfc2 <__aeabi_dmul+0x206>
  40cfa8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40cfac:	bf18      	it	ne
  40cfae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40cfb2:	d1d1      	bne.n	40cf58 <__aeabi_dmul+0x19c>
  40cfb4:	ea81 0103 	eor.w	r1, r1, r3
  40cfb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40cfbc:	f04f 0000 	mov.w	r0, #0
  40cfc0:	bd70      	pop	{r4, r5, r6, pc}
  40cfc2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40cfc6:	bf06      	itte	eq
  40cfc8:	4610      	moveq	r0, r2
  40cfca:	4619      	moveq	r1, r3
  40cfcc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40cfd0:	d019      	beq.n	40d006 <__aeabi_dmul+0x24a>
  40cfd2:	ea94 0f0c 	teq	r4, ip
  40cfd6:	d102      	bne.n	40cfde <__aeabi_dmul+0x222>
  40cfd8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40cfdc:	d113      	bne.n	40d006 <__aeabi_dmul+0x24a>
  40cfde:	ea95 0f0c 	teq	r5, ip
  40cfe2:	d105      	bne.n	40cff0 <__aeabi_dmul+0x234>
  40cfe4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40cfe8:	bf1c      	itt	ne
  40cfea:	4610      	movne	r0, r2
  40cfec:	4619      	movne	r1, r3
  40cfee:	d10a      	bne.n	40d006 <__aeabi_dmul+0x24a>
  40cff0:	ea81 0103 	eor.w	r1, r1, r3
  40cff4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40cff8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40cffc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40d000:	f04f 0000 	mov.w	r0, #0
  40d004:	bd70      	pop	{r4, r5, r6, pc}
  40d006:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40d00a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40d00e:	bd70      	pop	{r4, r5, r6, pc}

0040d010 <__aeabi_ddiv>:
  40d010:	b570      	push	{r4, r5, r6, lr}
  40d012:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40d016:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40d01a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40d01e:	bf1d      	ittte	ne
  40d020:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40d024:	ea94 0f0c 	teqne	r4, ip
  40d028:	ea95 0f0c 	teqne	r5, ip
  40d02c:	f000 f8a7 	bleq	40d17e <__aeabi_ddiv+0x16e>
  40d030:	eba4 0405 	sub.w	r4, r4, r5
  40d034:	ea81 0e03 	eor.w	lr, r1, r3
  40d038:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40d03c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40d040:	f000 8088 	beq.w	40d154 <__aeabi_ddiv+0x144>
  40d044:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40d048:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40d04c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40d050:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40d054:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40d058:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40d05c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40d060:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40d064:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40d068:	429d      	cmp	r5, r3
  40d06a:	bf08      	it	eq
  40d06c:	4296      	cmpeq	r6, r2
  40d06e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40d072:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40d076:	d202      	bcs.n	40d07e <__aeabi_ddiv+0x6e>
  40d078:	085b      	lsrs	r3, r3, #1
  40d07a:	ea4f 0232 	mov.w	r2, r2, rrx
  40d07e:	1ab6      	subs	r6, r6, r2
  40d080:	eb65 0503 	sbc.w	r5, r5, r3
  40d084:	085b      	lsrs	r3, r3, #1
  40d086:	ea4f 0232 	mov.w	r2, r2, rrx
  40d08a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40d08e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40d092:	ebb6 0e02 	subs.w	lr, r6, r2
  40d096:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d09a:	bf22      	ittt	cs
  40d09c:	1ab6      	subcs	r6, r6, r2
  40d09e:	4675      	movcs	r5, lr
  40d0a0:	ea40 000c 	orrcs.w	r0, r0, ip
  40d0a4:	085b      	lsrs	r3, r3, #1
  40d0a6:	ea4f 0232 	mov.w	r2, r2, rrx
  40d0aa:	ebb6 0e02 	subs.w	lr, r6, r2
  40d0ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d0b2:	bf22      	ittt	cs
  40d0b4:	1ab6      	subcs	r6, r6, r2
  40d0b6:	4675      	movcs	r5, lr
  40d0b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40d0bc:	085b      	lsrs	r3, r3, #1
  40d0be:	ea4f 0232 	mov.w	r2, r2, rrx
  40d0c2:	ebb6 0e02 	subs.w	lr, r6, r2
  40d0c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d0ca:	bf22      	ittt	cs
  40d0cc:	1ab6      	subcs	r6, r6, r2
  40d0ce:	4675      	movcs	r5, lr
  40d0d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40d0d4:	085b      	lsrs	r3, r3, #1
  40d0d6:	ea4f 0232 	mov.w	r2, r2, rrx
  40d0da:	ebb6 0e02 	subs.w	lr, r6, r2
  40d0de:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d0e2:	bf22      	ittt	cs
  40d0e4:	1ab6      	subcs	r6, r6, r2
  40d0e6:	4675      	movcs	r5, lr
  40d0e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40d0ec:	ea55 0e06 	orrs.w	lr, r5, r6
  40d0f0:	d018      	beq.n	40d124 <__aeabi_ddiv+0x114>
  40d0f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40d0f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40d0fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40d0fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40d102:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40d106:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40d10a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40d10e:	d1c0      	bne.n	40d092 <__aeabi_ddiv+0x82>
  40d110:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d114:	d10b      	bne.n	40d12e <__aeabi_ddiv+0x11e>
  40d116:	ea41 0100 	orr.w	r1, r1, r0
  40d11a:	f04f 0000 	mov.w	r0, #0
  40d11e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40d122:	e7b6      	b.n	40d092 <__aeabi_ddiv+0x82>
  40d124:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d128:	bf04      	itt	eq
  40d12a:	4301      	orreq	r1, r0
  40d12c:	2000      	moveq	r0, #0
  40d12e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40d132:	bf88      	it	hi
  40d134:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40d138:	f63f aeaf 	bhi.w	40ce9a <__aeabi_dmul+0xde>
  40d13c:	ebb5 0c03 	subs.w	ip, r5, r3
  40d140:	bf04      	itt	eq
  40d142:	ebb6 0c02 	subseq.w	ip, r6, r2
  40d146:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40d14a:	f150 0000 	adcs.w	r0, r0, #0
  40d14e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d152:	bd70      	pop	{r4, r5, r6, pc}
  40d154:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40d158:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40d15c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40d160:	bfc2      	ittt	gt
  40d162:	ebd4 050c 	rsbsgt	r5, r4, ip
  40d166:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40d16a:	bd70      	popgt	{r4, r5, r6, pc}
  40d16c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d170:	f04f 0e00 	mov.w	lr, #0
  40d174:	3c01      	subs	r4, #1
  40d176:	e690      	b.n	40ce9a <__aeabi_dmul+0xde>
  40d178:	ea45 0e06 	orr.w	lr, r5, r6
  40d17c:	e68d      	b.n	40ce9a <__aeabi_dmul+0xde>
  40d17e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40d182:	ea94 0f0c 	teq	r4, ip
  40d186:	bf08      	it	eq
  40d188:	ea95 0f0c 	teqeq	r5, ip
  40d18c:	f43f af3b 	beq.w	40d006 <__aeabi_dmul+0x24a>
  40d190:	ea94 0f0c 	teq	r4, ip
  40d194:	d10a      	bne.n	40d1ac <__aeabi_ddiv+0x19c>
  40d196:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40d19a:	f47f af34 	bne.w	40d006 <__aeabi_dmul+0x24a>
  40d19e:	ea95 0f0c 	teq	r5, ip
  40d1a2:	f47f af25 	bne.w	40cff0 <__aeabi_dmul+0x234>
  40d1a6:	4610      	mov	r0, r2
  40d1a8:	4619      	mov	r1, r3
  40d1aa:	e72c      	b.n	40d006 <__aeabi_dmul+0x24a>
  40d1ac:	ea95 0f0c 	teq	r5, ip
  40d1b0:	d106      	bne.n	40d1c0 <__aeabi_ddiv+0x1b0>
  40d1b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40d1b6:	f43f aefd 	beq.w	40cfb4 <__aeabi_dmul+0x1f8>
  40d1ba:	4610      	mov	r0, r2
  40d1bc:	4619      	mov	r1, r3
  40d1be:	e722      	b.n	40d006 <__aeabi_dmul+0x24a>
  40d1c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d1c4:	bf18      	it	ne
  40d1c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d1ca:	f47f aec5 	bne.w	40cf58 <__aeabi_dmul+0x19c>
  40d1ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40d1d2:	f47f af0d 	bne.w	40cff0 <__aeabi_dmul+0x234>
  40d1d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40d1da:	f47f aeeb 	bne.w	40cfb4 <__aeabi_dmul+0x1f8>
  40d1de:	e712      	b.n	40d006 <__aeabi_dmul+0x24a>

0040d1e0 <__gedf2>:
  40d1e0:	f04f 3cff 	mov.w	ip, #4294967295
  40d1e4:	e006      	b.n	40d1f4 <__cmpdf2+0x4>
  40d1e6:	bf00      	nop

0040d1e8 <__ledf2>:
  40d1e8:	f04f 0c01 	mov.w	ip, #1
  40d1ec:	e002      	b.n	40d1f4 <__cmpdf2+0x4>
  40d1ee:	bf00      	nop

0040d1f0 <__cmpdf2>:
  40d1f0:	f04f 0c01 	mov.w	ip, #1
  40d1f4:	f84d cd04 	str.w	ip, [sp, #-4]!
  40d1f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40d1fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d200:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40d204:	bf18      	it	ne
  40d206:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40d20a:	d01b      	beq.n	40d244 <__cmpdf2+0x54>
  40d20c:	b001      	add	sp, #4
  40d20e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40d212:	bf0c      	ite	eq
  40d214:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40d218:	ea91 0f03 	teqne	r1, r3
  40d21c:	bf02      	ittt	eq
  40d21e:	ea90 0f02 	teqeq	r0, r2
  40d222:	2000      	moveq	r0, #0
  40d224:	4770      	bxeq	lr
  40d226:	f110 0f00 	cmn.w	r0, #0
  40d22a:	ea91 0f03 	teq	r1, r3
  40d22e:	bf58      	it	pl
  40d230:	4299      	cmppl	r1, r3
  40d232:	bf08      	it	eq
  40d234:	4290      	cmpeq	r0, r2
  40d236:	bf2c      	ite	cs
  40d238:	17d8      	asrcs	r0, r3, #31
  40d23a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40d23e:	f040 0001 	orr.w	r0, r0, #1
  40d242:	4770      	bx	lr
  40d244:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40d248:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d24c:	d102      	bne.n	40d254 <__cmpdf2+0x64>
  40d24e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40d252:	d107      	bne.n	40d264 <__cmpdf2+0x74>
  40d254:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40d258:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d25c:	d1d6      	bne.n	40d20c <__cmpdf2+0x1c>
  40d25e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40d262:	d0d3      	beq.n	40d20c <__cmpdf2+0x1c>
  40d264:	f85d 0b04 	ldr.w	r0, [sp], #4
  40d268:	4770      	bx	lr
  40d26a:	bf00      	nop

0040d26c <__aeabi_cdrcmple>:
  40d26c:	4684      	mov	ip, r0
  40d26e:	4610      	mov	r0, r2
  40d270:	4662      	mov	r2, ip
  40d272:	468c      	mov	ip, r1
  40d274:	4619      	mov	r1, r3
  40d276:	4663      	mov	r3, ip
  40d278:	e000      	b.n	40d27c <__aeabi_cdcmpeq>
  40d27a:	bf00      	nop

0040d27c <__aeabi_cdcmpeq>:
  40d27c:	b501      	push	{r0, lr}
  40d27e:	f7ff ffb7 	bl	40d1f0 <__cmpdf2>
  40d282:	2800      	cmp	r0, #0
  40d284:	bf48      	it	mi
  40d286:	f110 0f00 	cmnmi.w	r0, #0
  40d28a:	bd01      	pop	{r0, pc}

0040d28c <__aeabi_dcmpeq>:
  40d28c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d290:	f7ff fff4 	bl	40d27c <__aeabi_cdcmpeq>
  40d294:	bf0c      	ite	eq
  40d296:	2001      	moveq	r0, #1
  40d298:	2000      	movne	r0, #0
  40d29a:	f85d fb08 	ldr.w	pc, [sp], #8
  40d29e:	bf00      	nop

0040d2a0 <__aeabi_dcmplt>:
  40d2a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d2a4:	f7ff ffea 	bl	40d27c <__aeabi_cdcmpeq>
  40d2a8:	bf34      	ite	cc
  40d2aa:	2001      	movcc	r0, #1
  40d2ac:	2000      	movcs	r0, #0
  40d2ae:	f85d fb08 	ldr.w	pc, [sp], #8
  40d2b2:	bf00      	nop

0040d2b4 <__aeabi_dcmple>:
  40d2b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d2b8:	f7ff ffe0 	bl	40d27c <__aeabi_cdcmpeq>
  40d2bc:	bf94      	ite	ls
  40d2be:	2001      	movls	r0, #1
  40d2c0:	2000      	movhi	r0, #0
  40d2c2:	f85d fb08 	ldr.w	pc, [sp], #8
  40d2c6:	bf00      	nop

0040d2c8 <__aeabi_dcmpge>:
  40d2c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d2cc:	f7ff ffce 	bl	40d26c <__aeabi_cdrcmple>
  40d2d0:	bf94      	ite	ls
  40d2d2:	2001      	movls	r0, #1
  40d2d4:	2000      	movhi	r0, #0
  40d2d6:	f85d fb08 	ldr.w	pc, [sp], #8
  40d2da:	bf00      	nop

0040d2dc <__aeabi_dcmpgt>:
  40d2dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d2e0:	f7ff ffc4 	bl	40d26c <__aeabi_cdrcmple>
  40d2e4:	bf34      	ite	cc
  40d2e6:	2001      	movcc	r0, #1
  40d2e8:	2000      	movcs	r0, #0
  40d2ea:	f85d fb08 	ldr.w	pc, [sp], #8
  40d2ee:	bf00      	nop

0040d2f0 <__aeabi_dcmpun>:
  40d2f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40d2f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d2f8:	d102      	bne.n	40d300 <__aeabi_dcmpun+0x10>
  40d2fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40d2fe:	d10a      	bne.n	40d316 <__aeabi_dcmpun+0x26>
  40d300:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40d304:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d308:	d102      	bne.n	40d310 <__aeabi_dcmpun+0x20>
  40d30a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40d30e:	d102      	bne.n	40d316 <__aeabi_dcmpun+0x26>
  40d310:	f04f 0000 	mov.w	r0, #0
  40d314:	4770      	bx	lr
  40d316:	f04f 0001 	mov.w	r0, #1
  40d31a:	4770      	bx	lr

0040d31c <__aeabi_d2iz>:
  40d31c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40d320:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40d324:	d215      	bcs.n	40d352 <__aeabi_d2iz+0x36>
  40d326:	d511      	bpl.n	40d34c <__aeabi_d2iz+0x30>
  40d328:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40d32c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40d330:	d912      	bls.n	40d358 <__aeabi_d2iz+0x3c>
  40d332:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40d336:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40d33a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40d33e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40d342:	fa23 f002 	lsr.w	r0, r3, r2
  40d346:	bf18      	it	ne
  40d348:	4240      	negne	r0, r0
  40d34a:	4770      	bx	lr
  40d34c:	f04f 0000 	mov.w	r0, #0
  40d350:	4770      	bx	lr
  40d352:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40d356:	d105      	bne.n	40d364 <__aeabi_d2iz+0x48>
  40d358:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40d35c:	bf08      	it	eq
  40d35e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40d362:	4770      	bx	lr
  40d364:	f04f 0000 	mov.w	r0, #0
  40d368:	4770      	bx	lr
  40d36a:	bf00      	nop

0040d36c <__aeabi_uldivmod>:
  40d36c:	b953      	cbnz	r3, 40d384 <__aeabi_uldivmod+0x18>
  40d36e:	b94a      	cbnz	r2, 40d384 <__aeabi_uldivmod+0x18>
  40d370:	2900      	cmp	r1, #0
  40d372:	bf08      	it	eq
  40d374:	2800      	cmpeq	r0, #0
  40d376:	bf1c      	itt	ne
  40d378:	f04f 31ff 	movne.w	r1, #4294967295
  40d37c:	f04f 30ff 	movne.w	r0, #4294967295
  40d380:	f000 b97a 	b.w	40d678 <__aeabi_idiv0>
  40d384:	f1ad 0c08 	sub.w	ip, sp, #8
  40d388:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40d38c:	f000 f806 	bl	40d39c <__udivmoddi4>
  40d390:	f8dd e004 	ldr.w	lr, [sp, #4]
  40d394:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40d398:	b004      	add	sp, #16
  40d39a:	4770      	bx	lr

0040d39c <__udivmoddi4>:
  40d39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40d3a0:	468c      	mov	ip, r1
  40d3a2:	460d      	mov	r5, r1
  40d3a4:	4604      	mov	r4, r0
  40d3a6:	9e08      	ldr	r6, [sp, #32]
  40d3a8:	2b00      	cmp	r3, #0
  40d3aa:	d151      	bne.n	40d450 <__udivmoddi4+0xb4>
  40d3ac:	428a      	cmp	r2, r1
  40d3ae:	4617      	mov	r7, r2
  40d3b0:	d96d      	bls.n	40d48e <__udivmoddi4+0xf2>
  40d3b2:	fab2 fe82 	clz	lr, r2
  40d3b6:	f1be 0f00 	cmp.w	lr, #0
  40d3ba:	d00b      	beq.n	40d3d4 <__udivmoddi4+0x38>
  40d3bc:	f1ce 0c20 	rsb	ip, lr, #32
  40d3c0:	fa01 f50e 	lsl.w	r5, r1, lr
  40d3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
  40d3c8:	fa02 f70e 	lsl.w	r7, r2, lr
  40d3cc:	ea4c 0c05 	orr.w	ip, ip, r5
  40d3d0:	fa00 f40e 	lsl.w	r4, r0, lr
  40d3d4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40d3d8:	0c25      	lsrs	r5, r4, #16
  40d3da:	fbbc f8fa 	udiv	r8, ip, sl
  40d3de:	fa1f f987 	uxth.w	r9, r7
  40d3e2:	fb0a cc18 	mls	ip, sl, r8, ip
  40d3e6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40d3ea:	fb08 f309 	mul.w	r3, r8, r9
  40d3ee:	42ab      	cmp	r3, r5
  40d3f0:	d90a      	bls.n	40d408 <__udivmoddi4+0x6c>
  40d3f2:	19ed      	adds	r5, r5, r7
  40d3f4:	f108 32ff 	add.w	r2, r8, #4294967295
  40d3f8:	f080 8123 	bcs.w	40d642 <__udivmoddi4+0x2a6>
  40d3fc:	42ab      	cmp	r3, r5
  40d3fe:	f240 8120 	bls.w	40d642 <__udivmoddi4+0x2a6>
  40d402:	f1a8 0802 	sub.w	r8, r8, #2
  40d406:	443d      	add	r5, r7
  40d408:	1aed      	subs	r5, r5, r3
  40d40a:	b2a4      	uxth	r4, r4
  40d40c:	fbb5 f0fa 	udiv	r0, r5, sl
  40d410:	fb0a 5510 	mls	r5, sl, r0, r5
  40d414:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40d418:	fb00 f909 	mul.w	r9, r0, r9
  40d41c:	45a1      	cmp	r9, r4
  40d41e:	d909      	bls.n	40d434 <__udivmoddi4+0x98>
  40d420:	19e4      	adds	r4, r4, r7
  40d422:	f100 33ff 	add.w	r3, r0, #4294967295
  40d426:	f080 810a 	bcs.w	40d63e <__udivmoddi4+0x2a2>
  40d42a:	45a1      	cmp	r9, r4
  40d42c:	f240 8107 	bls.w	40d63e <__udivmoddi4+0x2a2>
  40d430:	3802      	subs	r0, #2
  40d432:	443c      	add	r4, r7
  40d434:	eba4 0409 	sub.w	r4, r4, r9
  40d438:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40d43c:	2100      	movs	r1, #0
  40d43e:	2e00      	cmp	r6, #0
  40d440:	d061      	beq.n	40d506 <__udivmoddi4+0x16a>
  40d442:	fa24 f40e 	lsr.w	r4, r4, lr
  40d446:	2300      	movs	r3, #0
  40d448:	6034      	str	r4, [r6, #0]
  40d44a:	6073      	str	r3, [r6, #4]
  40d44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d450:	428b      	cmp	r3, r1
  40d452:	d907      	bls.n	40d464 <__udivmoddi4+0xc8>
  40d454:	2e00      	cmp	r6, #0
  40d456:	d054      	beq.n	40d502 <__udivmoddi4+0x166>
  40d458:	2100      	movs	r1, #0
  40d45a:	e886 0021 	stmia.w	r6, {r0, r5}
  40d45e:	4608      	mov	r0, r1
  40d460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d464:	fab3 f183 	clz	r1, r3
  40d468:	2900      	cmp	r1, #0
  40d46a:	f040 808e 	bne.w	40d58a <__udivmoddi4+0x1ee>
  40d46e:	42ab      	cmp	r3, r5
  40d470:	d302      	bcc.n	40d478 <__udivmoddi4+0xdc>
  40d472:	4282      	cmp	r2, r0
  40d474:	f200 80fa 	bhi.w	40d66c <__udivmoddi4+0x2d0>
  40d478:	1a84      	subs	r4, r0, r2
  40d47a:	eb65 0503 	sbc.w	r5, r5, r3
  40d47e:	2001      	movs	r0, #1
  40d480:	46ac      	mov	ip, r5
  40d482:	2e00      	cmp	r6, #0
  40d484:	d03f      	beq.n	40d506 <__udivmoddi4+0x16a>
  40d486:	e886 1010 	stmia.w	r6, {r4, ip}
  40d48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d48e:	b912      	cbnz	r2, 40d496 <__udivmoddi4+0xfa>
  40d490:	2701      	movs	r7, #1
  40d492:	fbb7 f7f2 	udiv	r7, r7, r2
  40d496:	fab7 fe87 	clz	lr, r7
  40d49a:	f1be 0f00 	cmp.w	lr, #0
  40d49e:	d134      	bne.n	40d50a <__udivmoddi4+0x16e>
  40d4a0:	1beb      	subs	r3, r5, r7
  40d4a2:	0c3a      	lsrs	r2, r7, #16
  40d4a4:	fa1f fc87 	uxth.w	ip, r7
  40d4a8:	2101      	movs	r1, #1
  40d4aa:	fbb3 f8f2 	udiv	r8, r3, r2
  40d4ae:	0c25      	lsrs	r5, r4, #16
  40d4b0:	fb02 3318 	mls	r3, r2, r8, r3
  40d4b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40d4b8:	fb0c f308 	mul.w	r3, ip, r8
  40d4bc:	42ab      	cmp	r3, r5
  40d4be:	d907      	bls.n	40d4d0 <__udivmoddi4+0x134>
  40d4c0:	19ed      	adds	r5, r5, r7
  40d4c2:	f108 30ff 	add.w	r0, r8, #4294967295
  40d4c6:	d202      	bcs.n	40d4ce <__udivmoddi4+0x132>
  40d4c8:	42ab      	cmp	r3, r5
  40d4ca:	f200 80d1 	bhi.w	40d670 <__udivmoddi4+0x2d4>
  40d4ce:	4680      	mov	r8, r0
  40d4d0:	1aed      	subs	r5, r5, r3
  40d4d2:	b2a3      	uxth	r3, r4
  40d4d4:	fbb5 f0f2 	udiv	r0, r5, r2
  40d4d8:	fb02 5510 	mls	r5, r2, r0, r5
  40d4dc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40d4e0:	fb0c fc00 	mul.w	ip, ip, r0
  40d4e4:	45a4      	cmp	ip, r4
  40d4e6:	d907      	bls.n	40d4f8 <__udivmoddi4+0x15c>
  40d4e8:	19e4      	adds	r4, r4, r7
  40d4ea:	f100 33ff 	add.w	r3, r0, #4294967295
  40d4ee:	d202      	bcs.n	40d4f6 <__udivmoddi4+0x15a>
  40d4f0:	45a4      	cmp	ip, r4
  40d4f2:	f200 80b8 	bhi.w	40d666 <__udivmoddi4+0x2ca>
  40d4f6:	4618      	mov	r0, r3
  40d4f8:	eba4 040c 	sub.w	r4, r4, ip
  40d4fc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40d500:	e79d      	b.n	40d43e <__udivmoddi4+0xa2>
  40d502:	4631      	mov	r1, r6
  40d504:	4630      	mov	r0, r6
  40d506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d50a:	f1ce 0420 	rsb	r4, lr, #32
  40d50e:	fa05 f30e 	lsl.w	r3, r5, lr
  40d512:	fa07 f70e 	lsl.w	r7, r7, lr
  40d516:	fa20 f804 	lsr.w	r8, r0, r4
  40d51a:	0c3a      	lsrs	r2, r7, #16
  40d51c:	fa25 f404 	lsr.w	r4, r5, r4
  40d520:	ea48 0803 	orr.w	r8, r8, r3
  40d524:	fbb4 f1f2 	udiv	r1, r4, r2
  40d528:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40d52c:	fb02 4411 	mls	r4, r2, r1, r4
  40d530:	fa1f fc87 	uxth.w	ip, r7
  40d534:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40d538:	fb01 f30c 	mul.w	r3, r1, ip
  40d53c:	42ab      	cmp	r3, r5
  40d53e:	fa00 f40e 	lsl.w	r4, r0, lr
  40d542:	d909      	bls.n	40d558 <__udivmoddi4+0x1bc>
  40d544:	19ed      	adds	r5, r5, r7
  40d546:	f101 30ff 	add.w	r0, r1, #4294967295
  40d54a:	f080 808a 	bcs.w	40d662 <__udivmoddi4+0x2c6>
  40d54e:	42ab      	cmp	r3, r5
  40d550:	f240 8087 	bls.w	40d662 <__udivmoddi4+0x2c6>
  40d554:	3902      	subs	r1, #2
  40d556:	443d      	add	r5, r7
  40d558:	1aeb      	subs	r3, r5, r3
  40d55a:	fa1f f588 	uxth.w	r5, r8
  40d55e:	fbb3 f0f2 	udiv	r0, r3, r2
  40d562:	fb02 3310 	mls	r3, r2, r0, r3
  40d566:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40d56a:	fb00 f30c 	mul.w	r3, r0, ip
  40d56e:	42ab      	cmp	r3, r5
  40d570:	d907      	bls.n	40d582 <__udivmoddi4+0x1e6>
  40d572:	19ed      	adds	r5, r5, r7
  40d574:	f100 38ff 	add.w	r8, r0, #4294967295
  40d578:	d26f      	bcs.n	40d65a <__udivmoddi4+0x2be>
  40d57a:	42ab      	cmp	r3, r5
  40d57c:	d96d      	bls.n	40d65a <__udivmoddi4+0x2be>
  40d57e:	3802      	subs	r0, #2
  40d580:	443d      	add	r5, r7
  40d582:	1aeb      	subs	r3, r5, r3
  40d584:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40d588:	e78f      	b.n	40d4aa <__udivmoddi4+0x10e>
  40d58a:	f1c1 0720 	rsb	r7, r1, #32
  40d58e:	fa22 f807 	lsr.w	r8, r2, r7
  40d592:	408b      	lsls	r3, r1
  40d594:	fa05 f401 	lsl.w	r4, r5, r1
  40d598:	ea48 0303 	orr.w	r3, r8, r3
  40d59c:	fa20 fe07 	lsr.w	lr, r0, r7
  40d5a0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40d5a4:	40fd      	lsrs	r5, r7
  40d5a6:	ea4e 0e04 	orr.w	lr, lr, r4
  40d5aa:	fbb5 f9fc 	udiv	r9, r5, ip
  40d5ae:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40d5b2:	fb0c 5519 	mls	r5, ip, r9, r5
  40d5b6:	fa1f f883 	uxth.w	r8, r3
  40d5ba:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40d5be:	fb09 f408 	mul.w	r4, r9, r8
  40d5c2:	42ac      	cmp	r4, r5
  40d5c4:	fa02 f201 	lsl.w	r2, r2, r1
  40d5c8:	fa00 fa01 	lsl.w	sl, r0, r1
  40d5cc:	d908      	bls.n	40d5e0 <__udivmoddi4+0x244>
  40d5ce:	18ed      	adds	r5, r5, r3
  40d5d0:	f109 30ff 	add.w	r0, r9, #4294967295
  40d5d4:	d243      	bcs.n	40d65e <__udivmoddi4+0x2c2>
  40d5d6:	42ac      	cmp	r4, r5
  40d5d8:	d941      	bls.n	40d65e <__udivmoddi4+0x2c2>
  40d5da:	f1a9 0902 	sub.w	r9, r9, #2
  40d5de:	441d      	add	r5, r3
  40d5e0:	1b2d      	subs	r5, r5, r4
  40d5e2:	fa1f fe8e 	uxth.w	lr, lr
  40d5e6:	fbb5 f0fc 	udiv	r0, r5, ip
  40d5ea:	fb0c 5510 	mls	r5, ip, r0, r5
  40d5ee:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40d5f2:	fb00 f808 	mul.w	r8, r0, r8
  40d5f6:	45a0      	cmp	r8, r4
  40d5f8:	d907      	bls.n	40d60a <__udivmoddi4+0x26e>
  40d5fa:	18e4      	adds	r4, r4, r3
  40d5fc:	f100 35ff 	add.w	r5, r0, #4294967295
  40d600:	d229      	bcs.n	40d656 <__udivmoddi4+0x2ba>
  40d602:	45a0      	cmp	r8, r4
  40d604:	d927      	bls.n	40d656 <__udivmoddi4+0x2ba>
  40d606:	3802      	subs	r0, #2
  40d608:	441c      	add	r4, r3
  40d60a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40d60e:	eba4 0408 	sub.w	r4, r4, r8
  40d612:	fba0 8902 	umull	r8, r9, r0, r2
  40d616:	454c      	cmp	r4, r9
  40d618:	46c6      	mov	lr, r8
  40d61a:	464d      	mov	r5, r9
  40d61c:	d315      	bcc.n	40d64a <__udivmoddi4+0x2ae>
  40d61e:	d012      	beq.n	40d646 <__udivmoddi4+0x2aa>
  40d620:	b156      	cbz	r6, 40d638 <__udivmoddi4+0x29c>
  40d622:	ebba 030e 	subs.w	r3, sl, lr
  40d626:	eb64 0405 	sbc.w	r4, r4, r5
  40d62a:	fa04 f707 	lsl.w	r7, r4, r7
  40d62e:	40cb      	lsrs	r3, r1
  40d630:	431f      	orrs	r7, r3
  40d632:	40cc      	lsrs	r4, r1
  40d634:	6037      	str	r7, [r6, #0]
  40d636:	6074      	str	r4, [r6, #4]
  40d638:	2100      	movs	r1, #0
  40d63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d63e:	4618      	mov	r0, r3
  40d640:	e6f8      	b.n	40d434 <__udivmoddi4+0x98>
  40d642:	4690      	mov	r8, r2
  40d644:	e6e0      	b.n	40d408 <__udivmoddi4+0x6c>
  40d646:	45c2      	cmp	sl, r8
  40d648:	d2ea      	bcs.n	40d620 <__udivmoddi4+0x284>
  40d64a:	ebb8 0e02 	subs.w	lr, r8, r2
  40d64e:	eb69 0503 	sbc.w	r5, r9, r3
  40d652:	3801      	subs	r0, #1
  40d654:	e7e4      	b.n	40d620 <__udivmoddi4+0x284>
  40d656:	4628      	mov	r0, r5
  40d658:	e7d7      	b.n	40d60a <__udivmoddi4+0x26e>
  40d65a:	4640      	mov	r0, r8
  40d65c:	e791      	b.n	40d582 <__udivmoddi4+0x1e6>
  40d65e:	4681      	mov	r9, r0
  40d660:	e7be      	b.n	40d5e0 <__udivmoddi4+0x244>
  40d662:	4601      	mov	r1, r0
  40d664:	e778      	b.n	40d558 <__udivmoddi4+0x1bc>
  40d666:	3802      	subs	r0, #2
  40d668:	443c      	add	r4, r7
  40d66a:	e745      	b.n	40d4f8 <__udivmoddi4+0x15c>
  40d66c:	4608      	mov	r0, r1
  40d66e:	e708      	b.n	40d482 <__udivmoddi4+0xe6>
  40d670:	f1a8 0802 	sub.w	r8, r8, #2
  40d674:	443d      	add	r5, r7
  40d676:	e72b      	b.n	40d4d0 <__udivmoddi4+0x134>

0040d678 <__aeabi_idiv0>:
  40d678:	4770      	bx	lr
  40d67a:	bf00      	nop
  40d67c:	454c4449 	.word	0x454c4449
  40d680:	00000000 	.word	0x00000000
  40d684:	51726d54 	.word	0x51726d54
  40d688:	00000000 	.word	0x00000000
  40d68c:	20726d54 	.word	0x20726d54
  40d690:	00637653 	.word	0x00637653

0040d694 <__FUNCTION__.11637>:
  40d694:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
  40d6a4:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40d6b4:	00005d64 61766e49 2064696c 54434f49     d]..Invalid IOCT
  40d6c4:	6f63204c 6e616d6d 000a2164 0000000d     L command!......

0040d6d4 <__FUNCTION__.9901>:
  40d6d4:	5f666968 646e6573 00000000              hif_send....

0040d6e0 <__FUNCTION__.9911>:
  40d6e0:	5f666968 00727369                       hif_isr.

0040d6e8 <__FUNCTION__.9917>:
  40d6e8:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0040d6f8 <__FUNCTION__.9932>:
  40d6f8:	5f666968 65636572 00657669              hif_receive.

0040d704 <__FUNCTION__.9947>:
  40d704:	5f666968 69676572 72657473 0062635f     hif_register_cb.
  40d714:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
  40d724:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
  40d734:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
  40d744:	73657264 75622073 61662073 000a6c69     dress bus fail..
  40d754:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
  40d764:	6b636170 53207465 20657a69 7525203d     packet Size = %u
  40d774:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
  40d784:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
  40d794:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
  40d7a4:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
  40d7b4:	61207473 64207070 276e6469 65732074     st app didn't se
  40d7c4:	58522074 6e6f4420 00000a65 66696828     t RX Done...(hif
  40d7d4:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
  40d7e4:	66696828 61462029 2065736c 65746e69     (hif) False inte
  40d7f4:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
  40d804:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
  40d814:	7265746e 74707572 67657220 0000000a     nterrupt reg....
  40d824:	66696828 41462029 74204c49 6177206f     (hif) FAIL to wa
  40d834:	7075656b 65687420 69686320 00000a70     keup the chip...
  40d844:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
  40d854:	656c646e 746e6920 75727265 25207470     ndle interrupt %
  40d864:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
  40d874:	66696820 6365725f 65766965 6e49203a      hif_receive: In
  40d884:	696c6176 72612064 656d7567 000a746e     valid argument..
  40d894:	20505041 75716552 65747365 69532064     APP Requested Si
  40d8a4:	6920657a 616c2073 72656772 61687420     ze is larger tha
  40d8b4:	6874206e 65722065 65766963 75622064     n the recived bu
  40d8c4:	72656666 7a697320 253c2065 253c3e64     ffer size <%d><%
  40d8d4:	000a3e64 20505041 75716552 65747365     d>..APP Requeste
  40d8e4:	64412064 73657264 65622073 646e6f79     d Address beyond
  40d8f4:	65687420 63657220 64657669 66756220      the recived buf
  40d904:	20726566 72646461 20737365 20646e61     fer address and 
  40d914:	676e656c 000a6874 20705247 6425203f     length..GRp ? %d
  40d924:	0000000a 46494828 69614629 6f74206c     ....(HIF)Fail to
  40d934:	6b617720 74207075 63206568 0a706968      wakup the chip.
  40d944:	00000000                                ....

0040d948 <__FUNCTION__.9874>:
  40d948:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0040d954 <__FUNCTION__.9898>:
  40d954:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0040d964 <__FUNCTION__.9926>:
  40d964:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  40d974:	0063735f 50504128 4e492829 00294f46     _sc.(APP)(INFO).
  40d984:	666e6f43 7463696c 49206465 20222050     Conflicted IP " 
  40d994:	252e7525 75252e75 2075252e 000a2022     %u.%u.%u.%u " ..
  40d9a4:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
  40d9b4:	000a6425 2079654b 6e207369 7620746f     %d..Key is not v
  40d9c4:	64696c61 0000000a 61766e49 2064696c     alid....Invalid 
  40d9d4:	0a79654b 00000000 44495353 4e454c20     Key.....SSID LEN
  40d9e4:	564e4920 44494c41 0000000a 49204843      INVALID....CH I
  40d9f4:	4c41564e 000a4449 61766e49 2064696c     NVALID..Invalid 
  40da04:	20706557 2079656b 65646e69 64252078     Wep key index %d
  40da14:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
  40da24:	2079656b 676e656c 25206874 00000a64     key length %d...
  40da34:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
  40da44:	656c2079 6874676e 0000000a 65646e75     y length....unde
  40da54:	656e6966 65732064 79742063 000a6570     fined sec type..
  40da64:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  40da74:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  40da84:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  40da94:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  40daa4:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  40dab4:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  40dac4:	7277616d 65562065 6f697372 00000a6e     mawre Version...

0040dad4 <__FUNCTION__.9711>:
  40dad4:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0040dae4 <__FUNCTION__.9805>:
  40dae4:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
  40daf4:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  40db04:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  40db14:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  40db24:	00000000 6f727245 68772072 20656c69     ....Error while 
  40db34:	64616572 20676e69 0a676572 00000000     reading reg.....
  40db44:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  40db54:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40db64:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  40db74:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40db84:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  40db94:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  40dba4:	0000000a 3a676572 2f207825 20782520     ....reg:%x / %x 
  40dbb4:	0000000a                                ....

0040dbb8 <__FUNCTION__.9792>:
  40dbb8:	645f6d6e 695f7672 0074696e              nm_drv_init.

0040dbc4 <__FUNCTION__.9799>:
  40dbc4:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
  40dbd4:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
  40dbe4:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
  40dbf4:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
  40dc04:	73616c66 69642068 6c626173 61662065     flash disable fa
  40dc14:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
  40dc24:	6c696166 696e6920 75622074 00000a73     fail init bus...
  40dc34:	6c696166 74206465 6e65206f 656c6261     failed to enable
  40dc44:	746e6920 75727265 2e737470 00000a2e      interrupts.....
  40dc54:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  40dc64:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  40dc74:	20444920 0a786c25 00000000               ID %lx.....

0040dc80 <__FUNCTION__.9176>:
  40dc80:	5f697073 00646d63                       spi_cmd.

0040dc88 <__FUNCTION__.9184>:
  40dc88:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040dc94 <__FUNCTION__.9200>:
  40dc94:	5f697073 61746164 6165725f 00000064     spi_data_read...

0040dca4 <__FUNCTION__.9215>:
  40dca4:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040dcb4 <__FUNCTION__.9225>:
  40dcb4:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0040dcc4 <__FUNCTION__.9233>:
  40dcc4:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0040dcd4 <__FUNCTION__.9242>:
  40dcd4:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0040dce4 <__FUNCTION__.9250>:
  40dce4:	735f6d6e 725f6970 00646165              nm_spi_read.

0040dcf0 <__FUNCTION__.9267>:
  40dcf0:	735f6d6e 695f6970 0074696e              nm_spi_init.

0040dcfc <crc7_syndrome_table>:
  40dcfc:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  40dd0c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  40dd1c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  40dd2c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  40dd3c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  40dd4c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  40dd5c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  40dd6c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  40dd7c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  40dd8c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  40dd9c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  40ddac:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  40ddbc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  40ddcc:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  40dddc:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  40ddec:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
  40ddfc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40de0c:	6e692064 6e726574 72206c61 20646165     d internal read 
  40de1c:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  40de2c:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  40de3c:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  40de4c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40de5c:	6e692064 6e726574 72206c61 20646165     d internal read 
  40de6c:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  40de7c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40de8c:	6e692064 6e726574 77206c61 65746972     d internal write
  40de9c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  40deac:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40debc:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  40decc:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  40dedc:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40deec:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  40defc:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  40df0c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40df1c:	65722064 6e6f7073 202c6573 64616572     d response, read
  40df2c:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  40df3c:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40df4c:	656c6961 6c622064 206b636f 61746164     ailed block data
  40df5c:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  40df6c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40df7c:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  40df8c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  40df9c:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  40dfac:	7220646d 6f707365 2c65736e 69727720     md response, wri
  40dfbc:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  40dfcc:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40dfdc:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40dfec:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  40dffc:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40e00c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40e01c:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  40e02c:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40e03c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e04c:	61642064 62206174 6b636f6c 63726320     d data block crc
  40e05c:	69727720 202c6574 20737562 6f727265      write, bus erro
  40e06c:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  40e07c:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40e08c:	61746164 69727720 2e2e6574 00000a2e     data write......
  40e09c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e0ac:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  40e0bc:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  40e0cc:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40e0dc:	65722064 6e6f7073 72206573 2c646165     d response read,
  40e0ec:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40e0fc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e10c:	61642064 72206174 6f707365 2065736e     d data response 
  40e11c:	64616572 7562202c 72652073 2e726f72     read, bus error.
  40e12c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40e13c:	656c6961 61642064 72206174 6f707365     ailed data respo
  40e14c:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  40e15c:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  40e16c:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40e17c:	61657220 62202c64 65207375 726f7272      read, bus error
  40e18c:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  40e19c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40e1ac:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  40e1bc:	65207375 726f7272 0a2e2e2e 00000000     us error........
  40e1cc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e1dc:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  40e1ec:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  40e1fc:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40e20c:	65722064 6e6f7073 202c6573 64616572     d response, read
  40e21c:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  40e22c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e23c:	61642064 72206174 2e646165 000a2e2e     d data read.....
  40e24c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40e25c:	6d632064 77202c64 65746972 67657220     d cmd, write reg
  40e26c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
  40e27c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40e28c:	65722064 6e6f7073 202c6573 74697277     d response, writ
  40e29c:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
  40e2ac:	00000000 52524528 75432952 6e657272     ....(ERRR)Curren
  40e2bc:	253c2074 000a3e64 57202d2d 31434e49     t <%d>..-- WINC1
  40e2cc:	20303035 65696c63 6520746e 706d6178     500 client examp
  40e2dc:	2d20656c 2d0a0d2d 4153202d 3037454d     le --..-- SAME70
  40e2ec:	4c50582d 2d2d2044 2d2d0a0d 6d6f4320     -XPLD --..-- Com
  40e2fc:	656c6970 4a203a64 31206e75 30322037     piled: Jun 17 20
  40e30c:	31203032 35303a39 2034333a 0a0d2d2d     20 19:05:34 --..
  40e31c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  40e32c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  40e33c:	2d2d2d2d 2d2d2d2d 2d2d2d2d 00000a0d     ------------....
  40e34c:	69666957 00000000 636f7270 00737365     Wifi....process.
  40e35c:	6f736572 5f65766c 203a6263 49207325     resolve_cb: %s I
  40e36c:	64612050 73657264 73692073 2e642520     P address is %d.
  40e37c:	252e6425 64252e64 0a0d0a0d 00000000     %d.%d.%d........
  40e38c:	6b636f73 6d5f7465 635f6773 656e6e6f     socket_msg_conne
  40e39c:	000a7463 6b636f73 635f7465 63203a62     ct..socket_cb: c
  40e3ac:	656e6e6f 6f207463 000a206b 6b636f73     onnect ok ..sock
  40e3bc:	635f7465 63203a62 656e6e6f 65207463     et_cb: connect e
  40e3cc:	726f7272 000a0d21 6b736174 6f727020     rror!...task pro
  40e3dc:	73736563 65726320 64657461 00000a20     cess created ...
  40e3ec:	686c6166 6d652061 69726320 6f207261     falha em criar o
  40e3fc:	6d657320 726f6661 000a206f 54415453      semaforo ..STAT
  40e40c:	57203a45 20544941 0000000a 3a643225     E: WAIT ....%2d:
  40e41c:	3a643225 00643225 61726f68 206f6972     %2d:%2d.horario 
  40e42c:	20637472 7325203d 00000a20 54415453     rtc = %s ...STAT
  40e43c:	47203a45 0a205445 00000000 20544547     E: GET .....GET 
  40e44c:	6174732f 20737574 50545448 312e312f     /status HTTP/1.1
  40e45c:	41200a0d 70656363 2a203a74 0a0d2a2f     .. Accept: */*..
  40e46c:	00000a0d 54415453 50203a45 2054534f     ....STATE: POST 
  40e47c:	0000000a 3d545542 00006425 54534f50     ....BUT=%d..POST
  40e48c:	732f2032 75746174 54482073 312f5054     2 /status HTTP/1
  40e49c:	430a302e 65746e6f 542d746e 3a657079     .0.Content-Type:
  40e4ac:	70706120 6163696c 6e6f6974 772d782f      application/x-w
  40e4bc:	662d7777 2d6d726f 656c7275 646f636e     ww-form-urlencod
  40e4cc:	430a6465 65746e6f 4c2d746e 74676e65     ed.Content-Lengt
  40e4dc:	25203a68 250a0a64 00000073 54415453     h: %d..%s...STAT
  40e4ec:	50203a45 2054534f 206d6573 c3746f62     E: POST sem bot.
  40e4fc:	0a206fa3 00000000 43454641 6432253d     .o .....AFEC=%2d
  40e50c:	3d444926 54266425 3d454d49 00007325     &ID=%d&TIME=%s..
  40e51c:	54534f50 74732f20 73757461 54544820     POST /status HTT
  40e52c:	2e312f50 6f430a30 6e65746e 79542d74     P/1.0.Content-Ty
  40e53c:	203a6570 6c707061 74616369 2f6e6f69     pe: application/
  40e54c:	77772d78 6f662d77 752d6d72 6e656c72     x-www-form-urlen
  40e55c:	65646f63 6f430a64 6e65746e 654c2d74     coded.Content-Le
  40e56c:	6874676e 6425203a 73250a0a 00000000     ngth: %d..%s....
  40e57c:	54415453 41203a45 0a204b43 00000000     STATE: ACK .....
  40e58c:	54415453 4d203a45 0a204753 00000000     STATE: MSG .....
  40e59c:	00747562 20545542 54415453 203d2045     but.BUT STATE = 
  40e5ac:	00000031 20545542 54415453 203d2045     1...BUT STATE = 
  40e5bc:	00000030 54415453 44203a45 20454e4f     0...STATE: DONE 
  40e5cc:	0000000a 6e69616d 326d203a 69775f6d     ....main: m2m_wi
  40e5dc:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
  40e5ec:	2821726f 0d296425 0000000a 69666977     or!(%d).....wifi
  40e5fc:	63756c20 00000061 6e69616d 6f63203a      luca...main: co
  40e60c:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
  40e61c:	20504120 2e2e7325 000a0d2e 706f656c      AP %s......leop
  40e62c:	6f647261 00000000 302e3031 312e312e     ardo....10.0.1.1
  40e63c:	00000032 6b636f73 69207465 2074696e     2...socket init 
  40e64c:	0000000a 6e69616d 6166203a 64656c69     ....main: failed
  40e65c:	206f7420 61657263 54206574 63205043      to create TCP c
  40e66c:	6e65696c 6f732074 74656b63 72726520     lient socket err
  40e67c:	0d21726f 0000000a 6b636f73 63207465     or!.....socket c
  40e68c:	656e6e6f 6e697463 00000a67 6e69616d     onnecting...main
  40e69c:	7265203a 20726f72 6e6e6f63 20746365     : error connect 
  40e6ac:	73206f74 656b636f 00000a74 63617473     to socket...stac
  40e6bc:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  40e6cc:	00000a0d 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  40e6dc:	4649575f 4f435f49 43454e4e 0d444554     _WIFI_CONNECTED.
  40e6ec:	0000000a 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  40e6fc:	4649575f 49445f49 4e4f4353 5443454e     _WIFI_DISCONNECT
  40e70c:	0a0d4445 00000000 69666977 3a62635f     ED......wifi_cb:
  40e71c:	20504920 72646461 20737365 25207369      IP address is %
  40e72c:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
  40e73c:	6b636f73 635f7465 59203a62 3a726165     socket_cb: Year:
  40e74c:	2c642520 6e6f4d20 203a6874 202c6425      %d, Month: %d, 
  40e75c:	20656854 20544d47 656d6974 20736920     The GMT time is 
  40e76c:	253a7525 3a753230 75323025 00000a0d     %u:%02u:%02u....

0040e77c <_global_impure_ptr>:
  40e77c:	20400040 00464e49 00666e69 004e414e     @.@ INF.inf.NAN.
  40e78c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40e79c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40e7ac:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40e7bc:	0000296c                                l)..

0040e7c0 <blanks.7223>:
  40e7c0:	20202020 20202020 20202020 20202020                     

0040e7d0 <zeroes.7224>:
  40e7d0:	30303030 30303030 30303030 30303030     0000000000000000

0040e7e0 <blanks.7217>:
  40e7e0:	20202020 20202020 20202020 20202020                     

0040e7f0 <zeroes.7218>:
  40e7f0:	30303030 30303030 30303030 30303030     0000000000000000
  40e800:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40e810:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040e820 <__mprec_bigtens>:
  40e820:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40e830:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40e840:	7f73bf3c 75154fdd                       <.s..O.u

0040e848 <__mprec_tens>:
  40e848:	00000000 3ff00000 00000000 40240000     .......?......$@
  40e858:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40e868:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40e878:	00000000 412e8480 00000000 416312d0     .......A......cA
  40e888:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40e898:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40e8a8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40e8b8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40e8c8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40e8d8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40e8e8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40e8f8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40e908:	79d99db4 44ea7843                       ...yCx.D

0040e910 <p05.6055>:
  40e910:	00000005 00000019 0000007d              ........}...

0040e91c <_ctype_>:
  40e91c:	20202000 20202020 28282020 20282828     .         ((((( 
  40e92c:	20202020 20202020 20202020 20202020                     
  40e93c:	10108820 10101010 10101010 10101010      ...............
  40e94c:	04040410 04040404 10040404 10101010     ................
  40e95c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40e96c:	01010101 01010101 01010101 10101010     ................
  40e97c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40e98c:	02020202 02020202 02020202 10101010     ................
  40e99c:	00000020 00000000 00000000 00000000      ...............
	...

0040ea20 <_init>:
  40ea20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ea22:	bf00      	nop
  40ea24:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ea26:	bc08      	pop	{r3}
  40ea28:	469e      	mov	lr, r3
  40ea2a:	4770      	bx	lr

0040ea2c <__init_array_start>:
  40ea2c:	004098dd 	.word	0x004098dd

0040ea30 <__frame_dummy_init_array_entry>:
  40ea30:	00400165                                e.@.

0040ea34 <_fini>:
  40ea34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ea36:	bf00      	nop
  40ea38:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ea3a:	bc08      	pop	{r3}
  40ea3c:	469e      	mov	lr, r3
  40ea3e:	4770      	bx	lr

0040ea40 <__fini_array_start>:
  40ea40:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <egstrNmBusCapabilities>:
20400010:	1000 0000                                   ....

20400014 <clk_status_reg_adr>:
20400014:	000f 0000                                   ....

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <horario>:
20400020:	3030 303a 3a30 3030 0000 0000 0000 0000     00:00:00........
20400030:	0000 0000                                   ....

20400034 <id>:
20400034:	9204 0001                                   ....

20400038 <tcp_client_socket>:
20400038:	00ff 0000                                   ....

2040003c <_impure_ptr>:
2040003c:	0040 2040                                   @.@ 

20400040 <impure_data>:
20400040:	0000 0000 032c 2040 0394 2040 03fc 2040     ....,.@ ..@ ..@ 
	...
204000e8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000f8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400468 <__atexit_recursive_mutex>:
20400468:	d1a4 2040                                   ..@ 

2040046c <__global_locale>:
2040046c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040048c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040050c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040052c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040054c:	c755 0040 b871 0040 0000 0000 e91c 0040     U.@.q.@.......@.
2040055c:	e81c 0040 e388 0040 e388 0040 e388 0040     ..@...@...@...@.
2040056c:	e388 0040 e388 0040 e388 0040 e388 0040     ..@...@...@...@.
2040057c:	e388 0040 e388 0040 ffff ffff ffff ffff     ..@...@.........
2040058c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005b4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005d8 <__malloc_av_>:
	...
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 
204009d0:	09c8 2040 09c8 2040 09d0 2040 09d0 2040     ..@ ..@ ..@ ..@ 

204009e0 <__malloc_sbrk_base>:
204009e0:	ffff ffff                                   ....

204009e4 <__malloc_trim_threshold>:
204009e4:	0000 0002                                   ....
